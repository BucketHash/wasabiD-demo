webpackJsonp([0],[
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout() {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
})();
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }
}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }
}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while (len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) {
    return [];
};

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () {
    return '/';
};
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function () {
    return 0;
};

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(32);

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

var validateFormat = function validateFormat(format) {};

if (process.env.NODE_ENV !== 'production') {
  validateFormat = function validateFormat(format) {
    if (format === undefined) {
      throw new Error('invariant requires an error message argument');
    }
  };
}

function invariant(condition, format, a, b, c, d, e, f) {
  validateFormat(format);

  if (!condition) {
    var error;
    if (format === undefined) {
      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
    } else {
      var args = [a, b, c, d, e, f];
      var argIndex = 0;
      error = new Error(format.replace(/%s/g, function () {
        return args[argIndex++];
      }));
      error.name = 'Invariant Violation';
    }

    error.framesToPop = 1; // we don't care about invariant's own frame
    throw error;
  }
}

module.exports = invariant;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var emptyFunction = __webpack_require__(17);

/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var warning = emptyFunction;

if (process.env.NODE_ENV !== 'production') {
  (function () {
    var printWarning = function printWarning(format) {
      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      var argIndex = 0;
      var message = 'Warning: ' + format.replace(/%s/g, function () {
        return args[argIndex++];
      });
      if (typeof console !== 'undefined') {
        console.error(message);
      }
      try {
        // --- Welcome to debugging React ---
        // This error was thrown as a convenience so that you can use this stack
        // to find the callsite that caused this warning to fire.
        throw new Error(message);
      } catch (x) {}
    };

    warning = function warning(condition, format) {
      if (format === undefined) {
        throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
      }

      if (format.indexOf('Failed Composite propType: ') === 0) {
        return; // Ignore CompositeComponent proptype check.
      }

      if (!condition) {
        for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
          args[_key2 - 2] = arguments[_key2];
        }

        printWarning.apply(undefined, [format].concat(args));
      }
    };
  })();
}

module.exports = warning;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */


/**
 * WARNING: DO NOT manually require this module.
 * This is a replacement for `invariant(...)` used by the error code system
 * and will _only_ be required by the corresponding babel pass.
 * It always throws.
 */

function reactProdInvariant(code) {
  var argCount = arguments.length - 1;

  var message = 'Minified React error #' + code + '; visit ' + 'http://facebook.github.io/react/docs/error-decoder.html?invariant=' + code;

  for (var argIdx = 0; argIdx < argCount; argIdx++) {
    message += '&args[]=' + encodeURIComponent(arguments[argIdx + 1]);
  }

  message += ' for the full message or use the non-minified dev environment' + ' for full errors and additional helpful warnings.';

  var error = new Error(message);
  error.name = 'Invariant Violation';
  error.framesToPop = 1; // we don't care about reactProdInvariant's own frame

  throw error;
}

module.exports = reactProdInvariant;

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/**
 * Created by zhiyongwang on 2016-06-08.
 * 将独立于项目的公共函数分享出来
 *
 */

var paramFormat = __webpack_require__(294);

var baseUtil = {};

/// 获取地址栏参数的值
baseUtil.GetArgsFromHref = function (sHref, sArgName) {
    /// <summary>
    /// 获取地址栏参数的值
    /// </summary>
    /// <param name="sHref" type="string">url地址，</param>
    /// <param name="iwidth" type="int">参数名称</param>
    var args = sHref.toString().split("?");
    var retval = "";
    if (args[0] == sHref) /*参数为空*/{
            return retval;
            /*无需做任何处理*/
        }
    var str = args[1];
    args = str.toString().split("&");
    for (var i = 0; i < args.length; i++) {
        str = args[i];
        var arg = str.toString().split("=");
        if (arg.length <= 1) continue;
        if (arg[0] == sArgName) retval = arg[1];
    }
    return retval;
};

//判断浏览器类型
baseUtil.BrowserType = function () {
    var browserType = "";
    var userAgent = navigator.userAgent.toLowerCase(); //取得浏览器的userAgent字符串
    if (userAgent.indexOf("opera") > -1) {
        //判断是否Opera浏览器
        browserType = "Opera";
    } else if (userAgent.indexOf("opr") > -1) {
        //新版本是这个
        browserType = "Opera";
    } else if (userAgent.indexOf("firefox") > -1) {
        //判断是否Firefox浏览器
        browserType = "Firefox";
    } else if (userAgent.indexOf("chrome") > -1) {
        //先判断是否Chrome浏览器
        browserType = "Chrome";
    } else if (userAgent.indexOf("safari") > -1) {
        //判断是否Safari浏览器
        browserType = "Safari";
    } else if (/msie|trident/.test(userAgent)) {
        ////判断是否IE浏览器
        browserType = IEType();
    }

    return browserType;
};
//判断IE类型
baseUtil.IEType = function () {
    if (navigator.userAgent.indexOf("MSIE 6.") > -1) {
        return "IE 6";
    } else if (navigator.userAgent.indexOf("MSIE 7.") > -1) {
        return "IE 7";
    } else if (navigator.userAgent.indexOf("MSIE 8.") > -1) {
        return "IE 8";
    } else if (navigator.userAgent.indexOf("MSIE 9.") > -1) {
        return "IE 9";
    } else if (navigator.userAgent.indexOf("MSIE 10.") > -1) {
        return "IE 10";
    } else if (navigator.userAgent.toLowerCase().indexOf("trident") > -1) {
        return "IE 11";
    }
};

//判断是否 iPhone / iPod /iPad
baseUtil.is_ios = function () {
    /// <summary>
    /// 判断是否 iPhone / iPod /iPad
    /// </summary>
    if (navigator.userAgent.match(/iPhone|iPod|iPad/i)) {
        //alert('true');
        // 判断系统版本号是否大于 7
        return Boolean(navigator.userAgent.match(/OS [7-9]_\d[_\d]* like Mac OS X/i));
    } else {
        //alert('false');
        return false;
    }
};
//将数字转为英文表达格式
baseUtil.dealNumToEnglishFormat = function (num) {
    /// <summary>
    /// 将数字转为英文表达格式
    /// </summary>
    /// <param name="num" type="int">数字</param>
    if (isNaN(num)) {
        return num;
    }

    var number = num.toString();
    return number.split('').reverse().join('').replace(/(.{3})/g, '$1,').split('').reverse().join('').replace(/^,/, "");
};

// 日期格式化为字符串
baseUtil.dateformat = function (date, format) {
    /// <summary>
    /// 日期格式化为字符串
    /// </summary>
    /// <param name="date" type="date">日期</param>
    /// <param name="format" type="string">格式化字符串，"yyyy-MM-dd hh:mm:ss","yyyy-MM-dd"</param>
    if (date instanceof Date) {} else {
        //日期格式错误
        return null;
    }

    var isToday = false;

    //上一个人写的 
    // if (date.toLocaleDateString() == new Date().toLocaleDateString()) {
    //     isToday = true;
    //     date = new Date();
    // }
    //
    // var o = {
    //     "M+": date.getMonth() + 1, //month
    //     "d+": date.getDate(), //day
    //     "h+": isToday ? date.getHours() : 23, //hour
    //     "m+": isToday ? date.getMinutes() : 59, //minute
    //     "s+": isToday ? date.getSeconds() : 59, //second
    //     "q+": Math.floor((date.getMonth() + 3) / 3), //quarter
    //     "S": date.getMilliseconds() //millisecond
    // };


    var o = {
        "M+": date.getMonth() + 1, //month
        "d+": date.getDate(), //day
        "h+": date.getHours(), //hour
        "m+": date.getMinutes(), //minute
        "s+": date.getSeconds(), //second
        "q+": Math.floor((date.getMonth() + 3) / 3), //quarter
        "S": date.getMilliseconds() //millisecond
    };

    if (/(y+)/.test(format)) {
        format = format.replace(RegExp.$1, (date.getFullYear() + "").substr(4 - RegExp.$1.length));
    }

    for (var k in o) {
        if (new RegExp("(" + k + ")").test(format)) {
            format = format.replace(RegExp.$1, RegExp.$1.length == 1 ? o[k] : ("00" + o[k]).substr(("" + o[k]).length));
        }
    }
    return format;
};

baseUtil.log = function (text) {
    console.log(text);
};

//判断手机类型
baseUtil.phoneType = function () {
    /// <summary>
    /// 判断手机类型
    /// </summary>
    var u = navigator.userAgent,
        app = navigator.appVersion;
    var isAndroid = u.indexOf('Android') > -1 || u.indexOf('Linux') > -1; //android终端或者uc浏览器
    var isiOS = !!u.match(/\(i[^;]+;( U;)? CPU.+Mac OS X/); //ios终端
    if (isiOS) {
        return "iphone";
    } else if (isAndroid) {
        return "android";
    } else {
        return "undefined";
    }
};

/// 字符转日期
baseUtil.stringToDate = function (strDate) {
    /// <summary>
    /// 字符转日期
    /// </summary>
    /// <param name="strDate" type="string">日期字符格式</param>
    var date = new Date(Date.parse(strDate.replace(/-/g, "/"))); //转换成Date();
    return date;
};

baseUtil.cookies = {
    /// <summary>
    /// cookies设置
    /// </summary>
    set: function set(key, val) {
        var Days = 7;
        var exp = new Date();
        exp.setTime(exp.getTime() + Days * 24 * 60 * 60 * 1000);
        document.cookie = key + "=" + val + ";path=/;expires=" + exp.toGMTString();
    },
    get: function get(key) {
        var arr,
            reg = new RegExp("(^| )" + key + "=([^;]*)(;|$)");
        if (arr = document.cookie.match(reg)) return arr[2];else return null;
    },
    del: function del(key) {
        var exp = new Date();
        exp.setTime(exp.getTime() - 1);
        var cval = this.get(key);
        if (cval != null) document.cookie = key + "=" + cval + ";expires=" + exp.toGMTString();
    }
    /// 除去两端窗口
};baseUtil.trim = function (str) {
    /// <summary>
    /// 除去两端窗口
    /// </summary>
    /// <param name="str" type="string">str</param>
    return str.replace(/(^\s*)|(\s*$)/g, "");
};

/*
 *ie兼容placeholder
 */
baseUtil.placeHolderIE8 = function () {
    if (!("placeholder" in document.createElement("input"))) {
        var inputs = document.getElementsByTagName("input");
        for (var i = 0; i < inputs.length; i++) {
            var curInput = inputs[i];
            var placeholder = curInput.getAttribute("placeholder");
            if (curInput.getAttribute("type") != "text" || baseUtil.trim(placeholder) == "") return;

            curInput.value = placeholder;

            curInput.onfocus = function () {
                if (this.value = placeholder) {
                    this.value = "";
                }
            };

            curInput.onblur = function () {
                if (baseUtil.trim(this.value) == "") {
                    this.value = placeholder;
                }
            };
        }
    }
};
//向后台请求数据
baseUtil.fetch = {
    /// <summary>
    /// 向后台请求数据
    /// </summary>
    get: function get(fetchmodel) {
        var _this = this;

        fetch(fetchmodel.url, {
            method: "GET"
        }).then(function (res) {
            if (res.ok) {
                try {
                    res.json().then(function (result) {
                        result = _this.formatResult(result); //如果是心怡科技旧系统,数据转为标准格式
                        if (result.success) {
                            fetchmodel.success && fetchmodel.success(result);
                        } else {

                            if (fetchmodel.error) {
                                fetchmodel.error(result.errorCode, result.message, result);
                            } else {
                                console.log("fetch-error", result.errorCode, result.message);
                                baseUtil.showError(baseUtil.Error.HandlerError + ",错误原因：" + result.message);
                            }
                        }
                    });
                } catch (e) {
                    baseUtil.showError(e.message);
                }
            } else {
                if (fetchmodel.error) {
                    fetchmodel.error("002", baseUtil.Error.ServiceError);
                } else {

                    baseUtil.showError(baseUtil.Error.ServiceError);
                }
            }
        }).catch(function (e) {
            if (fetchmodel.error) {
                fetchmodel.error("001", baseUtil.Error.HttpError + e.message);
            } else {

                baseUtil.showError(baseUtil.Error.HttpError + e.message);
            }
        });
    },
    post: function post(fetchmodel) {
        var _this2 = this;

        fetchmodel = this.formatModel(fetchmodel); //如果是心怡科技旧系统,将参数转义

        fetch(fetchmodel.url, {
            method: "POST",
            headers: {
                "Content-Type": fetchmodel.contentType
            },
            body: this.setParams(fetchmodel.params) //参数标准化
        }).then(function (res) {
            if (res.ok) {
                try {
                    res.json().then(function (result) {
                        result = _this2.formatResult(result); //如果是心怡科技旧系统,数据转为标准格式
                        if (result.success) {
                            fetchmodel.success && fetchmodel.success(result);
                        } else {
                            if (fetchmodel.error) {
                                fetchmodel.error(result.errorCode, result.message, result);
                            } else {
                                console.log("fetch-error", result.errorCode, result.message);
                                baseUtil.showError(baseUtil.Error.HandlerError + ",错误原因：" + result.message);
                            }
                        }
                    });
                } catch (e) {
                    baseUtil.showError(e.message);
                }
            } else {
                if (fetchmodel.error) {
                    fetchmodel.error("002", baseUtil.Error.ServiceError);
                } else {
                    baseUtil.showError(baseUtil.Error.ServiceError);
                }
            }
        }).catch(function (e) {
            if (fetchmodel.error) {
                fetchmodel.error("001", baseUtil.Error.HttpError + e.message);
            } else {
                baseUtil.showError(baseUtil.Error.HttpError + e.message);
            }
        });
    },
    setParams: function setParams(params) {
        //是否是心怡科技的旧系统,如果是则将参数转字符串
        var isalog = window.localStorage.getItem("wasabi-alog");
        if (isalog) {
            //是
            return params ? JSON.stringify(params) : ""; //转为字符串
        } else {
            return paramFormat(params); //标准化
        }
        return "";
    },
    formatModel: function formatModel(fetchModel) {
        //是否是心怡科技的旧系统,如果是则对contentType进行处理
        var isalog = window.localStorage.getItem("wasabi-alog");
        if (isalog) {
            //是

            fetchModel.contentType = "application/json;charset=UTF-8";
            return fetchModel;
        } else {
            return fetchModel;
        }
    },
    formatResult: function formatResult(result) {
        //是否是心怡科技的旧系统,如果是则将后端数据转为标准格式,否则直接返回
        var isalog = window.localStorage.getItem("wasabi-alog");
        var newResult;
        if (isalog) {
            //是
            newResult = {
                success: false,
                data: null, //数据,
                total: 0, //总记录数
                message: "",
                errorCode: "", //错误处理,不需要复制,因为fetch中已经处理了.
                footer: null
            }; //标准格式
            if (result.data) {
                //存在data
                if (result.success != null && result.success != undefined) {
                    newResult.success = result.success;
                } else {
                    throw "后台返回json数据中必须有success属性";
                }
                if (result.errCode) {
                    newResult.errorCode = result.errCode;
                }
                if (result.message) {
                    newResult.message = result.message;
                }
                if (result.data.data) {
                    //分页
                    newResult.data = result.data.data;
                    if (result.data.total) {
                        //分页
                        newResult.total = result.data.total;
                    }
                    if (result.data.footer) {
                        //分页
                        newResult.footer = result.data.footer;
                    }
                } else {
                    //可能是不分页查询,可能是实体查询
                    newResult.data = result.data;

                    if (result.total) {
                        newResult.total = result.total;
                    } else {
                        if (newResult.data instanceof Array) {
                            //是数组,不分页查询,否则是实体查询
                            newResult.total = newResult.data.length;
                        } else {//实体查询,不处理total

                        }
                    }
                    if (result.footer) {
                        newResult.footer = result.footer;
                    }
                }
            } else {
                //如果连data都不存在,直接为result;
                newResult = result;
            }
        } else {
            //不是心怡科技的旧系统,直接返回
            if (result.success != null && result.success != undefined) {} else {
                throw "后台返回json数据中必须有success属性";
            }
            newResult = result;
        }
        return newResult;
    }
};

baseUtil.showError = function (msg) {
    if (!!document.getElementById("alog-error")) {
        //存在
        var child = document.getElementById("alog-error");
        document.body.removeChild(child);
    }
    var error = document.createElement("div");
    error.id = "alog-error";
    error.title = "";
    error.style.position = "absolute";
    error.style.zIndex = 9;
    error.innerHTML = '<div class="wasabi-message error"   >' + '<div class="notice">' + msg + '</div>' + ' </div>';
    error.onmousemove = onMouseOver;
    error.onmouseout = onMosueOut;
    document.body.appendChild(error);
    timeoutHandler(); //开始执行
    function onMosueOut() {
        var child = document.getElementById("alog-error");
        child.title = "";
        timeoutHandler();
    }
    function onMouseOver() {
        var child = document.getElementById("alog-error");
        child.title = "0";
        child.style.opacity = 1;
    }

    function timeoutHandler() {
        setTimeout(function () {
            var child = document.getElementById("alog-error");

            if (child && child.title == "") {
                child.style.opacity = 0.7;
                child.style.transition = "opacity 2s";
            }
        }, 1000);
        setTimeout(function () {
            var child = document.getElementById("alog-error");
            if (child && child.title == "") {

                document.body.removeChild(child);
            }
        }, 4000);
    }
};
/// 把对象复制,返回
baseUtil.clone = function (obj) {
    /// <summary>
    /// 把对象复制,返回
    /// </summary>
    /// <param name="obj" type="object">源对象</param>
    var o;
    switch (typeof obj === "undefined" ? "undefined" : _typeof(obj)) {
        case 'undefined':
            break;
        case 'string':
            o = obj + '';break;
        case 'number':
            o = obj - 0;break;
        case 'boolean':
            o = obj;break;

        case 'object':

            if (obj === null) {
                o = null;
            } else {
                if (obj instanceof Array) {

                    o = [];
                    //o= obj.slice(0)， 注意了这里不能直接使用这个复制，如果数组中的元素为对象，复制是不成功的
                    for (var i = 0; i < obj.length; i++) {
                        o.push(baseUtil.clone(obj[i]));
                    }
                } else {
                    o = {};
                    for (var k in obj) {
                        o[k] = baseUtil.clone(obj[k]);
                    }
                }
            }
            break;
        default:
            o = obj;break;
    }
    return o;
};
//获取真正的数据源
baseUtil.getSource = function (data, source) {
    /// <summary>
    /// 获取真正的数据源
    /// </summary>
    /// <param name="Data" type="object">Data</param>
    /// <param name="source" type="string">source</param>
    var sourceArr = new Array();
    var returnData = data;

    if (source.indexOf(".") > -1) {
        sourceArr = source.split(".");
    } else {
        sourceArr.push(source);
    }
    var i = 0;
    try {
        while (i < sourceArr.length) {
            returnData = returnData[sourceArr[i]];
            if (returnData == null) {
                return null; //直接返回
            }
            i++;
        }
    } catch (e) {
        return null;
    }

    return returnData;
};
//判断是否空对象
baseUtil.isEmptyObject = function (obj) {
    var isempty = true;
    if ((typeof obj === "undefined" ? "undefined" : _typeof(obj)) === "object") {
        for (var o in obj) {
            isempty = false;
        }
    }
    return isempty;
};

//错误信息
baseUtil.Error = {
    HttpError: "错误代码:001,网络地址无法请求",
    ServiceError: "错误代码:002,后台服务器响应失败",
    HandlerError: "后台业务程序处理错误"
};
var base64 = __webpack_require__(291);
baseUtil.base64 = base64;
var md5 = __webpack_require__(293);
baseUtil.md5 = md5;

module.exports = baseUtil;

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/


/* eslint-disable no-unused-vars */

var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

function shouldUseNative() {
	try {
		if (!Object.assign) {
			return false;
		}

		// Detect buggy property enumeration order in older V8 versions.

		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
		var test1 = new String('abc'); // eslint-disable-line no-new-wrappers
		test1[5] = 'de';
		if (Object.getOwnPropertyNames(test1)[0] === '5') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test2 = {};
		for (var i = 0; i < 10; i++) {
			test2['_' + String.fromCharCode(i)] = i;
		}
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
			return test2[n];
		});
		if (order2.join('') !== '0123456789') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test3 = {};
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
			test3[letter] = letter;
		});
		if (Object.keys(Object.assign({}, test3)).join('') !== 'abcdefghijklmnopqrst') {
			return false;
		}

		return true;
	} catch (err) {
		// We don't expect any of the above to throw, but better to be safe.
		return false;
	}
}

module.exports = shouldUseNative() ? Object.assign : function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (getOwnPropertySymbols) {
			symbols = getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(4);

var DOMProperty = __webpack_require__(27);
var ReactDOMComponentFlags = __webpack_require__(89);

var invariant = __webpack_require__(2);

var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
var Flags = ReactDOMComponentFlags;

var internalInstanceKey = '__reactInternalInstance$' + Math.random().toString(36).slice(2);

/**
 * Check if a given node should be cached.
 */
function shouldPrecacheNode(node, nodeID) {
  return node.nodeType === 1 && node.getAttribute(ATTR_NAME) === String(nodeID) || node.nodeType === 8 && node.nodeValue === ' react-text: ' + nodeID + ' ' || node.nodeType === 8 && node.nodeValue === ' react-empty: ' + nodeID + ' ';
}

/**
 * Drill down (through composites and empty components) until we get a host or
 * host text component.
 *
 * This is pretty polymorphic but unavoidable with the current structure we have
 * for `_renderedChildren`.
 */
function getRenderedHostOrTextFromComponent(component) {
  var rendered;
  while (rendered = component._renderedComponent) {
    component = rendered;
  }
  return component;
}

/**
 * Populate `_hostNode` on the rendered host/text component with the given
 * DOM node. The passed `inst` can be a composite.
 */
function precacheNode(inst, node) {
  var hostInst = getRenderedHostOrTextFromComponent(inst);
  hostInst._hostNode = node;
  node[internalInstanceKey] = hostInst;
}

function uncacheNode(inst) {
  var node = inst._hostNode;
  if (node) {
    delete node[internalInstanceKey];
    inst._hostNode = null;
  }
}

/**
 * Populate `_hostNode` on each child of `inst`, assuming that the children
 * match up with the DOM (element) children of `node`.
 *
 * We cache entire levels at once to avoid an n^2 problem where we access the
 * children of a node sequentially and have to walk from the start to our target
 * node every time.
 *
 * Since we update `_renderedChildren` and the actual DOM at (slightly)
 * different times, we could race here and see a newer `_renderedChildren` than
 * the DOM nodes we see. To avoid this, ReactMultiChild calls
 * `prepareToManageChildren` before we change `_renderedChildren`, at which
 * time the container's child nodes are always cached (until it unmounts).
 */
function precacheChildNodes(inst, node) {
  if (inst._flags & Flags.hasCachedChildNodes) {
    return;
  }
  var children = inst._renderedChildren;
  var childNode = node.firstChild;
  outer: for (var name in children) {
    if (!children.hasOwnProperty(name)) {
      continue;
    }
    var childInst = children[name];
    var childID = getRenderedHostOrTextFromComponent(childInst)._domID;
    if (childID === 0) {
      // We're currently unmounting this child in ReactMultiChild; skip it.
      continue;
    }
    // We assume the child nodes are in the same order as the child instances.
    for (; childNode !== null; childNode = childNode.nextSibling) {
      if (shouldPrecacheNode(childNode, childID)) {
        precacheNode(childInst, childNode);
        continue outer;
      }
    }
    // We reached the end of the DOM children without finding an ID match.
     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Unable to find element with ID %s.', childID) : _prodInvariant('32', childID) : void 0;
  }
  inst._flags |= Flags.hasCachedChildNodes;
}

/**
 * Given a DOM node, return the closest ReactDOMComponent or
 * ReactDOMTextComponent instance ancestor.
 */
function getClosestInstanceFromNode(node) {
  if (node[internalInstanceKey]) {
    return node[internalInstanceKey];
  }

  // Walk up the tree until we find an ancestor whose instance we have cached.
  var parents = [];
  while (!node[internalInstanceKey]) {
    parents.push(node);
    if (node.parentNode) {
      node = node.parentNode;
    } else {
      // Top of the tree. This node must not be part of a React tree (or is
      // unmounted, potentially).
      return null;
    }
  }

  var closest;
  var inst;
  for (; node && (inst = node[internalInstanceKey]); node = parents.pop()) {
    closest = inst;
    if (parents.length) {
      precacheChildNodes(inst, node);
    }
  }

  return closest;
}

/**
 * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
 * instance, or null if the node was not rendered by this React.
 */
function getInstanceFromNode(node) {
  var inst = getClosestInstanceFromNode(node);
  if (inst != null && inst._hostNode === node) {
    return inst;
  } else {
    return null;
  }
}

/**
 * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
 * DOM node.
 */
function getNodeFromInstance(inst) {
  // Without this first invariant, passing a non-DOM-component triggers the next
  // invariant for a missing parent, which is super confusing.
  !(inst._hostNode !== undefined) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;

  if (inst._hostNode) {
    return inst._hostNode;
  }

  // Walk up the tree until we find an ancestor whose DOM node we have cached.
  var parents = [];
  while (!inst._hostNode) {
    parents.push(inst);
    !inst._hostParent ? process.env.NODE_ENV !== 'production' ? invariant(false, 'React DOM tree root should always have a node reference.') : _prodInvariant('34') : void 0;
    inst = inst._hostParent;
  }

  // Now parents contains each ancestor that does *not* have a cached native
  // node, and `inst` is the deepest ancestor that does.
  for (; parents.length; inst = parents.pop()) {
    precacheChildNodes(inst, inst._hostNode);
  }

  return inst._hostNode;
}

var ReactDOMComponentTree = {
  getClosestInstanceFromNode: getClosestInstanceFromNode,
  getInstanceFromNode: getInstanceFromNode,
  getNodeFromInstance: getNodeFromInstance,
  precacheChildNodes: precacheChildNodes,
  precacheNode: precacheNode,
  uncacheNode: uncacheNode
};

module.exports = ReactDOMComponentTree;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Created by wangzhiyong on 16/8/28.
 * desc :使用Immutable来优化组件的更新
 */
var React = __webpack_require__(1);
var Immutable = __webpack_require__(165);

var shouldComponentUpdate = {
    shouldComponentUpdate: function shouldComponentUpdate(nextProps, nextState) {
        return this.deepCompare(this, nextProps, nextState);
    },

    deepCompare: function deepCompare(instance, nextProps, nextState) {
        return !Immutable.is(instance.props, nextProps) || !Immutable.is(instance.state, nextState);
    }
};

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

/**
 * Simple, lightweight module assisting with the detection and context of
 * Worker. Helps avoid circular dependencies and allows code to reason about
 * whether or not they are in a Worker, even if they never include the main
 * `ReactWorker` dependency.
 */
var ExecutionEnvironment = {

  canUseDOM: canUseDOM,

  canUseWorkers: typeof Worker !== 'undefined',

  canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),

  canUseViewport: canUseDOM && !!window.screen,

  isInWorker: !canUseDOM // For now, this is true - might change in the future.

};

module.exports = ExecutionEnvironment;

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

/*
 create by wangzy
 date:2016-04-05后开始独立改造
 desc:按钮组件,从linkbutton独立出来

 */
__webpack_require__(142);
var React = __webpack_require__(1);
var addRipple = __webpack_require__(55);
var Button = React.createClass({
    displayName: "Button",

    mixins: [addRipple],
    propTypes: {
        name: React.PropTypes.string, //按钮名称
        title: React.PropTypes.string, //按钮标题
        tip: React.PropTypes.string, //按钮提示信息
        theme: React.PropTypes.oneOf([//主题
        "primary", "default", "success", "info", "warning", "danger", "green", "cancel"]),
        size: React.PropTypes.oneOf([//按钮大小
        "large", "default", "small"]),
        onClick: React.PropTypes.func, //按钮单击事件
        className: React.PropTypes.string, //按钮自定义样式
        disabled: React.PropTypes.bool, //按钮是否无效
        hide: React.PropTypes.bool, //按钮是否隐藏
        delay: React.PropTypes.number, //第二次点击的间隔时间
        ripple: React.PropTypes.bool //点击时是否显示波纹特效
    },
    getDefaultProps: function getDefaultProps() {
        return {
            title: null,
            tip: null,
            theme: "default",
            size: "default",
            className: "",
            onClick: null,
            disabled: false,
            hide: false,
            delay: 0,
            ripple: true
        };
    },
    getInitialState: function getInitialState() {
        this.title = null; //初始化
        return { theme: this.props.theme, disabled: this.props.disabled, title: this.props.title, tip: this.props.tip, hide: this.props.hide };
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {

        this.setState({
            theme: nextProps.theme,
            disabled: nextProps.disabled,
            title: nextProps.title ? nextProps.title : this.state.title,
            tip: nextProps.tip,
            hide: nextProps.hide
        });
    },
    componentDidUpdate: function componentDidUpdate() {
        var _this = this;

        if (this.delay == 1) {
            //开始延迟,执行父组件方法
            this.delay = 2; //处理中
            setTimeout(function () {
                _this.delay = null; //清空
                _this.setState({ title: _this.title, disabled: false });
            }, this.props.delay);

            if (this.props.onClick) {
                this.props.onClick(this.props.name, this.props.title, this.event);
            }
        }
    },
    shouldComponentUpdate: function shouldComponentUpdate(nextProps, nextState) {
        if (this.delay == 2) {
            return false;
        }
        return true;
    },
    clickHandler: function clickHandler(event) {

        if (this.state.disabled == true) {
            return;
        }
        if (this.props.ripple) {
            this.rippleHandler(event); //添加波纹特效
        }

        if (this.props.delay > 0) {
            //不立即执行父组件方法
            this.title = this.state.title; //保存原来的title
            this.delay = 1; //处理开始
            this.event = event;
            this.setState({ title: "处理中...", disabled: true });
        } else {
            if (this.props.onClick) {
                this.props.onClick(this.props.name, this.props.title, event);
            }
        }
    },
    render: function render() {
        var style = this.props.style;
        if (style) {
            if (style.display) {} else {
                style.display = this.state.hide ? "none" : "inline";
            }
        } else {
            style = {};
            style.display = this.state.hide ? "none" : "inline";
        }
        var props = {
            className: "wasabi-button " + this.state.theme + " size-" + this.props.size + " " + this.props.className,
            style: style,
            disabled: this.state.disabled == true ? "disabled" : null,
            title: this.state.tip ? this.state.tip : this.state.title
        };
        return React.createElement(
            "button",
            _extends({}, props, { onClick: this.clickHandler, type: "button" }),
            this.state.title
        );
    }

});
module.exports = Button;

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


//create by wangy
//date:2016-08-02
//将设置自定义样式独立出来
var React = __webpack_require__(1);
var SetStyle = {
    setStyle: function setStyle(type) {
        var style = this.props.style;
        if (style) {} else {
            style = {};
        }

        if (this.props.width != null) {
            style.width = this.props.width; //设置了宽度属性为最先级别
            if (type && type == "input") {
                //因为表单组件设置了一个最小宽度，所以一定除去这个属性
                style.minWidth = this.props.width; //一定要设置这个否则跟原有的样式产生冲突
            }
        } else {
            if (style.width) {
                //用户设置宽度,
                if (type && type == "input") {
                    //因为表单组件设置了一个最小宽度，所以一定除去这个属性
                    style.minWidth = style.width; //一定要设置这个否则跟原有的样式产生冲突
                }
            }
        }

        if (this.props.height) {
            style.height = this.props.height;
        }

        if (type && type == "input") {

            style.display = this.state.hide == true ? "none" : "block";
        }
        return style;
    }
};
module.exports = SetStyle;

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _prodInvariant = __webpack_require__(33);

var ReactCurrentOwner = __webpack_require__(20);

var invariant = __webpack_require__(2);
var warning = __webpack_require__(3);

function isNative(fn) {
  // Based on isNative() from Lodash
  var funcToString = Function.prototype.toString;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var reIsNative = RegExp('^' + funcToString
  // Take an example native function source for comparison
  .call(hasOwnProperty
  // Strip regex characters so we can use it for regex
  ).replace(/[\\^$.*+?()[\]{}|]/g, '\\$&'
  // Remove hasOwnProperty from the template to make it generic
  ).replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
  try {
    var source = funcToString.call(fn);
    return reIsNative.test(source);
  } catch (err) {
    return false;
  }
}

var canUseCollections =
// Array.from
typeof Array.from === 'function' &&
// Map
typeof Map === 'function' && isNative(Map) &&
// Map.prototype.keys
Map.prototype != null && typeof Map.prototype.keys === 'function' && isNative(Map.prototype.keys) &&
// Set
typeof Set === 'function' && isNative(Set) &&
// Set.prototype.keys
Set.prototype != null && typeof Set.prototype.keys === 'function' && isNative(Set.prototype.keys);

var setItem;
var getItem;
var removeItem;
var getItemIDs;
var addRoot;
var removeRoot;
var getRootIDs;

if (canUseCollections) {
  var itemMap = new Map();
  var rootIDSet = new Set();

  setItem = function setItem(id, item) {
    itemMap.set(id, item);
  };
  getItem = function getItem(id) {
    return itemMap.get(id);
  };
  removeItem = function removeItem(id) {
    itemMap['delete'](id);
  };
  getItemIDs = function getItemIDs() {
    return Array.from(itemMap.keys());
  };

  addRoot = function addRoot(id) {
    rootIDSet.add(id);
  };
  removeRoot = function removeRoot(id) {
    rootIDSet['delete'](id);
  };
  getRootIDs = function getRootIDs() {
    return Array.from(rootIDSet.keys());
  };
} else {
  var itemByKey = {};
  var rootByKey = {};

  // Use non-numeric keys to prevent V8 performance issues:
  // https://github.com/facebook/react/pull/7232
  var getKeyFromID = function getKeyFromID(id) {
    return '.' + id;
  };
  var getIDFromKey = function getIDFromKey(key) {
    return parseInt(key.substr(1), 10);
  };

  setItem = function setItem(id, item) {
    var key = getKeyFromID(id);
    itemByKey[key] = item;
  };
  getItem = function getItem(id) {
    var key = getKeyFromID(id);
    return itemByKey[key];
  };
  removeItem = function removeItem(id) {
    var key = getKeyFromID(id);
    delete itemByKey[key];
  };
  getItemIDs = function getItemIDs() {
    return Object.keys(itemByKey).map(getIDFromKey);
  };

  addRoot = function addRoot(id) {
    var key = getKeyFromID(id);
    rootByKey[key] = true;
  };
  removeRoot = function removeRoot(id) {
    var key = getKeyFromID(id);
    delete rootByKey[key];
  };
  getRootIDs = function getRootIDs() {
    return Object.keys(rootByKey).map(getIDFromKey);
  };
}

var unmountedIDs = [];

function purgeDeep(id) {
  var item = getItem(id);
  if (item) {
    var childIDs = item.childIDs;

    removeItem(id);
    childIDs.forEach(purgeDeep);
  }
}

function describeComponentFrame(name, source, ownerName) {
  return '\n    in ' + (name || 'Unknown') + (source ? ' (at ' + source.fileName.replace(/^.*[\\\/]/, '') + ':' + source.lineNumber + ')' : ownerName ? ' (created by ' + ownerName + ')' : '');
}

function _getDisplayName(element) {
  if (element == null) {
    return '#empty';
  } else if (typeof element === 'string' || typeof element === 'number') {
    return '#text';
  } else if (typeof element.type === 'string') {
    return element.type;
  } else {
    return element.type.displayName || element.type.name || 'Unknown';
  }
}

function describeID(id) {
  var name = ReactComponentTreeHook.getDisplayName(id);
  var element = ReactComponentTreeHook.getElement(id);
  var ownerID = ReactComponentTreeHook.getOwnerID(id);
  var ownerName;
  if (ownerID) {
    ownerName = ReactComponentTreeHook.getDisplayName(ownerID);
  }
  process.env.NODE_ENV !== 'production' ? warning(element, 'ReactComponentTreeHook: Missing React element for debugID %s when ' + 'building stack', id) : void 0;
  return describeComponentFrame(name, element && element._source, ownerName);
}

var ReactComponentTreeHook = {
  onSetChildren: function onSetChildren(id, nextChildIDs) {
    var item = getItem(id);
    !item ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Item must have been set') : _prodInvariant('144') : void 0;
    item.childIDs = nextChildIDs;

    for (var i = 0; i < nextChildIDs.length; i++) {
      var nextChildID = nextChildIDs[i];
      var nextChild = getItem(nextChildID);
      !nextChild ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected hook events to fire for the child before its parent includes it in onSetChildren().') : _prodInvariant('140') : void 0;
      !(nextChild.childIDs != null || _typeof(nextChild.element) !== 'object' || nextChild.element == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onSetChildren() to fire for a container child before its parent includes it in onSetChildren().') : _prodInvariant('141') : void 0;
      !nextChild.isMounted ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onMountComponent() to fire for the child before its parent includes it in onSetChildren().') : _prodInvariant('71') : void 0;
      if (nextChild.parentID == null) {
        nextChild.parentID = id;
        // TODO: This shouldn't be necessary but mounting a new root during in
        // componentWillMount currently causes not-yet-mounted components to
        // be purged from our tree data so their parent id is missing.
      }
      !(nextChild.parentID === id) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onBeforeMountComponent() parent and onSetChildren() to be consistent (%s has parents %s and %s).', nextChildID, nextChild.parentID, id) : _prodInvariant('142', nextChildID, nextChild.parentID, id) : void 0;
    }
  },
  onBeforeMountComponent: function onBeforeMountComponent(id, element, parentID) {
    var item = {
      element: element,
      parentID: parentID,
      text: null,
      childIDs: [],
      isMounted: false,
      updateCount: 0
    };
    setItem(id, item);
  },
  onBeforeUpdateComponent: function onBeforeUpdateComponent(id, element) {
    var item = getItem(id);
    if (!item || !item.isMounted) {
      // We may end up here as a result of setState() in componentWillUnmount().
      // In this case, ignore the element.
      return;
    }
    item.element = element;
  },
  onMountComponent: function onMountComponent(id) {
    var item = getItem(id);
    !item ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Item must have been set') : _prodInvariant('144') : void 0;
    item.isMounted = true;
    var isRoot = item.parentID === 0;
    if (isRoot) {
      addRoot(id);
    }
  },
  onUpdateComponent: function onUpdateComponent(id) {
    var item = getItem(id);
    if (!item || !item.isMounted) {
      // We may end up here as a result of setState() in componentWillUnmount().
      // In this case, ignore the element.
      return;
    }
    item.updateCount++;
  },
  onUnmountComponent: function onUnmountComponent(id) {
    var item = getItem(id);
    if (item) {
      // We need to check if it exists.
      // `item` might not exist if it is inside an error boundary, and a sibling
      // error boundary child threw while mounting. Then this instance never
      // got a chance to mount, but it still gets an unmounting event during
      // the error boundary cleanup.
      item.isMounted = false;
      var isRoot = item.parentID === 0;
      if (isRoot) {
        removeRoot(id);
      }
    }
    unmountedIDs.push(id);
  },
  purgeUnmountedComponents: function purgeUnmountedComponents() {
    if (ReactComponentTreeHook._preventPurging) {
      // Should only be used for testing.
      return;
    }

    for (var i = 0; i < unmountedIDs.length; i++) {
      var id = unmountedIDs[i];
      purgeDeep(id);
    }
    unmountedIDs.length = 0;
  },
  isMounted: function isMounted(id) {
    var item = getItem(id);
    return item ? item.isMounted : false;
  },
  getCurrentStackAddendum: function getCurrentStackAddendum(topElement) {
    var info = '';
    if (topElement) {
      var name = _getDisplayName(topElement);
      var owner = topElement._owner;
      info += describeComponentFrame(name, topElement._source, owner && owner.getName());
    }

    var currentOwner = ReactCurrentOwner.current;
    var id = currentOwner && currentOwner._debugID;

    info += ReactComponentTreeHook.getStackAddendumByID(id);
    return info;
  },
  getStackAddendumByID: function getStackAddendumByID(id) {
    var info = '';
    while (id) {
      info += describeID(id);
      id = ReactComponentTreeHook.getParentID(id);
    }
    return info;
  },
  getChildIDs: function getChildIDs(id) {
    var item = getItem(id);
    return item ? item.childIDs : [];
  },
  getDisplayName: function getDisplayName(id) {
    var element = ReactComponentTreeHook.getElement(id);
    if (!element) {
      return null;
    }
    return _getDisplayName(element);
  },
  getElement: function getElement(id) {
    var item = getItem(id);
    return item ? item.element : null;
  },
  getOwnerID: function getOwnerID(id) {
    var element = ReactComponentTreeHook.getElement(id);
    if (!element || !element._owner) {
      return null;
    }
    return element._owner._debugID;
  },
  getParentID: function getParentID(id) {
    var item = getItem(id);
    return item ? item.parentID : null;
  },
  getSource: function getSource(id) {
    var item = getItem(id);
    var element = item ? item.element : null;
    var source = element != null ? element._source : null;
    return source;
  },
  getText: function getText(id) {
    var element = ReactComponentTreeHook.getElement(id);
    if (typeof element === 'string') {
      return element;
    } else if (typeof element === 'number') {
      return '' + element;
    } else {
      return null;
    }
  },
  getUpdateCount: function getUpdateCount(id) {
    var item = getItem(id);
    return item ? item.updateCount : 0;
  },

  getRootIDs: getRootIDs,
  getRegisteredIDs: getItemIDs,

  pushNonStandardWarningStack: function pushNonStandardWarningStack(isCreatingElement, currentSource) {
    if (typeof console.reactStack !== 'function') {
      return;
    }

    var stack = [];
    var currentOwner = ReactCurrentOwner.current;
    var id = currentOwner && currentOwner._debugID;

    try {
      if (isCreatingElement) {
        stack.push({
          name: id ? ReactComponentTreeHook.getDisplayName(id) : null,
          fileName: currentSource ? currentSource.fileName : null,
          lineNumber: currentSource ? currentSource.lineNumber : null
        });
      }

      while (id) {
        var element = ReactComponentTreeHook.getElement(id);
        var parentID = ReactComponentTreeHook.getParentID(id);
        var ownerID = ReactComponentTreeHook.getOwnerID(id);
        var ownerName = ownerID ? ReactComponentTreeHook.getDisplayName(ownerID) : null;
        var source = element && element._source;
        stack.push({
          name: ownerName,
          fileName: source ? source.fileName : null,
          lineNumber: source ? source.lineNumber : null
        });
        id = parentID;
      }
    } catch (err) {
      // Internal state is messed up.
      // Stop building the stack (it's just a nice to have).
    }

    console.reactStack(stack);
  },
  popNonStandardWarningStack: function popNonStandardWarningStack() {
    if (typeof console.reactStackEnd !== 'function') {
      return;
    }
    console.reactStackEnd();
  }
};

module.exports = ReactComponentTreeHook;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Created by zhiyongwang on 2016-03-26.
 * desc:fetch 查询时的数据模型
 *
 */

var FetchModel = function FetchModel(url, success) {
    var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    var error = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
    var type = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : "GET";

    _classCallCheck(this, FetchModel);

    this.url = url;
    this.params = params;
    this.success = success;
    this.error = error;
    this.type = type; //类型
    this.contentType = "application/x-www-form-urlencoded"; ////请求数据格式
};

module.exports = FetchModel;

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


//create by wangzy
//date:2016-03-22
//desc:模态窗口
var React = __webpack_require__(1);
var ReactDOM = __webpack_require__(26);
var MessageView = __webpack_require__(285);
var Message = {
    info: function info(msg, timeout) {
        if (!timeout) {
            timeout = 2000;
        }
        if (!!document.getElementById("alog-info")) {
            //存在
            var child = document.getElementById("alog-info");
            document.body.removeChild(child);
            var info = document.createElement("div");
            info.id = "alog-info";
            document.body.appendChild(info);
            ReactDOM.render(React.createElement(MessageView, { type: "info", timeout: timeout, msg: msg }), document.getElementById("alog-info"));
        } else {
            var _info = document.createElement("div");
            _info.id = "alog-info";
            document.body.appendChild(_info);
            ReactDOM.render(React.createElement(MessageView, { type: "info", timeout: timeout, msg: msg }), document.getElementById("alog-info"));
        }
    },
    success: function success(msg, timeout) {
        if (!timeout) {
            timeout = 2000;
        }
        if (!!document.getElementById("alog-success")) {
            //存在
            var child = document.getElementById("alog-success");
            document.body.removeChild(child);
            var success = document.createElement("div");
            success.id = "alog-success";
            document.body.appendChild(success);
            ReactDOM.render(React.createElement(MessageView, { type: "success", timeout: timeout, msg: msg }), document.getElementById("alog-success"));
        } else {
            var _success = document.createElement("div");
            _success.id = "alog-success";
            document.body.appendChild(_success);
            ReactDOM.render(React.createElement(MessageView, { type: "success", timeout: timeout, msg: msg }), document.getElementById("alog-success"));
        }
    },
    error: function error(msg, timeout) {
        if (!timeout) {
            timeout = 2000;
        }
        if (!!document.getElementById("alog-error")) {
            //存在
            var child = document.getElementById("alog-error");
            document.body.removeChild(child);
            var error = document.createElement("div");
            error.id = "alog-error";
            document.body.appendChild(error);
            ReactDOM.render(React.createElement(MessageView, { type: "error", timeout: timeout, msg: msg }), document.getElementById("alog-error"));
        } else {
            var _error = document.createElement("div");
            _error.id = "alog-error";
            document.body.appendChild(_error);
            ReactDOM.render(React.createElement(MessageView, { type: "error", timeout: timeout, msg: msg }), document.getElementById("alog-error"));
        }
    },
    alert: function alert(msg) {
        if (!!document.getElementById("alog-alert")) {
            //存在
            var child = document.getElementById("alog-alert");
            document.body.removeChild(child);
            var alert = document.createElement("div");
            alert.id = "alog-alert";
            document.body.appendChild(alert);
            ReactDOM.render(React.createElement(MessageView, { type: "alert", msg: msg }), document.getElementById("alog-alert"));
        } else {
            var _alert = document.createElement("div");
            _alert.id = "alog-alert";
            document.body.appendChild(_alert);
            ReactDOM.render(React.createElement(MessageView, { type: "alert", msg: msg }), document.getElementById("alog-alert"));
        }
    },
    confirm: function confirm(msg, success, cancel) {
        if (!!document.getElementById("alog-confirm")) {
            //存在
            var child = document.getElementById("alog-confirm");
            document.body.removeChild(child);
            var confirm = document.createElement("div");
            confirm.id = "alog-confirm";
            document.body.appendChild(confirm);
            ReactDOM.render(React.createElement(MessageView, { type: "confirm", msg: msg, OKHandler: success, cancelHandler: cancel }), document.getElementById("alog-confirm"));
        } else {
            var _confirm = document.createElement("div");
            _confirm.id = "alog-confirm";
            document.body.appendChild(_confirm);
            ReactDOM.render(React.createElement(MessageView, { type: "confirm", msg: msg, OKHandler: success, cancelHandler: cancel }), document.getElementById("alog-confirm"));
        }
    }
};
module.exports = Message;

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



// Trust the developer to only use ReactInstrumentation with a __DEV__ check

var debugTool = null;

if (process.env.NODE_ENV !== 'production') {
  var ReactDebugTool = __webpack_require__(196);
  debugTool = ReactDebugTool;
}

module.exports = { debugTool: debugTool };
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _validation;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Created by zhiyongwang on 2016-03-24.
 */

var validation = (_validation = {
    alpha: '只能包含英文字符，"-"，"_"',
    alphanum: '只能包含数字、英文字符和"_"',
    email: '邮箱格式不正确',
    url: "网址格式不正确",
    mobile: "手机号码格式不正确",
    integer: '必须为整数',
    idcard: "身份证号码格式不正确",
    required: '',
    invalidTip: "输入格式无效",
    date: "日期格式为: 0000-00-00",
    max: {
        array: '最多选择 {0} 个选项',
        number: '不能大于 {0}',
        string: '最大长度不能超过 {0} 个字符'
    },
    min: {
        array: '最少选择 {0} 个选项',
        number: '不能小于 {0}',
        string: '最小长度不能少于 {0} 个字符'
    },
    number: '必须为数字',
    password: '密码含有非法字符'
}, _defineProperty(_validation, 'url', 'url格式不正确'), _defineProperty(_validation, 'email', '邮箱格式不正确'), _defineProperty(_validation, 'fileSize', '最大上传文件大小不能超过 {0} KB'), _validation);
module.exports = validation;

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

function makeEmptyFunction(arg) {
  return function () {
    return arg;
  };
}

/**
 * This function accepts and discards inputs; it has no side effects. This is
 * primarily useful idiomatically for overridable function endpoints which
 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
 */
var emptyFunction = function emptyFunction() {};

emptyFunction.thatReturns = makeEmptyFunction;
emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
emptyFunction.thatReturnsNull = makeEmptyFunction(null);
emptyFunction.thatReturnsThis = function () {
  return this;
};
emptyFunction.thatReturnsArgument = function (arg) {
  return arg;
};

module.exports = emptyFunction;

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Created by wangzhiyong on 16/9/28.
 * desc 将表单组件中的label单独出来,
 *
 */

var React = __webpack_require__(1);

var Label = React.createClass({
    displayName: "Label",

    propTypes: {

        name: React.PropTypes.oneOfType([React.PropTypes.string, React.PropTypes.object, React.PropTypes.element, React.PropTypes.node]), //名称
        hide: React.PropTypes.bool, //是否隐藏
        help: React.PropTypes.string, //帮助文字
        required: React.PropTypes.bool //是否必填项
    },
    getDefaultProps: function getDefaultProps() {
        return {
            name: "",
            hide: false,
            help: null,
            required: false
        };
    },
    getInitialState: function getInitialState() {
        return {
            name: this.props.name,
            hide: this.props.hide,
            showHelp: false,
            required: this.props.required
        };
    },

    helpHandler: function helpHandler() {
        this.setState({
            showHelp: !this.state.showHelp
        });
    },
    hideHelp: function hideHelp() {
        //给父组件调用
        this.setState({
            showHelp: false
        });
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        this.setState({
            name: nextProps.name,
            hide: nextProps.hide,
            required: nextProps.required
        });
    },
    render: function render() {
        return React.createElement(
            "div",
            { className: "wasabi-form-group-label " + (this.state.required ? "required" : ""),
                style: { display: this.state.hide ? "none" : this.state.name && this.state.name != "" ? "table" : "none" } },
            React.createElement(
                "label",
                null,
                this.state.name,
                React.createElement(
                    "a",
                    { className: "help", onClick: this.helpHandler, style: { display: this.props.help ? "inline-block" : "none" } },
                    "?"
                ),
                React.createElement(
                    "div",
                    { className: "heip-text", style: { display: this.state.showHelp ? "block" : "none" } },
                    this.props.help
                )
            )
        );
    }
});
module.exports = Label;

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(4),
    _assign = __webpack_require__(6);

var CallbackQueue = __webpack_require__(87);
var PooledClass = __webpack_require__(28);
var ReactFeatureFlags = __webpack_require__(92);
var ReactReconciler = __webpack_require__(31);
var Transaction = __webpack_require__(46);

var invariant = __webpack_require__(2);

var dirtyComponents = [];
var updateBatchNumber = 0;
var asapCallbackQueue = CallbackQueue.getPooled();
var asapEnqueued = false;

var batchingStrategy = null;

function ensureInjected() {
  !(ReactUpdates.ReactReconcileTransaction && batchingStrategy) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must inject a reconcile transaction class and batching strategy') : _prodInvariant('123') : void 0;
}

var NESTED_UPDATES = {
  initialize: function initialize() {
    this.dirtyComponentsLength = dirtyComponents.length;
  },
  close: function close() {
    if (this.dirtyComponentsLength !== dirtyComponents.length) {
      // Additional updates were enqueued by componentDidUpdate handlers or
      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run
      // these new updates so that if A's componentDidUpdate calls setState on
      // B, B will update before the callback A's updater provided when calling
      // setState.
      dirtyComponents.splice(0, this.dirtyComponentsLength);
      flushBatchedUpdates();
    } else {
      dirtyComponents.length = 0;
    }
  }
};

var UPDATE_QUEUEING = {
  initialize: function initialize() {
    this.callbackQueue.reset();
  },
  close: function close() {
    this.callbackQueue.notifyAll();
  }
};

var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];

function ReactUpdatesFlushTransaction() {
  this.reinitializeTransaction();
  this.dirtyComponentsLength = null;
  this.callbackQueue = CallbackQueue.getPooled();
  this.reconcileTransaction = ReactUpdates.ReactReconcileTransaction.getPooled(
  /* useCreateElement */true);
}

_assign(ReactUpdatesFlushTransaction.prototype, Transaction, {
  getTransactionWrappers: function getTransactionWrappers() {
    return TRANSACTION_WRAPPERS;
  },

  destructor: function destructor() {
    this.dirtyComponentsLength = null;
    CallbackQueue.release(this.callbackQueue);
    this.callbackQueue = null;
    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);
    this.reconcileTransaction = null;
  },

  perform: function perform(method, scope, a) {
    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`
    // with this transaction's wrappers around it.
    return Transaction.perform.call(this, this.reconcileTransaction.perform, this.reconcileTransaction, method, scope, a);
  }
});

PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);

function batchedUpdates(callback, a, b, c, d, e) {
  ensureInjected();
  return batchingStrategy.batchedUpdates(callback, a, b, c, d, e);
}

/**
 * Array comparator for ReactComponents by mount ordering.
 *
 * @param {ReactComponent} c1 first component you're comparing
 * @param {ReactComponent} c2 second component you're comparing
 * @return {number} Return value usable by Array.prototype.sort().
 */
function mountOrderComparator(c1, c2) {
  return c1._mountOrder - c2._mountOrder;
}

function runBatchedUpdates(transaction) {
  var len = transaction.dirtyComponentsLength;
  !(len === dirtyComponents.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected flush transaction\'s stored dirty-components length (%s) to match dirty-components array length (%s).', len, dirtyComponents.length) : _prodInvariant('124', len, dirtyComponents.length) : void 0;

  // Since reconciling a component higher in the owner hierarchy usually (not
  // always -- see shouldComponentUpdate()) will reconcile children, reconcile
  // them before their children by sorting the array.
  dirtyComponents.sort(mountOrderComparator);

  // Any updates enqueued while reconciling must be performed after this entire
  // batch. Otherwise, if dirtyComponents is [A, B] where A has children B and
  // C, B could update twice in a single batch if C's render enqueues an update
  // to B (since B would have already updated, we should skip it, and the only
  // way we can know to do so is by checking the batch counter).
  updateBatchNumber++;

  for (var i = 0; i < len; i++) {
    // If a component is unmounted before pending changes apply, it will still
    // be here, but we assume that it has cleared its _pendingCallbacks and
    // that performUpdateIfNecessary is a noop.
    var component = dirtyComponents[i];

    // If performUpdateIfNecessary happens to enqueue any new updates, we
    // shouldn't execute the callbacks until the next render happens, so
    // stash the callbacks first
    var callbacks = component._pendingCallbacks;
    component._pendingCallbacks = null;

    var markerName;
    if (ReactFeatureFlags.logTopLevelRenders) {
      var namedComponent = component;
      // Duck type TopLevelWrapper. This is probably always true.
      if (component._currentElement.type.isReactTopLevelWrapper) {
        namedComponent = component._renderedComponent;
      }
      markerName = 'React update: ' + namedComponent.getName();
      console.time(markerName);
    }

    ReactReconciler.performUpdateIfNecessary(component, transaction.reconcileTransaction, updateBatchNumber);

    if (markerName) {
      console.timeEnd(markerName);
    }

    if (callbacks) {
      for (var j = 0; j < callbacks.length; j++) {
        transaction.callbackQueue.enqueue(callbacks[j], component.getPublicInstance());
      }
    }
  }
}

var flushBatchedUpdates = function flushBatchedUpdates() {
  // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents
  // array and perform any updates enqueued by mount-ready handlers (i.e.,
  // componentDidUpdate) but we need to check here too in order to catch
  // updates enqueued by setState callbacks and asap calls.
  while (dirtyComponents.length || asapEnqueued) {
    if (dirtyComponents.length) {
      var transaction = ReactUpdatesFlushTransaction.getPooled();
      transaction.perform(runBatchedUpdates, null, transaction);
      ReactUpdatesFlushTransaction.release(transaction);
    }

    if (asapEnqueued) {
      asapEnqueued = false;
      var queue = asapCallbackQueue;
      asapCallbackQueue = CallbackQueue.getPooled();
      queue.notifyAll();
      CallbackQueue.release(queue);
    }
  }
};

/**
 * Mark a component as needing a rerender, adding an optional callback to a
 * list of functions which will be executed once the rerender occurs.
 */
function enqueueUpdate(component) {
  ensureInjected();

  // Various parts of our code (such as ReactCompositeComponent's
  // _renderValidatedComponent) assume that calls to render aren't nested;
  // verify that that's the case. (This is called by each top-level update
  // function, like setState, forceUpdate, etc.; creation and
  // destruction of top-level components is guarded in ReactMount.)

  if (!batchingStrategy.isBatchingUpdates) {
    batchingStrategy.batchedUpdates(enqueueUpdate, component);
    return;
  }

  dirtyComponents.push(component);
  if (component._updateBatchNumber == null) {
    component._updateBatchNumber = updateBatchNumber + 1;
  }
}

/**
 * Enqueue a callback to be run at the end of the current batching cycle. Throws
 * if no updates are currently being performed.
 */
function asap(callback, context) {
  !batchingStrategy.isBatchingUpdates ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates.asap: Can\'t enqueue an asap callback in a context whereupdates are not being batched.') : _prodInvariant('125') : void 0;
  asapCallbackQueue.enqueue(callback, context);
  asapEnqueued = true;
}

var ReactUpdatesInjection = {
  injectReconcileTransaction: function injectReconcileTransaction(ReconcileTransaction) {
    !ReconcileTransaction ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a reconcile transaction class') : _prodInvariant('126') : void 0;
    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
  },

  injectBatchingStrategy: function injectBatchingStrategy(_batchingStrategy) {
    !_batchingStrategy ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batching strategy') : _prodInvariant('127') : void 0;
    !(typeof _batchingStrategy.batchedUpdates === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batchedUpdates() function') : _prodInvariant('128') : void 0;
    !(typeof _batchingStrategy.isBatchingUpdates === 'boolean') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide an isBatchingUpdates boolean attribute') : _prodInvariant('129') : void 0;
    batchingStrategy = _batchingStrategy;
  }
};

var ReactUpdates = {
  /**
   * React references `ReactReconcileTransaction` using this property in order
   * to allow dependency injection.
   *
   * @internal
   */
  ReactReconcileTransaction: null,

  batchedUpdates: batchedUpdates,
  enqueueUpdate: enqueueUpdate,
  flushBatchedUpdates: flushBatchedUpdates,
  injection: ReactUpdatesInjection,
  asap: asap
};

module.exports = ReactUpdates;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



/**
 * Keeps track of the current owner.
 *
 * The current owner is the component who should own any components that are
 * currently being constructed.
 */

var ReactCurrentOwner = {
  /**
   * @internal
   * @type {ReactComponent}
   */
  current: null
};

module.exports = ReactCurrentOwner;

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Created by apple on 16/8/5.
 */
var React = __webpack_require__(1);
var showUpdate = {
    showUpdate: function showUpdate(newParam, oldParam) {
        //判断前后参数是否相同
        var isupdate = false;
        if (!oldParam) {
            oldParam = this.state.params;
        }
        if (!newParam && !oldParam) {
            //都为空
            isupdate = false; //
            return isupdate;
        } else if (newParam && !oldParam && Object.keys(newParam).length == 0) {
            //原来没有参数,现在有了参数,但参数个数为0
            isupdate = false;
            return isupdate;
        } else if (newParam && !oldParam && Object.keys(newParam).length > 0) {
            //原来没有参数,现在有了参数,但是参数个数不为0
            isupdate = true;
            return isupdate;
        } else if (!newParam && oldParam) {
            //清空了参数
            isupdate = true;
            return isupdate;
        } else if (newParam && oldParam && Object.keys(newParam).length != Object.keys(oldParam).length) {
            //都有参数,但是参数个数已经不一样了
            isupdate = true;
            return isupdate;
        } else {
            //有参数,但参数个数相同,对比

            for (var par in newParam) {
                try {

                    if (newParam[par] == oldParam[par]) {
                        continue;
                    } else {
                        isupdate = true;
                        return isupdate;
                    }
                } catch (e) {
                    isupdate = true;
                    return isupdate;
                }
            }
        }

        return isupdate;
    }

};
module.exports = showUpdate;

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Created by wangzhiyong on 16/8/5.
 * desc 将验证独立出来

 */
var React = __webpack_require__(1);
var validation = __webpack_require__(16);
var regexp = __webpack_require__(35);
var Validate = {
    validate: function validate(value) {
        if (value == null || value == undefined) {
            value = this.state.value;
        }

        var isvalidate = true;
        var readonly = this.state.readonly;
        var required = this.state.required;
        var helpTip = "";
        if (readonly) {//不能直接返回，防止上一次的验证效果还在，导致无法消除
        } else {
            //非只读
            if (this.state.validateState && this.state.validateState != "valid") {
                //处理于后台验证中,或者是验证失败
                isvalidate = false;
            } else {
                //没有后台验证，或者后台验证已经成功
                if (value != null && value != undefined && value !== "") {
                    //注意一定要加双等号，用户输入了值，验证有效性

                    //因为有可能输入0
                    if (value.toString() == "NaN") {
                        //多加一层判断，有可能用户
                        isvalidate = false;
                        helpTip = "非有效数字";
                    } else if (typeof value === "string" && (value.indexOf("alert(") > -1 || value.indexOf("<script>") > -1 || value.indexOf("--") > -1)) {
                        //判断有效性，TODO 后期改为正则
                        isvalidate = false;
                        helpTip = "非有效数字";
                    } else if (this.props.regexp && this.props.regexp !== "") {
                        //有正则表达式

                        isvalidate = this.props.regexp.test(value);
                        if (!isvalidate) {
                            //无效

                            if (!this.props.invalidTip && this.props.invalidTip !== "") {
                                //用户自定义错误提示信息
                                helpTip = this.props.invalidTip;
                            } else {
                                //用默认提示
                                helpTip = validation["invalidTip"];
                            }
                        } else {//有效
                        }
                    } else {
                        //没有正则表达式，则验证默认正则

                        if (this.props.type == "date") {
                            //日期允许带时间

                            isvalidate = regexp.date.test(value) || regexp.datetime(value);
                        } else if (regexp[this.props.type]) {

                            if (typeof regexp[this.props.type] == "function") {
                                isvalidate = regexp[this.props.type](value);
                            } else {
                                isvalidate = regexp[this.props.type].test(value);
                            }

                            if (!isvalidate) {
                                helpTip = validation[this.props.type];
                            }
                        } else {}
                    }

                    if (!isvalidate) {
                        //无效再验证
                        //判断大小，长度等
                        if (this.state.min != null && this.state.min != undefined) {
                            switch (this.props.type) {
                                case "text":
                                    if (value.toString().length < this.state.min) {
                                        isvalidate = false;
                                        helpTip = "长度不能小于" + this.state.min;
                                    }
                                    break;
                                case "password":
                                    if (value.toString().length < this.state.min) {
                                        isvalidate = false;
                                        helpTip = "长度不能小于" + this.state.min;
                                    }
                                    break;
                                case "number":

                                    if (value < this.state.min) {
                                        isvalidate = false;
                                        helpTip = "不能小于" + this.state.min;
                                    }
                                    break;
                                case "integer":
                                    if (value < this.state.min) {
                                        isvalidate = false;
                                        helpTip = "不能小于" + this.state.min;
                                    }
                                case "checkbox":
                                    var valueArr = value.toString().split(",");
                                    if (valueArr.length < this.state.min) {
                                        isvalidate = false;
                                        helpTip = "最少选择" + this.state.min.toString() + "项";
                                    }
                                    break;
                                case "select":
                                    var valueArr = value.toString().split(",");
                                    if (valueArr.length < this.state.min) {
                                        isvalidate = false;
                                        helpTip = "最少选择" + this.state.min.toString() + "项";
                                    }
                                    break;
                            }
                        }
                        if (this.state.max != null && this.state.max != undefined) {
                            switch (this.props.type) {
                                case "text":
                                    if (value.toString().length > this.state.max) {
                                        isvalidate = false;
                                        helpTip = "长度不能大于" + this.state.max;
                                    }
                                    break;
                                case "password":
                                    if (value.toString().length > this.state.max) {
                                        isvalidate = false;
                                        helpTip = "长度不能大于" + this.state.max;
                                    }
                                    break;
                                case "number":
                                    if (value > this.state.max) {
                                        isvalidate = false;
                                        helpTip = "不能大于" + this.state.max;
                                    }
                                    break;
                                case "integer":
                                    if (value > this.state.max) {
                                        isvalidate = false;
                                        helpTip = "不能大于" + this.state.max;
                                    }
                                    break;
                                case "checkbox":
                                    var valueArr = value.toString().split(",");
                                    if (valueArr.length > this.state.max) {
                                        isvalidate = false;
                                        helpTip = "最多选择" + this.state.max.toString() + "项";
                                    }
                                    break;
                                case "select":
                                    var valueArr = value.toString().split(",");
                                    if (valueArr.length > this.state.max) {
                                        isvalidate = false;
                                        helpTip = "最多选择" + this.state.max.toString() + "项";
                                    }
                                    break;
                            }
                        }
                    }
                } else {
                    //输入没有输入
                    if (required) {
                        //必填
                        isvalidate = false; //
                        helpTip = validation["required"];
                    } else {
                        //认为验证有效
                    }
                }
            }
        }

        //设置样式
        if (isvalidate) {
            this.setState({
                validateClass: "",
                helpShow: "none",
                helpTip: ""

            });
        } else {

            this.setState({
                validateClass: " wasabi-has-error",
                helpShow: "block",
                helpTip: helpTip
            });
        }
        return isvalidate;
    }
};
module.exports = Validate;

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _events = __webpack_require__(290);

var Events = _interopRequireWildcard(_events);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

/**
 * Created by wangzhiyong on 2016/12/12.
 * 从rctui改造过来,绑定全局单击事件
 */
var React = __webpack_require__(1);
var ReactDOM = __webpack_require__(26);
var dom = __webpack_require__(289);

var ClickAway = {
    componentWillUnmount: function componentWillUnmount() {
        this.unbindClickAway();
    },
    bindClickAway: function bindClickAway() {
        //绑定事件
        var fn = this.getClickAwayEvent(); //得到要执行事件
        Events.on(document, 'click', fn);
        Events.on(document, 'touchstart', fn);
    },
    unbindClickAway: function unbindClickAway() {
        //解除绑定事件
        var fn = this.getClickAwayEvent();
        Events.off(document, 'click', fn);
        Events.off(document, 'touchstart', fn);
    },
    registerClickAway: function registerClickAway(onClickAway, target) {
        //注册绑定事件
        this.clickAwayTarget = target;
        this.onClickAway = onClickAway;
    },
    getClickAwayEvent: function getClickAwayEvent() {
        var _this = this;

        var fn = this._clickAwayEvent; //
        if (!fn) {
            //第一次不存在的时候
            fn = function fn(event) {
                var el = _this.clickAwayTarget || ReactDOM.findDOMNode(_this);

                // Check if the target is inside the current component
                if (event.target !== el && !dom.isDescendant(el, event.target)) {
                    if (_this.onClickAway) {
                        _this.onClickAway();
                    }
                }
            };
            this._clickAwayEvent = fn;
        }
        return fn;
    }
};
module.exports = ClickAway;

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(6);

var PooledClass = __webpack_require__(28);

var emptyFunction = __webpack_require__(17);
var warning = __webpack_require__(3);

var didWarnForAddedNewProperty = false;
var isProxySupported = typeof Proxy === 'function';

var shouldBeReleasedProperties = ['dispatchConfig', '_targetInst', 'nativeEvent', 'isDefaultPrevented', 'isPropagationStopped', '_dispatchListeners', '_dispatchInstances'];

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var EventInterface = {
  type: null,
  target: null,
  // currentTarget is set when dispatching; no use in copying it here
  currentTarget: emptyFunction.thatReturnsNull,
  eventPhase: null,
  bubbles: null,
  cancelable: null,
  timeStamp: function timeStamp(event) {
    return event.timeStamp || Date.now();
  },
  defaultPrevented: null,
  isTrusted: null
};

/**
 * Synthetic events are dispatched by event plugins, typically in response to a
 * top-level event delegation handler.
 *
 * These systems should generally use pooling to reduce the frequency of garbage
 * collection. The system should check `isPersistent` to determine whether the
 * event should be released into the pool after being dispatched. Users that
 * need a persisted event should invoke `persist`.
 *
 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
 * normalizing browser quirks. Subclasses do not necessarily have to implement a
 * DOM interface; custom application-specific events can also subclass this.
 *
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {*} targetInst Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @param {DOMEventTarget} nativeEventTarget Target node.
 */
function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
  if (process.env.NODE_ENV !== 'production') {
    // these have a getter/setter for warnings
    delete this.nativeEvent;
    delete this.preventDefault;
    delete this.stopPropagation;
  }

  this.dispatchConfig = dispatchConfig;
  this._targetInst = targetInst;
  this.nativeEvent = nativeEvent;

  var Interface = this.constructor.Interface;
  for (var propName in Interface) {
    if (!Interface.hasOwnProperty(propName)) {
      continue;
    }
    if (process.env.NODE_ENV !== 'production') {
      delete this[propName]; // this has a getter/setter for warnings
    }
    var normalize = Interface[propName];
    if (normalize) {
      this[propName] = normalize(nativeEvent);
    } else {
      if (propName === 'target') {
        this.target = nativeEventTarget;
      } else {
        this[propName] = nativeEvent[propName];
      }
    }
  }

  var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
  if (defaultPrevented) {
    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
  } else {
    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
  }
  this.isPropagationStopped = emptyFunction.thatReturnsFalse;
  return this;
}

_assign(SyntheticEvent.prototype, {
  preventDefault: function preventDefault() {
    this.defaultPrevented = true;
    var event = this.nativeEvent;
    if (!event) {
      return;
    }

    if (event.preventDefault) {
      event.preventDefault();
      // eslint-disable-next-line valid-typeof
    } else if (typeof event.returnValue !== 'unknown') {
      event.returnValue = false;
    }
    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
  },

  stopPropagation: function stopPropagation() {
    var event = this.nativeEvent;
    if (!event) {
      return;
    }

    if (event.stopPropagation) {
      event.stopPropagation();
      // eslint-disable-next-line valid-typeof
    } else if (typeof event.cancelBubble !== 'unknown') {
      // The ChangeEventPlugin registers a "propertychange" event for
      // IE. This event does not support bubbling or cancelling, and
      // any references to cancelBubble throw "Member not found".  A
      // typeof check of "unknown" circumvents this issue (and is also
      // IE specific).
      event.cancelBubble = true;
    }

    this.isPropagationStopped = emptyFunction.thatReturnsTrue;
  },

  /**
   * We release all dispatched `SyntheticEvent`s after each event loop, adding
   * them back into the pool. This allows a way to hold onto a reference that
   * won't be added back into the pool.
   */
  persist: function persist() {
    this.isPersistent = emptyFunction.thatReturnsTrue;
  },

  /**
   * Checks if this event should be released back into the pool.
   *
   * @return {boolean} True if this should not be released, false otherwise.
   */
  isPersistent: emptyFunction.thatReturnsFalse,

  /**
   * `PooledClass` looks for `destructor` on each instance it releases.
   */
  destructor: function destructor() {
    var Interface = this.constructor.Interface;
    for (var propName in Interface) {
      if (process.env.NODE_ENV !== 'production') {
        Object.defineProperty(this, propName, getPooledWarningPropertyDefinition(propName, Interface[propName]));
      } else {
        this[propName] = null;
      }
    }
    for (var i = 0; i < shouldBeReleasedProperties.length; i++) {
      this[shouldBeReleasedProperties[i]] = null;
    }
    if (process.env.NODE_ENV !== 'production') {
      Object.defineProperty(this, 'nativeEvent', getPooledWarningPropertyDefinition('nativeEvent', null));
      Object.defineProperty(this, 'preventDefault', getPooledWarningPropertyDefinition('preventDefault', emptyFunction));
      Object.defineProperty(this, 'stopPropagation', getPooledWarningPropertyDefinition('stopPropagation', emptyFunction));
    }
  }
});

SyntheticEvent.Interface = EventInterface;

if (process.env.NODE_ENV !== 'production') {
  if (isProxySupported) {
    /*eslint-disable no-func-assign */
    SyntheticEvent = new Proxy(SyntheticEvent, {
      construct: function construct(target, args) {
        return this.apply(target, Object.create(target.prototype), args);
      },
      apply: function apply(constructor, that, args) {
        return new Proxy(constructor.apply(that, args), {
          set: function set(target, prop, value) {
            if (prop !== 'isPersistent' && !target.constructor.Interface.hasOwnProperty(prop) && shouldBeReleasedProperties.indexOf(prop) === -1) {
              process.env.NODE_ENV !== 'production' ? warning(didWarnForAddedNewProperty || target.isPersistent(), "This synthetic event is reused for performance reasons. If you're " + "seeing this, you're adding a new property in the synthetic event object. " + 'The property is never released. See ' + 'https://fb.me/react-event-pooling for more information.') : void 0;
              didWarnForAddedNewProperty = true;
            }
            target[prop] = value;
            return true;
          }
        });
      }
    });
    /*eslint-enable no-func-assign */
  }
}
/**
 * Helper to reduce boilerplate when creating subclasses.
 *
 * @param {function} Class
 * @param {?object} Interface
 */
SyntheticEvent.augmentClass = function (Class, Interface) {
  var Super = this;

  var E = function E() {};
  E.prototype = Super.prototype;
  var prototype = new E();

  _assign(prototype, Class.prototype);
  Class.prototype = prototype;
  Class.prototype.constructor = Class;

  Class.Interface = _assign({}, Super.Interface, Interface);
  Class.augmentClass = Super.augmentClass;

  PooledClass.addPoolingTo(Class, PooledClass.fourArgumentPooler);
};

PooledClass.addPoolingTo(SyntheticEvent, PooledClass.fourArgumentPooler);

module.exports = SyntheticEvent;

/**
  * Helper to nullify syntheticEvent instance properties when destructing
  *
  * @param {object} SyntheticEvent
  * @param {String} propName
  * @return {object} defineProperty object
  */
function getPooledWarningPropertyDefinition(propName, getVal) {
  var isFunction = typeof getVal === 'function';
  return {
    configurable: true,
    set: set,
    get: get
  };

  function set(val) {
    var action = isFunction ? 'setting the method' : 'setting the property';
    warn(action, 'This is effectively a no-op');
    return val;
  }

  function get() {
    var action = isFunction ? 'accessing the method' : 'accessing the property';
    var result = isFunction ? 'This is a no-op function' : 'This is set to null';
    warn(action, result);
    return getVal;
  }

  function warn(action, result) {
    var warningCondition = false;
    process.env.NODE_ENV !== 'production' ? warning(warningCondition, "This synthetic event is reused for performance reasons. If you're seeing this, " + "you're %s `%s` on a released/nullified synthetic event. %s. " + 'If you must keep the original synthetic event around, use event.persist(). ' + 'See https://fb.me/react-event-pooling for more information.', action, propName, result) : void 0;
  }
}
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*
create by wangy
date:2016-04-05后开始独立改造
desc:链接按钮
 */
__webpack_require__(300);
__webpack_require__(143);
var setStyle = __webpack_require__(11);
var React = __webpack_require__(1);
var addRipple = __webpack_require__(55);
var LinkButton = React.createClass({
    displayName: "LinkButton",

    mixins: [setStyle, addRipple],
    propTypes: {
        name: React.PropTypes.string, //名称
        title: React.PropTypes.string, //标题

        width: React.PropTypes.number, //宽度
        height: React.PropTypes.number, //高度
        iconCls: React.PropTypes.string, //图片
        iconAlign: React.PropTypes.oneOf(["left", "right", "rightTop", "rightBottom"]), //图片位置
        href: React.PropTypes.string, //链接地址
        onClick: React.PropTypes.func, //单击地址
        tip: React.PropTypes.string, //提示信息
        disabled: React.PropTypes.bool, //是否有效
        hide: React.PropTypes.bool, //是否隐藏
        draggable: React.PropTypes.bool, //是否可拖动
        backgroundColor: React.PropTypes.string, //背景颜色
        color: React.PropTypes.string, //字体颜色
        ripple: React.PropTypes.bool //点击时是否显示波纹特效
    },
    getDefaultProps: function getDefaultProps() {
        return {
            name: "", //关联值
            title: "", //标题、
            iconAlign: "left", //图标位置
            href: "javascript:void(0)", //连接地址
            iconCls: null, //默认为空
            onClick: null, //单击事件
            draggable: false, //是否允许拖动
            dragStartHandler: null, //拖动事件
            tip: "",
            backgroundColor: null,
            color: null,
            disabled: false,
            hide: false,
            ripple: true
        };
    },
    getInitialState: function getInitialState() {
        return {

            disabled: this.props.disabled,
            title: this.props.title,
            tip: this.props.tip,
            hide: this.props.hide
        };
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        this.setState({

            disabled: nextProps.disabled,
            title: nextProps.title ? nextProps.title : this.state.title,
            tip: nextProps.tip,
            hide: nextProps.hide
        });
    },
    clickHandler: function clickHandler(event) {
        if (this.state.disabled == true) {
            return;
        }
        //TODO 添加波纹有问题
        // if(this.props.ripple)
        // {//允许特效，并且不是空主题
        //     this.rippleHandler(event);//添加波纹特效
        // }

        if (this.props.onClick != null) {
            this.props.onClick(this.props.name, this.props.title, event);
        }
    },
    onMouseOver: function onMouseOver(event) {
        if (this.props.onMouseOver) {
            this.props.onMouseOver(event);
        }
    },
    onMouseOut: function onMouseOut(event) {
        if (this.props.onMouseOut) {
            this.props.onMouseOut(event);
        }
    },
    setDisabled: function setDisabled(disabled) {
        this.setState({
            disabled: disabled
        });
    },
    dragStartHandler: function dragStartHandler(event) {
        //event.dataTransfer.effectAllowed = "move";
        //event.dataTransfer.setDragImage(event.target, 0, 0);
        //var timestamp = Date.parse(new Date());
        //
        var newele = { name: this.props.name,
            title: this.props.title,
            iconCls: this.props.iconCls,
            iconAlign: this.props.iconAlign,
            disabled: this.state.disabled,
            hide: this.state.hide,
            href: this.props.href,
            onClick: this.clickHandler
        };
        window.localStorage.setItem("wasabidrageleProps", JSON.stringify(newele));
    },
    render: function render() {
        if (this.state.hide == true) {
            return null;
        }
        var className = "wasabi-linkbutton "; //按钮样式
        if (this.props.className) {
            //自定义class
            className += " " + this.props.className;
        }
        if (!this.props.iconCls) {
            className += " " + "onlytext"; //只有文字
        }
        var style = this.setStyle(); //设置按钮样式
        var linkTextStyle = {}; //文本样式
        var iconColor = null; //图标颜色，因为图标基本使用了字体
        if (this.props.backgroundColor) {
            style.backgroundColor = this.props.backgroundColor;
        }
        if (this.props.color) {
            //单独设置了颜色
            linkTextStyle.color = this.props.color;
            iconColor = this.props.color;
        } else if (style.color) {
            //如果样式中设置了颜色，则取这个颜色
            linkTextStyle.color = style.color;
            iconColor = style.color;
        }

        var title = this.props.tip; //提示信息
        if (title == "" || !title) {
            //如果没有，则默认为文本
            title = this.props.title;
        }
        if (!this.props.title) {
            //纯图标
            return React.createElement(
                "a",
                { draggable: this.props.draggable, onDragStart: this.dragStartHandler, title: title,
                    href: this.props.href, onClick: this.clickHandler,
                    className: className + " onlyicon", disabled: this.state.disabled, name: this.props.name, style: style },
                React.createElement("i", { className: " " + this.props.iconCls, style: { color: iconColor, display: this.props.iconCls == "" ? "none" : "inline-block" } })
            );
        } else {

            if (this.props.iconAlign == "right") {

                return React.createElement(
                    "a",
                    { ref: "link", draggable: this.props.draggable, onDragStart: this.dragStartHandler, title: title,
                        href: this.props.href, onClick: this.clickHandler, onMouseOut: this.onMouseOut, onMouseOver: this.onMouseOver,
                        className: className, disabled: this.state.disabled, name: this.props.name, style: style },
                    React.createElement(
                        "div",
                        { className: "wasabi-linkbutton-text right", style: linkTextStyle },
                        this.props.title
                    ),
                    React.createElement("i", { className: " " + this.props.iconCls,
                        style: { color: iconColor, display: this.props.iconCls == "" ? "none" : "inline-block" } })
                );
            } else if (this.props.iconAlign == "rightTop") {
                return React.createElement(
                    "a",
                    { ref: "link", draggable: this.props.draggable, onDragStart: this.dragStartHandler, title: title,
                        href: this.props.href, onClick: this.clickHandler, onMouseOut: this.onMouseOut, onMouseOver: this.onMouseOver,
                        className: className, disabled: this.state.disabled, name: this.props.name, style: style },
                    React.createElement(
                        "div",
                        { className: "wasabi-linkbutton-text", style: linkTextStyle },
                        this.props.title
                    ),
                    React.createElement("i", { className: " " + this.props.iconCls + " icon-rightTop",
                        style: { color: iconColor, display: this.props.iconCls == "" ? "none" : "inline-block" } })
                );
            } else if (this.props.iconAlign == "rightBottom") {
                return React.createElement(
                    "a",
                    { ref: "link", draggable: this.props.draggable, onDragStart: this.dragStartHandler, title: title,
                        href: this.props.href, onClick: this.clickHandler, onMouseOut: this.onMouseOut, onMouseOver: this.onMouseOver,
                        className: className, disabled: this.state.disabled, name: this.props.name, style: style },
                    React.createElement(
                        "div",
                        { className: "wasabi-linkbutton-text", style: linkTextStyle },
                        this.props.title
                    ),
                    React.createElement("i", { className: " " + this.props.iconCls + " icon-rightBottom",
                        style: { color: iconColor, display: this.props.iconCls == "" ? "none" : "inline-block" } })
                );
            } else {
                return React.createElement(
                    "a",
                    { ref: "link", draggable: this.props.draggable, onDragStart: this.dragStartHandler, title: title,
                        href: this.props.href, onClick: this.clickHandler, onMouseOut: this.onMouseOut, onMouseOver: this.onMouseOver, className: className,
                        disabled: this.state.disabled, name: this.props.name, style: style },
                    React.createElement("i", { className: " " + this.props.iconCls,
                        style: { display: this.props.iconCls == null || this.props.iconCls == "" ? "none" : "inline-block" } }),
                    React.createElement(
                        "div",
                        { className: "wasabi-linkbutton-text left", style: linkTextStyle },
                        this.props.title
                    )
                );
            }
        }
    }
});
module.exports = LinkButton;

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(181);

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(4);

var invariant = __webpack_require__(2);

function checkMask(value, bitmask) {
  return (value & bitmask) === bitmask;
}

var DOMPropertyInjection = {
  /**
   * Mapping from normalized, camelcased property names to a configuration that
   * specifies how the associated DOM property should be accessed or rendered.
   */
  MUST_USE_PROPERTY: 0x1,
  HAS_BOOLEAN_VALUE: 0x4,
  HAS_NUMERIC_VALUE: 0x8,
  HAS_POSITIVE_NUMERIC_VALUE: 0x10 | 0x8,
  HAS_OVERLOADED_BOOLEAN_VALUE: 0x20,

  /**
   * Inject some specialized knowledge about the DOM. This takes a config object
   * with the following properties:
   *
   * isCustomAttribute: function that given an attribute name will return true
   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*
   * attributes where it's impossible to enumerate all of the possible
   * attribute names,
   *
   * Properties: object mapping DOM property name to one of the
   * DOMPropertyInjection constants or null. If your attribute isn't in here,
   * it won't get written to the DOM.
   *
   * DOMAttributeNames: object mapping React attribute name to the DOM
   * attribute name. Attribute names not specified use the **lowercase**
   * normalized name.
   *
   * DOMAttributeNamespaces: object mapping React attribute name to the DOM
   * attribute namespace URL. (Attribute names not specified use no namespace.)
   *
   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
   * Property names not specified use the normalized name.
   *
   * DOMMutationMethods: Properties that require special mutation methods. If
   * `value` is undefined, the mutation method should unset the property.
   *
   * @param {object} domPropertyConfig the config as described above.
   */
  injectDOMPropertyConfig: function injectDOMPropertyConfig(domPropertyConfig) {
    var Injection = DOMPropertyInjection;
    var Properties = domPropertyConfig.Properties || {};
    var DOMAttributeNamespaces = domPropertyConfig.DOMAttributeNamespaces || {};
    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};

    if (domPropertyConfig.isCustomAttribute) {
      DOMProperty._isCustomAttributeFunctions.push(domPropertyConfig.isCustomAttribute);
    }

    for (var propName in Properties) {
      !!DOMProperty.properties.hasOwnProperty(propName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'injectDOMPropertyConfig(...): You\'re trying to inject DOM property \'%s\' which has already been injected. You may be accidentally injecting the same DOM property config twice, or you may be injecting two configs that have conflicting property names.', propName) : _prodInvariant('48', propName) : void 0;

      var lowerCased = propName.toLowerCase();
      var propConfig = Properties[propName];

      var propertyInfo = {
        attributeName: lowerCased,
        attributeNamespace: null,
        propertyName: propName,
        mutationMethod: null,

        mustUseProperty: checkMask(propConfig, Injection.MUST_USE_PROPERTY),
        hasBooleanValue: checkMask(propConfig, Injection.HAS_BOOLEAN_VALUE),
        hasNumericValue: checkMask(propConfig, Injection.HAS_NUMERIC_VALUE),
        hasPositiveNumericValue: checkMask(propConfig, Injection.HAS_POSITIVE_NUMERIC_VALUE),
        hasOverloadedBooleanValue: checkMask(propConfig, Injection.HAS_OVERLOADED_BOOLEAN_VALUE)
      };
      !(propertyInfo.hasBooleanValue + propertyInfo.hasNumericValue + propertyInfo.hasOverloadedBooleanValue <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Value can be one of boolean, overloaded boolean, or numeric value, but not a combination: %s', propName) : _prodInvariant('50', propName) : void 0;

      if (process.env.NODE_ENV !== 'production') {
        DOMProperty.getPossibleStandardName[lowerCased] = propName;
      }

      if (DOMAttributeNames.hasOwnProperty(propName)) {
        var attributeName = DOMAttributeNames[propName];
        propertyInfo.attributeName = attributeName;
        if (process.env.NODE_ENV !== 'production') {
          DOMProperty.getPossibleStandardName[attributeName] = propName;
        }
      }

      if (DOMAttributeNamespaces.hasOwnProperty(propName)) {
        propertyInfo.attributeNamespace = DOMAttributeNamespaces[propName];
      }

      if (DOMPropertyNames.hasOwnProperty(propName)) {
        propertyInfo.propertyName = DOMPropertyNames[propName];
      }

      if (DOMMutationMethods.hasOwnProperty(propName)) {
        propertyInfo.mutationMethod = DOMMutationMethods[propName];
      }

      DOMProperty.properties[propName] = propertyInfo;
    }
  }
};

/* eslint-disable max-len */
var ATTRIBUTE_NAME_START_CHAR = ':A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD';
/* eslint-enable max-len */

/**
 * DOMProperty exports lookup objects that can be used like functions:
 *
 *   > DOMProperty.isValid['id']
 *   true
 *   > DOMProperty.isValid['foobar']
 *   undefined
 *
 * Although this may be confusing, it performs better in general.
 *
 * @see http://jsperf.com/key-exists
 * @see http://jsperf.com/key-missing
 */
var DOMProperty = {
  ID_ATTRIBUTE_NAME: 'data-reactid',
  ROOT_ATTRIBUTE_NAME: 'data-reactroot',

  ATTRIBUTE_NAME_START_CHAR: ATTRIBUTE_NAME_START_CHAR,
  ATTRIBUTE_NAME_CHAR: ATTRIBUTE_NAME_START_CHAR + '\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040',

  /**
   * Map from property "standard name" to an object with info about how to set
   * the property in the DOM. Each object contains:
   *
   * attributeName:
   *   Used when rendering markup or with `*Attribute()`.
   * attributeNamespace
   * propertyName:
   *   Used on DOM node instances. (This includes properties that mutate due to
   *   external factors.)
   * mutationMethod:
   *   If non-null, used instead of the property or `setAttribute()` after
   *   initial render.
   * mustUseProperty:
   *   Whether the property must be accessed and mutated as an object property.
   * hasBooleanValue:
   *   Whether the property should be removed when set to a falsey value.
   * hasNumericValue:
   *   Whether the property must be numeric or parse as a numeric and should be
   *   removed when set to a falsey value.
   * hasPositiveNumericValue:
   *   Whether the property must be positive numeric or parse as a positive
   *   numeric and should be removed when set to a falsey value.
   * hasOverloadedBooleanValue:
   *   Whether the property can be used as a flag as well as with a value.
   *   Removed when strictly equal to false; present without a value when
   *   strictly equal to true; present with a value otherwise.
   */
  properties: {},

  /**
   * Mapping from lowercase property names to the properly cased version, used
   * to warn in the case of missing properties. Available only in __DEV__.
   *
   * autofocus is predefined, because adding it to the property whitelist
   * causes unintended side effects.
   *
   * @type {Object}
   */
  getPossibleStandardName: process.env.NODE_ENV !== 'production' ? { autofocus: 'autoFocus' } : null,

  /**
   * All of the isCustomAttribute() functions that have been injected.
   */
  _isCustomAttributeFunctions: [],

  /**
   * Checks whether a property name is a custom attribute.
   * @method
   */
  isCustomAttribute: function isCustomAttribute(attributeName) {
    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {
      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];
      if (isCustomAttributeFn(attributeName)) {
        return true;
      }
    }
    return false;
  },

  injection: DOMPropertyInjection
};

module.exports = DOMProperty;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var _prodInvariant = __webpack_require__(4);

var invariant = __webpack_require__(2);

/**
 * Static poolers. Several custom versions for each potential number of
 * arguments. A completely generic pooler is easy to implement, but would
 * require accessing the `arguments` object. In each of these, `this` refers to
 * the Class itself, not an instance. If any others are needed, simply add them
 * here, or in their own files.
 */
var oneArgumentPooler = function oneArgumentPooler(copyFieldsFrom) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, copyFieldsFrom);
    return instance;
  } else {
    return new Klass(copyFieldsFrom);
  }
};

var twoArgumentPooler = function twoArgumentPooler(a1, a2) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2);
    return instance;
  } else {
    return new Klass(a1, a2);
  }
};

var threeArgumentPooler = function threeArgumentPooler(a1, a2, a3) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3);
    return instance;
  } else {
    return new Klass(a1, a2, a3);
  }
};

var fourArgumentPooler = function fourArgumentPooler(a1, a2, a3, a4) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3, a4);
    return instance;
  } else {
    return new Klass(a1, a2, a3, a4);
  }
};

var standardReleaser = function standardReleaser(instance) {
  var Klass = this;
  !(instance instanceof Klass) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Trying to release an instance into a pool of a different type.') : _prodInvariant('25') : void 0;
  instance.destructor();
  if (Klass.instancePool.length < Klass.poolSize) {
    Klass.instancePool.push(instance);
  }
};

var DEFAULT_POOL_SIZE = 10;
var DEFAULT_POOLER = oneArgumentPooler;

/**
 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
 * itself (statically) not adding any prototypical fields. Any CopyConstructor
 * you give this may have a `poolSize` property, and will look for a
 * prototypical `destructor` on instances.
 *
 * @param {Function} CopyConstructor Constructor that can be used to reset.
 * @param {Function} pooler Customizable pooler.
 */
var addPoolingTo = function addPoolingTo(CopyConstructor, pooler) {
  // Casting as any so that flow ignores the actual implementation and trusts
  // it to match the type we declared
  var NewKlass = CopyConstructor;
  NewKlass.instancePool = [];
  NewKlass.getPooled = pooler || DEFAULT_POOLER;
  if (!NewKlass.poolSize) {
    NewKlass.poolSize = DEFAULT_POOL_SIZE;
  }
  NewKlass.release = standardReleaser;
  return NewKlass;
};

var PooledClass = {
  addPoolingTo: addPoolingTo,
  oneArgumentPooler: oneArgumentPooler,
  twoArgumentPooler: twoArgumentPooler,
  threeArgumentPooler: threeArgumentPooler,
  fourArgumentPooler: fourArgumentPooler
};

module.exports = PooledClass;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _assign = __webpack_require__(6);

var ReactCurrentOwner = __webpack_require__(20);

var warning = __webpack_require__(3);
var canDefineProperty = __webpack_require__(49);
var hasOwnProperty = Object.prototype.hasOwnProperty;

var REACT_ELEMENT_TYPE = __webpack_require__(109);

var RESERVED_PROPS = {
  key: true,
  ref: true,
  __self: true,
  __source: true
};

var specialPropKeyWarningShown, specialPropRefWarningShown;

function hasValidRef(config) {
  if (process.env.NODE_ENV !== 'production') {
    if (hasOwnProperty.call(config, 'ref')) {
      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;
      if (getter && getter.isReactWarning) {
        return false;
      }
    }
  }
  return config.ref !== undefined;
}

function hasValidKey(config) {
  if (process.env.NODE_ENV !== 'production') {
    if (hasOwnProperty.call(config, 'key')) {
      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;
      if (getter && getter.isReactWarning) {
        return false;
      }
    }
  }
  return config.key !== undefined;
}

function defineKeyPropWarningGetter(props, displayName) {
  var warnAboutAccessingKey = function warnAboutAccessingKey() {
    if (!specialPropKeyWarningShown) {
      specialPropKeyWarningShown = true;
      process.env.NODE_ENV !== 'production' ? warning(false, '%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName) : void 0;
    }
  };
  warnAboutAccessingKey.isReactWarning = true;
  Object.defineProperty(props, 'key', {
    get: warnAboutAccessingKey,
    configurable: true
  });
}

function defineRefPropWarningGetter(props, displayName) {
  var warnAboutAccessingRef = function warnAboutAccessingRef() {
    if (!specialPropRefWarningShown) {
      specialPropRefWarningShown = true;
      process.env.NODE_ENV !== 'production' ? warning(false, '%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName) : void 0;
    }
  };
  warnAboutAccessingRef.isReactWarning = true;
  Object.defineProperty(props, 'ref', {
    get: warnAboutAccessingRef,
    configurable: true
  });
}

/**
 * Factory method to create a new React element. This no longer adheres to
 * the class pattern, so do not use new to call it. Also, no instanceof check
 * will work. Instead test $$typeof field against Symbol.for('react.element') to check
 * if something is a React Element.
 *
 * @param {*} type
 * @param {*} key
 * @param {string|object} ref
 * @param {*} self A *temporary* helper to detect places where `this` is
 * different from the `owner` when React.createElement is called, so that we
 * can warn. We want to get rid of owner and replace string `ref`s with arrow
 * functions, and as long as `this` and owner are the same, there will be no
 * change in behavior.
 * @param {*} source An annotation object (added by a transpiler or otherwise)
 * indicating filename, line number, and/or other information.
 * @param {*} owner
 * @param {*} props
 * @internal
 */
var ReactElement = function ReactElement(type, key, ref, self, source, owner, props) {
  var element = {
    // This tag allow us to uniquely identify this as a React Element
    $$typeof: REACT_ELEMENT_TYPE,

    // Built-in properties that belong on the element
    type: type,
    key: key,
    ref: ref,
    props: props,

    // Record the component responsible for creating this element.
    _owner: owner
  };

  if (process.env.NODE_ENV !== 'production') {
    // The validation flag is currently mutative. We put it on
    // an external backing store so that we can freeze the whole object.
    // This can be replaced with a WeakMap once they are implemented in
    // commonly used development environments.
    element._store = {};

    // To make comparing ReactElements easier for testing purposes, we make
    // the validation flag non-enumerable (where possible, which should
    // include every environment we run tests in), so the test framework
    // ignores it.
    if (canDefineProperty) {
      Object.defineProperty(element._store, 'validated', {
        configurable: false,
        enumerable: false,
        writable: true,
        value: false
      });
      // self and source are DEV only properties.
      Object.defineProperty(element, '_self', {
        configurable: false,
        enumerable: false,
        writable: false,
        value: self
      });
      // Two elements created in two different places should be considered
      // equal for testing purposes and therefore we hide it from enumeration.
      Object.defineProperty(element, '_source', {
        configurable: false,
        enumerable: false,
        writable: false,
        value: source
      });
    } else {
      element._store.validated = false;
      element._self = self;
      element._source = source;
    }
    if (Object.freeze) {
      Object.freeze(element.props);
      Object.freeze(element);
    }
  }

  return element;
};

/**
 * Create and return a new ReactElement of the given type.
 * See https://facebook.github.io/react/docs/top-level-api.html#react.createelement
 */
ReactElement.createElement = function (type, config, children) {
  var propName;

  // Reserved names are extracted
  var props = {};

  var key = null;
  var ref = null;
  var self = null;
  var source = null;

  if (config != null) {
    if (hasValidRef(config)) {
      ref = config.ref;
    }
    if (hasValidKey(config)) {
      key = '' + config.key;
    }

    self = config.__self === undefined ? null : config.__self;
    source = config.__source === undefined ? null : config.__source;
    // Remaining properties are added to a new props object
    for (propName in config) {
      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
        props[propName] = config[propName];
      }
    }
  }

  // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.
  var childrenLength = arguments.length - 2;
  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);
    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }
    if (process.env.NODE_ENV !== 'production') {
      if (Object.freeze) {
        Object.freeze(childArray);
      }
    }
    props.children = childArray;
  }

  // Resolve default props
  if (type && type.defaultProps) {
    var defaultProps = type.defaultProps;
    for (propName in defaultProps) {
      if (props[propName] === undefined) {
        props[propName] = defaultProps[propName];
      }
    }
  }
  if (process.env.NODE_ENV !== 'production') {
    if (key || ref) {
      if (typeof props.$$typeof === 'undefined' || props.$$typeof !== REACT_ELEMENT_TYPE) {
        var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;
        if (key) {
          defineKeyPropWarningGetter(props, displayName);
        }
        if (ref) {
          defineRefPropWarningGetter(props, displayName);
        }
      }
    }
  }
  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
};

/**
 * Return a function that produces ReactElements of a given type.
 * See https://facebook.github.io/react/docs/top-level-api.html#react.createfactory
 */
ReactElement.createFactory = function (type) {
  var factory = ReactElement.createElement.bind(null, type);
  // Expose the type on the factory and the prototype so that it can be
  // easily accessed on elements. E.g. `<Foo />.type === Foo`.
  // This should not be named `constructor` since this may not be the function
  // that created the element, and it may not even be a constructor.
  // Legacy hook TODO: Warn if this is accessed
  factory.type = type;
  return factory;
};

ReactElement.cloneAndReplaceKey = function (oldElement, newKey) {
  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);

  return newElement;
};

/**
 * Clone and return a new ReactElement using element as the starting point.
 * See https://facebook.github.io/react/docs/top-level-api.html#react.cloneelement
 */
ReactElement.cloneElement = function (element, config, children) {
  var propName;

  // Original props are copied
  var props = _assign({}, element.props);

  // Reserved names are extracted
  var key = element.key;
  var ref = element.ref;
  // Self is preserved since the owner is preserved.
  var self = element._self;
  // Source is preserved since cloneElement is unlikely to be targeted by a
  // transpiler, and the original source is probably a better indicator of the
  // true owner.
  var source = element._source;

  // Owner will be preserved, unless ref is overridden
  var owner = element._owner;

  if (config != null) {
    if (hasValidRef(config)) {
      // Silently steal the ref from the parent.
      ref = config.ref;
      owner = ReactCurrentOwner.current;
    }
    if (hasValidKey(config)) {
      key = '' + config.key;
    }

    // Remaining properties override existing props
    var defaultProps;
    if (element.type && element.type.defaultProps) {
      defaultProps = element.type.defaultProps;
    }
    for (propName in config) {
      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
        if (config[propName] === undefined && defaultProps !== undefined) {
          // Resolve default props
          props[propName] = defaultProps[propName];
        } else {
          props[propName] = config[propName];
        }
      }
    }
  }

  // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.
  var childrenLength = arguments.length - 2;
  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);
    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }
    props.children = childArray;
  }

  return ReactElement(element.type, key, ref, self, source, owner, props);
};

/**
 * Verifies the object is a ReactElement.
 * See https://facebook.github.io/react/docs/top-level-api.html#react.isvalidelement
 * @param {?object} object
 * @return {boolean} True if `object` is a valid component.
 * @final
 */
ReactElement.isValidElement = function (object) {
  return (typeof object === 'undefined' ? 'undefined' : _typeof(object)) === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
};

module.exports = ReactElement;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var DOMNamespaces = __webpack_require__(60);
var setInnerHTML = __webpack_require__(48);

var createMicrosoftUnsafeLocalFunction = __webpack_require__(67);
var setTextContent = __webpack_require__(106);

var ELEMENT_NODE_TYPE = 1;
var DOCUMENT_FRAGMENT_NODE_TYPE = 11;

/**
 * In IE (8-11) and Edge, appending nodes with no children is dramatically
 * faster than appending a full subtree, so we essentially queue up the
 * .appendChild calls here and apply them so each node is added to its parent
 * before any children are added.
 *
 * In other browsers, doing so is slower or neutral compared to the other order
 * (in Firefox, twice as slow) so we only do this inversion in IE.
 *
 * See https://github.com/spicyj/innerhtml-vs-createelement-vs-clonenode.
 */
var enableLazy = typeof document !== 'undefined' && typeof document.documentMode === 'number' || typeof navigator !== 'undefined' && typeof navigator.userAgent === 'string' && /\bEdge\/\d/.test(navigator.userAgent);

function insertTreeChildren(tree) {
  if (!enableLazy) {
    return;
  }
  var node = tree.node;
  var children = tree.children;
  if (children.length) {
    for (var i = 0; i < children.length; i++) {
      insertTreeBefore(node, children[i], null);
    }
  } else if (tree.html != null) {
    setInnerHTML(node, tree.html);
  } else if (tree.text != null) {
    setTextContent(node, tree.text);
  }
}

var insertTreeBefore = createMicrosoftUnsafeLocalFunction(function (parentNode, tree, referenceNode) {
  // DocumentFragments aren't actually part of the DOM after insertion so
  // appending children won't update the DOM. We need to ensure the fragment
  // is properly populated first, breaking out of our lazy approach for just
  // this level. Also, some <object> plugins (like Flash Player) will read
  // <param> nodes immediately upon insertion into the DOM, so <object>
  // must also be populated prior to insertion into the DOM.
  if (tree.node.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE || tree.node.nodeType === ELEMENT_NODE_TYPE && tree.node.nodeName.toLowerCase() === 'object' && (tree.node.namespaceURI == null || tree.node.namespaceURI === DOMNamespaces.html)) {
    insertTreeChildren(tree);
    parentNode.insertBefore(tree.node, referenceNode);
  } else {
    parentNode.insertBefore(tree.node, referenceNode);
    insertTreeChildren(tree);
  }
});

function replaceChildWithTree(oldNode, newTree) {
  oldNode.parentNode.replaceChild(newTree.node, oldNode);
  insertTreeChildren(newTree);
}

function queueChild(parentTree, childTree) {
  if (enableLazy) {
    parentTree.children.push(childTree);
  } else {
    parentTree.node.appendChild(childTree.node);
  }
}

function queueHTML(tree, html) {
  if (enableLazy) {
    tree.html = html;
  } else {
    setInnerHTML(tree.node, html);
  }
}

function queueText(tree, text) {
  if (enableLazy) {
    tree.text = text;
  } else {
    setTextContent(tree.node, text);
  }
}

function toString() {
  return this.node.nodeName;
}

function DOMLazyTree(node) {
  return {
    node: node,
    children: [],
    html: null,
    text: null,
    toString: toString
  };
}

DOMLazyTree.insertTreeBefore = insertTreeBefore;
DOMLazyTree.replaceChildWithTree = replaceChildWithTree;
DOMLazyTree.queueChild = queueChild;
DOMLazyTree.queueHTML = queueHTML;
DOMLazyTree.queueText = queueText;

module.exports = DOMLazyTree;

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ReactRef = __webpack_require__(210);
var ReactInstrumentation = __webpack_require__(15);

var warning = __webpack_require__(3);

/**
 * Helper to call ReactRef.attachRefs with this composite component, split out
 * to avoid allocations in the transaction mount-ready queue.
 */
function attachRefs() {
  ReactRef.attachRefs(this, this._currentElement);
}

var ReactReconciler = {
  /**
   * Initializes the component, renders markup, and registers event listeners.
   *
   * @param {ReactComponent} internalInstance
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {?object} the containing host component instance
   * @param {?object} info about the host container
   * @return {?string} Rendered markup to be inserted into the DOM.
   * @final
   * @internal
   */
  mountComponent: function mountComponent(internalInstance, transaction, hostParent, hostContainerInfo, context, parentDebugID) // 0 in production and for roots
  {
    if (process.env.NODE_ENV !== 'production') {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onBeforeMountComponent(internalInstance._debugID, internalInstance._currentElement, parentDebugID);
      }
    }
    var markup = internalInstance.mountComponent(transaction, hostParent, hostContainerInfo, context, parentDebugID);
    if (internalInstance._currentElement && internalInstance._currentElement.ref != null) {
      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
    }
    if (process.env.NODE_ENV !== 'production') {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onMountComponent(internalInstance._debugID);
      }
    }
    return markup;
  },

  /**
   * Returns a value that can be passed to
   * ReactComponentEnvironment.replaceNodeWithMarkup.
   */
  getHostNode: function getHostNode(internalInstance) {
    return internalInstance.getHostNode();
  },

  /**
   * Releases any resources allocated by `mountComponent`.
   *
   * @final
   * @internal
   */
  unmountComponent: function unmountComponent(internalInstance, safely) {
    if (process.env.NODE_ENV !== 'production') {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onBeforeUnmountComponent(internalInstance._debugID);
      }
    }
    ReactRef.detachRefs(internalInstance, internalInstance._currentElement);
    internalInstance.unmountComponent(safely);
    if (process.env.NODE_ENV !== 'production') {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onUnmountComponent(internalInstance._debugID);
      }
    }
  },

  /**
   * Update a component using a new element.
   *
   * @param {ReactComponent} internalInstance
   * @param {ReactElement} nextElement
   * @param {ReactReconcileTransaction} transaction
   * @param {object} context
   * @internal
   */
  receiveComponent: function receiveComponent(internalInstance, nextElement, transaction, context) {
    var prevElement = internalInstance._currentElement;

    if (nextElement === prevElement && context === internalInstance._context) {
      // Since elements are immutable after the owner is rendered,
      // we can do a cheap identity compare here to determine if this is a
      // superfluous reconcile. It's possible for state to be mutable but such
      // change should trigger an update of the owner which would recreate
      // the element. We explicitly check for the existence of an owner since
      // it's possible for an element created outside a composite to be
      // deeply mutated and reused.

      // TODO: Bailing out early is just a perf optimization right?
      // TODO: Removing the return statement should affect correctness?
      return;
    }

    if (process.env.NODE_ENV !== 'production') {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onBeforeUpdateComponent(internalInstance._debugID, nextElement);
      }
    }

    var refsChanged = ReactRef.shouldUpdateRefs(prevElement, nextElement);

    if (refsChanged) {
      ReactRef.detachRefs(internalInstance, prevElement);
    }

    internalInstance.receiveComponent(nextElement, transaction, context);

    if (refsChanged && internalInstance._currentElement && internalInstance._currentElement.ref != null) {
      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
    }

    if (process.env.NODE_ENV !== 'production') {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onUpdateComponent(internalInstance._debugID);
      }
    }
  },

  /**
   * Flush any dirty changes in a component.
   *
   * @param {ReactComponent} internalInstance
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  performUpdateIfNecessary: function performUpdateIfNecessary(internalInstance, transaction, updateBatchNumber) {
    if (internalInstance._updateBatchNumber !== updateBatchNumber) {
      // The component's enqueued batch number should always be the current
      // batch or the following one.
      process.env.NODE_ENV !== 'production' ? warning(internalInstance._updateBatchNumber == null || internalInstance._updateBatchNumber === updateBatchNumber + 1, 'performUpdateIfNecessary: Unexpected batch number (current %s, ' + 'pending %s)', updateBatchNumber, internalInstance._updateBatchNumber) : void 0;
      return;
    }
    if (process.env.NODE_ENV !== 'production') {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onBeforeUpdateComponent(internalInstance._debugID, internalInstance._currentElement);
      }
    }
    internalInstance.performUpdateIfNecessary(transaction);
    if (process.env.NODE_ENV !== 'production') {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onUpdateComponent(internalInstance._debugID);
      }
    }
  }
};

module.exports = ReactReconciler;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(6);

var ReactBaseClasses = __webpack_require__(108);
var ReactChildren = __webpack_require__(240);
var ReactDOMFactories = __webpack_require__(241);
var ReactElement = __webpack_require__(29);
var ReactPropTypes = __webpack_require__(243);
var ReactVersion = __webpack_require__(245);

var createReactClass = __webpack_require__(247);
var onlyChild = __webpack_require__(249);

var createElement = ReactElement.createElement;
var createFactory = ReactElement.createFactory;
var cloneElement = ReactElement.cloneElement;

if (process.env.NODE_ENV !== 'production') {
  var lowPriorityWarning = __webpack_require__(74);
  var canDefineProperty = __webpack_require__(49);
  var ReactElementValidator = __webpack_require__(110);
  var didWarnPropTypesDeprecated = false;
  createElement = ReactElementValidator.createElement;
  createFactory = ReactElementValidator.createFactory;
  cloneElement = ReactElementValidator.cloneElement;
}

var __spread = _assign;
var createMixin = function createMixin(mixin) {
  return mixin;
};

if (process.env.NODE_ENV !== 'production') {
  var warnedForSpread = false;
  var warnedForCreateMixin = false;
  __spread = function __spread() {
    lowPriorityWarning(warnedForSpread, 'React.__spread is deprecated and should not be used. Use ' + 'Object.assign directly or another helper function with similar ' + 'semantics. You may be seeing this warning due to your compiler. ' + 'See https://fb.me/react-spread-deprecation for more details.');
    warnedForSpread = true;
    return _assign.apply(null, arguments);
  };

  createMixin = function createMixin(mixin) {
    lowPriorityWarning(warnedForCreateMixin, 'React.createMixin is deprecated and should not be used. ' + 'In React v16.0, it will be removed. ' + 'You can use this mixin directly instead. ' + 'See https://fb.me/createmixin-was-never-implemented for more info.');
    warnedForCreateMixin = true;
    return mixin;
  };
}

var React = {
  // Modern

  Children: {
    map: ReactChildren.map,
    forEach: ReactChildren.forEach,
    count: ReactChildren.count,
    toArray: ReactChildren.toArray,
    only: onlyChild
  },

  Component: ReactBaseClasses.Component,
  PureComponent: ReactBaseClasses.PureComponent,

  createElement: createElement,
  cloneElement: cloneElement,
  isValidElement: ReactElement.isValidElement,

  // Classic

  PropTypes: ReactPropTypes,
  createClass: createReactClass,
  createFactory: createFactory,
  createMixin: createMixin,

  // This looks DOM specific but these are actually isomorphic helpers
  // since they are just generating DOM strings.
  DOM: ReactDOMFactories,

  version: ReactVersion,

  // Deprecated hook for JSX spread, don't use this for anything.
  __spread: __spread
};

if (process.env.NODE_ENV !== 'production') {
  var warnedForCreateClass = false;
  if (canDefineProperty) {
    Object.defineProperty(React, 'PropTypes', {
      get: function get() {
        lowPriorityWarning(didWarnPropTypesDeprecated, 'Accessing PropTypes via the main React package is deprecated,' + ' and will be removed in  React v16.0.' + ' Use the latest available v15.* prop-types package from npm instead.' + ' For info on usage, compatibility, migration and more, see ' + 'https://fb.me/prop-types-docs');
        didWarnPropTypesDeprecated = true;
        return ReactPropTypes;
      }
    });

    Object.defineProperty(React, 'createClass', {
      get: function get() {
        lowPriorityWarning(warnedForCreateClass, 'Accessing createClass via the main React package is deprecated,' + ' and will be removed in React v16.0.' + " Use a plain JavaScript class instead. If you're not yet " + 'ready to migrate, create-react-class v15.* is available ' + 'on npm as a temporary, drop-in replacement. ' + 'For more info see https://fb.me/react-create-class');
        warnedForCreateClass = true;
        return createReactClass;
      }
    });
  }

  // React.DOM factories are deprecated. Wrap these methods so that
  // invocations of the React.DOM namespace and alert users to switch
  // to the `react-dom-factories` package.
  React.DOM = {};
  var warnedForFactories = false;
  Object.keys(ReactDOMFactories).forEach(function (factory) {
    React.DOM[factory] = function () {
      if (!warnedForFactories) {
        lowPriorityWarning(false, 'Accessing factories like React.DOM.%s has been deprecated ' + 'and will be removed in v16.0+. Use the ' + 'react-dom-factories package instead. ' + ' Version 1.0 provides a drop-in replacement.' + ' For more info, see https://fb.me/react-dom-factories', factory);
        warnedForFactories = true;
      }
      return ReactDOMFactories[factory].apply(ReactDOMFactories, arguments);
    };
  });
}

module.exports = React;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */


/**
 * WARNING: DO NOT manually require this module.
 * This is a replacement for `invariant(...)` used by the error code system
 * and will _only_ be required by the corresponding babel pass.
 * It always throws.
 */

function reactProdInvariant(code) {
  var argCount = arguments.length - 1;

  var message = 'Minified React error #' + code + '; visit ' + 'http://facebook.github.io/react/docs/error-decoder.html?invariant=' + code;

  for (var argIdx = 0; argIdx < argCount; argIdx++) {
    message += '&args[]=' + encodeURIComponent(arguments[argIdx + 1]);
  }

  message += ' for the full message or use the non-minified dev environment' + ' for full errors and additional helpful warnings.';

  var error = new Error(message);
  error.name = 'Invariant Violation';
  error.framesToPop = 1; // we don't care about reactProdInvariant's own frame

  throw error;
}

module.exports = reactProdInvariant;

/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Created by zhiyongwang on 2016-04-25.
 */
var en = __webpack_require__(264);
var cn = __webpack_require__(265);

var Lang = {

  cn: cn,
  en: en

};

module.exports = Lang;

/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Created by zhiyongwang on 2016-03-24.
 */

module.exports = {
    email: /^[a-z0-9!#$%&'*+/=?^_`{|}~.-]+@[a-z0-9-]+(\.[a-z0-9-]+)*$/i,
    url: /^(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?$/,
    number: /^\s*(\-|\+)?(\d+|(\d*(\.\d*)))\s*$/,
    date: /^(\d{4})-(\d{2})-(\d{2})$/, //日期
    datetime: function datetime(s) {
        /// <summary>
        /// 日期时间验证 YYYY-MM-DD HH:MM:SS
        /// </summary>

        var value = s.match(/^(?:19|20)[0-9][0-9]-(?:(?:0[1-9])|(?:1[0-2]))-(?:(?:[0-2][1-9])|(?:[1-3][0-1])) (?:(?:[0-2][0-3])|(?:[0-1][0-9])):[0-5][0-9]:[0-5][0-9]$/);

        if (value == null) {
            return false;
        } else {

            return true;
        }
    },
    alpha: /^[a-z ._-]+$/i,
    alphanum: /^[a-z0-9_]+$/i,
    password: /^[\x00-\xff]+$/,
    integer: /^[-+]?[0-9]+$/,
    /*
     移动号段：
     134 135 136 137 138 139 147 150 151 152 157 158 159 172 178 182 183 184 187 188
     联通号段：
     130 131 132 145 155 156 171 175 176 185 186
     电信号段：
     133 149 153 173 177 180 181 189
     */
    mobile: /13\d{9}|15[01236789]\d{8}|14[579]\d{8}|15[012356789]\d{8}|17[1235678]\d[8]|18\d{9}/,
    idcard: function idcard(value) {
        //身份证号码
        //15位和18位身份证号码的正则表达式
        var regIdCard = /^(^[1-9]\d{7}((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])\d{3}$)|(^[1-9]\d{5}[1-9]\d{3}((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])((\d{4})|\d{3}[Xx])$)$/;

        //如果通过该验证，说明身份证格式正确，但准确性还需计算
        if (regIdCard.test(value)) {
            if (value.length == 18) {
                var idCardWi = new Array(7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2); //将前17位加权因子保存在数组里
                var idCardY = new Array(1, 0, 10, 9, 8, 7, 6, 5, 4, 3, 2); //这是除以11后，可能产生的11位余数、验证码，也保存成数组
                var idCardWiSum = 0; //用来保存前17位各自乖以加权因子后的总和
                for (var i = 0; i < 17; i++) {
                    idCardWiSum += value.substring(i, i + 1) * idCardWi[i];
                }

                var idCardMod = idCardWiSum % 11; //计算出校验码所在数组的位置
                var idCardLast = value.substring(17); //得到最后一位身份证号码

                //如果等于2，则说明校验码是10，身份证号码最后一位应该是X
                if (idCardMod == 2) {
                    if (idCardLast == "X" || idCardLast == "x") {
                        return true;
                    } else {
                        return false;
                    }
                } else {
                    //用计算出的验证码与最后一位身份证号码匹配，如果一致，说明通过，否则是无效的身份证号码
                    if (idCardLast == idCardY[idCardMod]) {
                        return true;
                    } else {
                        return false;
                    }
                }
            }
        } else {
            return false;
        }
    }

};

/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _prodInvariant = __webpack_require__(4);

var EventPluginRegistry = __webpack_require__(43);
var EventPluginUtils = __webpack_require__(61);
var ReactErrorUtils = __webpack_require__(65);

var accumulateInto = __webpack_require__(99);
var forEachAccumulated = __webpack_require__(100);
var invariant = __webpack_require__(2);

/**
 * Internal store for event listeners
 */
var listenerBank = {};

/**
 * Internal queue of events that have accumulated their dispatches and are
 * waiting to have their dispatches executed.
 */
var eventQueue = null;

/**
 * Dispatches an event and releases it back into the pool, unless persistent.
 *
 * @param {?object} event Synthetic event to be dispatched.
 * @param {boolean} simulated If the event is simulated (changes exn behavior)
 * @private
 */
var executeDispatchesAndRelease = function executeDispatchesAndRelease(event, simulated) {
  if (event) {
    EventPluginUtils.executeDispatchesInOrder(event, simulated);

    if (!event.isPersistent()) {
      event.constructor.release(event);
    }
  }
};
var executeDispatchesAndReleaseSimulated = function executeDispatchesAndReleaseSimulated(e) {
  return executeDispatchesAndRelease(e, true);
};
var executeDispatchesAndReleaseTopLevel = function executeDispatchesAndReleaseTopLevel(e) {
  return executeDispatchesAndRelease(e, false);
};

var getDictionaryKey = function getDictionaryKey(inst) {
  // Prevents V8 performance issue:
  // https://github.com/facebook/react/pull/7232
  return '.' + inst._rootNodeID;
};

function isInteractive(tag) {
  return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
}

function shouldPreventMouseEvent(name, type, props) {
  switch (name) {
    case 'onClick':
    case 'onClickCapture':
    case 'onDoubleClick':
    case 'onDoubleClickCapture':
    case 'onMouseDown':
    case 'onMouseDownCapture':
    case 'onMouseMove':
    case 'onMouseMoveCapture':
    case 'onMouseUp':
    case 'onMouseUpCapture':
      return !!(props.disabled && isInteractive(type));
    default:
      return false;
  }
}

/**
 * This is a unified interface for event plugins to be installed and configured.
 *
 * Event plugins can implement the following properties:
 *
 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
 *     Required. When a top-level event is fired, this method is expected to
 *     extract synthetic events that will in turn be queued and dispatched.
 *
 *   `eventTypes` {object}
 *     Optional, plugins that fire events must publish a mapping of registration
 *     names that are used to register listeners. Values of this mapping must
 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
 *
 *   `executeDispatch` {function(object, function, string)}
 *     Optional, allows plugins to override how an event gets dispatched. By
 *     default, the listener is simply invoked.
 *
 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
 *
 * @public
 */
var EventPluginHub = {
  /**
   * Methods for injecting dependencies.
   */
  injection: {
    /**
     * @param {array} InjectedEventPluginOrder
     * @public
     */
    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,

    /**
     * @param {object} injectedNamesToPlugins Map from names to plugin modules.
     */
    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName
  },

  /**
   * Stores `listener` at `listenerBank[registrationName][key]`. Is idempotent.
   *
   * @param {object} inst The instance, which is the source of events.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @param {function} listener The callback to store.
   */
  putListener: function putListener(inst, registrationName, listener) {
    !(typeof listener === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected %s listener to be a function, instead got type %s', registrationName, typeof listener === 'undefined' ? 'undefined' : _typeof(listener)) : _prodInvariant('94', registrationName, typeof listener === 'undefined' ? 'undefined' : _typeof(listener)) : void 0;

    var key = getDictionaryKey(inst);
    var bankForRegistrationName = listenerBank[registrationName] || (listenerBank[registrationName] = {});
    bankForRegistrationName[key] = listener;

    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
    if (PluginModule && PluginModule.didPutListener) {
      PluginModule.didPutListener(inst, registrationName, listener);
    }
  },

  /**
   * @param {object} inst The instance, which is the source of events.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @return {?function} The stored callback.
   */
  getListener: function getListener(inst, registrationName) {
    // TODO: shouldPreventMouseEvent is DOM-specific and definitely should not
    // live here; needs to be moved to a better place soon
    var bankForRegistrationName = listenerBank[registrationName];
    if (shouldPreventMouseEvent(registrationName, inst._currentElement.type, inst._currentElement.props)) {
      return null;
    }
    var key = getDictionaryKey(inst);
    return bankForRegistrationName && bankForRegistrationName[key];
  },

  /**
   * Deletes a listener from the registration bank.
   *
   * @param {object} inst The instance, which is the source of events.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   */
  deleteListener: function deleteListener(inst, registrationName) {
    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
    if (PluginModule && PluginModule.willDeleteListener) {
      PluginModule.willDeleteListener(inst, registrationName);
    }

    var bankForRegistrationName = listenerBank[registrationName];
    // TODO: This should never be null -- when is it?
    if (bankForRegistrationName) {
      var key = getDictionaryKey(inst);
      delete bankForRegistrationName[key];
    }
  },

  /**
   * Deletes all listeners for the DOM element with the supplied ID.
   *
   * @param {object} inst The instance, which is the source of events.
   */
  deleteAllListeners: function deleteAllListeners(inst) {
    var key = getDictionaryKey(inst);
    for (var registrationName in listenerBank) {
      if (!listenerBank.hasOwnProperty(registrationName)) {
        continue;
      }

      if (!listenerBank[registrationName][key]) {
        continue;
      }

      var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
      if (PluginModule && PluginModule.willDeleteListener) {
        PluginModule.willDeleteListener(inst, registrationName);
      }

      delete listenerBank[registrationName][key];
    }
  },

  /**
   * Allows registered plugins an opportunity to extract events from top-level
   * native browser events.
   *
   * @return {*} An accumulation of synthetic events.
   * @internal
   */
  extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    var events;
    var plugins = EventPluginRegistry.plugins;
    for (var i = 0; i < plugins.length; i++) {
      // Not every plugin in the ordering may be loaded at runtime.
      var possiblePlugin = plugins[i];
      if (possiblePlugin) {
        var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
        if (extractedEvents) {
          events = accumulateInto(events, extractedEvents);
        }
      }
    }
    return events;
  },

  /**
   * Enqueues a synthetic event that should be dispatched when
   * `processEventQueue` is invoked.
   *
   * @param {*} events An accumulation of synthetic events.
   * @internal
   */
  enqueueEvents: function enqueueEvents(events) {
    if (events) {
      eventQueue = accumulateInto(eventQueue, events);
    }
  },

  /**
   * Dispatches all synthetic events on the event queue.
   *
   * @internal
   */
  processEventQueue: function processEventQueue(simulated) {
    // Set `eventQueue` to null before processing it so that we can tell if more
    // events get enqueued while processing.
    var processingEventQueue = eventQueue;
    eventQueue = null;
    if (simulated) {
      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseSimulated);
    } else {
      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);
    }
    !!eventQueue ? process.env.NODE_ENV !== 'production' ? invariant(false, 'processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented.') : _prodInvariant('95') : void 0;
    // This would be a good time to rethrow if any of the event handlers threw.
    ReactErrorUtils.rethrowCaughtError();
  },

  /**
   * These are needed for tests only. Do not use!
   */
  __purge: function __purge() {
    listenerBank = {};
  },

  __getListenerBank: function __getListenerBank() {
    return listenerBank;
  }
};

module.exports = EventPluginHub;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var EventPluginHub = __webpack_require__(36);
var EventPluginUtils = __webpack_require__(61);

var accumulateInto = __webpack_require__(99);
var forEachAccumulated = __webpack_require__(100);
var warning = __webpack_require__(3);

var getListener = EventPluginHub.getListener;

/**
 * Some event types have a notion of different registration names for different
 * "phases" of propagation. This finds listeners by a given phase.
 */
function listenerAtPhase(inst, event, propagationPhase) {
  var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
  return getListener(inst, registrationName);
}

/**
 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
 * here, allows us to not have to bind or create functions for each event.
 * Mutating the event's members allows us to not have to create a wrapping
 * "dispatch" object that pairs the event with the listener.
 */
function accumulateDirectionalDispatches(inst, phase, event) {
  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(inst, 'Dispatching inst must not be null') : void 0;
  }
  var listener = listenerAtPhase(inst, event, phase);
  if (listener) {
    event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
    event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
  }
}

/**
 * Collect dispatches (must be entirely collected before dispatching - see unit
 * tests). Lazily allocate the array to conserve memory.  We must loop through
 * each event and perform the traversal for each one. We cannot perform a
 * single traversal for the entire collection of events because each event may
 * have a different target.
 */
function accumulateTwoPhaseDispatchesSingle(event) {
  if (event && event.dispatchConfig.phasedRegistrationNames) {
    EventPluginUtils.traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
  }
}

/**
 * Same as `accumulateTwoPhaseDispatchesSingle`, but skips over the targetID.
 */
function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
  if (event && event.dispatchConfig.phasedRegistrationNames) {
    var targetInst = event._targetInst;
    var parentInst = targetInst ? EventPluginUtils.getParentInstance(targetInst) : null;
    EventPluginUtils.traverseTwoPhase(parentInst, accumulateDirectionalDispatches, event);
  }
}

/**
 * Accumulates without regard to direction, does not look for phased
 * registration names. Same as `accumulateDirectDispatchesSingle` but without
 * requiring that the `dispatchMarker` be the same as the dispatched ID.
 */
function accumulateDispatches(inst, ignoredDirection, event) {
  if (event && event.dispatchConfig.registrationName) {
    var registrationName = event.dispatchConfig.registrationName;
    var listener = getListener(inst, registrationName);
    if (listener) {
      event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
      event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
    }
  }
}

/**
 * Accumulates dispatches on an `SyntheticEvent`, but only for the
 * `dispatchMarker`.
 * @param {SyntheticEvent} event
 */
function accumulateDirectDispatchesSingle(event) {
  if (event && event.dispatchConfig.registrationName) {
    accumulateDispatches(event._targetInst, null, event);
  }
}

function accumulateTwoPhaseDispatches(events) {
  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
}

function accumulateTwoPhaseDispatchesSkipTarget(events) {
  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingleSkipTarget);
}

function accumulateEnterLeaveDispatches(leave, enter, from, to) {
  EventPluginUtils.traverseEnterLeave(from, to, accumulateDispatches, leave, enter);
}

function accumulateDirectDispatches(events) {
  forEachAccumulated(events, accumulateDirectDispatchesSingle);
}

/**
 * A small set of propagation patterns, each of which will accept a small amount
 * of information, and generate a set of "dispatch ready event objects" - which
 * are sets of events that have already been annotated with a set of dispatched
 * listener functions/ids. The API is designed this way to discourage these
 * propagation strategies from actually executing the dispatches, since we
 * always want to collect the entire set of dispatches before executing event a
 * single one.
 *
 * @constructor EventPropagators
 */
var EventPropagators = {
  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
  accumulateTwoPhaseDispatchesSkipTarget: accumulateTwoPhaseDispatchesSkipTarget,
  accumulateDirectDispatches: accumulateDirectDispatches,
  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
};

module.exports = EventPropagators;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



/**
 * `ReactInstanceMap` maintains a mapping from a public facing stateful
 * instance (key) and the internal representation (value). This allows public
 * methods to accept the user facing instance as an argument and map them back
 * to internal methods.
 */

// TODO: Replace this with ES6: var ReactInstanceMap = new Map();

var ReactInstanceMap = {
  /**
   * This API should be called `delete` but we'd have to make sure to always
   * transform these to strings for IE support. When this transform is fully
   * supported we can rename it.
   */
  remove: function remove(key) {
    key._reactInternalInstance = undefined;
  },

  get: function get(key) {
    return key._reactInternalInstance;
  },

  has: function has(key) {
    return key._reactInternalInstance !== undefined;
  },

  set: function set(key, value) {
    key._reactInternalInstance = value;
  }
};

module.exports = ReactInstanceMap;

/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var SyntheticEvent = __webpack_require__(24);

var getEventTarget = __webpack_require__(70);

/**
 * @interface UIEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var UIEventInterface = {
  view: function view(event) {
    if (event.view) {
      return event.view;
    }

    var target = getEventTarget(event);
    if (target.window === target) {
      // target is a window object
      return target;
    }

    var doc = target.ownerDocument;
    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
    if (doc) {
      return doc.defaultView || doc.parentWindow;
    } else {
      return window;
    }
  },
  detail: function detail(event) {
    return event.detail || 0;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticEvent}
 */
function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);

module.exports = SyntheticUIEvent;

/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*
 create by wangzy
 date:2016-06-12
 desc:时间选择组件
 */
__webpack_require__(41);
var React = __webpack_require__(1);
var Time = React.createClass({
    displayName: "Time",

    propTypes: {
        name: React.PropTypes.string, //表单字段名称
        hour: React.PropTypes.number, //小时
        minute: React.PropTypes.number, //分钟
        second: React.PropTypes.number //秒

    },
    getDefaultProps: function getDefaultProps() {
        var date = new Date();
        return {
            hour: date.getHours(),
            minute: date.getMinutes(),
            second: date.getSeconds()
        };
    },
    getInitialState: function getInitialState() {
        return this.setInitValue(this.props);
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        /*
           */
        var result = this.setInitValue(nextProps);
        result.height = this.state.height; //高度仍用旧值，因为选择时回传父组件，还不需要消失
        this.setState(result);
        //滚动到指定位置
        this.refs.hour.scrollTop = result.hour * 24;
        this.refs.minute.scrollTop = result.minute * 24;
        this.refs.second.scrollTop = result.second * 24;
    },
    componentDidMount: function componentDidMount() {
        //滚动到指定位置
        this.refs.hour.scrollTop = this.state.hour * 24;
        this.refs.minute.scrollTop = this.state.minute * 24;
        this.refs.second.scrollTop = this.state.second * 24;
    },
    setInitValue: function setInitValue(props) {
        var date = new Date();

        var hour = props.hour != null && props.hour != undefined ? props.hour : date.getHours();
        var minute = props.minute != null && props.minute != undefined ? props.minute : date.getMinutes();
        var second = props.second != null && props.second != undefined ? props.second : date.getSeconds();
        return {
            hour: hour < 10 ? "0" + hour : hour,
            minute: minute < 10 ? "0" + minute : minute,
            second: second < 10 ? "0" + second : second,
            height: 0 //
        };
    },
    hourHandler: function hourHandler(value, tran) {
        var lastScrollTop = value * 24;
        this.scrollHandler(this.refs.hour, this.refs.hour.scrollTop, lastScrollTop, tran);
        this.refs.hour.style.backgroundColor = "red";
        this.setState({
            hour: value
        });
        if (this.props.onSelect != null) {
            this.props.onSelect(value + ":" + this.state.minute + ":" + this.state.second, value + ":" + this.state.minute + ":" + this.state.second, this.props.name, null);
        }
    },
    minuteHandler: function minuteHandler(value, tran) {
        var lastScrollTop = value * 24;
        this.scrollHandler(this.refs.minute, this.refs.minute.scrollTop, lastScrollTop, tran);
        this.setState({
            minute: value
        });
        if (this.props.onSelect != null) {
            this.props.onSelect(this.state.hour + ":" + value + ":" + this.state.second, this.state.hour + ":" + value + ":" + this.state.second, this.props.name, null);
        }
    },
    secondHandler: function secondHandler(value, tran) {

        var lastScrollTop = value * 24;
        this.scrollHandler(this.refs.second, this.refs.second.scrollTop, lastScrollTop, tran);
        this.setState({
            second: value
        });
        if (this.props.onSelect != null) {
            this.props.onSelect(this.state.hour + ":" + this.state.minute + ":" + value, this.state.hour + ":" + this.state.minute + ":" + value, this.props.name, null);
        }
    },
    scrollHandler: function scrollHandler(obj, scrollTop, lastScrollTop, tran) {
        var _this = this;

        obj.scrollTop = scrollTop;
        if (scrollTop < lastScrollTop) {
            setTimeout(function () {
                _this.scrollHandler(obj, scrollTop + 24, lastScrollTop, tran);
            }, tran);
        }
    },
    mouseOutHandler: function mouseOutHandler(event) {
        var _this2 = this;

        //鼠标移开时隐藏下拉
        var parentE = event.relatedTarget; //相关节点
        while (parentE && parentE.nodeName != "BODY") {
            if (parentE.className.indexOf("wasabi-time-picker-panel-inner") > -1) {
                break;
            }
            parentE = parentE.parentElement;
        }

        if (parentE == undefined || parentE == null || parentE.nodeName == "BODY") {
            setTimeout(function () {
                _this2.setState({
                    height: 0
                });
            }, 200);
        }
    },
    renderHour: function renderHour() {
        var hourControl = [];
        for (var index = 0; index < 24; index++) {
            var currentHour = index < 10 ? "0" + index : index;
            hourControl.push(React.createElement(
                "li",
                { onClick: this.hourHandler.bind(this, currentHour, 70), key: "hour" + currentHour,
                    className: this.state.hour == currentHour ? "wasabi-time-picker-panel-select-option-selected" : null },
                currentHour
            ));
        }
        for (var _index = 0; _index < 5; _index++) {
            hourControl.push(React.createElement("li", { key: "nohour" + _index }));
        }
        return hourControl;
    },
    rendMinute: function rendMinute() {
        var minuteControl = [];
        for (var index = 0; index < 60; index++) {
            var currentMinute = index < 10 ? "0" + index : index;
            minuteControl.push(React.createElement(
                "li",
                { key: "minute" + currentMinute, onClick: this.minuteHandler.bind(this, currentMinute, 70),
                    className: this.state.minute == currentMinute ? "wasabi-time-picker-panel-select-option-selected" : null },
                currentMinute
            ));
        }
        for (var _index2 = 0; _index2 < 5; _index2++) {
            minuteControl.push(React.createElement("li", { key: "nominute" + _index2 }));
        }
        return minuteControl;
    },
    rendSecond: function rendSecond() {
        var secondControl = [];
        for (var index = 0; index < 60; index++) {
            var currentSecond = index < 10 ? "0" + index : index;
            secondControl.push(React.createElement(
                "li",
                { key: "second" + currentSecond, onClick: this.secondHandler.bind(this, currentSecond, 70),
                    className: this.state.second == currentSecond ? "wasabi-time-picker-panel-select-option-selected" : null },
                currentSecond
            ));
        }
        for (var _index3 = 0; _index3 < 5; _index3++) {
            secondControl.push(React.createElement("li", { key: "nosecond" + _index3 }));
        }
        return secondControl;
    },

    getValue: function getValue() {
        return this.state.hour + ":" + this.state.minute + ":" + this.state.second;
    },
    showHandler: function showHandler() {
        this.setState({
            height: 146

        });
    },
    changeHandler: function changeHandler() {},
    render: function render() {

        return React.createElement(
            "div",
            { className: "wasabi-time-picker-panel-inner", onMouseOut: this.mouseOutHandler },
            React.createElement(
                "div",
                { className: "wasabi-time-picker-panel-input-wrap" },
                React.createElement("input", { className: "wasabi-time-picker-panel-input wasabi-form-control ",
                    onClick: this.showHandler, onChange: this.changeHandler, value: this.state.hour + ":" + this.state.minute + ":" + this.state.second, placeholder: "\u8BF7\u9009\u62E9\u65F6\u95F4" })
            ),
            React.createElement(
                "div",
                { className: "wasabi-time-picker-panel-combobox", style: { height: this.state.height } },
                React.createElement(
                    "div",
                    { ref: "hour", key: "hour", className: "wasabi-time-picker-panel-select" },
                    React.createElement(
                        "ul",
                        { key: "hour" },
                        this.renderHour(),
                        " "
                    )
                ),
                React.createElement(
                    "div",
                    { ref: "minute", key: "minute", className: "wasabi-time-picker-panel-select" },
                    React.createElement(
                        "ul",
                        { key: "minute" },
                        this.rendMinute()
                    )
                ),
                React.createElement(
                    "div",
                    { ref: "second", key: "second", className: "wasabi-time-picker-panel-select" },
                    React.createElement(
                        "ul",
                        { key: "second" },
                        this.rendSecond()
                    )
                )
            )
        );
    }
});
module.exports = Time;

/***/ }),
/* 41 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var emptyObject = {};

if (process.env.NODE_ENV !== 'production') {
  Object.freeze(emptyObject);
}

module.exports = emptyObject;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var _prodInvariant = __webpack_require__(4);

var invariant = __webpack_require__(2);

/**
 * Injectable ordering of event plugins.
 */
var eventPluginOrder = null;

/**
 * Injectable mapping from names to event plugin modules.
 */
var namesToPlugins = {};

/**
 * Recomputes the plugin list using the injected plugins and plugin ordering.
 *
 * @private
 */
function recomputePluginOrdering() {
  if (!eventPluginOrder) {
    // Wait until an `eventPluginOrder` is injected.
    return;
  }
  for (var pluginName in namesToPlugins) {
    var pluginModule = namesToPlugins[pluginName];
    var pluginIndex = eventPluginOrder.indexOf(pluginName);
    !(pluginIndex > -1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `%s`.', pluginName) : _prodInvariant('96', pluginName) : void 0;
    if (EventPluginRegistry.plugins[pluginIndex]) {
      continue;
    }
    !pluginModule.extractEvents ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `%s` does not.', pluginName) : _prodInvariant('97', pluginName) : void 0;
    EventPluginRegistry.plugins[pluginIndex] = pluginModule;
    var publishedEvents = pluginModule.eventTypes;
    for (var eventName in publishedEvents) {
      !publishEventForPlugin(publishedEvents[eventName], pluginModule, eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName) : _prodInvariant('98', eventName, pluginName) : void 0;
    }
  }
}

/**
 * Publishes an event so that it can be dispatched by the supplied plugin.
 *
 * @param {object} dispatchConfig Dispatch configuration for the event.
 * @param {object} PluginModule Plugin publishing the event.
 * @return {boolean} True if the event was successfully published.
 * @private
 */
function publishEventForPlugin(dispatchConfig, pluginModule, eventName) {
  !!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same event name, `%s`.', eventName) : _prodInvariant('99', eventName) : void 0;
  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;

  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
  if (phasedRegistrationNames) {
    for (var phaseName in phasedRegistrationNames) {
      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
        var phasedRegistrationName = phasedRegistrationNames[phaseName];
        publishRegistrationName(phasedRegistrationName, pluginModule, eventName);
      }
    }
    return true;
  } else if (dispatchConfig.registrationName) {
    publishRegistrationName(dispatchConfig.registrationName, pluginModule, eventName);
    return true;
  }
  return false;
}

/**
 * Publishes a registration name that is used to identify dispatched events and
 * can be used with `EventPluginHub.putListener` to register listeners.
 *
 * @param {string} registrationName Registration name to add.
 * @param {object} PluginModule Plugin publishing the event.
 * @private
 */
function publishRegistrationName(registrationName, pluginModule, eventName) {
  !!EventPluginRegistry.registrationNameModules[registrationName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same registration name, `%s`.', registrationName) : _prodInvariant('100', registrationName) : void 0;
  EventPluginRegistry.registrationNameModules[registrationName] = pluginModule;
  EventPluginRegistry.registrationNameDependencies[registrationName] = pluginModule.eventTypes[eventName].dependencies;

  if (process.env.NODE_ENV !== 'production') {
    var lowerCasedName = registrationName.toLowerCase();
    EventPluginRegistry.possibleRegistrationNames[lowerCasedName] = registrationName;

    if (registrationName === 'onDoubleClick') {
      EventPluginRegistry.possibleRegistrationNames.ondblclick = registrationName;
    }
  }
}

/**
 * Registers plugins so that they can extract and dispatch events.
 *
 * @see {EventPluginHub}
 */
var EventPluginRegistry = {
  /**
   * Ordered list of injected plugins.
   */
  plugins: [],

  /**
   * Mapping from event name to dispatch config
   */
  eventNameDispatchConfigs: {},

  /**
   * Mapping from registration name to plugin module
   */
  registrationNameModules: {},

  /**
   * Mapping from registration name to event name
   */
  registrationNameDependencies: {},

  /**
   * Mapping from lowercase registration names to the properly cased version,
   * used to warn in the case of missing event handlers. Available
   * only in __DEV__.
   * @type {Object}
   */
  possibleRegistrationNames: process.env.NODE_ENV !== 'production' ? {} : null,
  // Trust the developer to only use possibleRegistrationNames in __DEV__

  /**
   * Injects an ordering of plugins (by plugin name). This allows the ordering
   * to be decoupled from injection of the actual plugins so that ordering is
   * always deterministic regardless of packaging, on-the-fly injection, etc.
   *
   * @param {array} InjectedEventPluginOrder
   * @internal
   * @see {EventPluginHub.injection.injectEventPluginOrder}
   */
  injectEventPluginOrder: function injectEventPluginOrder(injectedEventPluginOrder) {
    !!eventPluginOrder ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.') : _prodInvariant('101') : void 0;
    // Clone the ordering so it cannot be dynamically mutated.
    eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);
    recomputePluginOrdering();
  },

  /**
   * Injects plugins to be used by `EventPluginHub`. The plugin names must be
   * in the ordering injected by `injectEventPluginOrder`.
   *
   * Plugins can be injected as part of page initialization or on-the-fly.
   *
   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
   * @internal
   * @see {EventPluginHub.injection.injectEventPluginsByName}
   */
  injectEventPluginsByName: function injectEventPluginsByName(injectedNamesToPlugins) {
    var isOrderingDirty = false;
    for (var pluginName in injectedNamesToPlugins) {
      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
        continue;
      }
      var pluginModule = injectedNamesToPlugins[pluginName];
      if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== pluginModule) {
        !!namesToPlugins[pluginName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject two different event plugins using the same name, `%s`.', pluginName) : _prodInvariant('102', pluginName) : void 0;
        namesToPlugins[pluginName] = pluginModule;
        isOrderingDirty = true;
      }
    }
    if (isOrderingDirty) {
      recomputePluginOrdering();
    }
  },

  /**
   * Looks up the plugin for the supplied event.
   *
   * @param {object} event A synthetic event.
   * @return {?object} The plugin that created the supplied event.
   * @internal
   */
  getPluginModuleForEvent: function getPluginModuleForEvent(event) {
    var dispatchConfig = event.dispatchConfig;
    if (dispatchConfig.registrationName) {
      return EventPluginRegistry.registrationNameModules[dispatchConfig.registrationName] || null;
    }
    if (dispatchConfig.phasedRegistrationNames !== undefined) {
      // pulling phasedRegistrationNames out of dispatchConfig helps Flow see
      // that it is not undefined.
      var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;

      for (var phase in phasedRegistrationNames) {
        if (!phasedRegistrationNames.hasOwnProperty(phase)) {
          continue;
        }
        var pluginModule = EventPluginRegistry.registrationNameModules[phasedRegistrationNames[phase]];
        if (pluginModule) {
          return pluginModule;
        }
      }
    }
    return null;
  },

  /**
   * Exposed for unit testing.
   * @private
   */
  _resetEventPlugins: function _resetEventPlugins() {
    eventPluginOrder = null;
    for (var pluginName in namesToPlugins) {
      if (namesToPlugins.hasOwnProperty(pluginName)) {
        delete namesToPlugins[pluginName];
      }
    }
    EventPluginRegistry.plugins.length = 0;

    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
    for (var eventName in eventNameDispatchConfigs) {
      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {
        delete eventNameDispatchConfigs[eventName];
      }
    }

    var registrationNameModules = EventPluginRegistry.registrationNameModules;
    for (var registrationName in registrationNameModules) {
      if (registrationNameModules.hasOwnProperty(registrationName)) {
        delete registrationNameModules[registrationName];
      }
    }

    if (process.env.NODE_ENV !== 'production') {
      var possibleRegistrationNames = EventPluginRegistry.possibleRegistrationNames;
      for (var lowerCasedName in possibleRegistrationNames) {
        if (possibleRegistrationNames.hasOwnProperty(lowerCasedName)) {
          delete possibleRegistrationNames[lowerCasedName];
        }
      }
    }
  }
};

module.exports = EventPluginRegistry;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(6);

var EventPluginRegistry = __webpack_require__(43);
var ReactEventEmitterMixin = __webpack_require__(200);
var ViewportMetrics = __webpack_require__(98);

var getVendorPrefixedEventName = __webpack_require__(235);
var isEventSupported = __webpack_require__(71);

/**
 * Summary of `ReactBrowserEventEmitter` event handling:
 *
 *  - Top-level delegation is used to trap most native browser events. This
 *    may only occur in the main thread and is the responsibility of
 *    ReactEventListener, which is injected and can therefore support pluggable
 *    event sources. This is the only work that occurs in the main thread.
 *
 *  - We normalize and de-duplicate events to account for browser quirks. This
 *    may be done in the worker thread.
 *
 *  - Forward these native events (with the associated top-level type used to
 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
 *    to extract any synthetic events.
 *
 *  - The `EventPluginHub` will then process each event by annotating them with
 *    "dispatches", a sequence of listeners and IDs that care about that event.
 *
 *  - The `EventPluginHub` then dispatches the events.
 *
 * Overview of React and the event system:
 *
 * +------------+    .
 * |    DOM     |    .
 * +------------+    .
 *       |           .
 *       v           .
 * +------------+    .
 * | ReactEvent |    .
 * |  Listener  |    .
 * +------------+    .                         +-----------+
 *       |           .               +--------+|SimpleEvent|
 *       |           .               |         |Plugin     |
 * +-----|------+    .               v         +-----------+
 * |     |      |    .    +--------------+                    +------------+
 * |     +-----------.--->|EventPluginHub|                    |    Event   |
 * |            |    .    |              |     +-----------+  | Propagators|
 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
 * |            |    .    |              |     +-----------+  |  utilities |
 * |     +-----------.--->|              |                    +------------+
 * |     |      |    .    +--------------+
 * +-----|------+    .                ^        +-----------+
 *       |           .                |        |Enter/Leave|
 *       +           .                +-------+|Plugin     |
 * +-------------+   .                         +-----------+
 * | application |   .
 * |-------------|   .
 * |             |   .
 * |             |   .
 * +-------------+   .
 *                   .
 *    React Core     .  General Purpose Event Plugin System
 */

var hasEventPageXY;
var alreadyListeningTo = {};
var isMonitoringScrollValue = false;
var reactTopListenersCounter = 0;

// For events like 'submit' which don't consistently bubble (which we trap at a
// lower node than `document`), binding at `document` would cause duplicate
// events so we don't include them here
var topEventMapping = {
  topAbort: 'abort',
  topAnimationEnd: getVendorPrefixedEventName('animationend') || 'animationend',
  topAnimationIteration: getVendorPrefixedEventName('animationiteration') || 'animationiteration',
  topAnimationStart: getVendorPrefixedEventName('animationstart') || 'animationstart',
  topBlur: 'blur',
  topCanPlay: 'canplay',
  topCanPlayThrough: 'canplaythrough',
  topChange: 'change',
  topClick: 'click',
  topCompositionEnd: 'compositionend',
  topCompositionStart: 'compositionstart',
  topCompositionUpdate: 'compositionupdate',
  topContextMenu: 'contextmenu',
  topCopy: 'copy',
  topCut: 'cut',
  topDoubleClick: 'dblclick',
  topDrag: 'drag',
  topDragEnd: 'dragend',
  topDragEnter: 'dragenter',
  topDragExit: 'dragexit',
  topDragLeave: 'dragleave',
  topDragOver: 'dragover',
  topDragStart: 'dragstart',
  topDrop: 'drop',
  topDurationChange: 'durationchange',
  topEmptied: 'emptied',
  topEncrypted: 'encrypted',
  topEnded: 'ended',
  topError: 'error',
  topFocus: 'focus',
  topInput: 'input',
  topKeyDown: 'keydown',
  topKeyPress: 'keypress',
  topKeyUp: 'keyup',
  topLoadedData: 'loadeddata',
  topLoadedMetadata: 'loadedmetadata',
  topLoadStart: 'loadstart',
  topMouseDown: 'mousedown',
  topMouseMove: 'mousemove',
  topMouseOut: 'mouseout',
  topMouseOver: 'mouseover',
  topMouseUp: 'mouseup',
  topPaste: 'paste',
  topPause: 'pause',
  topPlay: 'play',
  topPlaying: 'playing',
  topProgress: 'progress',
  topRateChange: 'ratechange',
  topScroll: 'scroll',
  topSeeked: 'seeked',
  topSeeking: 'seeking',
  topSelectionChange: 'selectionchange',
  topStalled: 'stalled',
  topSuspend: 'suspend',
  topTextInput: 'textInput',
  topTimeUpdate: 'timeupdate',
  topTouchCancel: 'touchcancel',
  topTouchEnd: 'touchend',
  topTouchMove: 'touchmove',
  topTouchStart: 'touchstart',
  topTransitionEnd: getVendorPrefixedEventName('transitionend') || 'transitionend',
  topVolumeChange: 'volumechange',
  topWaiting: 'waiting',
  topWheel: 'wheel'
};

/**
 * To ensure no conflicts with other potential React instances on the page
 */
var topListenersIDKey = '_reactListenersID' + String(Math.random()).slice(2);

function getListeningForDocument(mountAt) {
  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
  // directly.
  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
    mountAt[topListenersIDKey] = reactTopListenersCounter++;
    alreadyListeningTo[mountAt[topListenersIDKey]] = {};
  }
  return alreadyListeningTo[mountAt[topListenersIDKey]];
}

/**
 * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For
 * example:
 *
 *   EventPluginHub.putListener('myID', 'onClick', myFunction);
 *
 * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.
 *
 * @internal
 */
var ReactBrowserEventEmitter = _assign({}, ReactEventEmitterMixin, {
  /**
   * Injectable event backend
   */
  ReactEventListener: null,

  injection: {
    /**
     * @param {object} ReactEventListener
     */
    injectReactEventListener: function injectReactEventListener(ReactEventListener) {
      ReactEventListener.setHandleTopLevel(ReactBrowserEventEmitter.handleTopLevel);
      ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;
    }
  },

  /**
   * Sets whether or not any created callbacks should be enabled.
   *
   * @param {boolean} enabled True if callbacks should be enabled.
   */
  setEnabled: function setEnabled(enabled) {
    if (ReactBrowserEventEmitter.ReactEventListener) {
      ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);
    }
  },

  /**
   * @return {boolean} True if callbacks are enabled.
   */
  isEnabled: function isEnabled() {
    return !!(ReactBrowserEventEmitter.ReactEventListener && ReactBrowserEventEmitter.ReactEventListener.isEnabled());
  },

  /**
   * We listen for bubbled touch events on the document object.
   *
   * Firefox v8.01 (and possibly others) exhibited strange behavior when
   * mounting `onmousemove` events at some node that was not the document
   * element. The symptoms were that if your mouse is not moving over something
   * contained within that mount point (for example on the background) the
   * top-level listeners for `onmousemove` won't be called. However, if you
   * register the `mousemove` on the document object, then it will of course
   * catch all `mousemove`s. This along with iOS quirks, justifies restricting
   * top-level listeners to the document object only, at least for these
   * movement types of events and possibly all events.
   *
   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
   *
   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
   * they bubble to document.
   *
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @param {object} contentDocumentHandle Document which owns the container
   */
  listenTo: function listenTo(registrationName, contentDocumentHandle) {
    var mountAt = contentDocumentHandle;
    var isListening = getListeningForDocument(mountAt);
    var dependencies = EventPluginRegistry.registrationNameDependencies[registrationName];

    for (var i = 0; i < dependencies.length; i++) {
      var dependency = dependencies[i];
      if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
        if (dependency === 'topWheel') {
          if (isEventSupported('wheel')) {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topWheel', 'wheel', mountAt);
          } else if (isEventSupported('mousewheel')) {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topWheel', 'mousewheel', mountAt);
          } else {
            // Firefox needs to capture a different mouse scroll event.
            // @see http://www.quirksmode.org/dom/events/tests/scroll.html
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topWheel', 'DOMMouseScroll', mountAt);
          }
        } else if (dependency === 'topScroll') {
          if (isEventSupported('scroll', true)) {
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent('topScroll', 'scroll', mountAt);
          } else {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topScroll', 'scroll', ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE);
          }
        } else if (dependency === 'topFocus' || dependency === 'topBlur') {
          if (isEventSupported('focus', true)) {
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent('topFocus', 'focus', mountAt);
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent('topBlur', 'blur', mountAt);
          } else if (isEventSupported('focusin')) {
            // IE has `focusin` and `focusout` events which bubble.
            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topFocus', 'focusin', mountAt);
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topBlur', 'focusout', mountAt);
          }

          // to make sure blur and focus event listeners are only attached once
          isListening.topBlur = true;
          isListening.topFocus = true;
        } else if (topEventMapping.hasOwnProperty(dependency)) {
          ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(dependency, topEventMapping[dependency], mountAt);
        }

        isListening[dependency] = true;
      }
    }
  },

  trapBubbledEvent: function trapBubbledEvent(topLevelType, handlerBaseName, handle) {
    return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelType, handlerBaseName, handle);
  },

  trapCapturedEvent: function trapCapturedEvent(topLevelType, handlerBaseName, handle) {
    return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelType, handlerBaseName, handle);
  },

  /**
   * Protect against document.createEvent() returning null
   * Some popup blocker extensions appear to do this:
   * https://github.com/facebook/react/issues/6887
   */
  supportsEventPageXY: function supportsEventPageXY() {
    if (!document.createEvent) {
      return false;
    }
    var ev = document.createEvent('MouseEvent');
    return ev != null && 'pageX' in ev;
  },

  /**
   * Listens to window scroll and resize events. We cache scroll values so that
   * application code can access them without triggering reflows.
   *
   * ViewportMetrics is only used by SyntheticMouse/TouchEvent and only when
   * pageX/pageY isn't supported (legacy browsers).
   *
   * NOTE: Scroll events do not bubble.
   *
   * @see http://www.quirksmode.org/dom/events/scroll.html
   */
  ensureScrollValueMonitoring: function ensureScrollValueMonitoring() {
    if (hasEventPageXY === undefined) {
      hasEventPageXY = ReactBrowserEventEmitter.supportsEventPageXY();
    }
    if (!hasEventPageXY && !isMonitoringScrollValue) {
      var refresh = ViewportMetrics.refreshScrollValues;
      ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);
      isMonitoringScrollValue = true;
    }
  }
});

module.exports = ReactBrowserEventEmitter;

/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var SyntheticUIEvent = __webpack_require__(39);
var ViewportMetrics = __webpack_require__(98);

var getEventModifierState = __webpack_require__(69);

/**
 * @interface MouseEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var MouseEventInterface = {
  screenX: null,
  screenY: null,
  clientX: null,
  clientY: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  getModifierState: getEventModifierState,
  button: function button(event) {
    // Webkit, Firefox, IE9+
    // which:  1 2 3
    // button: 0 1 2 (standard)
    var button = event.button;
    if ('which' in event) {
      return button;
    }
    // IE<9
    // which:  undefined
    // button: 0 0 0
    // button: 1 4 2 (onmouseup)
    return button === 2 ? 2 : button === 4 ? 1 : 0;
  },
  buttons: null,
  relatedTarget: function relatedTarget(event) {
    return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);
  },
  // "Proprietary" Interface.
  pageX: function pageX(event) {
    return 'pageX' in event ? event.pageX : event.clientX + ViewportMetrics.currentScrollLeft;
  },
  pageY: function pageY(event) {
    return 'pageY' in event ? event.pageY : event.clientY + ViewportMetrics.currentScrollTop;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);

module.exports = SyntheticMouseEvent;

/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var _prodInvariant = __webpack_require__(4);

var invariant = __webpack_require__(2);

var OBSERVED_ERROR = {};

/**
 * `Transaction` creates a black box that is able to wrap any method such that
 * certain invariants are maintained before and after the method is invoked
 * (Even if an exception is thrown while invoking the wrapped method). Whoever
 * instantiates a transaction can provide enforcers of the invariants at
 * creation time. The `Transaction` class itself will supply one additional
 * automatic invariant for you - the invariant that any transaction instance
 * should not be run while it is already being run. You would typically create a
 * single instance of a `Transaction` for reuse multiple times, that potentially
 * is used to wrap several different methods. Wrappers are extremely simple -
 * they only require implementing two methods.
 *
 * <pre>
 *                       wrappers (injected at creation time)
 *                                      +        +
 *                                      |        |
 *                    +-----------------|--------|--------------+
 *                    |                 v        |              |
 *                    |      +---------------+   |              |
 *                    |   +--|    wrapper1   |---|----+         |
 *                    |   |  +---------------+   v    |         |
 *                    |   |          +-------------+  |         |
 *                    |   |     +----|   wrapper2  |--------+   |
 *                    |   |     |    +-------------+  |     |   |
 *                    |   |     |                     |     |   |
 *                    |   v     v                     v     v   | wrapper
 *                    | +---+ +---+   +---------+   +---+ +---+ | invariants
 * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained
 * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | +---+ +---+   +---------+   +---+ +---+ |
 *                    |  initialize                    close    |
 *                    +-----------------------------------------+
 * </pre>
 *
 * Use cases:
 * - Preserving the input selection ranges before/after reconciliation.
 *   Restoring selection even in the event of an unexpected error.
 * - Deactivating events while rearranging the DOM, preventing blurs/focuses,
 *   while guaranteeing that afterwards, the event system is reactivated.
 * - Flushing a queue of collected DOM mutations to the main UI thread after a
 *   reconciliation takes place in a worker thread.
 * - Invoking any collected `componentDidUpdate` callbacks after rendering new
 *   content.
 * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue
 *   to preserve the `scrollTop` (an automatic scroll aware DOM).
 * - (Future use case): Layout calculations before and after DOM updates.
 *
 * Transactional plugin API:
 * - A module that has an `initialize` method that returns any precomputation.
 * - and a `close` method that accepts the precomputation. `close` is invoked
 *   when the wrapped process is completed, or has failed.
 *
 * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules
 * that implement `initialize` and `close`.
 * @return {Transaction} Single transaction for reuse in thread.
 *
 * @class Transaction
 */
var TransactionImpl = {
  /**
   * Sets up this instance so that it is prepared for collecting metrics. Does
   * so such that this setup method may be used on an instance that is already
   * initialized, in a way that does not consume additional memory upon reuse.
   * That can be useful if you decide to make your subclass of this mixin a
   * "PooledClass".
   */
  reinitializeTransaction: function reinitializeTransaction() {
    this.transactionWrappers = this.getTransactionWrappers();
    if (this.wrapperInitData) {
      this.wrapperInitData.length = 0;
    } else {
      this.wrapperInitData = [];
    }
    this._isInTransaction = false;
  },

  _isInTransaction: false,

  /**
   * @abstract
   * @return {Array<TransactionWrapper>} Array of transaction wrappers.
   */
  getTransactionWrappers: null,

  isInTransaction: function isInTransaction() {
    return !!this._isInTransaction;
  },

  /* eslint-disable space-before-function-paren */

  /**
   * Executes the function within a safety window. Use this for the top level
   * methods that result in large amounts of computation/mutations that would
   * need to be safety checked. The optional arguments helps prevent the need
   * to bind in many cases.
   *
   * @param {function} method Member of scope to call.
   * @param {Object} scope Scope to invoke from.
   * @param {Object?=} a Argument to pass to the method.
   * @param {Object?=} b Argument to pass to the method.
   * @param {Object?=} c Argument to pass to the method.
   * @param {Object?=} d Argument to pass to the method.
   * @param {Object?=} e Argument to pass to the method.
   * @param {Object?=} f Argument to pass to the method.
   *
   * @return {*} Return value from `method`.
   */
  perform: function perform(method, scope, a, b, c, d, e, f) {
    /* eslint-enable space-before-function-paren */
    !!this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.perform(...): Cannot initialize a transaction when there is already an outstanding transaction.') : _prodInvariant('27') : void 0;
    var errorThrown;
    var ret;
    try {
      this._isInTransaction = true;
      // Catching errors makes debugging more difficult, so we start with
      // errorThrown set to true before setting it to false after calling
      // close -- if it's still set to true in the finally block, it means
      // one of these calls threw.
      errorThrown = true;
      this.initializeAll(0);
      ret = method.call(scope, a, b, c, d, e, f);
      errorThrown = false;
    } finally {
      try {
        if (errorThrown) {
          // If `method` throws, prefer to show that stack trace over any thrown
          // by invoking `closeAll`.
          try {
            this.closeAll(0);
          } catch (err) {}
        } else {
          // Since `method` didn't throw, we don't want to silence the exception
          // here.
          this.closeAll(0);
        }
      } finally {
        this._isInTransaction = false;
      }
    }
    return ret;
  },

  initializeAll: function initializeAll(startIndex) {
    var transactionWrappers = this.transactionWrappers;
    for (var i = startIndex; i < transactionWrappers.length; i++) {
      var wrapper = transactionWrappers[i];
      try {
        // Catching errors makes debugging more difficult, so we start with the
        // OBSERVED_ERROR state before overwriting it with the real return value
        // of initialize -- if it's still set to OBSERVED_ERROR in the finally
        // block, it means wrapper.initialize threw.
        this.wrapperInitData[i] = OBSERVED_ERROR;
        this.wrapperInitData[i] = wrapper.initialize ? wrapper.initialize.call(this) : null;
      } finally {
        if (this.wrapperInitData[i] === OBSERVED_ERROR) {
          // The initializer for wrapper i threw an error; initialize the
          // remaining wrappers but silence any exceptions from them to ensure
          // that the first error is the one to bubble up.
          try {
            this.initializeAll(i + 1);
          } catch (err) {}
        }
      }
    }
  },

  /**
   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into
   * them the respective return values of `this.transactionWrappers.init[i]`
   * (`close`rs that correspond to initializers that failed will not be
   * invoked).
   */
  closeAll: function closeAll(startIndex) {
    !this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.closeAll(): Cannot close transaction when none are open.') : _prodInvariant('28') : void 0;
    var transactionWrappers = this.transactionWrappers;
    for (var i = startIndex; i < transactionWrappers.length; i++) {
      var wrapper = transactionWrappers[i];
      var initData = this.wrapperInitData[i];
      var errorThrown;
      try {
        // Catching errors makes debugging more difficult, so we start with
        // errorThrown set to true before setting it to false after calling
        // close -- if it's still set to true in the finally block, it means
        // wrapper.close threw.
        errorThrown = true;
        if (initData !== OBSERVED_ERROR && wrapper.close) {
          wrapper.close.call(this, initData);
        }
        errorThrown = false;
      } finally {
        if (errorThrown) {
          // The closer for wrapper i threw an error; close the remaining
          // wrappers but silence any exceptions from them to ensure that the
          // first error is the one to bubble up.
          try {
            this.closeAll(i + 1);
          } catch (e) {}
        }
      }
    }
    this.wrapperInitData.length = 0;
  }
};

module.exports = TransactionImpl;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * Based on the escape-html library, which is used under the MIT License below:
 *
 * Copyright (c) 2012-2013 TJ Holowaychuk
 * Copyright (c) 2015 Andreas Lubbe
 * Copyright (c) 2015 Tiancheng "Timothy" Gu
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * 'Software'), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */



// code copied and modified from escape-html
/**
 * Module variables.
 * @private
 */

var matchHtmlRegExp = /["'&<>]/;

/**
 * Escape special characters in the given string of html.
 *
 * @param  {string} string The string to escape for inserting into HTML
 * @return {string}
 * @public
 */

function escapeHtml(string) {
  var str = '' + string;
  var match = matchHtmlRegExp.exec(str);

  if (!match) {
    return str;
  }

  var escape;
  var html = '';
  var index = 0;
  var lastIndex = 0;

  for (index = match.index; index < str.length; index++) {
    switch (str.charCodeAt(index)) {
      case 34:
        // "
        escape = '&quot;';
        break;
      case 38:
        // &
        escape = '&amp;';
        break;
      case 39:
        // '
        escape = '&#x27;'; // modified from escape-html; used to be '&#39'
        break;
      case 60:
        // <
        escape = '&lt;';
        break;
      case 62:
        // >
        escape = '&gt;';
        break;
      default:
        continue;
    }

    if (lastIndex !== index) {
      html += str.substring(lastIndex, index);
    }

    lastIndex = index + 1;
    html += escape;
  }

  return lastIndex !== index ? html + str.substring(lastIndex, index) : html;
}
// end code copied and modified from escape-html

/**
 * Escapes text to prevent scripting attacks.
 *
 * @param {*} text Text value to escape.
 * @return {string} An escaped string.
 */
function escapeTextContentForBrowser(text) {
  if (typeof text === 'boolean' || typeof text === 'number') {
    // this shortcircuit helps perf for types that we know will never have
    // special characters, especially given that this function is used often
    // for numeric dom ids.
    return '' + text;
  }
  return escapeHtml(text);
}

module.exports = escapeTextContentForBrowser;

/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ExecutionEnvironment = __webpack_require__(9);
var DOMNamespaces = __webpack_require__(60);

var WHITESPACE_TEST = /^[ \r\n\t\f]/;
var NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/;

var createMicrosoftUnsafeLocalFunction = __webpack_require__(67);

// SVG temp container for IE lacking innerHTML
var reusableSVGContainer;

/**
 * Set the innerHTML property of a node, ensuring that whitespace is preserved
 * even in IE8.
 *
 * @param {DOMElement} node
 * @param {string} html
 * @internal
 */
var setInnerHTML = createMicrosoftUnsafeLocalFunction(function (node, html) {
  // IE does not have innerHTML for SVG nodes, so instead we inject the
  // new markup in a temp node and then move the child nodes across into
  // the target node
  if (node.namespaceURI === DOMNamespaces.svg && !('innerHTML' in node)) {
    reusableSVGContainer = reusableSVGContainer || document.createElement('div');
    reusableSVGContainer.innerHTML = '<svg>' + html + '</svg>';
    var svgNode = reusableSVGContainer.firstChild;
    while (svgNode.firstChild) {
      node.appendChild(svgNode.firstChild);
    }
  } else {
    node.innerHTML = html;
  }
});

if (ExecutionEnvironment.canUseDOM) {
  // IE8: When updating a just created node with innerHTML only leading
  // whitespace is removed. When updating an existing node with innerHTML
  // whitespace in root TextNodes is also collapsed.
  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html

  // Feature detection; only IE8 is known to behave improperly like this.
  var testElement = document.createElement('div');
  testElement.innerHTML = ' ';
  if (testElement.innerHTML === '') {
    setInnerHTML = function setInnerHTML(node, html) {
      // Magic theory: IE8 supposedly differentiates between added and updated
      // nodes when processing innerHTML, innerHTML on updated nodes suffers
      // from worse whitespace behavior. Re-adding a node like this triggers
      // the initial and more favorable whitespace behavior.
      // TODO: What to do on a detached node?
      if (node.parentNode) {
        node.parentNode.replaceChild(node, node);
      }

      // We also implement a workaround for non-visible tags disappearing into
      // thin air on IE8, this only happens if there is no visible text
      // in-front of the non-visible tags. Piggyback on the whitespace fix
      // and simply check if any non-visible tags appear in the source.
      if (WHITESPACE_TEST.test(html) || html[0] === '<' && NONVISIBLE_TEST.test(html)) {
        // Recover leading whitespace by temporarily prepending any character.
        // \uFEFF has the potential advantage of being zero-width/invisible.
        // UglifyJS drops U+FEFF chars when parsing, so use String.fromCharCode
        // in hopes that this is preserved even if "\uFEFF" is transformed to
        // the actual Unicode character (by Babel, for example).
        // https://github.com/mishoo/UglifyJS2/blob/v2.4.20/lib/parse.js#L216
        node.innerHTML = String.fromCharCode(0xfeff) + html;

        // deleteData leaves an empty `TextNode` which offsets the index of all
        // children. Definitely want to avoid this.
        var textNode = node.firstChild;
        if (textNode.data.length === 1) {
          node.removeChild(textNode);
        } else {
          textNode.deleteData(0, 1);
        }
      } else {
        node.innerHTML = html;
      }
    };
  }
  testElement = null;
}

module.exports = setInnerHTML;

/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var canDefineProperty = false;
if (process.env.NODE_ENV !== 'production') {
  try {
    // $FlowFixMe https://github.com/facebook/flow/issues/285
    Object.defineProperty({}, 'x', { get: function get() {} });
    canDefineProperty = true;
  } catch (x) {
    // IE will fail on defineProperty
  }
}

module.exports = canDefineProperty;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

/**
 * Created by wangzhiyong on
 * date:2016-04-05后开始独立改造
 * desc:按钮工具栏
 */
var React = __webpack_require__(1);
__webpack_require__(299);
var LinkButton = __webpack_require__(25);
var Button = __webpack_require__(10);
var Toolbar = React.createClass({
    displayName: "Toolbar",

    propTypes: {
        buttons: React.PropTypes.array.isRequired,
        type: React.PropTypes.oneOf([//主题
        "button", "link"]),
        buttonClick: React.PropTypes.func.isRequired
    },
    getDefaultProps: function getDefaultProps() {
        return { buttons: [], type: "button", className: "" };
    },
    buttonClick: function buttonClick(name, title, event) {
        this.props.buttonClick(name, title, event); //执行父组件的事件
    },
    render: function render() {
        var _this = this;

        var props = {
            className: this.props.className + " wasabi-toolbar",
            style: this.props.style
        };
        var buttonlist = [];
        if (this.props.buttons != null) {
            this.props.buttons.map(function (child) {
                if (_this.props.type == "button") {
                    buttonlist.push(React.createElement(Button, _extends({ key: child.name }, child, { onClick: _this.buttonClick })));
                } else {
                    buttonlist.push(React.createElement(LinkButton, _extends({ key: child.name }, child, { onClick: _this.buttonClick })));
                }
            });
        }
        return React.createElement(
            "div",
            props,
            buttonlist
        );
    }
});

module.exports = Toolbar;

/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

/**
 * Created by zhiyongwang on 2016-04-05以后.
 * 复选框集合组件
 */
__webpack_require__(146);
var React = __webpack_require__(1);
var unit = __webpack_require__(5);
var FetchModel = __webpack_require__(13);
var validation = __webpack_require__(16);
var setStyle = __webpack_require__(11);
var validate = __webpack_require__(22);
var showUpdate = __webpack_require__(21);
var shouldComponentUpdate = __webpack_require__(8);
var Label = __webpack_require__(18);
var Message = __webpack_require__(14);
var CheckBox = React.createClass({
    displayName: "CheckBox",

    mixins: [setStyle, validate, showUpdate, shouldComponentUpdate],
    PropTypes: {
        name: React.PropTypes.string.isRequired, //字段名
        label: React.PropTypes.oneOfType([React.PropTypes.string, React.PropTypes.object, React.PropTypes.element, React.PropTypes.node]), //字段文字说明属性
        title: React.PropTypes.string, //提示信息
        width: React.PropTypes.number, //宽度
        height: React.PropTypes.number, //高度
        value: React.PropTypes.oneOfType([React.PropTypes.number, React.PropTypes.string]), //默认值,
        text: React.PropTypes.oneOfType([React.PropTypes.number, React.PropTypes.string]), //默认文本值
        placeholder: React.PropTypes.string, //输入框预留文字
        readonly: React.PropTypes.bool, //是否只读
        required: React.PropTypes.bool, //是否必填
        onlyline: React.PropTypes.bool, //是否只占一行
        hide: React.PropTypes.bool, //是否隐藏
        regexp: React.PropTypes.string, //正则表达式
        invalidTip: React.PropTypes.string, //无效时的提示字符
        style: React.PropTypes.object, //自定义style
        className: React.PropTypes.string, //自定义class
        size: React.PropTypes.oneOf(["none", "default", "large", //兼容性值,与two相同
        "two", "three", "onlyline"]), //组件表单的大小
        position: React.PropTypes.oneOf(["left", "default", "right"]), //组件在表单一行中的位置
        //其他属性
        min: React.PropTypes.number, //最少选择几个
        max: React.PropTypes.number, //最多选择几个

        //其他属性
        valueField: React.PropTypes.string, //数据字段值名称
        textField: React.PropTypes.string, //数据字段文本名称
        url: React.PropTypes.string, //ajax的后台地址
        params: React.PropTypes.object, //查询参数
        dataSource: React.PropTypes.string, //ajax的返回的数据源中哪个属性作为数据源,为null时直接后台返回的数据作为数据源
        data: React.PropTypes.array, //自定义数据源
        extraData: React.PropTypes.array, //额外的数据,对url有效
        onSelect: React.PropTypes.func //选中后的事件，回传，value,与text,data


    },
    getDefaultProps: function getDefaultProps() {
        return {
            name: "",
            label: null,
            title: null,
            width: null,
            height: null,
            value: "",
            text: "",
            placeholder: "",
            readonly: false,
            required: false,
            onlyline: false,
            hide: false,
            regexp: null,
            invalidTip: null,
            style: null,
            className: null,
            size: "default",
            position: "default",
            //其他属性
            min: null,
            max: null,
            //其他属性
            valueField: "value",
            textField: "text",
            url: null,
            params: null,
            dataSource: "data",
            data: null,
            extraData: null,
            onSelect: null

        };
    },
    getInitialState: function getInitialState() {
        var newData = [];var text = this.props.text;
        if (this.props.data instanceof Array) {
            for (var i = 0; i < this.props.data.length; i++) {
                var obj = this.props.data[i];
                obj.text = this.props.data[i][this.props.textField];
                obj.value = this.props.data[i][this.props.valueField];
                if (obj.value == this.props.value) {
                    text = obj.text; //根据value赋值
                }
                newData.push(obj);
            }
        }

        return {
            hide: this.props.hide,
            min: this.props.min,
            max: this.props.max,
            params: unit.clone(this.props.params), //参数
            data: newData,
            value: this.props.value,
            text: text,
            ulShow: false, //是否显示下拉选项
            readonly: this.props.readonly,

            //验证
            required: this.props.required,
            validateClass: "", //验证的样式
            helpShow: "none", //提示信息是否显示
            helpTip: validation["required"], //提示信息
            invalidTip: ""
        };
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        var newData = [];var text = nextProps.text;
        if (nextProps.data != null && nextProps.data instanceof Array && (!nextProps.url || nextProps.url == "")) {

            for (var i = 0; i < nextProps.data.length; i++) {
                var obj = nextProps.data[i];
                obj.text = nextProps.data[i][this.props.textField];
                obj.value = nextProps.data[i][this.props.valueField];
                if (obj.value == nextProps.value) {
                    text = obj.text; //根据value赋值
                }
                newData.push(obj);
            }
            this.setState({
                hide: nextProps.hide,
                data: newData,
                min: nextProps.min,
                max: nextProps.max,
                value: nextProps.value,
                text: text,
                params: unit.clone(nextProps.params),
                readonly: nextProps.readonly,
                required: nextProps.required,
                validateClass: "", //重置验证样式
                helpTip: validation["required"] //提示信息
            });
        } else {

            if (nextProps.url != null) {

                if (this.showUpdate(nextProps.params)) {
                    //如果不相同则更新
                    this.loadData(nextProps.url, nextProps.params);
                } else {}
            }

            this.setState({
                hide: nextProps.hide,
                min: nextProps.min,
                max: nextProps.max,
                value: nextProps.value,
                text: text,
                params: unit.clone(nextProps.params),
                readonly: nextProps.readonly,
                required: nextProps.required,
                validateClass: "", //重置验证样式
                helpTip: validation["required"] //提示信息
            });
        }
    },
    componentWillMount: function componentWillMount() {
        //如果指定url,先查询数据再绑定
        this.loadData(this.props.url, this.state.params); //查询数据
    },
    loadData: function loadData(url, params) {

        if (url != null && url != "") {
            if (params == null) {
                var fetchmodel = new FetchModel(url, this.loadSuccess, null, this.loadError);

                unit.fetch.get(fetchmodel);
            } else {
                var fetchmodel = new FetchModel(url, this.loadSuccess, params, this.loadError);

                unit.fetch.post(fetchmodel);
            }
            console.log("checkbox", fetchmodel);
        }
    },
    loadError: function loadError(errorCode, message) {
        //查询失败
        console.log("checkbox-error", errorCode, message);
        Message.error(message);
    },
    loadSuccess: function loadSuccess(data) {
        //数据加载成功
        var realData = data;
        if (this.props.dataSource == null) {} else {
            realData = unit.getSource(data, this.props.dataSource);
        }
        var newData = [];var text = this.state.text;
        for (var i = 0; i < realData.length; i++) {
            var obj = realData[i]; //将所有字段添加进来
            obj.text = realData[i][this.props.textField];
            obj.value = realData[i][this.props.valueField];
            if (obj.value == this.state.value) {
                text = obj.text; //根据value赋值
            }
            newData.push(obj);
        }
        if (this.props.extraData == null || this.props.extraData.length == 0) {
            //没有额外的数据
        } else {
            //有额外的数据
            for (var _i = 0; _i < this.props.extraData.length; _i++) {
                var _obj = {};
                _obj.text = this.props.extraData[_i][this.props.textField];
                _obj.value = this.props.extraData[_i][this.props.valueField];
                if (_obj.value == this.state.value) {
                    text = _obj.text; //根据value赋值
                }
                newData.unshift(_obj);
            }
        }
        window.localStorage.setItem(this.props.name + 'data', JSON.stringify(newData)); //用于后期获取所有数据

        this.setState({
            data: newData,
            value: this.state.value,
            text: text
        });
    },
    changeHandler: function changeHandler(event) {
        //一害绑定，但不处理
        if (this.state.readonly) {
            event.preventDefault();
        }
    },
    onSelect: function onSelect(value, text, data, e) {
        //选中事件
        e.preventDefault(); //因为有用户借助label属性生成新的checkbox,所以要阻止默认事件
        if (this.state.readonly) {
            return;
        }
        var newvalue = "";var newtext = "";
        var oldvalue = "";
        var oldtext = "";
        if (!this.state.value) {//没有选择任何项
        } else {
            oldvalue = this.state.value.toString();
        }
        if (!this.state.text) {//没有选择任何项
        } else {
            oldtext = this.state.text.toString();
        }
        if (("," + oldvalue).indexOf("," + value) > -1) {
            //取消选中
            if (oldvalue.indexOf("," + value) > -1) {
                //说明不是第一个
                newvalue = oldvalue.replace("," + value, "");
                newtext = oldtext.replace("," + text, "");
            } else if (oldvalue.indexOf(value + ",") > -1) {
                //第一个
                newvalue = oldvalue.replace(value + ",", "");
                newtext = oldtext.replace(text + ",", "");
            } else if (oldvalue.indexOf(value) > -1) {
                //只有一个
                newvalue = oldvalue.replace(value, "");
                newtext = oldtext.replace(text, "");
            }
        } else {
            //选中

            newvalue = oldvalue === "" ? value : oldvalue + "," + value;
            newtext = oldvalue === "" ? text : oldtext + "," + text;
        }
        this.setState({
            value: newvalue,
            text: newtext
        });
        this.validate(newvalue);
        if (this.props.onSelect != null) {
            this.props.onSelect(newvalue, newtext, this.props.name, data);
        }
    },
    render: function render() {
        var _this = this;

        var size = this.props.onlyline == true ? "onlyline" : this.props.size; //组件大小
        var componentClassName = "wasabi-form-group " + size + " " + (this.props.className ? this.props.className : ""); //组件的基本样式
        var style = this.setStyle("input"); //设置样式
        var controlStyle = this.props.controlStyle ? this.props.controlStyle : {};
        controlStyle.display = this.state.hide == true ? "none" : "block";
        var control = null;
        if (this.state.data instanceof Array) {
            control = this.state.data.map(function (child, i) {
                var checked = false;
                if (_this.state.value != null && _this.state.value != undefined && ("," + _this.state.value.toString()).indexOf("," + child[_this.props.valueField]) > -1) {
                    checked = true;
                }
                var props = {
                    checked: checked == true ? "checked" : null, //是否为选中状态
                    readOnly: _this.state.readonly == true ? "readonly" : null
                };
                return React.createElement(
                    "li",
                    { key: i, onClick: _this.onSelect.bind(_this, child.value, child.text, child) },
                    React.createElement("input", _extends({ type: "checkbox", id: "checkbox" + _this.props.name + child.value, value: child.value,

                        onChange: _this.changeHandler, className: "checkbox" }, props)),
                    React.createElement("label", _extends({ className: "checkbox-label" }, props)),
                    React.createElement(
                        "div",
                        { className: "checktext" },
                        child.text
                    )
                );
            });
        }
        return React.createElement(
            "div",
            { className: componentClassName + this.state.validateClass, style: controlStyle },
            React.createElement(Label, { name: this.props.label, hide: this.state.hide, required: this.state.required }),
            React.createElement(
                "div",
                { className: "wasabi-form-group-body", style: { width: !this.props.label ? "100%" : null } },
                React.createElement(
                    "ul",
                    { className: "wasabi-checkul" },
                    control
                ),
                React.createElement(
                    "small",
                    { className: "wasabi-help-block " + this.props.position, style: { display: this.state.helpTip && this.state.helpTip != "" ? this.state.helpShow : "none" } },
                    React.createElement(
                        "div",
                        { className: "text" },
                        this.state.helpTip
                    )
                )
            )
        );
    }

});
module.exports = CheckBox;

/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


//create by wangzy
//date:2016-04-25
//edit 2016-09-27重写
//desc:日期组件，
var React = __webpack_require__(1);
var Lang = __webpack_require__(34);
__webpack_require__(41);
var CalendarHeader = __webpack_require__(117);
var CalendarBody = __webpack_require__(116);
var shouldComponentUpdate = __webpack_require__(8);
var DateD = React.createClass({
    displayName: "DateD",

    mixins: [shouldComponentUpdate],
    PropTypes: {
        name: React.PropTypes.string, //字段名称，对应于表单
        year: React.PropTypes.number, //年
        month: React.PropTypes.number, //月
        day: React.PropTypes.number, //日
        isRange: React.PropTypes.bool, //是否为范围选择
        min: React.PropTypes.number, //最小值，用于日期范围选择
        max: React.PropTypes.number, //最大值,用于日期范围选择
        onSelect: React.PropTypes.func, //选择后的事件
        attachTime: React.PropTypes.bool //j是否附加时间格式

    },
    getDefaultProps: function getDefaultProps() {
        return {
            year: null,
            month: null,
            day: null,
            isRange: false, ///默认否
            min: null, //默认为空，不属于日期范围选择
            max: null, //默认为空，不属于日期范围选择
            attachTime: true
        };
    },
    getInitialState: function getInitialState() {
        var newDate = new Date();
        var year = this.formatDate(newDate, 'yyyy');
        var month = this.formatDate(newDate, 'MM');
        return {
            year: this.props.year ? this.props.year : year,
            month: this.props.month ? this.props.month : month,
            day: this.props.day,
            isRange: this.props.isRange,
            min: this.props.min,
            max: this.props.max,
            changeYear: false, //选择年份
            changeMonth: false //选择月份
        };
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        if (nextProps.isRange == true) {
            //是日期范围选择，要更新最大值与最小值
            this.setState({
                year: nextProps.year ? nextProps.year : this.state.year,
                month: nextProps.month ? nextProps.month : this.state.month,
                day: nextProps.day,
                isRange: nextProps.isRange,
                min: nextProps.min,
                max: nextProps.max
            });
        } else {
            this.setState({
                year: nextProps.year ? nextProps.year : this.state.year,
                month: nextProps.month ? nextProps.month : this.state.month,
                day: nextProps.day,
                isRange: nextProps.isRange
            });
        }
    },
    updateYearAndMonth: function updateYearAndMonth(filterYear, filterMonth) {
        this.setState({
            year: filterYear,
            month: filterMonth,
            day: null, //清空
            min: null,
            max: null
        });

        if (this.props.updateYearAndMonth != null) {
            this.props.updateYearAndMonth(filterYear, filterMonth);
        }
    },
    dayHandler: function dayHandler(day) {
        this.setState({
            day: day,
            min: day,
            max: day
        });
        if (this.props.onSelect != null) {
            var value = this.state.year + "-" + (this.state.month.toString().length == 1 ? "0" + this.state.month.toString() : this.state.month) + "-" + (day < 10 ? "0" + day.toString() : day);
            if (this.props.attachTime) {
                //如果需要附加时间
                value = value + " 00:00:00";
            }
            this.props.onSelect(value, value, this.props.name);
        }
    },
    formatDate: function formatDate(date, format) {
        /**
         * 对Date的扩展，将 Date 转化为指定格式的String
         * 月(M)、日(d)、12小时(h)、24小时(H)、分(m)、秒(s)、周(E)、季度(q) 可以用 1-2 个占位符
         * 年(y)可以用 1-4 个占位符，毫秒(S)只能用 1 个占位符(是 1-3 位的数字)
         * eg:
         * Utils.formatDate(new Date(),'yyyy-MM-dd') ==> 2014-03-02
         * Utils.formatDate(new Date(),'yyyy-MM-dd hh:mm') ==> 2014-03-02 05:04
         * Utils.formatDate(new Date(),'yyyy-MM-dd HH:mm') ==> 2014-03-02 17:04
         * Utils.formatDate(new Date(),'yyyy-MM-dd hh:mm:ss.S') ==> 2006-07-02 08:09:04.423
         * Utils.formatDate(new Date(),'yyyy-MM-dd E HH:mm:ss') ==> 2009-03-10 二 20:09:04
         * Utils.formatDate(new Date(),'yyyy-MM-dd EE hh:mm:ss') ==> 2009-03-10 周二 08:09:04
         * Utils.formatDate(new Date(),'yyyy-MM-dd EEE hh:mm:ss') ==> 2009-03-10 星期二 08:09:04
         * Utils.formatDate(new Date(),'yyyy-M-d h:m:s.S') ==> 2006-7-2 8:9:4.18
         */
        if (!date) return;
        var o = {
            "M+": date.getMonth() + 1, //月份
            "d+": date.getDate(), //日
            "h+": date.getHours() % 12 == 0 ? 12 : date.getHours() % 12, //小时
            "H+": date.getHours(), //小时
            "m+": date.getMinutes(), //分
            "s+": date.getSeconds(), //秒
            "q+": Math.floor((date.getMonth() + 3) / 3), //季度
            "S": date.getMilliseconds() //毫秒
        };
        var week = {
            "0": "\u65E5",
            "1": "\u4E00",
            "2": "\u4E8C",
            "3": "\u4E09",
            "4": "\u56DB",
            "5": "\u4E94",
            "6": "\u516D"
        };

        if (/(y+)/.test(format)) {
            format = format.replace(RegExp.$1, (date.getFullYear() + "").substr(4 - RegExp.$1.length));
        }

        if (/(E+)/.test(format)) {
            format = format.replace(RegExp.$1, (RegExp.$1.length > 1 ? RegExp.$1.length > 2 ? "\u661F\u671F" : "\u5468" : "") + week[date.getDay() + ""]);
        }
        for (var k in o) {
            if (new RegExp("(" + k + ")").test(format)) {
                format = format.replace(RegExp.$1, RegExp.$1.length == 1 ? o[k] : ("00" + o[k]).substr(("" + o[k]).length));
            }
        }
        return format;
    },
    changeYear: function changeYear() {
        this.setState({
            changeYear: !this.state.changeYear,
            changeMonth: false
        });
    },
    changeMonth: function changeMonth() {
        this.setState({
            changeYear: false,
            changeMonth: !this.state.changeMonth
        });
    },
    changeYearHandler: function changeYearHandler(value) {

        this.setState({
            year: value,
            changeYear: false,
            changeMonth: false,
            day: null, //清空
            min: null,
            max: null
        });
    },
    changeMonthHandler: function changeMonthHandler(value) {
        this.setState({
            month: value,
            changeYear: false,
            changeMonth: false,
            day: null, //清空
            min: null,
            max: null
        });
    },

    render: function render() {
        return React.createElement(
            "div",
            { className: "wasabi-datetime" },
            React.createElement(CalendarHeader, {
                year: this.state.year,
                month: this.state.month,
                updateFilter: this.updateYearAndMonth,
                changeYear: this.changeYear,
                changeMonth: this.changeMonth
            }),
            React.createElement(CalendarBody, {
                year: this.state.year,
                month: this.state.month,
                day: this.state.day,
                isRange: this.state.isRange,
                min: this.state.min,
                max: this.state.max,
                dayHandler: this.dayHandler,
                changeYear: this.state.changeYear,
                changeMonth: this.state.changeMonth,
                changeYearHandler: this.changeYearHandler,
                changeMonthHandler: this.changeMonthHandler
            })
        );
    }
});
module.exports = DateD;

/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

/*
 create by wangzy
 date:2016-04-05后开始独立改造
 desc:通用表单组件
 */
__webpack_require__(305);
var React = __webpack_require__(1);
var regexp = __webpack_require__(35);
var validation = __webpack_require__(16);
var Radio = __webpack_require__(54);
var CheckBox = __webpack_require__(51);
var SwitchButton = __webpack_require__(131);
var ComboBox = __webpack_require__(118);
var Text = __webpack_require__(79);
var None = __webpack_require__(126);
var Button = __webpack_require__(10);
var LinkButton = __webpack_require__(25);
var setStyle = __webpack_require__(11);
var unit = __webpack_require__(5);
var shouldComponentUpdate = __webpack_require__(8);
var Input = React.createClass({
    displayName: "Input",

    mixins: [setStyle, shouldComponentUpdate],
    propTypes: {
        type: React.PropTypes.oneOf(["none", //空的占位符
        "text", //普通输入框
        "password", //密码
        "email", //邮箱
        "url", //网址
        "mobile", //手机
        "idcard", //身份证
        "date", //日期
        "time", //时间
        "datetime", //日期时间
        "daterange", //日期范围
        "datetimerange", //日期时间范围
        "alpha", //英文字母
        "alphanum", //英文字母与数字
        "integer", //整型数据
        "number", //数字
        "textarea", //多行文本
        "select", //下拉框
        "radio", //单选框
        "checkbox", //复选框
        "switch", //开关
        "picker", //级联选择组件
        "gridpicker", //列表选择
        "treepicker", //下拉树选择
        "panelpicker", //面板选择
        "button", //普通按钮
        "linkbutton", //链接按钮
        "muti" //多行文本
        ]), //输入框的类型
        name: React.PropTypes.string.isRequired, //字段名
        label: React.PropTypes.oneOfType([React.PropTypes.string, React.PropTypes.element, React.PropTypes.node]), //字段文字说明属性
        title: React.PropTypes.string, //提示信息
        width: React.PropTypes.number, //宽度
        height: React.PropTypes.number, //高度
        value: React.PropTypes.oneOfType([React.PropTypes.number, React.PropTypes.string]), //默认值,
        text: React.PropTypes.oneOfType([React.PropTypes.number, React.PropTypes.string]), //默认文本值
        placeholder: React.PropTypes.string, //输入框预留文字
        readonly: React.PropTypes.bool, //是否只读
        required: React.PropTypes.bool, //是否必填
        onlyline: React.PropTypes.bool, //是否只占一行
        hide: React.PropTypes.bool, //是否隐藏
        regexp: React.PropTypes.string, //正则表达式
        invalidTip: React.PropTypes.string, //无效时的提示字符
        style: React.PropTypes.object, //自定义style
        controlStyle: React.PropTypes.object, //自定义外层样式
        className: React.PropTypes.string, //自定义class
        size: React.PropTypes.oneOf(["none", "default", "large", //兼容性值,与two相同
        "two", "three", "onlyline"]), //组件表单的大小
        position: React.PropTypes.oneOf(["left", "default", "right"]), //组件在表单一行中的位置

        //其他属性 text
        min: React.PropTypes.number, //最小值,最小长度,最少选项
        max: React.PropTypes.number, //最大值,最大长度,最多选项
        onClick: React.PropTypes.func, //单击事件
        onChange: React.PropTypes.func, //值改变事件

        //其他属性 combobox
        multiple: React.PropTypes.bool, //是否允许多选
        valueField: React.PropTypes.string, //数据字段值名称
        textField: React.PropTypes.string, //数据字段文本名称
        url: React.PropTypes.string, //ajax的后台地址
        params: React.PropTypes.object, //查询参数
        dataSource: React.PropTypes.string, //ajax的返回的数据源中哪个属性作为数据源,为null时直接后台返回的数据作为数据源
        data: React.PropTypes.array, //自定义数据源
        extraData: React.PropTypes.array, //额外的数据,对url有效
        onSelect: React.PropTypes.func, //选中后的事件，回传，value,与text,data

        //其他属性 picker
        secondUrl: React.PropTypes.string, //第二层节点的后台地址,
        secondParams: React.PropTypes.object, //第二层节点的后台参数
        secondParamsKey: React.PropTypes.string, //第二层节点的后台参数中传递一级节点value值的参数名称
        thirdUrl: React.PropTypes.string, //第三层节点的后台地址，
        thirdParams: React.PropTypes.object, //第三层节点的后台参数
        thirdParamsKey: React.PropTypes.string, //第三层节点的后台参数中传递二级节点value值的参数名称
        hotTitle: React.PropTypes.string, //热门选择标题
        hotData: React.PropTypes.array, //热门选择的数据

        //其他属性,参见其他按钮
        iconCls: React.PropTypes.string,
        iconAlign: React.PropTypes.oneOf(["left", "right", "rightTop"]) //图片位置

    },
    getDefaultProps: function getDefaultProps() {
        return {
            type: "text",
            name: "",
            label: null,
            title: null,
            width: null,
            height: null,
            value: "",
            text: "",
            placeholder: "",
            readonly: false,
            required: false,
            onlyline: false,
            hide: false,
            regexp: null,
            invalidTip: null,
            style: null,
            controlStyle: null,
            className: null,
            size: "default",
            position: "default",

            //其他属性
            row: 5,
            min: null,
            max: null,
            onClick: null,
            onChange: null,

            //其他属性
            multiple: false,
            valueField: "value",
            textField: "text",
            url: null,
            params: null,
            dataSource: "data",
            data: null,
            extraData: null,
            onSelect: null,

            //其他属性
            secondUrl: null,
            secondParams: null,
            secondParamsKey: null,
            thirdUrl: null,
            thirdParams: null,
            thirdParamsKey: null,
            hotTitle: "热门选择",
            hotData: null
        };
    },
    getInitialState: function getInitialState() {
        return {
            value: this.props.value,
            text: this.props.text,
            readonly: this.props.readonly,
            hide: this.props.hide,
            data: this.props.data,
            //验证
            required: this.props.required,
            validateClass: "", //验证的样式
            helpShow: "none", //提示信息是否显示
            helpTip: validation["required"], //提示信息
            invalidTip: ""
        };
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        this.setState({
            hide: nextProps.hide,
            value: nextProps.value,
            text: nextProps.text,
            readonly: nextProps.readonly,
            required: nextProps.required,
            data: nextProps.data
        });
    },
    changeHandler: function changeHandler(event) {
        //文本框的值改变事件
        this.setState({
            value: event.target.value,
            text: event.target.value
        });
        if (this.props.onChange != null) {
            this.props.onChange(event.target.value); //自定义的改变事件
        }
        //回传给表单组件
        if (this.props.backFormHandler != null) {
            this.props.backFormHandler(event.target.value, event.target.value, this.props.name);
        }
    },
    clickHandler: function clickHandler(event) {
        //单击事件
        if (this.props.onClick != null) {
            var model = {};
            try {
                //有可能存在复制不成功的情况
                model = _extends({}, this.props);
            } catch (e) {}
            model.value = this.state.value;
            model.text = this.state.text;
            this.props.onClick(this.props.name, this.state.value, model);
        }
    },
    buttonClick: function buttonClick(name, title, event) {
        //按钮的单击事件
        if (this.props.onClick != null) {
            this.props.onClick(name, title, event);
        }
    },
    validate: function validate(value) {
        if (this.props.type == "button" || this.props.type == "linkbutton") {
            return true;
        } else {
            return this.refs.input.validate();
        }
    },
    onSelect: function onSelect(value, text, name, data) {
        //保存选中的值
        this.setState({
            value: value,
            text: text
        });
        if (this.props.onSelect != null) {
            this.props.onSelect(value, text, this.props.name, data); //回调
        }
        //回传给表单组件
        if (this.props.backFormHandler != null) {
            this.props.backFormHandler(value, text, name, data);
        }
    },
    getComponentData: function getComponentData(name) {
        //只读属性，获取对应的字段的数据源
        return JSON.parse(window.localStorage.getItem(name + "data"));
    },
    renderText: function renderText() {
        //普通文本框
        var props = _extends({}, this.props); ////原有的属性
        props.value = this.state.value; //注意绑定
        props.text = this.state.text; //
        return React.createElement(Text, _extends({ ref: "input" }, props));
    },
    renderUnInput: function renderUnInput(type) {
        //非输入框组件
        var control; //组件
        var props = _extends({}, this.props); ////原有的属性
        props.value = this.state.value; //注意绑定
        props.text = this.state.text; //
        if (type == "none") {
            //空占位组件
            control = React.createElement(None, _extends({ ref: "input" }, props));
        } else if (type == "radio") {
            //单选按钮组
            control = React.createElement(Radio, _extends({ ref: "input" }, props, { onSelect: this.onSelect }));
        } else if (type == "checkbox") {
            //多选择按钮组
            control = React.createElement(CheckBox, _extends({ ref: "input" }, props, { onSelect: this.onSelect }));
        } else if (type == "switch") {
            //开关
            control = React.createElement(SwitchButton, _extends({ ref: "input" }, props, { onSelect: this.onSelect }));
        } else if (type == "muti" || type == "select" || type == "datetime" || type == "time" || type == "date" || type == "daterange" || type == "datetimerange" || type == "picker" || type == "treepicker" || type == "gridpicker" || type == "panelpicker") {
            //下拉组件
            control = React.createElement(ComboBox, _extends({ ref: "input" }, props, { onSelect: this.onSelect }));
        }

        return control;
    },
    render: function render() {
        var size = this.props.onlyline ? "onlyline" : this.props.size;
        var componentClassName = "wasabi-form-group " + size + " " + (this.props.className ? this.props.className : ""); //组件的基本样式
        var style = this.props.style;
        if (this.props.type == "button") {

            return React.createElement(
                "div",
                { className: componentClassName, style: style },
                "   ",
                React.createElement(Button, _extends({}, this.props, { title: this.props.label, onClick: this.buttonClick }))
            );
        } else if (this.props.type == "linkbutton") {
            return React.createElement(
                "div",
                { className: componentClassName, style: style },
                React.createElement(LinkButton, _extends({}, this.props, { title: this.props.label,
                    onClick: this.buttonClick }))
            );
        } else {
            if (this.props.type == "text" || this.props.type == "email" || this.props.type == "url" || this.props.type == "number" || this.props.type == "integer" || this.props.type == "alpha" || this.props.type == "alphanum" || this.props.type == "mobile" || this.props.type == "idcard" || this.props.type == "password" || this.props.type == "textarea") {
                //这几种类型统一为text

                return this.renderText();
            } else {
                //输入文本输入框类型

                return this.renderUnInput(this.props.type);
            }
        }

        return null;
    }
});
module.exports = Input;

/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Created by zhiyongwang
 * date:2016-04-05后开始独立改造
 * 单选框集合组件
 */
__webpack_require__(146);
var React = __webpack_require__(1);
var unit = __webpack_require__(5);
var FetchModel = __webpack_require__(13);
var validation = __webpack_require__(16);
var setStyle = __webpack_require__(11);
var validate = __webpack_require__(22);
var showUpdate = __webpack_require__(21);
var shouldComponentUpdate = __webpack_require__(8);
var Label = __webpack_require__(18);
var Message = __webpack_require__(14);
var Radio = React.createClass({
    displayName: "Radio",

    mixins: [setStyle, validate, showUpdate, shouldComponentUpdate],
    PropTypes: {
        name: React.PropTypes.string.isRequired, //字段名
        label: React.PropTypes.oneOfType([React.PropTypes.string, React.PropTypes.element, React.PropTypes.node]), //字段文字说明属性
        title: React.PropTypes.string, //提示信息
        width: React.PropTypes.number, //宽度
        height: React.PropTypes.number, //高度
        value: React.PropTypes.oneOfType([React.PropTypes.number, React.PropTypes.string]), //默认值,
        text: React.PropTypes.oneOfType([React.PropTypes.number, React.PropTypes.string]), //默认文本值
        placeholder: React.PropTypes.string, //输入框预留文字
        readonly: React.PropTypes.bool, //是否只读
        required: React.PropTypes.bool, //是否必填
        onlyline: React.PropTypes.bool, //是否只占一行
        hide: React.PropTypes.bool, //是否隐藏
        regexp: React.PropTypes.string, //正则表达式
        invalidTip: React.PropTypes.string, //无效时的提示字符
        style: React.PropTypes.object, //自定义style
        className: React.PropTypes.string, //自定义class
        size: React.PropTypes.oneOf(["none", "default", "large", //兼容性值,与two相同
        "two", "three", "onlyline"]), //组件表单的大小
        position: React.PropTypes.oneOf(["left", "default", "right"]), //组件在表单一行中的位置

        //其他属性
        valueField: React.PropTypes.string, //数据字段值名称
        textField: React.PropTypes.string, //数据字段文本名称
        url: React.PropTypes.string, //ajax的后台地址
        params: React.PropTypes.object, //查询参数
        dataSource: React.PropTypes.string, //ajax的返回的数据源中哪个属性作为数据源,为null时直接后台返回的数据作为数据源
        data: React.PropTypes.array, //自定义数据源
        extraData: React.PropTypes.array, //额外的数据,对url有效
        onSelect: React.PropTypes.func //选中后的事件，回传，value,与text,data

    },
    getDefaultProps: function getDefaultProps() {
        return {
            name: "",
            label: null,
            title: null,
            width: null,
            height: null,
            value: "",
            text: "",
            placeholder: "",
            readonly: false,
            required: false,
            onlyline: false,
            hide: false,
            regexp: null,
            invalidTip: null,
            style: null,
            className: null,
            size: "default",
            position: "default",

            //其他属性
            valueField: "value",
            textField: "text",
            url: null,
            params: null,
            dataSource: "data",
            data: null,
            extraData: null,
            onSelect: null
        };
    },
    getInitialState: function getInitialState() {
        var newData = [];var text = this.props.text;
        if (this.props.data && this.props.data instanceof Array) {
            for (var i = 0; i < this.props.data.length; i++) {
                var obj = this.props.data[i];
                obj.text = this.props.data[i][this.props.textField];
                obj.value = this.props.data[i][this.props.valueField];
                if (obj.value == this.props.value) {
                    text = obj.text; //根据value赋值
                }
                newData.push(obj);
            }
        }
        return {
            hide: this.props.hide,
            params: unit.clone(this.props.params), //参数
            data: newData,
            value: this.props.value,
            text: text,
            ulShow: false, //是否显示下拉选项
            readonly: this.props.readonly,
            //验证
            required: this.props.required,
            validateClass: "", //验证的样式
            helpShow: "none", //提示信息是否显示
            helpTip: validation["required"], //提示信息
            invalidTip: ""
        };
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        var newData = [];var text = nextProps.text;
        if (nextProps.data != null && nextProps.data instanceof Array && (!nextProps.url || nextProps.url == "")) {

            for (var i = 0; i < nextProps.data.length; i++) {
                var obj = nextProps.data[i];
                obj.text = nextProps.data[i][this.props.textField];
                obj.value = nextProps.data[i][this.props.valueField];
                if (obj.value == nextProps.value) {
                    text = obj.text; //根据value赋值
                }
                newData.push(obj);
            }
            this.setState({
                hide: nextProps.hide,
                data: newData,
                value: nextProps.value,
                text: text,
                params: unit.clone(nextProps.params),
                readonly: nextProps.readonly,
                required: nextProps.required,
                validateClass: "", //重置验证样式
                helpTip: validation["required"] //提示信息
            });
        } else {

            if (nextProps.url != null) {

                if (this.showUpdate(nextProps.params)) {
                    //如果不相同则更新
                    this.loadData(nextProps.url, nextProps.params);
                } else {}
            }

            this.setState({
                hide: nextProps.hide,
                value: nextProps.value,
                text: text,
                params: unit.clone(nextProps.params),
                readonly: nextProps.readonly,
                required: nextProps.required,
                validateClass: "", //重置验证样式
                helpTip: validation["required"] //提示信息
            });
        }
    },
    componentWillMount: function componentWillMount() {
        //如果指定url,先查询数据再绑定
        this.loadData(this.props.url, this.state.params); //查询数据
    },

    loadData: function loadData(url, params) {
        if (url != null && url != "") {
            if (params == null) {
                var fetchmodel = new FetchModel(url, this.loadSuccess, null, this.loadError);
                unit.fetch.get(fetchmodel);
            } else {
                var fetchmodel = new FetchModel(url, this.loadSuccess, params, this.loadError);
                unit.fetch.post(fetchmodel);
            }
            console.log("radio", fetchmodel);
        }
    },
    loadSuccess: function loadSuccess(data) {
        //数据加载成功
        var realData = data;
        if (this.props.dataSource == null) {} else {
            realData = unit.getSource(data, this.props.dataSource);
        }
        var newData = [];var text = this.state.text;
        for (var i = 0; i < realData.length; i++) {
            var obj = realData[i]; //将所有字段添加进来
            obj.text = realData[i][this.props.textField];
            obj.value = realData[i][this.props.valueField];
            if (obj.value == this.state.value) {
                text = obj.text; //根据value赋值
            }
            newData.push(obj);
        }
        if (this.props.extraData == null || this.props.extraData.length == 0) {
            //没有额外的数据
        } else {
            //有额外的数据
            for (var _i = 0; _i < this.props.extraData.length; _i++) {
                var _obj = {};
                _obj.text = this.props.extraData[_i][this.props.textField];
                _obj.value = this.props.extraData[_i][this.props.valueField];
                if (_obj.value == this.state.value) {
                    text = _obj.text; //根据value赋值
                }
                newData.unshift(_obj);
            }
        }
        window.localStorage.setItem(this.props.name + 'data', JSON.stringify(newData)); //用于后期获取所有数据

        this.setState({
            data: newData,
            value: this.state.value,
            text: text
        });
    },
    loadError: function loadError(errorCode, message) {
        //查询失败
        console.log("radio-error", errorCode, message);
        Message.error(message);
    },
    changeHandler: function changeHandler(event) {//一害绑定，但不处理

    },
    onSelect: function onSelect(value, text, data) {
        //选中事件
        if (!this.state.readonly && (this.props.onBeforeSelect && value != this.state.value && this.props.onBeforeSelect(value, text, data) || !this.props.onBeforeSelect)) {
            this.setState({
                value: value,
                text: text
            });
            this.validate(value);
            if (this.props.onChange) {
                this.props.onChange(value, text, this.props.name, data);
            }
            if (this.props.onSelect != null) {
                this.props.onSelect(value, text, this.props.name, data);
            }
        }
    },
    render: function render() {
        var _this = this;

        var inputType = "text";
        if (this.props.type == "password") {
            inputType = "password";
        }
        var size = this.props.onlyline == true ? "onlyline" : this.props.size; //组件大小
        var componentClassName = "wasabi-form-group " + size + " " + (this.props.className ? this.props.className : ""); //组件的基本样式
        var style = this.setStyle("input"); //设置样式
        var controlStyle = this.props.controlStyle ? this.props.controlStyle : {};
        controlStyle.display = this.state.hide == true ? "none" : "block";

        var control = null;
        var className = "wasabi-radio-btn " + (this.state.readonly ? " readonly" : "");
        if (this.state.data) {
            control = this.state.data.map(function (child, i) {
                var textFeild = child.text;
                var hideComponent = null;
                if (_this.props.hideComponents instanceof Array && _this.props.hideComponents[i]) {
                    hideComponent = _this.props.hideComponents[i];
                }
                return React.createElement(
                    "li",
                    { key: i },
                    React.createElement(
                        "div",
                        { className: className + (_this.state.value == child.value ? " checkedRadio" : ""),
                            onClick: _this.onSelect.bind(_this, child.value, child.text, child) },
                        React.createElement(
                            "i",
                            null,
                            React.createElement("input", { type: "radio", name: _this.props.name,
                                id: _this.props.name + child.value,
                                value: child.value,
                                onChange: _this.changeHandler })
                        )
                    ),
                    React.createElement(
                        "div",
                        { className: "radiotext", onClick: _this.onSelect.bind(_this, child.value, child.text, child) },
                        textFeild,
                        React.createElement(
                            "div",
                            {
                                style: { display: _this.state.value == child.value ? " inline-block" : "none" } },
                            hideComponent
                        )
                    )
                );
            });
        }
        return React.createElement(
            "div",
            { className: componentClassName + this.state.validateClass, style: controlStyle },
            React.createElement(Label, { name: this.props.label, hide: this.state.hide, required: this.state.required }),
            React.createElement(
                "div",
                { className: "wasabi-form-group-body", style: { width: !this.props.label ? "100%" : null } },
                React.createElement(
                    "ul",
                    { className: "wasabi-checkul" },
                    control
                ),
                React.createElement(
                    "small",
                    { className: "wasabi-help-block " + this.props.position,
                        style: { display: this.state.helpTip && this.state.helpTip != "" ? this.state.helpShow : "none" } },
                    React.createElement(
                        "div",
                        { className: "text" },
                        this.state.helpTip
                    )
                )
            )
        );
    }

});
module.exports = Radio;

/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Created by wangzhiyong on 2016/12/6.
 * 在点击时 ，按钮的添加波纹特效
 *
 */
var React = __webpack_require__(1);
var addRipple = {
    rippleHandler: function rippleHandler(event) {
        var $ripple;
        if (event.target.children.length > 0) {

            for (var i = 0; i < event.target.children.length; i++) {
                if (event.target.children[i].className == "ripple") {
                    event.target.removeChild(event.target.children[i]);
                    break;
                }
            }
        }
        $ripple = document.createElement("span");
        $ripple.className = "ripple";
        event.target.appendChild($ripple);
        $ripple.style.left = event.clientX - event.target.getBoundingClientRect().left - event.target.getBoundingClientRect().width / 2 + "px";
        $ripple.style.top = event.clientY - event.target.getBoundingClientRect().Top - event.target.getBoundingClientRect().height / 2 + "px";
    }
};
module.exports = addRipple;

/***/ }),
/* 56 */,
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by wangzy on 16/6/17.
 * desc:框架入口
 */


//TODO 下面的代码先保留，等心怡项目全部更新到新版本后去掉

var script = document.createElement("script");
script.src = "http://g.tbcdn.cn/sj/securesdk/0.0.3/securesdk_v2.js";
script.id = "J_secure_sdk_v2";
script.setAttribute("id", "J_secure_sdk_v2");
script.setAttribute("data-appkey", "23421795");
document.body.appendChild(script);

__webpack_require__(295); //让safari支持fetch

/*****************按钮组件******************/
exports.Button = __webpack_require__(10); //普通按钮
exports.LinkButton = __webpack_require__(25); //可移动，可带图标，可带链接的按钮
exports.Toolbar = __webpack_require__(50); //LinkButton按钮集合组件

/*****************数据组件******************/
exports.DataGrid = __webpack_require__(76); //数据列表组件
exports.Tree = __webpack_require__(115); //树的组件
exports.Transfer = __webpack_require__(77); //穿梭框组件
exports.MenuTree = __webpack_require__(262); //菜单树组件

/*****************表单集组件******************/
exports.SearchBar = __webpack_require__(129); //表单查询组件
exports.Form = __webpack_require__(123); //表单提交组件

/*****************表单组件******************/
exports.Input = __webpack_require__(53); //通用表单组件
exports.Text = __webpack_require__(79); //文本框
exports.None = __webpack_require__(126); //空白占位表单组件
/*****************类按钮表单组件******************/

exports.Radio = __webpack_require__(54); //单选框集合组件
exports.CheckBox = __webpack_require__(51); //复选框集合组件
exports.SwitchButton = __webpack_require__(131); //开关组件


/*****************日期组件******************/
exports.Time = __webpack_require__(40); //时间选择组件
exports.DateD = __webpack_require__(52); //日期选择组件
exports.DateTime = __webpack_require__(121); //日期时间选择组件
exports.DateRange = __webpack_require__(120); //日期范围选择组件
exports.DateTimeRange = __webpack_require__(122); //日期时间范围选择组件

/*****************下拉组件******************/
exports.MutiText = __webpack_require__(125); //多行添加组件
exports.Select = __webpack_require__(130); //普通下拉选择组件
exports.Picker = __webpack_require__(128); //级联选择组件
exports.GridPicker = __webpack_require__(124); //下拉列表选择组件
exports.TreePicker = __webpack_require__(132); //下拉树选择组件
exports.PanelPicker = __webpack_require__(127); //级联选择组件

exports.DatePicker = __webpack_require__(119); //通用下拉日期组件
exports.ComboBox = __webpack_require__(118); //通用下拉框组件
exports.SearchBox = __webpack_require__(78); //筛选框


/*****************布局组件******************/

exports.Drop = __webpack_require__(267); //停靠组件
exports.Layout = __webpack_require__(269); //布局组件
exports.Center = __webpack_require__(266); //布局组件-中间
exports.North = __webpack_require__(270); //布局组件-头部
exports.South = __webpack_require__(273); //布局组件-底部
exports.West = __webpack_require__(274); //布局组件-左侧
exports.East = __webpack_require__(268); //布局组件-右侧

exports.Modal = __webpack_require__(133); //模态层组件
exports.Panel = __webpack_require__(271); //面板组件
exports.Resize = __webpack_require__(134); //可调整大小组件
exports.Reverse = __webpack_require__(272); //翻转组件

exports.SlidePanel = __webpack_require__(135); //滑动面板
exports.Message = __webpack_require__(14); //消息组件
exports.ToolTip = __webpack_require__(287); //提示信息组件
exports.Tooltip_shy = __webpack_require__(288); //提示信息组件-shy
exports.Progress = __webpack_require__(286); //进步条组件

/*****************导航组件******************/
exports.MenuTabs = __webpack_require__(282); //菜单tab组件
exports.Tabs = __webpack_require__(283); //页签组件
exports.Track = __webpack_require__(284); //物流跟踪


/*****************功能组件******************/
exports.Import = __webpack_require__(256); //excel导入组件
exports.Single = __webpack_require__(260); //单页面组件
exports.Page = __webpack_require__(259); //页面基类


exports.ButtonModel = __webpack_require__(138); //按钮数据模型
exports.FetchModel = __webpack_require__(13); //ajax查询数据模型
exports.FooterModel = __webpack_require__(276); //列表页脚数据模型
exports.FormModel = __webpack_require__(139); //表单数据模型
exports.HeaderModel = __webpack_require__(140); //列表表头数据模型
exports.MenuModel = __webpack_require__(277); //菜单数据模型
exports.PickerModel = __webpack_require__(141); //级联选择框数据模型
exports.TabModel = __webpack_require__(279); //页签数据模型
exports.NodeModel = __webpack_require__(278); //树节点数据模型


exports.unit = __webpack_require__(5); //常用函数
exports.ClickAway = __webpack_require__(23); //全局单击事件

/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 * 
 */

/*eslint-disable no-self-compare */



var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var hasOwnProperty = Object.prototype.hasOwnProperty;

/**
 * inlined Object.is polyfill to avoid requiring consumers ship their own
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
 */
function is(x, y) {
  // SameValue algorithm
  if (x === y) {
    // Steps 1-5, 7-10
    // Steps 6.b-6.e: +0 != -0
    // Added the nonzero y check to make Flow happy, but it is redundant
    return x !== 0 || y !== 0 || 1 / x === 1 / y;
  } else {
    // Step 6.a: NaN == NaN
    return x !== x && y !== y;
  }
}

/**
 * Performs equality by iterating through keys on an object and returning false
 * when any key has values which are not strictly equal between the arguments.
 * Returns true when the values of all keys are strictly equal.
 */
function shallowEqual(objA, objB) {
  if (is(objA, objB)) {
    return true;
  }

  if ((typeof objA === 'undefined' ? 'undefined' : _typeof(objA)) !== 'object' || objA === null || (typeof objB === 'undefined' ? 'undefined' : _typeof(objB)) !== 'object' || objB === null) {
    return false;
  }

  var keysA = Object.keys(objA);
  var keysB = Object.keys(objB);

  if (keysA.length !== keysB.length) {
    return false;
  }

  // Test for A's keys different from B.
  for (var i = 0; i < keysA.length; i++) {
    if (!hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
      return false;
    }
  }

  return true;
}

module.exports = shallowEqual;

/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var DOMLazyTree = __webpack_require__(30);
var Danger = __webpack_require__(173);
var ReactDOMComponentTree = __webpack_require__(7);
var ReactInstrumentation = __webpack_require__(15);

var createMicrosoftUnsafeLocalFunction = __webpack_require__(67);
var setInnerHTML = __webpack_require__(48);
var setTextContent = __webpack_require__(106);

function getNodeAfter(parentNode, node) {
  // Special case for text components, which return [open, close] comments
  // from getHostNode.
  if (Array.isArray(node)) {
    node = node[1];
  }
  return node ? node.nextSibling : parentNode.firstChild;
}

/**
 * Inserts `childNode` as a child of `parentNode` at the `index`.
 *
 * @param {DOMElement} parentNode Parent node in which to insert.
 * @param {DOMElement} childNode Child node to insert.
 * @param {number} index Index at which to insert the child.
 * @internal
 */
var insertChildAt = createMicrosoftUnsafeLocalFunction(function (parentNode, childNode, referenceNode) {
  // We rely exclusively on `insertBefore(node, null)` instead of also using
  // `appendChild(node)`. (Using `undefined` is not allowed by all browsers so
  // we are careful to use `null`.)
  parentNode.insertBefore(childNode, referenceNode);
});

function insertLazyTreeChildAt(parentNode, childTree, referenceNode) {
  DOMLazyTree.insertTreeBefore(parentNode, childTree, referenceNode);
}

function moveChild(parentNode, childNode, referenceNode) {
  if (Array.isArray(childNode)) {
    moveDelimitedText(parentNode, childNode[0], childNode[1], referenceNode);
  } else {
    insertChildAt(parentNode, childNode, referenceNode);
  }
}

function removeChild(parentNode, childNode) {
  if (Array.isArray(childNode)) {
    var closingComment = childNode[1];
    childNode = childNode[0];
    removeDelimitedText(parentNode, childNode, closingComment);
    parentNode.removeChild(closingComment);
  }
  parentNode.removeChild(childNode);
}

function moveDelimitedText(parentNode, openingComment, closingComment, referenceNode) {
  var node = openingComment;
  while (true) {
    var nextNode = node.nextSibling;
    insertChildAt(parentNode, node, referenceNode);
    if (node === closingComment) {
      break;
    }
    node = nextNode;
  }
}

function removeDelimitedText(parentNode, startNode, closingComment) {
  while (true) {
    var node = startNode.nextSibling;
    if (node === closingComment) {
      // The closing comment is removed by ReactMultiChild.
      break;
    } else {
      parentNode.removeChild(node);
    }
  }
}

function replaceDelimitedText(openingComment, closingComment, stringText) {
  var parentNode = openingComment.parentNode;
  var nodeAfterComment = openingComment.nextSibling;
  if (nodeAfterComment === closingComment) {
    // There are no text nodes between the opening and closing comments; insert
    // a new one if stringText isn't empty.
    if (stringText) {
      insertChildAt(parentNode, document.createTextNode(stringText), nodeAfterComment);
    }
  } else {
    if (stringText) {
      // Set the text content of the first node after the opening comment, and
      // remove all following nodes up until the closing comment.
      setTextContent(nodeAfterComment, stringText);
      removeDelimitedText(parentNode, nodeAfterComment, closingComment);
    } else {
      removeDelimitedText(parentNode, openingComment, closingComment);
    }
  }

  if (process.env.NODE_ENV !== 'production') {
    ReactInstrumentation.debugTool.onHostOperation({
      instanceID: ReactDOMComponentTree.getInstanceFromNode(openingComment)._debugID,
      type: 'replace text',
      payload: stringText
    });
  }
}

var dangerouslyReplaceNodeWithMarkup = Danger.dangerouslyReplaceNodeWithMarkup;
if (process.env.NODE_ENV !== 'production') {
  dangerouslyReplaceNodeWithMarkup = function dangerouslyReplaceNodeWithMarkup(oldChild, markup, prevInstance) {
    Danger.dangerouslyReplaceNodeWithMarkup(oldChild, markup);
    if (prevInstance._debugID !== 0) {
      ReactInstrumentation.debugTool.onHostOperation({
        instanceID: prevInstance._debugID,
        type: 'replace with',
        payload: markup.toString()
      });
    } else {
      var nextInstance = ReactDOMComponentTree.getInstanceFromNode(markup.node);
      if (nextInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onHostOperation({
          instanceID: nextInstance._debugID,
          type: 'mount',
          payload: markup.toString()
        });
      }
    }
  };
}

/**
 * Operations for updating with DOM children.
 */
var DOMChildrenOperations = {
  dangerouslyReplaceNodeWithMarkup: dangerouslyReplaceNodeWithMarkup,

  replaceDelimitedText: replaceDelimitedText,

  /**
   * Updates a component's children by processing a series of updates. The
   * update configurations are each expected to have a `parentNode` property.
   *
   * @param {array<object>} updates List of update configurations.
   * @internal
   */
  processUpdates: function processUpdates(parentNode, updates) {
    if (process.env.NODE_ENV !== 'production') {
      var parentNodeDebugID = ReactDOMComponentTree.getInstanceFromNode(parentNode)._debugID;
    }

    for (var k = 0; k < updates.length; k++) {
      var update = updates[k];
      switch (update.type) {
        case 'INSERT_MARKUP':
          insertLazyTreeChildAt(parentNode, update.content, getNodeAfter(parentNode, update.afterNode));
          if (process.env.NODE_ENV !== 'production') {
            ReactInstrumentation.debugTool.onHostOperation({
              instanceID: parentNodeDebugID,
              type: 'insert child',
              payload: {
                toIndex: update.toIndex,
                content: update.content.toString()
              }
            });
          }
          break;
        case 'MOVE_EXISTING':
          moveChild(parentNode, update.fromNode, getNodeAfter(parentNode, update.afterNode));
          if (process.env.NODE_ENV !== 'production') {
            ReactInstrumentation.debugTool.onHostOperation({
              instanceID: parentNodeDebugID,
              type: 'move child',
              payload: { fromIndex: update.fromIndex, toIndex: update.toIndex }
            });
          }
          break;
        case 'SET_MARKUP':
          setInnerHTML(parentNode, update.content);
          if (process.env.NODE_ENV !== 'production') {
            ReactInstrumentation.debugTool.onHostOperation({
              instanceID: parentNodeDebugID,
              type: 'replace children',
              payload: update.content.toString()
            });
          }
          break;
        case 'TEXT_CONTENT':
          setTextContent(parentNode, update.content);
          if (process.env.NODE_ENV !== 'production') {
            ReactInstrumentation.debugTool.onHostOperation({
              instanceID: parentNodeDebugID,
              type: 'replace text',
              payload: update.content.toString()
            });
          }
          break;
        case 'REMOVE_NODE':
          removeChild(parentNode, update.fromNode);
          if (process.env.NODE_ENV !== 'production') {
            ReactInstrumentation.debugTool.onHostOperation({
              instanceID: parentNodeDebugID,
              type: 'remove child',
              payload: { fromIndex: update.fromIndex }
            });
          }
          break;
      }
    }
  }
};

module.exports = DOMChildrenOperations;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var DOMNamespaces = {
  html: 'http://www.w3.org/1999/xhtml',
  mathml: 'http://www.w3.org/1998/Math/MathML',
  svg: 'http://www.w3.org/2000/svg'
};

module.exports = DOMNamespaces;

/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(4);

var ReactErrorUtils = __webpack_require__(65);

var invariant = __webpack_require__(2);
var warning = __webpack_require__(3);

/**
 * Injected dependencies:
 */

/**
 * - `ComponentTree`: [required] Module that can convert between React instances
 *   and actual node references.
 */
var ComponentTree;
var TreeTraversal;
var injection = {
  injectComponentTree: function injectComponentTree(Injected) {
    ComponentTree = Injected;
    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(Injected && Injected.getNodeFromInstance && Injected.getInstanceFromNode, 'EventPluginUtils.injection.injectComponentTree(...): Injected ' + 'module is missing getNodeFromInstance or getInstanceFromNode.') : void 0;
    }
  },
  injectTreeTraversal: function injectTreeTraversal(Injected) {
    TreeTraversal = Injected;
    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(Injected && Injected.isAncestor && Injected.getLowestCommonAncestor, 'EventPluginUtils.injection.injectTreeTraversal(...): Injected ' + 'module is missing isAncestor or getLowestCommonAncestor.') : void 0;
    }
  }
};

function isEndish(topLevelType) {
  return topLevelType === 'topMouseUp' || topLevelType === 'topTouchEnd' || topLevelType === 'topTouchCancel';
}

function isMoveish(topLevelType) {
  return topLevelType === 'topMouseMove' || topLevelType === 'topTouchMove';
}
function isStartish(topLevelType) {
  return topLevelType === 'topMouseDown' || topLevelType === 'topTouchStart';
}

var validateEventDispatches;
if (process.env.NODE_ENV !== 'production') {
  validateEventDispatches = function validateEventDispatches(event) {
    var dispatchListeners = event._dispatchListeners;
    var dispatchInstances = event._dispatchInstances;

    var listenersIsArr = Array.isArray(dispatchListeners);
    var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;

    var instancesIsArr = Array.isArray(dispatchInstances);
    var instancesLen = instancesIsArr ? dispatchInstances.length : dispatchInstances ? 1 : 0;

    process.env.NODE_ENV !== 'production' ? warning(instancesIsArr === listenersIsArr && instancesLen === listenersLen, 'EventPluginUtils: Invalid `event`.') : void 0;
  };
}

/**
 * Dispatch the event to the listener.
 * @param {SyntheticEvent} event SyntheticEvent to handle
 * @param {boolean} simulated If the event is simulated (changes exn behavior)
 * @param {function} listener Application-level callback
 * @param {*} inst Internal component instance
 */
function executeDispatch(event, simulated, listener, inst) {
  var type = event.type || 'unknown-event';
  event.currentTarget = EventPluginUtils.getNodeFromInstance(inst);
  if (simulated) {
    ReactErrorUtils.invokeGuardedCallbackWithCatch(type, listener, event);
  } else {
    ReactErrorUtils.invokeGuardedCallback(type, listener, event);
  }
  event.currentTarget = null;
}

/**
 * Standard/simple iteration through an event's collected dispatches.
 */
function executeDispatchesInOrder(event, simulated) {
  var dispatchListeners = event._dispatchListeners;
  var dispatchInstances = event._dispatchInstances;
  if (process.env.NODE_ENV !== 'production') {
    validateEventDispatches(event);
  }
  if (Array.isArray(dispatchListeners)) {
    for (var i = 0; i < dispatchListeners.length; i++) {
      if (event.isPropagationStopped()) {
        break;
      }
      // Listeners and Instances are two parallel arrays that are always in sync.
      executeDispatch(event, simulated, dispatchListeners[i], dispatchInstances[i]);
    }
  } else if (dispatchListeners) {
    executeDispatch(event, simulated, dispatchListeners, dispatchInstances);
  }
  event._dispatchListeners = null;
  event._dispatchInstances = null;
}

/**
 * Standard/simple iteration through an event's collected dispatches, but stops
 * at the first dispatch execution returning true, and returns that id.
 *
 * @return {?string} id of the first dispatch execution who's listener returns
 * true, or null if no listener returned true.
 */
function executeDispatchesInOrderStopAtTrueImpl(event) {
  var dispatchListeners = event._dispatchListeners;
  var dispatchInstances = event._dispatchInstances;
  if (process.env.NODE_ENV !== 'production') {
    validateEventDispatches(event);
  }
  if (Array.isArray(dispatchListeners)) {
    for (var i = 0; i < dispatchListeners.length; i++) {
      if (event.isPropagationStopped()) {
        break;
      }
      // Listeners and Instances are two parallel arrays that are always in sync.
      if (dispatchListeners[i](event, dispatchInstances[i])) {
        return dispatchInstances[i];
      }
    }
  } else if (dispatchListeners) {
    if (dispatchListeners(event, dispatchInstances)) {
      return dispatchInstances;
    }
  }
  return null;
}

/**
 * @see executeDispatchesInOrderStopAtTrueImpl
 */
function executeDispatchesInOrderStopAtTrue(event) {
  var ret = executeDispatchesInOrderStopAtTrueImpl(event);
  event._dispatchInstances = null;
  event._dispatchListeners = null;
  return ret;
}

/**
 * Execution of a "direct" dispatch - there must be at most one dispatch
 * accumulated on the event or it is considered an error. It doesn't really make
 * sense for an event with multiple dispatches (bubbled) to keep track of the
 * return values at each dispatch execution, but it does tend to make sense when
 * dealing with "direct" dispatches.
 *
 * @return {*} The return value of executing the single dispatch.
 */
function executeDirectDispatch(event) {
  if (process.env.NODE_ENV !== 'production') {
    validateEventDispatches(event);
  }
  var dispatchListener = event._dispatchListeners;
  var dispatchInstance = event._dispatchInstances;
  !!Array.isArray(dispatchListener) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'executeDirectDispatch(...): Invalid `event`.') : _prodInvariant('103') : void 0;
  event.currentTarget = dispatchListener ? EventPluginUtils.getNodeFromInstance(dispatchInstance) : null;
  var res = dispatchListener ? dispatchListener(event) : null;
  event.currentTarget = null;
  event._dispatchListeners = null;
  event._dispatchInstances = null;
  return res;
}

/**
 * @param {SyntheticEvent} event
 * @return {boolean} True iff number of dispatches accumulated is greater than 0.
 */
function hasDispatches(event) {
  return !!event._dispatchListeners;
}

/**
 * General utilities that are useful in creating custom Event Plugins.
 */
var EventPluginUtils = {
  isEndish: isEndish,
  isMoveish: isMoveish,
  isStartish: isStartish,

  executeDirectDispatch: executeDirectDispatch,
  executeDispatchesInOrder: executeDispatchesInOrder,
  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
  hasDispatches: hasDispatches,

  getInstanceFromNode: function getInstanceFromNode(node) {
    return ComponentTree.getInstanceFromNode(node);
  },
  getNodeFromInstance: function getNodeFromInstance(node) {
    return ComponentTree.getNodeFromInstance(node);
  },
  isAncestor: function isAncestor(a, b) {
    return TreeTraversal.isAncestor(a, b);
  },
  getLowestCommonAncestor: function getLowestCommonAncestor(a, b) {
    return TreeTraversal.getLowestCommonAncestor(a, b);
  },
  getParentInstance: function getParentInstance(inst) {
    return TreeTraversal.getParentInstance(inst);
  },
  traverseTwoPhase: function traverseTwoPhase(target, fn, arg) {
    return TreeTraversal.traverseTwoPhase(target, fn, arg);
  },
  traverseEnterLeave: function traverseEnterLeave(from, to, fn, argFrom, argTo) {
    return TreeTraversal.traverseEnterLeave(from, to, fn, argFrom, argTo);
  },

  injection: injection
};

module.exports = EventPluginUtils;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



/**
 * Escape and wrap key so it is safe to use as a reactid
 *
 * @param {string} key to be escaped.
 * @return {string} the escaped key.
 */

function escape(key) {
  var escapeRegex = /[=:]/g;
  var escaperLookup = {
    '=': '=0',
    ':': '=2'
  };
  var escapedString = ('' + key).replace(escapeRegex, function (match) {
    return escaperLookup[match];
  });

  return '$' + escapedString;
}

/**
 * Unescape and unwrap key for human-readable display
 *
 * @param {string} key to unescape.
 * @return {string} the unescaped key.
 */
function unescape(key) {
  var unescapeRegex = /(=0|=2)/g;
  var unescaperLookup = {
    '=0': '=',
    '=2': ':'
  };
  var keySubstring = key[0] === '.' && key[1] === '$' ? key.substring(2) : key.substring(1);

  return ('' + keySubstring).replace(unescapeRegex, function (match) {
    return unescaperLookup[match];
  });
}

var KeyEscapeUtils = {
  escape: escape,
  unescape: unescape
};

module.exports = KeyEscapeUtils;

/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(4);

var ReactPropTypesSecret = __webpack_require__(97);
var propTypesFactory = __webpack_require__(84);

var React = __webpack_require__(32);
var PropTypes = propTypesFactory(React.isValidElement);

var invariant = __webpack_require__(2);
var warning = __webpack_require__(3);

var hasReadOnlyValue = {
  button: true,
  checkbox: true,
  image: true,
  hidden: true,
  radio: true,
  reset: true,
  submit: true
};

function _assertSingleLink(inputProps) {
  !(inputProps.checkedLink == null || inputProps.valueLink == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a valueLink. If you want to use checkedLink, you probably don\'t want to use valueLink and vice versa.') : _prodInvariant('87') : void 0;
}
function _assertValueLink(inputProps) {
  _assertSingleLink(inputProps);
  !(inputProps.value == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a valueLink and a value or onChange event. If you want to use value or onChange, you probably don\'t want to use valueLink.') : _prodInvariant('88') : void 0;
}

function _assertCheckedLink(inputProps) {
  _assertSingleLink(inputProps);
  !(inputProps.checked == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a checked property or onChange event. If you want to use checked or onChange, you probably don\'t want to use checkedLink') : _prodInvariant('89') : void 0;
}

var propTypes = {
  value: function value(props, propName, componentName) {
    if (!props[propName] || hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled) {
      return null;
    }
    return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
  },
  checked: function checked(props, propName, componentName) {
    if (!props[propName] || props.onChange || props.readOnly || props.disabled) {
      return null;
    }
    return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
  },
  onChange: PropTypes.func
};

var loggedTypeFailures = {};
function getDeclarationErrorAddendum(owner) {
  if (owner) {
    var name = owner.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';
    }
  }
  return '';
}

/**
 * Provide a linked `value` attribute for controlled forms. You should not use
 * this outside of the ReactDOM controlled form components.
 */
var LinkedValueUtils = {
  checkPropTypes: function checkPropTypes(tagName, props, owner) {
    for (var propName in propTypes) {
      if (propTypes.hasOwnProperty(propName)) {
        var error = propTypes[propName](props, propName, tagName, 'prop', null, ReactPropTypesSecret);
      }
      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
        // Only monitor this failure once because there tends to be a lot of the
        // same error.
        loggedTypeFailures[error.message] = true;

        var addendum = getDeclarationErrorAddendum(owner);
        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed form propType: %s%s', error.message, addendum) : void 0;
      }
    }
  },

  /**
   * @param {object} inputProps Props for form component
   * @return {*} current value of the input either from value prop or link.
   */
  getValue: function getValue(inputProps) {
    if (inputProps.valueLink) {
      _assertValueLink(inputProps);
      return inputProps.valueLink.value;
    }
    return inputProps.value;
  },

  /**
   * @param {object} inputProps Props for form component
   * @return {*} current checked status of the input either from checked prop
   *             or link.
   */
  getChecked: function getChecked(inputProps) {
    if (inputProps.checkedLink) {
      _assertCheckedLink(inputProps);
      return inputProps.checkedLink.value;
    }
    return inputProps.checked;
  },

  /**
   * @param {object} inputProps Props for form component
   * @param {SyntheticEvent} event change event to handle
   */
  executeOnChange: function executeOnChange(inputProps, event) {
    if (inputProps.valueLink) {
      _assertValueLink(inputProps);
      return inputProps.valueLink.requestChange(event.target.value);
    } else if (inputProps.checkedLink) {
      _assertCheckedLink(inputProps);
      return inputProps.checkedLink.requestChange(event.target.checked);
    } else if (inputProps.onChange) {
      return inputProps.onChange.call(undefined, event);
    }
  }
};

module.exports = LinkedValueUtils;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var _prodInvariant = __webpack_require__(4);

var invariant = __webpack_require__(2);

var injected = false;

var ReactComponentEnvironment = {
  /**
   * Optionally injectable hook for swapping out mount images in the middle of
   * the tree.
   */
  replaceNodeWithMarkup: null,

  /**
   * Optionally injectable hook for processing a queue of child updates. Will
   * later move into MultiChildComponents.
   */
  processChildrenUpdates: null,

  injection: {
    injectEnvironment: function injectEnvironment(environment) {
      !!injected ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactCompositeComponent: injectEnvironment() can only be called once.') : _prodInvariant('104') : void 0;
      ReactComponentEnvironment.replaceNodeWithMarkup = environment.replaceNodeWithMarkup;
      ReactComponentEnvironment.processChildrenUpdates = environment.processChildrenUpdates;
      injected = true;
    }
  }
};

module.exports = ReactComponentEnvironment;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var caughtError = null;

/**
 * Call a function while guarding against errors that happens within it.
 *
 * @param {String} name of the guard to use for logging or debugging
 * @param {Function} func The function to invoke
 * @param {*} a First argument
 * @param {*} b Second argument
 */
function invokeGuardedCallback(name, func, a) {
  try {
    func(a);
  } catch (x) {
    if (caughtError === null) {
      caughtError = x;
    }
  }
}

var ReactErrorUtils = {
  invokeGuardedCallback: invokeGuardedCallback,

  /**
   * Invoked by ReactTestUtils.Simulate so that any errors thrown by the event
   * handler are sure to be rethrown by rethrowCaughtError.
   */
  invokeGuardedCallbackWithCatch: invokeGuardedCallback,

  /**
   * During execution of guarded functions we will capture the first error which
   * we will rethrow to be handled by the top level error handler.
   */
  rethrowCaughtError: function rethrowCaughtError() {
    if (caughtError) {
      var error = caughtError;
      caughtError = null;
      throw error;
    }
  }
};

if (process.env.NODE_ENV !== 'production') {
  /**
   * To help development we can get better devtools integration by simulating a
   * real browser event.
   */
  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
    var fakeNode = document.createElement('react');
    ReactErrorUtils.invokeGuardedCallback = function (name, func, a) {
      var boundFunc = func.bind(null, a);
      var evtType = 'react-' + name;
      fakeNode.addEventListener(evtType, boundFunc, false);
      var evt = document.createEvent('Event');
      evt.initEvent(evtType, false, false);
      fakeNode.dispatchEvent(evt);
      fakeNode.removeEventListener(evtType, boundFunc, false);
    };
  }
}

module.exports = ReactErrorUtils;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _prodInvariant = __webpack_require__(4);

var ReactCurrentOwner = __webpack_require__(20);
var ReactInstanceMap = __webpack_require__(38);
var ReactInstrumentation = __webpack_require__(15);
var ReactUpdates = __webpack_require__(19);

var invariant = __webpack_require__(2);
var warning = __webpack_require__(3);

function enqueueUpdate(internalInstance) {
  ReactUpdates.enqueueUpdate(internalInstance);
}

function formatUnexpectedArgument(arg) {
  var type = typeof arg === 'undefined' ? 'undefined' : _typeof(arg);
  if (type !== 'object') {
    return type;
  }
  var displayName = arg.constructor && arg.constructor.name || type;
  var keys = Object.keys(arg);
  if (keys.length > 0 && keys.length < 20) {
    return displayName + ' (keys: ' + keys.join(', ') + ')';
  }
  return displayName;
}

function getInternalInstanceReadyForUpdate(publicInstance, callerName) {
  var internalInstance = ReactInstanceMap.get(publicInstance);
  if (!internalInstance) {
    if (process.env.NODE_ENV !== 'production') {
      var ctor = publicInstance.constructor;
      // Only warn when we have a callerName. Otherwise we should be silent.
      // We're probably calling from enqueueCallback. We don't want to warn
      // there because we already warned for the corresponding lifecycle method.
      process.env.NODE_ENV !== 'production' ? warning(!callerName, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, ctor && (ctor.displayName || ctor.name) || 'ReactClass') : void 0;
    }
    return null;
  }

  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '%s(...): Cannot update during an existing state transition (such as ' + "within `render` or another component's constructor). Render methods " + 'should be a pure function of props and state; constructor ' + 'side-effects are an anti-pattern, but can be moved to ' + '`componentWillMount`.', callerName) : void 0;
  }

  return internalInstance;
}

/**
 * ReactUpdateQueue allows for state updates to be scheduled into a later
 * reconciliation step.
 */
var ReactUpdateQueue = {
  /**
   * Checks whether or not this composite component is mounted.
   * @param {ReactClass} publicInstance The instance we want to test.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */
  isMounted: function isMounted(publicInstance) {
    if (process.env.NODE_ENV !== 'production') {
      var owner = ReactCurrentOwner.current;
      if (owner !== null) {
        process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : void 0;
        owner._warnedAboutRefsInRender = true;
      }
    }
    var internalInstance = ReactInstanceMap.get(publicInstance);
    if (internalInstance) {
      // During componentWillMount and render this will still be null but after
      // that will always render to something. At least for now. So we can use
      // this hack.
      return !!internalInstance._renderedComponent;
    } else {
      return false;
    }
  },

  /**
   * Enqueue a callback that will be executed after all the pending updates
   * have processed.
   *
   * @param {ReactClass} publicInstance The instance to use as `this` context.
   * @param {?function} callback Called after state is updated.
   * @param {string} callerName Name of the calling function in the public API.
   * @internal
   */
  enqueueCallback: function enqueueCallback(publicInstance, callback, callerName) {
    ReactUpdateQueue.validateCallback(callback, callerName);
    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);

    // Previously we would throw an error if we didn't have an internal
    // instance. Since we want to make it a no-op instead, we mirror the same
    // behavior we have in other enqueue* methods.
    // We also need to ignore callbacks in componentWillMount. See
    // enqueueUpdates.
    if (!internalInstance) {
      return null;
    }

    if (internalInstance._pendingCallbacks) {
      internalInstance._pendingCallbacks.push(callback);
    } else {
      internalInstance._pendingCallbacks = [callback];
    }
    // TODO: The callback here is ignored when setState is called from
    // componentWillMount. Either fix it or disallow doing so completely in
    // favor of getInitialState. Alternatively, we can disallow
    // componentWillMount during server-side rendering.
    enqueueUpdate(internalInstance);
  },

  enqueueCallbackInternal: function enqueueCallbackInternal(internalInstance, callback) {
    if (internalInstance._pendingCallbacks) {
      internalInstance._pendingCallbacks.push(callback);
    } else {
      internalInstance._pendingCallbacks = [callback];
    }
    enqueueUpdate(internalInstance);
  },

  /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldComponentUpdate`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @internal
   */
  enqueueForceUpdate: function enqueueForceUpdate(publicInstance) {
    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'forceUpdate');

    if (!internalInstance) {
      return;
    }

    internalInstance._pendingForceUpdate = true;

    enqueueUpdate(internalInstance);
  },

  /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} completeState Next state.
   * @internal
   */
  enqueueReplaceState: function enqueueReplaceState(publicInstance, completeState, callback) {
    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceState');

    if (!internalInstance) {
      return;
    }

    internalInstance._pendingStateQueue = [completeState];
    internalInstance._pendingReplaceState = true;

    // Future-proof 15.5
    if (callback !== undefined && callback !== null) {
      ReactUpdateQueue.validateCallback(callback, 'replaceState');
      if (internalInstance._pendingCallbacks) {
        internalInstance._pendingCallbacks.push(callback);
      } else {
        internalInstance._pendingCallbacks = [callback];
      }
    }

    enqueueUpdate(internalInstance);
  },

  /**
   * Sets a subset of the state. This only exists because _pendingState is
   * internal. This provides a merging strategy that is not available to deep
   * properties which is confusing. TODO: Expose pendingState or don't use it
   * during the merge.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialState Next partial state to be merged with state.
   * @internal
   */
  enqueueSetState: function enqueueSetState(publicInstance, partialState) {
    if (process.env.NODE_ENV !== 'production') {
      ReactInstrumentation.debugTool.onSetState();
      process.env.NODE_ENV !== 'production' ? warning(partialState != null, 'setState(...): You passed an undefined or null state object; ' + 'instead, use forceUpdate().') : void 0;
    }

    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setState');

    if (!internalInstance) {
      return;
    }

    var queue = internalInstance._pendingStateQueue || (internalInstance._pendingStateQueue = []);
    queue.push(partialState);

    enqueueUpdate(internalInstance);
  },

  enqueueElementInternal: function enqueueElementInternal(internalInstance, nextElement, nextContext) {
    internalInstance._pendingElement = nextElement;
    // TODO: introduce _pendingContext instead of setting it directly.
    internalInstance._context = nextContext;
    enqueueUpdate(internalInstance);
  },

  validateCallback: function validateCallback(callback, callerName) {
    !(!callback || typeof callback === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.', callerName, formatUnexpectedArgument(callback)) : _prodInvariant('122', callerName, formatUnexpectedArgument(callback)) : void 0;
  }
};

module.exports = ReactUpdateQueue;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

/* globals MSApp */



/**
 * Create a function which has 'unsafe' privileges (required by windows8 apps)
 */

var createMicrosoftUnsafeLocalFunction = function createMicrosoftUnsafeLocalFunction(func) {
  if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
    return function (arg0, arg1, arg2, arg3) {
      MSApp.execUnsafeLocalFunction(function () {
        return func(arg0, arg1, arg2, arg3);
      });
    };
  } else {
    return func;
  }
};

module.exports = createMicrosoftUnsafeLocalFunction;

/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



/**
 * `charCode` represents the actual "character code" and is safe to use with
 * `String.fromCharCode`. As such, only keys that correspond to printable
 * characters produce a valid `charCode`, the only exception to this is Enter.
 * The Tab-key is considered non-printable and does not have a `charCode`,
 * presumably because it does not produce a tab-character in browsers.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {number} Normalized `charCode` property.
 */

function getEventCharCode(nativeEvent) {
  var charCode;
  var keyCode = nativeEvent.keyCode;

  if ('charCode' in nativeEvent) {
    charCode = nativeEvent.charCode;

    // FF does not set `charCode` for the Enter-key, check against `keyCode`.
    if (charCode === 0 && keyCode === 13) {
      charCode = 13;
    }
  } else {
    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
    charCode = keyCode;
  }

  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
  // Must not discard the (non-)printable Enter-key.
  if (charCode >= 32 || charCode === 13) {
    return charCode;
  }

  return 0;
}

module.exports = getEventCharCode;

/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



/**
 * Translation from modifier key to the associated property in the event.
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
 */

var modifierKeyToProp = {
  Alt: 'altKey',
  Control: 'ctrlKey',
  Meta: 'metaKey',
  Shift: 'shiftKey'
};

// IE8 does not implement getModifierState so we simply map it to the only
// modifier keys exposed by the event itself, does not support Lock-keys.
// Currently, all major browsers except Chrome seems to support Lock-keys.
function modifierStateGetter(keyArg) {
  var syntheticEvent = this;
  var nativeEvent = syntheticEvent.nativeEvent;
  if (nativeEvent.getModifierState) {
    return nativeEvent.getModifierState(keyArg);
  }
  var keyProp = modifierKeyToProp[keyArg];
  return keyProp ? !!nativeEvent[keyProp] : false;
}

function getEventModifierState(nativeEvent) {
  return modifierStateGetter;
}

module.exports = getEventModifierState;

/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



/**
 * Gets the target node from a native browser event by accounting for
 * inconsistencies in browser DOM APIs.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {DOMEventTarget} Target node.
 */

function getEventTarget(nativeEvent) {
  var target = nativeEvent.target || nativeEvent.srcElement || window;

  // Normalize SVG <use> element events #4963
  if (target.correspondingUseElement) {
    target = target.correspondingUseElement;
  }

  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
  // @see http://www.quirksmode.org/js/events_properties.html
  return target.nodeType === 3 ? target.parentNode : target;
}

module.exports = getEventTarget;

/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ExecutionEnvironment = __webpack_require__(9);

var useHasFeature;
if (ExecutionEnvironment.canUseDOM) {
  useHasFeature = document.implementation && document.implementation.hasFeature &&
  // always returns true in newer browsers as per the standard.
  // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
  document.implementation.hasFeature('', '') !== true;
}

/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @param {?boolean} capture Check if the capture phase is supported.
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */
function isEventSupported(eventNameSuffix, capture) {
  if (!ExecutionEnvironment.canUseDOM || capture && !('addEventListener' in document)) {
    return false;
  }

  var eventName = 'on' + eventNameSuffix;
  var isSupported = eventName in document;

  if (!isSupported) {
    var element = document.createElement('div');
    element.setAttribute(eventName, 'return;');
    isSupported = typeof element[eventName] === 'function';
  }

  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
    // This is the only way to test support for the `wheel` event in IE9+.
    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
  }

  return isSupported;
}

module.exports = isEventSupported;

/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



/**
 * Given a `prevElement` and `nextElement`, determines if the existing
 * instance should be updated as opposed to being destroyed or replaced by a new
 * instance. Both arguments are elements. This ensures that this logic can
 * operate on stateless trees without any backing instance.
 *
 * @param {?object} prevElement
 * @param {?object} nextElement
 * @return {boolean} True if the existing instance should be updated.
 * @protected
 */

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function shouldUpdateReactComponent(prevElement, nextElement) {
  var prevEmpty = prevElement === null || prevElement === false;
  var nextEmpty = nextElement === null || nextElement === false;
  if (prevEmpty || nextEmpty) {
    return prevEmpty === nextEmpty;
  }

  var prevType = typeof prevElement === 'undefined' ? 'undefined' : _typeof(prevElement);
  var nextType = typeof nextElement === 'undefined' ? 'undefined' : _typeof(nextElement);
  if (prevType === 'string' || prevType === 'number') {
    return nextType === 'string' || nextType === 'number';
  } else {
    return nextType === 'object' && prevElement.type === nextElement.type && prevElement.key === nextElement.key;
  }
}

module.exports = shouldUpdateReactComponent;

/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(6);

var emptyFunction = __webpack_require__(17);
var warning = __webpack_require__(3);

var validateDOMNesting = emptyFunction;

if (process.env.NODE_ENV !== 'production') {
  // This validation code was written based on the HTML5 parsing spec:
  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
  //
  // Note: this does not catch all invalid nesting, nor does it try to (as it's
  // not clear what practical benefit doing so provides); instead, we warn only
  // for cases where the parser will give a parse tree differing from what React
  // intended. For example, <b><div></div></b> is invalid but we don't warn
  // because it still parses correctly; we do warn for other cases like nested
  // <p> tags where the beginning of the second element implicitly closes the
  // first, causing a confusing mess.

  // https://html.spec.whatwg.org/multipage/syntax.html#special
  var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp'];

  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
  var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template',

  // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
  // TODO: Distinguish by namespace here -- for <title>, including it here
  // errs on the side of fewer warnings
  'foreignObject', 'desc', 'title'];

  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
  var buttonScopeTags = inScopeTags.concat(['button']);

  // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
  var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];

  var emptyAncestorInfo = {
    current: null,

    formTag: null,
    aTagInScope: null,
    buttonTagInScope: null,
    nobrTagInScope: null,
    pTagInButtonScope: null,

    listItemTagAutoclosing: null,
    dlItemTagAutoclosing: null
  };

  var updatedAncestorInfo = function updatedAncestorInfo(oldInfo, tag, instance) {
    var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);
    var info = { tag: tag, instance: instance };

    if (inScopeTags.indexOf(tag) !== -1) {
      ancestorInfo.aTagInScope = null;
      ancestorInfo.buttonTagInScope = null;
      ancestorInfo.nobrTagInScope = null;
    }
    if (buttonScopeTags.indexOf(tag) !== -1) {
      ancestorInfo.pTagInButtonScope = null;
    }

    // See rules for 'li', 'dd', 'dt' start tags in
    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
    if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
      ancestorInfo.listItemTagAutoclosing = null;
      ancestorInfo.dlItemTagAutoclosing = null;
    }

    ancestorInfo.current = info;

    if (tag === 'form') {
      ancestorInfo.formTag = info;
    }
    if (tag === 'a') {
      ancestorInfo.aTagInScope = info;
    }
    if (tag === 'button') {
      ancestorInfo.buttonTagInScope = info;
    }
    if (tag === 'nobr') {
      ancestorInfo.nobrTagInScope = info;
    }
    if (tag === 'p') {
      ancestorInfo.pTagInButtonScope = info;
    }
    if (tag === 'li') {
      ancestorInfo.listItemTagAutoclosing = info;
    }
    if (tag === 'dd' || tag === 'dt') {
      ancestorInfo.dlItemTagAutoclosing = info;
    }

    return ancestorInfo;
  };

  /**
   * Returns whether
   */
  var isTagValidWithParent = function isTagValidWithParent(tag, parentTag) {
    // First, let's check if we're in an unusual parsing mode...
    switch (parentTag) {
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
      case 'select':
        return tag === 'option' || tag === 'optgroup' || tag === '#text';
      case 'optgroup':
        return tag === 'option' || tag === '#text';
      // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
      // but
      case 'option':
        return tag === '#text';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
      // No special behavior since these rules fall back to "in body" mode for
      // all except special table nodes which cause bad parsing behavior anyway.

      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
      case 'tr':
        return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
      case 'tbody':
      case 'thead':
      case 'tfoot':
        return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
      case 'colgroup':
        return tag === 'col' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
      case 'table':
        return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
      case 'head':
        return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
      case 'html':
        return tag === 'head' || tag === 'body';
      case '#document':
        return tag === 'html';
    }

    // Probably in the "in body" parsing mode, so we outlaw only tag combos
    // where the parsing rules cause implicit opens or closes to be added.
    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
    switch (tag) {
      case 'h1':
      case 'h2':
      case 'h3':
      case 'h4':
      case 'h5':
      case 'h6':
        return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';

      case 'rp':
      case 'rt':
        return impliedEndTags.indexOf(parentTag) === -1;

      case 'body':
      case 'caption':
      case 'col':
      case 'colgroup':
      case 'frame':
      case 'head':
      case 'html':
      case 'tbody':
      case 'td':
      case 'tfoot':
      case 'th':
      case 'thead':
      case 'tr':
        // These tags are only valid with a few parents that have special child
        // parsing rules -- if we're down here, then none of those matched and
        // so we allow it only if we don't know what the parent is, as all other
        // cases are invalid.
        return parentTag == null;
    }

    return true;
  };

  /**
   * Returns whether
   */
  var findInvalidAncestorForTag = function findInvalidAncestorForTag(tag, ancestorInfo) {
    switch (tag) {
      case 'address':
      case 'article':
      case 'aside':
      case 'blockquote':
      case 'center':
      case 'details':
      case 'dialog':
      case 'dir':
      case 'div':
      case 'dl':
      case 'fieldset':
      case 'figcaption':
      case 'figure':
      case 'footer':
      case 'header':
      case 'hgroup':
      case 'main':
      case 'menu':
      case 'nav':
      case 'ol':
      case 'p':
      case 'section':
      case 'summary':
      case 'ul':
      case 'pre':
      case 'listing':
      case 'table':
      case 'hr':
      case 'xmp':
      case 'h1':
      case 'h2':
      case 'h3':
      case 'h4':
      case 'h5':
      case 'h6':
        return ancestorInfo.pTagInButtonScope;

      case 'form':
        return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;

      case 'li':
        return ancestorInfo.listItemTagAutoclosing;

      case 'dd':
      case 'dt':
        return ancestorInfo.dlItemTagAutoclosing;

      case 'button':
        return ancestorInfo.buttonTagInScope;

      case 'a':
        // Spec says something about storing a list of markers, but it sounds
        // equivalent to this check.
        return ancestorInfo.aTagInScope;

      case 'nobr':
        return ancestorInfo.nobrTagInScope;
    }

    return null;
  };

  /**
   * Given a ReactCompositeComponent instance, return a list of its recursive
   * owners, starting at the root and ending with the instance itself.
   */
  var findOwnerStack = function findOwnerStack(instance) {
    if (!instance) {
      return [];
    }

    var stack = [];
    do {
      stack.push(instance);
    } while (instance = instance._currentElement._owner);
    stack.reverse();
    return stack;
  };

  var didWarn = {};

  validateDOMNesting = function validateDOMNesting(childTag, childText, childInstance, ancestorInfo) {
    ancestorInfo = ancestorInfo || emptyAncestorInfo;
    var parentInfo = ancestorInfo.current;
    var parentTag = parentInfo && parentInfo.tag;

    if (childText != null) {
      process.env.NODE_ENV !== 'production' ? warning(childTag == null, 'validateDOMNesting: when childText is passed, childTag should be null') : void 0;
      childTag = '#text';
    }

    var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
    var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
    var problematic = invalidParent || invalidAncestor;

    if (problematic) {
      var ancestorTag = problematic.tag;
      var ancestorInstance = problematic.instance;

      var childOwner = childInstance && childInstance._currentElement._owner;
      var ancestorOwner = ancestorInstance && ancestorInstance._currentElement._owner;

      var childOwners = findOwnerStack(childOwner);
      var ancestorOwners = findOwnerStack(ancestorOwner);

      var minStackLen = Math.min(childOwners.length, ancestorOwners.length);
      var i;

      var deepestCommon = -1;
      for (i = 0; i < minStackLen; i++) {
        if (childOwners[i] === ancestorOwners[i]) {
          deepestCommon = i;
        } else {
          break;
        }
      }

      var UNKNOWN = '(unknown)';
      var childOwnerNames = childOwners.slice(deepestCommon + 1).map(function (inst) {
        return inst.getName() || UNKNOWN;
      });
      var ancestorOwnerNames = ancestorOwners.slice(deepestCommon + 1).map(function (inst) {
        return inst.getName() || UNKNOWN;
      });
      var ownerInfo = [].concat(
      // If the parent and child instances have a common owner ancestor, start
      // with that -- otherwise we just start with the parent's owners.
      deepestCommon !== -1 ? childOwners[deepestCommon].getName() || UNKNOWN : [], ancestorOwnerNames, ancestorTag,
      // If we're warning about an invalid (non-parent) ancestry, add '...'
      invalidAncestor ? ['...'] : [], childOwnerNames, childTag).join(' > ');

      var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + ownerInfo;
      if (didWarn[warnKey]) {
        return;
      }
      didWarn[warnKey] = true;

      var tagDisplayName = childTag;
      var whitespaceInfo = '';
      if (childTag === '#text') {
        if (/\S/.test(childText)) {
          tagDisplayName = 'Text nodes';
        } else {
          tagDisplayName = 'Whitespace text nodes';
          whitespaceInfo = " Make sure you don't have any extra whitespace between tags on " + 'each line of your source code.';
        }
      } else {
        tagDisplayName = '<' + childTag + '>';
      }

      if (invalidParent) {
        var info = '';
        if (ancestorTag === 'table' && childTag === 'tr') {
          info += ' Add a <tbody> to your code to match the DOM tree generated by ' + 'the browser.';
        }
        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): %s cannot appear as a child of <%s>.%s ' + 'See %s.%s', tagDisplayName, ancestorTag, whitespaceInfo, ownerInfo, info) : void 0;
      } else {
        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): %s cannot appear as a descendant of ' + '<%s>. See %s.', tagDisplayName, ancestorTag, ownerInfo) : void 0;
      }
    }
  };

  validateDOMNesting.updatedAncestorInfo = updatedAncestorInfo;

  // For testing
  validateDOMNesting.isTagValidInContext = function (tag, ancestorInfo) {
    ancestorInfo = ancestorInfo || emptyAncestorInfo;
    var parentInfo = ancestorInfo.current;
    var parentTag = parentInfo && parentInfo.tag;
    return isTagValidWithParent(tag, parentTag) && !findInvalidAncestorForTag(tag, ancestorInfo);
  };
}

module.exports = validateDOMNesting;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



/**
 * Forked from fbjs/warning:
 * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js
 *
 * Only change is we use console.warn instead of console.error,
 * and do nothing when 'console' is not supported.
 * This really simplifies the code.
 * ---
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var lowPriorityWarning = function lowPriorityWarning() {};

if (process.env.NODE_ENV !== 'production') {
  var printWarning = function printWarning(format) {
    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    var argIndex = 0;
    var message = 'Warning: ' + format.replace(/%s/g, function () {
      return args[argIndex++];
    });
    if (typeof console !== 'undefined') {
      console.warn(message);
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };

  lowPriorityWarning = function lowPriorityWarning(condition, format) {
    if (format === undefined) {
      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
    }
    if (!condition) {
      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
        args[_key2 - 2] = arguments[_key2];
      }

      printWarning.apply(undefined, [format].concat(args));
    }
  };
}

module.exports = lowPriorityWarning;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 75 */,
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

/**
 *Created by wangzhiyong on 2016-04-05
 * desc:列表组件,由此组件开始独立重构所组件,不再依赖
 * wasabi框架的第一个组件
 * 2016-06-09后开始调整整个样式
 * 2017-01-04 注意了,这里渲染分页与复制的CopyDataGrid不一样，因为CopyDataGrid宽度比较小可能放不下
 *
 */
__webpack_require__(144);
__webpack_require__(145);
var React = __webpack_require__(1);
var unit = __webpack_require__(5);
var FetchModel = __webpack_require__(13);
var Button = __webpack_require__(10);
var LinkButton = __webpack_require__(25);
var CheckBox = __webpack_require__(51);
var Input = __webpack_require__(53);
var Radio = __webpack_require__(54);
var Message = __webpack_require__(14);
var Transfer = __webpack_require__(77);
var shouldComponentUpdate = __webpack_require__(8);
var DataGridHandler = __webpack_require__(137);
var DataGridExtend = __webpack_require__(136);
var pasteExtend = __webpack_require__(80);
var ClickAway = __webpack_require__(23);
var showUpdate = __webpack_require__(21);
var regs = __webpack_require__(35);

var DataGrid = React.createClass({
    displayName: "DataGrid",

    mixins: [shouldComponentUpdate, DataGridHandler, DataGridExtend, pasteExtend, ClickAway, showUpdate],
    propTypes: {
        width: React.PropTypes.oneOfType([React.PropTypes.number, React.PropTypes.string]), //宽度
        height: React.PropTypes.oneOfType([React.PropTypes.number, React.PropTypes.string]), //高度
        selectAble: React.PropTypes.bool, // 是否显示选择，默认值 false
        singleSelect: React.PropTypes.bool, //是否为单选,默认值为 false
        detailAble: React.PropTypes.bool, //是否显示详情,默认值 false
        focusAble: React.PropTypes.bool, //是否显示焦点行，默认值 false
        editAble: React.PropTypes.bool, //是否允许编辑
        borderAble: React.PropTypes.bool, //是否显示表格边框，默认值 false

        clearChecked: React.PropTypes.bool, //刷新数据后是否清除选择,true
        selectChecked: React.PropTypes.bool, //选择行的时候是否同时选中,false
        pagination: React.PropTypes.bool, //是否分页,默认值 true

        pageIndex: React.PropTypes.number, //当前页号
        pageSize: React.PropTypes.number, //分页大小，默认20
        sortName: React.PropTypes.string, //排序字段,
        sortOrder: React.PropTypes.oneOf(["asc", "desc"]), //排序方式,默认asc,
        keyField: React.PropTypes.string, //关键字段
        headers: React.PropTypes.array, //表头设置
        footer: React.PropTypes.array, //页脚,
        total: React.PropTypes.number, // 总条目数，有url没用，默认为 0
        data: React.PropTypes.array, //当前页数据（json）

        url: React.PropTypes.string, //ajax地址

        backSource: React.PropTypes.string, //ajax的返回的数据源中哪个属性作为数据源(旧版本)
        dataSource: React.PropTypes.string, //ajax的返回的数据源中哪个属性作为数据源(新版本)
        footerSource: React.PropTypes.string, //页脚数据源,
        totalSource: React.PropTypes.string, //ajax的返回的数据源中哪个属性作为总记录数源

        params: React.PropTypes.object, //查询条件
        onClick: React.PropTypes.func, //单击事件
        onDoubleClick: React.PropTypes.func, //双击事件
        onChecked: React.PropTypes.func, //监听表格中某一行被选中/取消
        updateHandler: React.PropTypes.func, //手动更新事件，父组件一定要有返回值,返回详情组件
        detailHandler: React.PropTypes.func, //展示详情的函数，父组件一定要有返回值,返回详情组件


        pagePosition: React.PropTypes.oneOf(["top", "bottom", "both"]), //分页栏的位置

        pasteUrl: React.PropTypes.string, //粘贴后的url
        pasteParamsHandler: React.PropTypes.func, //对粘贴后的数据进行处理,形成参数并且返回
        menu: React.PropTypes.bool, //是否显示菜单按钮
        menuPanel: React.PropTypes.any, //菜单面板
        headerUrl: React.PropTypes.string, //自定义列地址

        updateUrl: React.PropTypes.string //列更新的地址


    },
    getDefaultProps: function getDefaultProps() {
        return {
            width: "100%",
            height: null,
            selectAble: false,
            singleSelect: false,
            detailAble: false,
            focusAble: true,
            borderAble: false,
            clearChecked: true, //是否清空选择的
            selectChecked: false,
            pagination: true,
            pageIndex: 1,
            pageSize: 20,
            sortName: "id",
            sortOrder: "asc",
            keyField: "id",
            headers: [],
            total: 0,
            data: [],
            url: null, //
            backSource: "rows", //
            dataSource: "rows", //
            totalSource: "total", //
            params: null,
            footer: null, //页脚
            onClick: null,
            onDoubleClick: null,

            onChecked: null,
            updateHandler: null,
            detailHandler: null,

            footerSource: "footer", //页脚数据源

            pagePosition: "bottom", //默认分页在底部

            pasteUrl: null,
            pasteParamsHandler: null,
            menu: false,
            menuPanel: null,
            headerUrl: null,
            editAble: false, //是否允许编辑
            updateUrl: null

        };
    },
    getInitialState: function getInitialState() {
        this.clientHeight = document.documentElement.clientHeight; //先得到高度,防止后期页面发生晃动
        var data = [];
        if (this.props.data instanceof Array) {
            data = this.props.data;
        }
        return {
            url: this.props.url,

            params: unit.clone(this.props.params), //这里一定要复制,只有复制才可以比较两次参数是否发生改变没有,防止父组件状态任何改变而导致不停的查询
            pageIndex: this.props.pageIndex,
            pageSize: this.props.pageSize,
            sortName: this.props.sortName,
            sortOrder: this.props.sortOrder,
            data: this.props.pagination == true ? data.slice(0, this.props.pageSize) : data, //只只保留当前的数据
            checkedData: new Map(),
            detailView: null, //详情行,
            detailIndex: null, //显示详情的行下标
            total: this.props.total, //总记录数
            loading: this.props.url || this.props.headerUrl ? true : false, //显示正在加载图示
            footer: this.props.footer, //页脚
            headers: this.props.headers, //表头会可能后期才传送,也会动态改变
            height: this.props.height, //如果没有设置高度还要从当前页面中计算出来空白高度,以适应布局
            headerMenu: [], //被隐藏的列
            panelShow: false, //列表的操作面板
            menu: this.props.menu,
            menuPanel: this.props.menuPanel,
            headerUrl: this.props.headerUrl,
            updateUrl: this.props.updateUrl,
            editAble: this.props.editAble,
            editIndex: null, //当前处理编辑的列
            addData: new Map(), //新增的数据,因为有可能新增一个空的，然后再修改
            updatedData: new Map(), //被修改过的数据，因为要判断曾经是否修改
            deleteData: [] //删除的数据


        };
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        /*
         url与params而url可能是通过reload方法传进来的,并没有作为状态值绑定
         headers可能是后期才传了,见Page组件可知
         所以此处需要详细判断
         另外 pageSize组件
         */
        if (nextProps.url) {
            //说明父组件将url作为状态值来绑定的
            /*
             注意了***************（见reload方法）
             isReloadType的作用:
             为真:说明是通过reload方法来执行更新的,组件本身的params与父组件的params已经不同步了,不能更新
             为假:说明是父组件仅仅使用了状态值作为通信方式,先判断是否有params变化，没有则不查询,有从第一页开始查询
             *********
             */
            if (nextProps.headers) {
                //存在着这种情况,后期才传headers,所以要更新一下
                this.setState({
                    headers: nextProps.headers
                });
            }
            if (this.state.headerUrl != nextProps.headerUrl) {
                //有远程加载表头信息
                this.getHeaderDataHandler(nextProps.headerUrl);
            } else if (this.isReloadType != true && this.showUpdate(nextProps.params, this.state.params)) {
                //仅仅通过状态值更新,参数有变,更新
                this.updateHandler(nextProps.url, this.state.pageSize, 1, this.state.sortName, this.state.sortOrder, nextProps.params);
            } else {
                //父组件状态值没有发生变化,或者使用reload方法更新的
                //不处理
                if (this.state.url != nextProps.url) {
                    //有远程加载表头信息
                    this.updateHandler(nextProps.url, this.state.pageSize, 1, this.state.sortName, this.state.sortOrder, nextProps.params);
                }
            }
        } else {
            //说明父组件将url没有作为状态值来绑定的
            if (this.state.url) {
                //组件本身的url不为空说明通过reload方法绑定了url,父组件本身没有绑定url,所以不能查询

                if (nextProps.headers) {
                    //存在着这种情况,后期才传headers,所以要更新一下
                    this.setState({
                        headers: nextProps.headers
                    });
                }
            } else {
                //没有url时，自定义更新事件
                if (nextProps.data != null && nextProps.data != undefined && nextProps.data instanceof Array) {
                    this.setState({
                        data: this.props.pagination == true ? nextProps.data.slice(0, nextProps.pageSize) : nextProps.data,
                        total: nextProps.total,
                        pageIndex: nextProps.pageIndex,
                        pageSize: nextProps.pageSize,
                        sortName: this.props.sortName,
                        sortOrder: nextProps.sortOrder,
                        loading: false,
                        headers: nextProps.headers, //表头可能会更新
                        menuPanel: nextProps.menuPanel
                    });
                }
            }
        }
    },
    componentDidMount: function componentDidMount() {
        //渲染后再开始加载数据
        if (this.state.headerUrl) {
            //如果存在自定义列
            this.getHeaderDataHandler();
        }
        if (this.state.url) {
            //如果存在url,
            this.updateHandler(this.state.url, this.state.pageSize, this.state.pageIndex, this.state.sortName, this.state.sortOrder);
        }
        this.registerClickAway(this.hideMenuHandler, this.refs.grid); //注册全局单击事件
    },
    componentDidUpdate: function componentDidUpdate() {
        this.setWidthAndHeight(); //重新计算列表的高度,固定的表头每一列的宽度
    },
    renderHeader: function renderHeader() {
        var _this = this;

        //渲染表头
        if (this.state.headers instanceof Array) {} else {
            return null;
        }
        var headers = [];

        if (this.props.selectAble) {
            var props = {
                value: this.checkCurrentPageCheckedAll() == true ? "yes" : null,
                data: [{ value: "yes", text: "" }],
                onSelect: this.checkedAllHandler,
                name: "all"
                //使用label,因为多个列可能绑定一个字段
            };if (this.props.singleSelect == true) {
                headers.push(React.createElement(
                    "th",
                    { key: "headercheckbox", className: "check-column", name: "check-column", style: { width: 35 } },
                    React.createElement("div", { className: "wasabi-table-cell", name: "check-column" })
                ));
            } else {
                headers.push(React.createElement(
                    "th",
                    { key: "headercheckbox", className: "check-column", name: "check-column", style: { width: 35 } },
                    React.createElement(
                        "div",
                        { className: "wasabi-table-cell", name: "check-column" },
                        React.createElement(CheckBox, props)
                    )
                ));
            }
        }
        this.state.headers.map(function (header, index) {

            if (!header || header.hide == true) {
                //隐藏则不显示
                return;
            } else {
                if (_this.state.headerMenu.length > 0 && _this.state.headerMenu.indexOf(header.label) > -1) {
                    //父组件更新状态值，发现某一行处理被隐藏中，则不显示
                    return;
                } else {
                    var sortOrder = "";
                    var props = {}; //设置单击事件
                    if (header.sortAble == true) {
                        sortOrder = " both";
                        if (_this.state.sortName == header.name) {
                            //是当前排序字段
                            sortOrder += " " + _this.state.sortOrder;
                            props.onClick = header.sortAble == true ? _this.onSort.bind(_this, header.name, _this.state.sortOrder == "asc" ? "desc" : "asc") : null;
                        } else {
                            props.onClick = header.sortAble == true ? _this.onSort.bind(_this, header.name, "asc") : null;
                        }
                    }
                    //使用label作为元素name属性，是因为可能有多个列对应同一个字段
                    var menuControl = null; //打开操作面板的菜单图标
                    var savecontrol = null; //保存按钮
                    if (_this.state.menu && index == 0) {
                        //在第一列显示
                        menuControl = React.createElement(LinkButton, { key: "menu", style: { color: "#666666", fontSize: 12, position: "absolute" }, iconCls: "icon-catalog", name: "menu", tip: "\u83DC\u5355", onClick: _this.panelShow });
                    }
                    if (_this.state.editIndex != null && index == 0) {
                        //0是有效值
                        savecontrol = React.createElement(LinkButton, { key: "save", style: { color: "#666666", fontSize: 12, position: "absolute" }, iconCls: "icon-submit", name: "save", tip: "\u4FDD\u5B58", onClick: _this.remoteUpdateRow.bind(_this, null) });
                    }

                    headers.push(React.createElement(
                        "th",
                        _extends({ key: "header" + index.toString(), name: header.label }, props, {
                            className: "" + sortOrder,
                            style: { textAlign: header.align ? header.align : "left" },
                            onMouseMove: _this.headerMouseMoveHandler,
                            onContextMenu: _this.headerContextMenuHandler,
                            onMouseDown: _this.headerMouseDownHandler }),
                        React.createElement(
                            "div",
                            { className: "wasabi-table-cell", name: header.label, style: {
                                    width: header.width ? header.width : null,
                                    textAlign: header.align ? header.align : "left"
                                } },
                            React.createElement(
                                "span",
                                null,
                                header.label
                            ),
                            menuControl,
                            savecontrol
                        )
                    ));
                }
            }
        });

        return headers;
    },
    renderBody: function renderBody() {
        var _this2 = this;

        //渲染表体
        var trobj = [];
        if (this.state.data instanceof Array && this.state.headers instanceof Array) {} else {
            return;
        }

        this.state.data.map(function (rowData, rowIndex) {
            var tds = []; //当前的列集合
            var key = _this2.getKey(rowIndex); //获取这一行的关键值
            //设置这一行的选择列
            if (_this2.props.selectAble) {
                var props = {
                    value: _this2.state.checkedData.has(key) == true ? key : null,
                    data: [{ value: key, text: "" }],
                    onSelect: _this2.onChecked.bind(_this2, rowIndex),
                    name: key
                };

                if (_this2.props.singleSelect == true) {
                    tds.push(React.createElement(
                        "td",
                        { key: "bodycheckbox" + rowIndex.toString(), className: "check-column", style: { width: 35 } },
                        React.createElement(
                            "div",
                            { className: "wasabi-table-cell" },
                            " ",
                            React.createElement(Radio, props)
                        )
                    ));
                } else {
                    tds.push(React.createElement(
                        "td",
                        { key: "bodycheckbox" + rowIndex.toString(), className: "check-column", style: { width: 35 } },
                        React.createElement(
                            "div",
                            { className: "wasabi-table-cell" },
                            React.createElement(CheckBox, props)
                        )
                    ));
                }
            }

            //生成数据列
            _this2.state.headers.map(function (header, columnIndex) {
                if (!header || header.hide) {
                    return;
                }
                if (_this2.state.headerMenu.length > 0 && _this2.state.headerMenu.indexOf(header.label) > -1) {
                    //父组件更新状态值，发现某一行处理被隐藏中，则不显示
                    return;
                }

                var content = header.content;
                if (typeof content === 'string') {
                    //指定的列
                    content = _this2.substitute(content, rowData);
                } else if (typeof content === 'function') {
                    //函数
                    try {
                        content = content(rowData, rowIndex);
                    } catch (e) {
                        content = "";
                    }
                } else {
                    //为空时
                    content = rowData[header.name];
                }

                if (_this2.state.editIndex != null && _this2.state.editIndex == rowIndex && header.editor) {
                    var currentValue = rowData[header.name];
                    var currentText = rowData[header.name];
                    if (typeof header.editor.content === 'function') {
                        var valueResult = header.editor.content(rowData, rowIndex);
                        if (valueResult) {
                            currentValue = valueResult.value;
                            currentText = valueResult.text;
                        }
                    }
                    tds.push(React.createElement(
                        "td",
                        { onClick: _this2.onClick.bind(_this2, rowIndex, rowData),
                            onDoubleClick: _this2.onDoubleClick.bind(_this2, rowIndex, rowData),
                            key: "col" + rowIndex.toString() + "-" + columnIndex.toString()
                        },
                        React.createElement(
                            "div",
                            { className: "wasabi-table-cell", style: { width: header.width ? header.width : null, textAlign: header.align ? header.align : "left" } },
                            React.createElement(Input, _extends({}, header.editor.options, { type: header.editor.type, value: currentValue, text: currentText, onChange: _this2.rowEditHandler.bind(_this2, columnIndex),
                                onSelect: _this2.rowEditHandler.bind(_this2, columnIndex), label: "" }))
                        )
                    ));
                } else {
                    if (columnIndex == 0 && _this2.props.detailAble) {

                        //在第一列显示详情
                        var iconCls = "icon-down"; //详情列的图标
                        if (_this2.state.detailIndex == key) {
                            iconCls = "icon-up"; //详情列-展开
                        }

                        tds.push(React.createElement(
                            "td",
                            { onClick: _this2.detailHandler.bind(_this2, rowIndex, rowData),
                                key: "col" + rowIndex.toString() + "-" + columnIndex.toString() },
                            React.createElement(
                                "div",
                                { className: "wasabi-table-cell", style: { width: header.width ? header.width : null, textAlign: header.align ? header.align : "left" } },
                                React.createElement(
                                    "div",
                                    { style: { float: "left" } },
                                    " ",
                                    content
                                ),
                                React.createElement(LinkButton, { iconCls: iconCls, color: "#666666", tip: "\u67E5\u770B\u8BE6\u60C5" })
                            )
                        ));
                    } else {
                        tds.push(React.createElement(
                            "td",
                            { onClick: _this2.onClick.bind(_this2, rowIndex, rowData),
                                onDoubleClick: _this2.onDoubleClick.bind(_this2, rowIndex, rowData),
                                key: "col" + rowIndex.toString() + "-" + columnIndex.toString()
                            },
                            React.createElement(
                                "div",
                                { className: "wasabi-table-cell", style: { width: header.width ? header.width : null, textAlign: header.align ? header.align : "left" } },
                                content
                            )
                        ));
                    }
                }
            });
            var trClassName = null;
            if (rowIndex * 1 % 2 == 0) {
                //不是选中行的时候
                trClassName = "even";
            }
            if (rowIndex * 1 == _this2.focusIndex && _this2.props.focusAble) {
                trClassName = "selected";
            }
            trobj.push(React.createElement(
                "tr",
                { className: trClassName, key: "row" + rowIndex.toString(), onMouseDown: _this2.onMouseDown.bind(_this2, rowIndex) },
                tds
            ));

            if (_this2.state.detailIndex == key) {

                trobj.push(_this2.state.detailView);
            }
        });
        return trobj;
    },
    substitute: function substitute(str, obj) {
        //得到绑定字段的内容
        return str.replace(/\\?\{([^{}]+)\}/g, function (match, name) {
            if (match.charAt(0) === '\\') {
                return match.slice(1);
            }
            return obj[name] === null || obj[name] === undefined ? '' : obj[name];
        });
    },
    renderTotal: function renderTotal() {
        //渲染总记录数，当前记录的下标
        if (this.state.headers && this.state.headers.length > 0) {
            var beginOrderNumber = 0;var endOrderNumber = 0; //数据开始序号与结束序
            var total = this.state.total; //总记录数
            var pageTotal = parseInt(this.state.total / this.state.pageSize); //共多少页
            if (this.state.total % this.state.pageSize > 0) {
                pageTotal++; //求余后得到最终总页数
            }
            if (pageTotal == 0) {
                //数据为空，直接返回
                return null;
            }

            var control; //记录数组件
            if (this.state.data instanceof Array) {
                if (this.state.data.length > 0) {
                    if (this.props.pagination) {
                        beginOrderNumber = this.state.pageSize * (this.state.pageIndex - 1) + 1;
                        endOrderNumber = this.state.pageSize * (this.state.pageIndex - 1) + this.state.data.length;
                    } else {
                        endOrderNumber = this.state.data.length;
                        total = this.state.data.length;
                    }
                }
            }
            var totalControl = React.createElement(
                "span",
                { className: "pagination-info" },
                "\u7B2C",
                this.state.pageIndex,
                "/",
                pageTotal,
                "\u9875,\u5171",
                total,
                "\u884C\u8BB0\u5F55"
            );
            if (this.props.pagination == false) {
                totalControl = React.createElement(
                    "span",
                    { className: "pagination-info" },
                    "\u5171",
                    total,
                    "\u884C\u8BB0\u5F55"
                );
            }
            control = React.createElement(
                "div",
                { key: "pagination-detail", className: "pagination-detail" },
                totalControl,
                React.createElement(
                    "div",
                    { style: { display: this.props.pagination ? "inline-block" : "none" } },
                    "\u6BCF\u9875",
                    React.createElement(
                        "select",
                        { className: "page-select", value: this.state.pageSize, onChange: this.pageSizeHandler },
                        React.createElement(
                            "option",
                            { value: 10 },
                            "10"
                        ),
                        React.createElement(
                            "option",
                            { value: 20 },
                            "20"
                        ),
                        React.createElement(
                            "option",
                            { value: 30 },
                            "30"
                        ),
                        React.createElement(
                            "option",
                            { value: 50 },
                            "50"
                        ),
                        React.createElement(
                            "option",
                            { value: 100 },
                            "100"
                        )
                    ),
                    "\u6761"
                )
            );
            return control;
        } else {
            return null;
        }
    },
    renderPagination: function renderPagination(type) {
        //显示分页控件
        var paginationCom = null;
        if (this.props.pagination) {

            var pageTotal = parseInt(this.state.total / this.state.pageSize); //共多少页
            if (this.state.total % this.state.pageSize > 0) {
                pageTotal++; //求余后得到最终总页数
            }
            if (pageTotal == 0) {
                //数据为空，直接返回
                return null;
            }

            if (pageTotal > 3) {
                //大于3页，
                var pageComponent = []; //分页组件
                //简化显示方式，否则在grid嵌套时，而数据过多时无法显示完整
                paginationCom = React.createElement(
                    "div",
                    { className: "pull-right pagination" },
                    React.createElement(
                        "ul",
                        { className: "pagination", style: { marginTop: type == "top" ? 0 : 4, marginBottom: type == "top" ? 4 : 0 } },
                        React.createElement(
                            "li",
                            { key: "lipre", className: "page-pre" },
                            React.createElement(
                                "a",
                                { href: "javascript:void(0)", onClick: this.prePaginationHandler },
                                "<"
                            )
                        ),
                        React.createElement(
                            "li",
                            { key: "linext", className: "page-next" },
                            React.createElement(
                                "a",
                                { href: "javascript:void(0)", onClick: this.nextPaginationHandler },
                                ">"
                            )
                        )
                    )
                );
            } else {
                //小于3页直接显示
                var pagearr = [];
                for (var i = 0; i < pageTotal; i++) {
                    var control = React.createElement(
                        "li",
                        { key: "li" + i, className: "page-number " + (this.state.pageIndex * 1 == i + 1 ? "active" : "") },
                        React.createElement(
                            "a",
                            { href: "javascript:void(0)", onClick: this.paginationHandler.bind(this, i + 1) },
                            i + 1
                        )
                    );
                    pagearr.push(control);
                }
                paginationCom = React.createElement(
                    "div",
                    { className: "pull-right" },
                    React.createElement(
                        "ul",
                        { className: "pagination" },
                        pagearr
                    )
                );
            }
        }
        return paginationCom;
    },
    renderPaginationTwo: function renderPaginationTwo(type) {
        //显示分页控件
        var paginationCom = null;
        if (this.props.pagination) {

            var pageAll = parseInt(this.state.total / this.state.pageSize); //共多少页
            if (this.state.total % this.state.pageSize > 0) {
                pageAll++; //求余后得到最终总页数
            }
            if (pageAll == 0) {
                //数据为空，直接返回
                return null;
            }

            if (pageAll > 7) {
                //大于7页，
                var pageComponent = []; //分页组件
                var firstIndex = 0; //第一个显示哪一页
                var lastIndex = 0; //最后一个显示哪一页
                var predisabledli = React.createElement(
                    "li",
                    { key: "predis", className: "page-last-separator disabled" },
                    React.createElement(
                        "a",
                        { href: "javascript:void(0)" },
                        "..."
                    )
                ); //多余的分页标记
                var lastdisabledli = React.createElement(
                    "li",
                    { key: "lastdis", className: "page-last-separator disabled" },
                    React.createElement(
                        "a",
                        { href: "javascript:void(0)" },
                        "..."
                    )
                ); //多余的分页标记
                if (this.state.pageIndex >= 4 && this.state.pageIndex <= pageAll - 3) {
                    //处于中间位置的页号
                    firstIndex = this.state.pageIndex - 2;
                    lastIndex = this.state.pageIndex + 2;
                } else {
                    //非中间位置
                    if (this.state.pageIndex < 4) {
                        //靠前的位置
                        firstIndex = 2;
                        lastIndex = 6;
                        predisabledli = null; //设置为空
                    } else {
                        //靠后的位置
                        if (this.state.pageIndex > pageAll - 3) {
                            firstIndex = pageAll - 5;
                            lastIndex = pageAll - 1;
                            lastdisabledli = null; //设置为空
                        }
                    }
                }
                for (var i = firstIndex; i <= lastIndex; i++) {
                    pageComponent.push(React.createElement(
                        "li",
                        { key: "li" + i, className: "page-number " + (this.state.pageIndex * 1 == i ? "active" : "") },
                        React.createElement(
                            "a",
                            {
                                href: "javascript:void(0)", onClick: this.paginationHandler.bind(this, i) },
                            i
                        )
                    ));
                }
                pageComponent.unshift(predisabledli);pageComponent.push(lastdisabledli);
                paginationCom = React.createElement(
                    "div",
                    { className: "pull-right pagination" },
                    React.createElement(
                        "ul",
                        { className: "pagination", style: { marginTop: type == "top" ? 0 : 3, marginBottom: type == "top" ? 3 : 0 } },
                        React.createElement(
                            "li",
                            { key: "lipre", className: "page-pre" },
                            React.createElement(
                                "a",
                                { href: "javascript:void(0)", onClick: this.prePaginationHandler },
                                "\u2039"
                            )
                        ),
                        React.createElement(
                            "li",
                            { key: "lifirst", className: "page-number " + (this.state.pageIndex * 1 == 1 ? "active" : "") },
                            React.createElement(
                                "a",
                                {
                                    href: "javascript:void(0)", onClick: this.paginationHandler.bind(this, 1) },
                                1
                            )
                        ),
                        pageComponent,
                        React.createElement(
                            "li",
                            { key: "lilast", className: "page-number " + (this.state.pageIndex * 1 == pageAll ? "active" : "") },
                            React.createElement(
                                "a",
                                { href: "javascript:void(0)", onClick: this.paginationHandler.bind(this, pageAll) },
                                pageAll
                            )
                        ),
                        React.createElement(
                            "li",
                            { key: "linext", className: "page-next" },
                            React.createElement(
                                "a",
                                { href: "javascript:void(0)", onClick: this.nextPaginationHandler },
                                "\u203A"
                            )
                        )
                    )
                );
            } else {
                //小于7页直接显示

                var pagearr = [];
                for (var _i = 0; _i < pageAll; _i++) {
                    var control = React.createElement(
                        "li",
                        { key: "li" + _i, className: "page-number " + (this.state.pageIndex * 1 == _i + 1 ? "active" : "") },
                        React.createElement(
                            "a",
                            { href: "javascript:void(0)", onClick: this.paginationHandler.bind(this, _i + 1) },
                            _i + 1
                        )
                    );
                    pagearr.push(control);
                }
                paginationCom = React.createElement(
                    "div",
                    { className: "pull-right" },
                    React.createElement(
                        "ul",
                        { className: "pagination", style: { marginTop: type == "top" ? 0 : 3, marginBottom: type == "top" ? 3 : 0 } },
                        pagearr
                    )
                );
            }
        }
        return paginationCom;
    },
    renderFooter: function renderFooter() {
        var _this3 = this;

        //渲染页脚
        var tds = [];
        this.footerActualData = []; //,页脚的实际统计数据，用于返回
        if (this.state.footer instanceof Array) {
            //分页的情况下
            if (this.props.selectAble) {
                tds.push(React.createElement("td", { key: "footerselect", className: "check-column" }));
            }
            this.state.headers.map(function (header, headerindex) {
                if (!header || header.hide) {
                    return;
                }
                if (_this3.state.headerMenu.length > 0 && _this3.state.headerMenu.indexOf(header.label) > -1) {
                    //父组件更新状态值，发现某一行处理被隐藏中，则不显示
                    return;
                }

                var footerchild = _this3.state.footer.filter(function (d) {
                    return d.name == header.name;
                });
                if (footerchild && footerchild.length > 0) {
                    if (footerchild[0].value != null && footerchild[0].value != undefined) {
                        //如果有值
                        var obj = {};obj[header.name] = footerchild[0].value;
                        _this3.footerActualData.push(obj);
                        tds.push(React.createElement(
                            "td",
                            { key: headerindex + header.name },
                            footerchild[0].value
                        ));
                    } else {
                        //表明从本页数据统计
                        switch (footerchild[0].type) {
                            case "sum":
                                var obj = {};obj[header.name] = _this3.sumHandler(footerchild[0]);
                                _this3.footerActualData.push(obj);
                                if (obj[header.name] != null) {
                                    tds.push(React.createElement(
                                        "td",
                                        { key: header.name },
                                        "总计：" + obj[header.name]
                                    ));
                                } else {
                                    tds.push(React.createElement("td", { key: header.name }));
                                }
                                break;
                            case "avg":
                                var obj1 = {};obj1[header.name] = _this3.avgHandler(footerchild[0]);
                                _this3.footerActualData.push(obj1);
                                if (obj[header.name] != null) {
                                    tds.push(React.createElement(
                                        "td",
                                        { key: headerindex + header.name },
                                        "平均值：" + obj1[header.name]
                                    ));
                                } else {
                                    tds.push(React.createElement("td", { key: headerindex + header.name }));
                                }
                                break;
                            default:
                                tds.push(React.createElement("td", { key: headerindex + header.name }));
                        }
                    }
                } else {
                    tds.push(React.createElement("td", { key: header.name + headerindex }));
                }
            });

            return React.createElement(
                "tr",
                { key: "footertr", style: { height: 36 } },
                tds
            );
        }
    },
    render: function render() {
        var _this4 = this;

        var className = "table table-no-bordered";
        if (this.props.borderAble === true) {
            //无边框
            className = "table";
        }
        var headerControl = this.renderHeader();
        var gridHeight = this.state.height; //
        var tableHeight = "auto";
        if (regs.number.test(gridHeight)) {
            tableHeight = gridHeight ? this.props.pagePosition == "both" ? gridHeight - 70 : gridHeight - 35 : null;
        }

        var headerMenuCotrol = []; //右键菜单中隐藏的列
        if (this.state.headerMenu.length > 0) {
            this.state.headerMenu.map(function (item, index) {
                headerMenuCotrol.push(React.createElement(
                    "li",
                    { key: index },
                    React.createElement(
                        "a",
                        { href: "javascript:void(0);", className: "header-menu-item", onMouseDown: _this4.menuHeaderShowHandler.bind(_this4, index, item) },
                        "显示[" + item + "]"
                    )
                ));
            });
        }
        return React.createElement(
            "div",
            { className: "wasabi-table", ref: "grid",
                onPaste: this.onPaste,
                onMouseDown: this.gridMouseDownHandler,
                onContextMenu: this.gridContextMenuHandler,
                style: { width: this.props.width, height: gridHeight } },
            React.createElement(
                "div",
                { className: "wasabi-table-pagination", ref: "toppagination",
                    style: { display: this.props.pagePosition == "top" || this.props.pagePosition == "both" ? this.props.pagination ? "block" : "none" : "none" } },
                React.createElement(
                    "div",
                    { style: { display: this.props.pagination ? "block" : this.state.data instanceof Array && this.state.data.length > 0 ? "block" : "none" } },
                    this.renderPaginationTwo("top")
                ),
                this.renderTotal()
            ),
            React.createElement(
                "div",
                { className: "table-container" },
                React.createElement(
                    "div",
                    { className: "table-fixed", ref: "fixedTableContainer" },
                    React.createElement(
                        "table",
                        { className: className, key: "fixedTable", ref: "fixedTable",
                            onMouseMove: this.fixedTableMouseMoveHandler, onMouseUp: this.fixedTableMouseUpHandler },
                        React.createElement(
                            "thead",
                            null,
                            React.createElement(
                                "tr",
                                null,
                                headerControl
                            )
                        )
                    )
                ),
                React.createElement(
                    "div",
                    { className: "table-realTable", ref: "realTableContainer", style: { height: tableHeight },
                        onScroll: this.tableBodyScrollHandler },
                    React.createElement(
                        "table",
                        { className: className, key: "realTable", ref: "realTable" },
                        React.createElement(
                            "thead",
                            null,
                            React.createElement(
                                "tr",
                                null,
                                headerControl
                            )
                        ),
                        React.createElement(
                            "tbody",
                            null,
                            this.renderBody(),
                            this.renderFooter()
                        )
                    )
                )
            ),
            React.createElement(
                "div",
                { className: "wasabi-table-pagination", ref: "bottompagination",
                    style: { display: this.props.pagination ? "block" : this.props.pagePosition == "bottom" || this.props.pagePosition == "both" ? "block" : "none" } },
                React.createElement(
                    "div",
                    { style: { display: this.props.pagination ? "block" : this.state.data instanceof Array && this.state.data.length > 0 ? "block" : "none" } },
                    this.renderPaginationTwo()
                ),
                this.renderTotal()
            ),
            React.createElement("div", { className: "wasabi-table-loading", style: { display: this.state.loading == true ? "block" : "none" } }),
            React.createElement("div", { className: "wasabi-load-icon", style: { display: this.state.loading == true ? "block" : "none" } }),
            React.createElement("div", { onMouseUp: this.divideMouseUpHandler, ref: "tabledivide", className: "wasabi-table-divide", style: { top: this.props.pagePosition == "top" || this.props.pagePosition == "both" ? 35 : 0 } }),
            React.createElement(
                "div",
                { className: "wasabi-header-menu-container", ref: "headermenu" },
                React.createElement(
                    "ul",
                    { className: "wasabi-header-menu" },
                    React.createElement(
                        "li",
                        { key: "first" },
                        React.createElement(
                            "a",
                            { href: "javascript:void(0);", className: "header-menu-item", onMouseDown: this.menuHideHandler },
                            "\u9690\u85CF\u6B64\u5217"
                        )
                    ),
                    headerMenuCotrol
                )
            ),
            React.createElement(
                "div",
                { className: "wasabi-table-panel", style: { height: this.state.panelShow ? 350 : 0, border: this.state.panelShow ? null : "none" } },
                React.createElement(
                    "div",
                    { className: "wasabi-table-panel-body" },
                    " ",
                    this.state.menuPanel
                )
            )
        );
    }
});
module.exports = DataGrid;

/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*
 create by wangzhiyong
 date:2016-12-19
 */
var React = __webpack_require__(1);
__webpack_require__(302);
var unit = __webpack_require__(5);
var LinkButton = __webpack_require__(25);
var showUpdate = __webpack_require__(21);

var Transfer = React.createClass({
    displayName: "Transfer",

    mixins: [showUpdate],
    propTypes: {
        name: React.PropTypes.string, //名称
        valueField: React.PropTypes.string, //数据字段值名称
        textField: React.PropTypes.string, //数据字段文本名称
        url: React.PropTypes.string, //后台查询地址
        params: React.PropTypes.object, //向后台传输的额外参数
        dataSource: React.PropTypes.string, //ajax的返回的数据源中哪个属性作为数据源,为null时直接后台返回的数据作为数据源
        data: React.PropTypes.array, //节点数据
        selectData: React.PropTypes.array, //选中的数据
        onSelect: React.PropTypes.func //选中后的事件

    },
    getDefaultProps: function getDefaultProps() {
        return {
            name: null,
            valueField: "value",
            textField: "text",
            url: null,
            params: null,
            dataSource: "data",
            data: [],
            selectData: [],

            onSelect: null
        };
    },
    getInitialState: function getInitialState() {
        var realData = this.setValueAndText(this.props.data);

        var realSelectData = this.setValueAndText(this.props.selectData);

        return {
            name: this.props.name,
            data: realData,
            selectData: realSelectData,
            leftOnIndex: null, //左边被点中的数据
            rightOnIndex: null, //右边被点中的数据
            onSelect: this.props.onSelect
        };
    },

    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        /*
         this.isChange :代表自身发生了改变,防止父组件没有绑定value,text,而导致无法选择
         */
        this.isChange = false; //重置
        var value = this.isChange ? this.state.value : nextProps.value;
        var text = this.isChange ? this.state.text : nextProps.text;
        var newData = [];
        var selectData = [];
        if (nextProps.data != null && nextProps.data instanceof Array && (!nextProps.url || nextProps.url == "")) {
            //没有url,传的是死数据
            //因为这里统一将数据进行了改造,所以这里要重新处理一下
            newData = this.setValueAndText(nextProps.data);
            selectData = this.setValueAndText(nextProps.selectData);
        } else {
            //url形式
            newData = this.state.data; //先得到以前的数据
            selectData = this.state.selectData; //先得到以前的数据
            if (this.showUpdate(nextProps.params)) {
                //如果不相同则更新
                this.loadData(this.props.url, nextProps.params); //异步更新
            } else {}
        }

        this.setState({
            value: value,
            text: text,
            data: newData,
            selectData: selectData,
            url: nextProps.url,
            params: unit.clone(nextProps.params)
        });
    },
    componentDidUpdate: function componentDidUpdate() {
        if (this.isChange == true) {
            //说明已经改变了,回传给父组件
            if (this.props.onSelect != null) {
                this.props.onSelect(this.state.data, this.state.selectData);
            }
        }
    },
    componentDidMount: function componentDidMount() {
        this.loadData(this.state.url, this.state.params);
    },
    loadData: function loadData(url, params) {
        if (url != null && url != "") {
            if (params == null) {
                var fetchmodel = new FetchModel(url, this.loadSuccess, null, this.loadError);
                unit.fetch.get(fetchmodel);
            } else {
                var fetchmodel = new FetchModel(url, this.loadSuccess, params, this.loadError);
                unit.fetch.post(fetchmodel);
            }
            console.log("transfer", fetchmodel);
        }
    },
    loadSuccess: function loadSuccess(data) {
        //数据加载成功
        var realData = data;
        if (this.props.dataSource == null) {} else {
            realData = unit.getSource(data, this.props.dataSource);
        }
        if (realData instanceof Array) {
            for (var i = 0; i < realData.length; i++) {
                realData[i].text = realData[i][this.props.textField];
                realData[i].value = realData[i][this.props.valueField];
            }
        }
        this.setState({
            data: realData
        });
    },
    loadError: function loadError(errorCode, message) {
        //查询失败
        console.log("treepicker-error", errorCode, message);
        Message.error(message);
    },
    setValueAndText: function setValueAndText(realData) {
        //设置text，value的值
        if (realData instanceof Array) {
            for (var i = 0; i < realData.length; i++) {
                realData[i].text = realData[i][this.props.textField];
                realData[i].value = realData[i][this.props.valueField];
            }
        }

        return realData;
    },
    onSelect: function onSelect(value, text, property) {
        this.isChange = true; //代表自身发生了改变,防止父组件没有绑定value,text的状态值,而导致无法选择的结果
        this.property = property; //临时保存起来
        if (value == undefined) {
            console.error("绑定的valueField没有");
        }
        if (text == undefined) {
            console.error("绑定的textField没有");
        }
        this.setState({
            value: value,
            text: text
        });
    },
    itemClickHandler: function itemClickHandler(type, index) {
        if (type == "left") {
            if (this.ctrl) {
                //多选
                var leftOnIndex = [];
                if (this.state.leftOnIndex instanceof Array) {
                    leftOnIndex = this.state.leftOnIndex;
                } else if (this.state.leftOnIndex) {
                    leftOnIndex.push(this.state.leftOnIndex);
                }
                if (leftOnIndex.indexOf(index) > -1) {
                    leftOnIndex.splice(leftOnIndex.indexOf(index), 1);
                } else {
                    leftOnIndex.push(index);
                }
                if (leftOnIndex.length == 0) {
                    //没有选择
                    leftOnIndex = null;
                } else if (leftOnIndex.length == 1) {
                    //只选择了一个
                    leftOnIndex = leftOnIndex[0];
                }
                this.setState({
                    leftOnIndex: leftOnIndex,
                    rightOnIndex: null
                });
            } else {
                this.setState({
                    leftOnIndex: index,
                    rightOnIndex: null
                });
            }
        } else {
            if (this.ctrl) {
                //多选
                var rightOnIndex = [];
                if (this.state.rightOnIndex instanceof Array) {
                    rightOnIndex = this.state.rightOnIndex;
                } else if (this.state.rightOnIndex) {
                    rightOnIndex.push(this.state.rightOnIndex);
                }
                if (rightOnIndex.indexOf(index) > -1) {
                    rightOnIndex.splice(rightOnIndex.indexOf(index), 1);
                } else {
                    rightOnIndex.push(index);
                }
                if (rightOnIndex.length == 0) {
                    //没有选择
                    rightOnIndex = null;
                } else if (rightOnIndex.length == 1) {
                    //只选择了一个
                    rightOnIndex = rightOnIndex[0];
                }

                this.setState({
                    leftOnIndex: null,
                    rightOnIndex: rightOnIndex
                });
            } else {
                this.setState({
                    leftOnIndex: null,
                    rightOnIndex: index
                });
            }
        }
    },
    itemDblClickHandler: function itemDblClickHandler(direction, indexArray) {
        var _this = this;

        if (indexArray == null) {
            return;
        } else {
            if (indexArray instanceof Array) {
                //按住了ctrl键

                if (direction == "right") {
                    //向右
                    var data = [];
                    this.state.data.map(function (item, index) {
                        if (indexArray.indexOf(index) > -1) {
                            _this.state.selectData.push(item);
                        } else {
                            data.push(item);
                        }
                    });
                    this.state.data = data;
                } else {
                    var selectData = [];
                    this.state.selectData.map(function (item, index) {
                        if (indexArray.indexOf(index) > -1) {
                            _this.state.data.push(item);
                        } else {
                            selectData.push(item);
                        }
                    });
                    this.state.selectData = selectData;
                }
            } else {
                if (direction == "right") {
                    //向右
                    this.state.selectData.push(this.state.data.splice(indexArray, 1)[0]);
                } else {
                    this.state.data.push(this.state.selectData.splice(indexArray, 1)[0]);
                }
            }

            this.isChange = true; //是否需要回传父组件，因为index不需要回传给父组件，所以组件本身先更新再回传
            this.setState({
                data: this.state.data,
                selectData: this.state.selectData,
                leftOnIndex: null,
                rightOnIndex: null
            });
        }
    },
    itemUpHandler: function itemUpHandler() {
        //向上
        if (this.state.leftOnIndex && !(this.state.leftOnIndex instanceof Array)) {
            //左边

            this.state.data.splice(this.state.leftOnIndex - 1, 2, this.state.data[this.state.leftOnIndex], this.state.data[this.state.leftOnIndex - 1]);

            this.isChange = true; //是否需要回传父组件，因为index不需要回传给父组件，所以组件本身先更新再回传
            this.setState({
                data: this.state.data,
                leftOnIndex: this.state.leftOnIndex - 1,
                rightOnIndex: null
            });
        } else if (this.state.rightOnIndex && !(this.state.rightOnIndex instanceof Array)) {
            //右边
            this.state.selectData.splice(this.state.rightOnIndex - 1, 2, this.state.selectData[this.state.rightOnIndex], this.state.selectData[this.state.rightOnIndex - 1]);
            this.isChange = true; //是否需要回传父组件，因为index不需要回传给父组件，所以组件本身先更新再回传
            this.setState({
                selectData: this.state.selectData,
                leftOnIndex: null,
                rightOnIndex: this.state.rightOnIndex - 1
            });
        }
    },
    itemDownHandler: function itemDownHandler() {
        //向下
        if (this.state.leftOnIndex != null && !(this.state.leftOnIndex instanceof Array) && this.state.leftOnIndex < this.state.data.length - 1) {
            //左边

            this.state.data.splice(this.state.leftOnIndex, 2, this.state.data[this.state.leftOnIndex + 1], this.state.data[this.state.leftOnIndex]);
            this.setState({
                data: this.state.data,
                leftOnIndex: this.state.leftOnIndex + 1,
                rightOnIndex: null
            });
        } else if (this.state.rightOnIndex != null && !(this.state.rightOnIndex instanceof Array) && this.state.rightOnIndex < this.state.selectData.length - 1) {
            //右边
            this.state.selectData.splice(this.state.rightOnIndex, 2, this.state.selectData[this.state.rightOnIndex + 1], this.state.selectData[this.state.rightOnIndex]);
            this.setState({
                selectData: this.state.selectData,
                leftOnIndex: null,
                rightOnIndex: this.state.rightOnIndex + 1
            });
        }
    },
    onKeyDown: function onKeyDown(event) {

        if (event.keyCode == 17 || event.keyCode == 91) {
            this.ctrl = true;
            this.refs.up.setDisabled(true);
            this.refs.down.setDisabled(true);
        } else {}
    },
    onKeyUp: function onKeyUp() {
        this.ctrl = false;
        if (this.state.leftOnIndex instanceof Array || this.state.rightOnIndex instanceof Array) {} else {
            this.refs.up.setDisabled(false);
            this.refs.down.setDisabled(false);
        }
    },
    onMouseOver: function onMouseOver(event) {
        this.refs.transfer.focus();
    },
    render: function render() {
        var _this2 = this;

        var leftControl = [];
        var rightControl = [];
        this.state.data.map(function (item, index) {
            leftControl.push(React.createElement(
                "li",
                { className: _this2.state.leftOnIndex == index || _this2.state.leftOnIndex instanceof Array && _this2.state.leftOnIndex.indexOf(index) > -1 ? "on" : "", key: index, onDoubleClick: _this2.itemDblClickHandler.bind(_this2, "right", index), onClick: _this2.itemClickHandler.bind(_this2, "left", index) },
                item.text
            ));
        });
        this.state.selectData.map(function (item, index) {
            rightControl.push(React.createElement(
                "li",
                { className: _this2.state.rightOnIndex == index || _this2.state.rightOnIndex instanceof Array && _this2.state.rightOnIndex.indexOf(index) > -1 ? "on" : "", key: index, onDoubleClick: _this2.itemDblClickHandler.bind(_this2, "left", index), onClick: _this2.itemClickHandler.bind(_this2, "right", index) },
                item.text
            ));
        });
        return React.createElement(
            "div",
            { className: "wasabi-transfer", ref: "transfer", tabIndex: "0", onKeyUp: this.onKeyUp, onKeyDown: this.onKeyDown, onMouseOver: this.onMouseOver },
            React.createElement(
                "ul",
                { className: "wasabi-transfer-left" },
                leftControl
            ),
            React.createElement(
                "div",
                { className: "wasabi-transfer-middle" },
                React.createElement(LinkButton, { name: "up", title: "\u5411\u4E0A", iconCls: "icon-up", onClick: this.itemUpHandler, ref: "up", disabled: this.state.leftOnIndex instanceof Array || this.state.rightOnIndex instanceof Array ? true : false }),
                React.createElement(LinkButton, { name: "down", title: "\u5411\u4E0B", iconCls: "icon-down", onClick: this.itemDownHandler, ref: "down", disabled: this.state.leftOnIndex instanceof Array || this.state.rightOnIndex instanceof Array ? true : false }),
                React.createElement(LinkButton, { name: "right", title: "\u5411\u53F3", iconCls: "icon-right", onClick: this.itemDblClickHandler.bind(this, "right", this.state.leftOnIndex) }),
                React.createElement(LinkButton, { name: "left", title: "\u5411\u5DE6", iconCls: "icon-left", onClick: this.itemDblClickHandler.bind(this, "left", this.state.rightOnIndex) })
            ),
            React.createElement(
                "ul",
                { className: "wasabi-transfer-right" },
                rightControl
            )
        );
    }
});
module.exports = Transfer;

/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


//create by wangzy
//date:2016-07-22
//desc:独立的筛选框
var React = __webpack_require__(1);
var DataGrid = __webpack_require__(76);
var unit = __webpack_require__(5);
__webpack_require__(307);
var SearchBox = React.createClass({
    displayName: "SearchBox",

    propTypes: {
        name: React.PropTypes.string, //表单名称，
        title: React.PropTypes.string, //提示信息
        placeholder: React.PropTypes.string, //输入框提示信息
        valueField: React.PropTypes.string.isRequired, //表单value字段
        textField: React.PropTypes.string.isRequired, //表单text字段
        width: React.PropTypes.number, //宽度
        onSearch: React.PropTypes.func //查询事件

    },
    getDefaultProps: function getDefaultProps() {
        return {
            title: null,
            valueField: "value",
            textField: "text",
            params: null,
            width: null,
            onSearch: null

        };
    },
    getInitialState: function getInitialState() {
        return {

            params: null,
            filterValue: "" //筛选框的值
        };
    },
    onKeyUp: function onKeyUp(event) {
        //回车查询
        if (event.keyCode == 13) {
            this.beginSearch();
        }
    },
    beginSearch: function beginSearch() {
        //开始查询
        var params = this.state.params;
        if (params) {} else {
            params = {}; //初始化
        }
        params[this.props.valueField] = this.state.filterValue;
        params[this.props.textField] = this.state.filterValue;

        this.setState({
            params: params
        });
        if (this.props.onSearch != null) {
            this.props.onSearch(params, this.props.name);
        }
    },
    clearData: function clearData() {
        this.setState({
            filterValue: "",
            params: null
        });
    },
    onChange: function onChange(event) {

        this.setState({
            filterValue: event.target.value.toString().trim()
        });
    },
    render: function render() {
        return React.createElement(
            "div",
            { className: "wasabi-searchbox", style: { width: this.props.width } },
            React.createElement("input", { type: "text", title: this.props.title, placeholder: this.props.placeholder, onKeyUp: this.onKeyUp, value: this.state.filterValue, onChange: this.onChange }),
            React.createElement("div", { className: "icon", onClick: this.beginSearch })
        );
    }
});
module.exports = SearchBox;

/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

//creete by wangzy
//date:2016-08-02
//desc 将输入框从Input中独立出来
var React = __webpack_require__(1);

var validation = __webpack_require__(16);
var setStyle = __webpack_require__(11);
var validate = __webpack_require__(22);
var shouldComponentUpdate = __webpack_require__(8);
var Label = __webpack_require__(18);
var Message = __webpack_require__(14);
var FetchModel = __webpack_require__(13);
var unit = __webpack_require__(5);

var Text = React.createClass({
    displayName: "Text",

    mixins: [setStyle, validate, shouldComponentUpdate],
    propTypes: {
        type: React.PropTypes.oneOf(["text", //普通输入框
        "textarea", //多行文本
        "password", //密码
        "email", //邮箱
        "url", //网址
        "mobile", //手机
        "idcard", //身份证
        "alpha", //英文字母
        "alphanum", //英文字母与数字
        "integer", //整型数据
        "number"] //数字
        ), //文本框输入的类型
        name: React.PropTypes.string.isRequired, //字段名
        label: React.PropTypes.oneOfType([React.PropTypes.string, React.PropTypes.element, React.PropTypes.node]), //字段文字说明属性
        width: React.PropTypes.number, //宽度
        height: React.PropTypes.number, //高度
        value: React.PropTypes.oneOfType([React.PropTypes.number, React.PropTypes.string]), //默认值,
        text: React.PropTypes.oneOfType([React.PropTypes.number, React.PropTypes.string]), //默认文本值
        placeholder: React.PropTypes.string, //输入框预留文字
        readonly: React.PropTypes.bool, //是否只读
        required: React.PropTypes.bool, //是否必填
        onlyline: React.PropTypes.bool, //是否只占一行
        hide: React.PropTypes.bool, //是否隐藏
        regexp: React.PropTypes.string, //正则表达式
        invalidTip: React.PropTypes.string, //无效时的提示字符
        style: React.PropTypes.object, //自定义style
        className: React.PropTypes.string, //自定义class
        size: React.PropTypes.oneOf(["none", "default", "large", //兼容性值,与two相同
        "two", "three", "onlyline"]), //组件表单的大小
        position: React.PropTypes.oneOf(["left", "default", "right"]), //组件在表单一行中的位置

        //其他属性
        rows: React.PropTypes.number, //行数
        min: React.PropTypes.number, //最小值,最小长度,
        max: React.PropTypes.number, //最大值,最大长度
        onClick: React.PropTypes.func, //单击事件
        onChange: React.PropTypes.func, //值改变事件
        validateUrl: React.PropTypes.string, //后台验证的url

        onBlur: React.PropTypes.func //失去焦点事件

    },
    getDefaultProps: function getDefaultProps() {
        return {
            type: "text",
            name: "",
            label: null,
            width: null,
            height: null,
            value: "",
            text: "",
            placeholder: "",
            readonly: false,
            required: false,
            onlyline: false,
            hide: false,
            regexp: null,
            invalidTip: null,
            style: null,
            className: null,
            size: "default",
            position: "default",

            //其他属性
            row: 5,
            min: null,
            max: null,
            onClick: null,
            onChange: null,
            validateUrl: null

        };
    },
    getInitialState: function getInitialState() {
        return {
            hide: this.props.hide,
            min: this.props.min,
            max: this.props.max,
            value: this.props.value,
            text: this.props.text,
            readonly: this.props.readonly,
            required: this.props.required,
            validateClass: "", //验证的样式
            helpShow: "none", //提示信息是否显示
            helpTip: validation["required"], //提示信息
            invalidTip: "",
            validateState: null //是否正在验证

        };
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        this.setState({
            hide: nextProps.hide,
            min: nextProps.min,
            max: nextProps.max,
            value: nextProps.value,
            text: nextProps.text,
            readonly: nextProps.readonly,
            required: nextProps.required,
            validateClass: "", //重置验证样式
            helpTip: validation["required"] //提示信息
        });
    },
    componentDidMount: function componentDidMount() {
        this.validateInput = true; //设置初始化值，输入有效
        this.onblur = false;
    },
    componentDidUpdate: function componentDidUpdate() {
        this.validateInput = true; //设置初始化值
        if (this.state.helpTip == "非有效数字" || this.state.helpTip == "输入非法") {
            this.refs.input.select();
        }
        if (this.onblur) {
            this.onblur = false;
            this.props.onBlur();
        }
    },
    changeHandler: function changeHandler(event) {
        if (this.validateInput == true) {
            //输入有效的时候

            if (this.props.type == "integer" || this.props.type == "number") {
                //数字,或者正数时
                if (event.target.value == "-" || (!this.state.value || this.state.value.toString().indexOf(".") < 0) && event.target.value.length > 0 && event.target.value.toString().lastIndexOf(".") == event.target.value.length - 1) {
                    //第一次输入负号,或者输入小数点时原来没有小数点或为空时）时.不回传给父组件
                    this.setState({
                        value: event.target.value,
                        text: event.target.value
                    });
                    return;
                }
            }

            this.setState({
                value: event.target.value,
                text: event.target.value
            });

            if (this.props.onChange != null) {
                this.props.onChange(event.target.value); //自定义的改变事件
            }
            //回传给表单组件,下拉组件使用onSelect回传给表单组件
            if (this.props.backFormHandler != null) {
                this.props.backFormHandler(event.target.value, event.target.value, this.props.name);
            }
        }
    },
    keyDownHandler: function keyDownHandler(event) {
        //控制输入
        this.validateInput = true;
        if (this.props.type == "integer" || this.props.type == "number") {
            if (event.ctrlKey == false && event.metaKey == false && event.keyCode >= 65 && event.keyCode <= 90) {
                //防止ctrl,command键
                this.validateInput = false;
            }
        }
        if (this.props.onKeyDown != null) {
            this.props.onKeyDown(event);
        }
    },
    keyUpHandler: function keyUpHandler(event) {
        if (event.keyCode == 13) {
            if (this.props.validateUrl) {
                this.validateHandler(event.target.value);
            }
        }

        if (this.props.onKeyUp != null) {
            this.props.onKeyUp(event);
        }
    },
    focusHandler: function focusHandler() {
        //焦点事件
        if (this.props.onFocus != null) {
            this.props.onFocus();
        }
    },
    blurHandler: function blurHandler(event) {
        if (this.props.validateUrl) {
            //后台验证
            this.validateHandler(event.target.value);
        } else {
            //普通验证
            this.validate(this.state.value);
        }

        this.refs.label.hideHelp(); //隐藏帮助信息

        if (this.props.onBlur) {
            this.onblur = true;
        }
    },
    clickHandler: function clickHandler(event) {
        //单击事件

        if (this.props.onClick != null) {
            var model = {};
            try {
                //有可能存在复制不成功的情况
                model = _extends({}, this.props);
            } catch (e) {}
            model.value = this.state.value;
            model.text = this.state.text;
            this.props.onClick(this.props.name, this.state.value, model);
        }
    },

    getValue: function getValue() {
        //获取值
        return this.state.value;
    },

    validateHandler: function validateHandler(value) {
        //后台请求验证
        this.setState({
            validateState: "validing" //正在验证
        });
        var fetchmodel = new FetchModel(this.props.validateUrl, this.validateHandlerSuccess, { key: value });
        console.log("text-validing:", fetchmodel);
        unit.fetch.post(fetchmodel);
    },
    validateHandlerSuccess: function validateHandlerSuccess() {
        //后台请求验证成功
        this.setState({
            validateState: "valid" //验证成功
        });
    },
    validateHandlerError: function validateHandlerError(errorCode, message) {
        //后台请求验证失败
        Message.error(message);
        this.setState({
            validateState: "invalid" //验证失败
        });
    },
    render: function render() {
        var inputType = "text";
        if (this.props.type == "password") {
            inputType = "password";
        }
        var size = this.props.onlyline == true ? "onlyline" : this.props.size; //组件大小
        var componentClassName = "wasabi-form-group " + size; //组件的基本样式
        var style = this.setStyle("input"); //设置样式
        var controlStyle = this.props.controlStyle ? this.props.controlStyle : {};
        controlStyle.display = this.state.hide == true ? "none" : "block";
        var inputProps = {
            readOnly: this.state.readonly == true ? "readonly" : null,
            style: style,
            name: this.props.name,
            placeholder: this.props.placeholder === "" || this.props.placeholder == null ? this.state.required ? "必填项" : "" : this.props.placeholder,
            className: "wasabi-form-control  " + (this.props.className != null ? this.props.className : ""),
            rows: this.props.rows,
            title: this.props.title //文本框的属性
        };var control = null;
        if (this.props.type != "textarea") {
            control = React.createElement("input", _extends({ ref: "input", type: inputType }, inputProps, { onClick: this.clickHandler,
                onChange: this.changeHandler, onKeyDown: this.keyDownHandler,
                onKeyUp: this.keyUpHandler, onFocus: this.focusHandler,
                onBlur: this.blurHandler,
                value: this.state.value }));
        } else {
            //textarea 不支持null值
            var value = this.state.value;
            if (!value) {
                value = "";
            }
            control = React.createElement("textarea", _extends({ ref: "input" }, inputProps, { onClick: this.clickHandler,
                onChange: this.changeHandler, onKeyDown: this.keyDownHandler,
                onKeyUp: this.keyUpHandler, onFocus: this.focusHandler,
                onBlur: this.blurHandler,
                value: value }));
        }

        return React.createElement(
            "div",
            { className: componentClassName + this.state.validateClass, onPaste: this.onPaste, style: controlStyle },
            React.createElement(Label, { name: this.props.label, ref: "label", hide: this.state.hide, required: this.state.required }),
            React.createElement(
                "div",
                { className: "wasabi-form-group-body", style: { width: !this.props.label ? "100%" : null } },
                control,
                React.createElement("i", { className: this.state.validateState, style: { display: this.state.validateState ? "block" : "none" } }),
                React.createElement(
                    "small",
                    { className: "wasabi-help-block " + this.props.position, style: { display: this.state.helpTip && this.state.helpTip != "" ? this.state.helpShow : "none" } },
                    React.createElement(
                        "div",
                        { className: "text" },
                        this.state.helpTip
                    )
                )
            )
        );
    }
});
module.exports = Text;

/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Created by apple on 2016/11/8.
 * 将复制粘贴功能独立出来
 */
var React = __webpack_require__(1);
var pasteExtend = {
    pasteHandler: function pasteHandler(event, callBack) {
        if (!(event.clipboardData && event.clipboardData.items)) {//浏览器不支持这个功能
        } else {
            for (var i = 0, len = event.clipboardData.items.length; i < len; i++) {
                var item = event.clipboardData.items[i];
                if (item.kind === "string") {
                    //文本型数据
                    item.getAsString(function (pasteData) {
                        //异步的
                        var data = []; //返回的数据
                        var rows = [];

                        if (pasteData.indexOf("<html") > -1 || pasteData.indexOf("<table") > -1) {//如果从excel复制过来，会有完整html的内容

                        } else if (pasteData.indexOf("\t") > -1 || pasteData.indexOf("\r\n") > -1) {
                            //window 是多列或者多行数据,则处理,否则视为普通粘贴
                            var rows = pasteData.split("\r\n"); //得到所有行数据
                        } else if (pasteData.indexOf("{") < 0 && pasteData.indexOf("\n") > -1) {
                            //mac
                            var rows = pasteData.split("\n"); //得到所有行数据
                        }
                        for (var rowIndex = 0; rowIndex < rows.length; rowIndex++) {
                            var columns = rows[rowIndex].split("\t"); //当前所有列数据
                            var currentColumn = []; //当前行数据,为了除去空字符
                            for (var columnIndex = 0; columnIndex < columns.length; columnIndex++) {
                                if (columns[columnIndex].trim() == "") {
                                    continue; //空字符
                                } else {
                                    currentColumn.push(columns[columnIndex]);
                                }
                            }
                            data.push(currentColumn);
                        }
                        if (data.length > 0) {
                            callBack(data); //回调
                        }
                    });
                } else if (item.kind === "file") {
                    //文件类型
                    var pasteFile = item.getAsFile();
                    // pasteFile就是获取到的文件，暂时不处理
                }
            }
        }
    }
};

module.exports = pasteExtend;

/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @typechecks
 */

var emptyFunction = __webpack_require__(17);

/**
 * Upstream version of event listener. Does not take into account specific
 * nature of platform.
 */
var EventListener = {
  /**
   * Listen to DOM events during the bubble phase.
   *
   * @param {DOMEventTarget} target DOM element to register listener on.
   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
   * @param {function} callback Callback function.
   * @return {object} Object with a `remove` method.
   */
  listen: function listen(target, eventType, callback) {
    if (target.addEventListener) {
      target.addEventListener(eventType, callback, false);
      return {
        remove: function remove() {
          target.removeEventListener(eventType, callback, false);
        }
      };
    } else if (target.attachEvent) {
      target.attachEvent('on' + eventType, callback);
      return {
        remove: function remove() {
          target.detachEvent('on' + eventType, callback);
        }
      };
    }
  },

  /**
   * Listen to DOM events during the capture phase.
   *
   * @param {DOMEventTarget} target DOM element to register listener on.
   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
   * @param {function} callback Callback function.
   * @return {object} Object with a `remove` method.
   */
  capture: function capture(target, eventType, callback) {
    if (target.addEventListener) {
      target.addEventListener(eventType, callback, true);
      return {
        remove: function remove() {
          target.removeEventListener(eventType, callback, true);
        }
      };
    } else {
      if (process.env.NODE_ENV !== 'production') {
        console.error('Attempted to listen to events during the capture phase on a ' + 'browser that does not support the capture phase. Your application ' + 'will not receive some events.');
      }
      return {
        remove: emptyFunction
      };
    }
  },

  registerDefault: function registerDefault() {}
};

module.exports = EventListener;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



/**
 * @param {DOMElement} node input/textarea to focus
 */

function focusNode(node) {
  // IE8 can throw "Can't move focus to the control because it is invisible,
  // not enabled, or of a type that does not accept the focus." for all kinds of
  // reasons that are too expensive and fragile to test.
  try {
    node.focus();
  } catch (e) {}
}

module.exports = focusNode;

/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

/* eslint-disable fb-www/typeof-undefined */

/**
 * Same as document.activeElement but wraps in a try-catch block. In IE it is
 * not safe to call document.activeElement if there is nothing focused.
 *
 * The activeElement will be null only if the document or document body is not
 * yet defined.
 *
 * @param {?DOMDocument} doc Defaults to current document.
 * @return {?DOMElement}
 */

function getActiveElement(doc) /*?DOMElement*/{
  doc = doc || (typeof document !== 'undefined' ? document : undefined);
  if (typeof doc === 'undefined') {
    return null;
  }
  try {
    return doc.activeElement || doc.body;
  } catch (e) {
    return doc.body;
  }
}

module.exports = getActiveElement;

/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */



// React 15.5 references this module, and assumes PropTypes are still callable in production.
// Therefore we re-export development-only version with all the PropTypes checks here.
// However if one is migrating to the `prop-types` npm library, they will go through the
// `index.js` entry point, and it will branch depending on the environment.

var factory = __webpack_require__(167);
module.exports = function (isValidElement) {
  // It is still allowed in 15.5.
  var throwOnDirectAccess = false;
  return factory(isValidElement, throwOnDirectAccess);
};

/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */



var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

module.exports = ReactPropTypesSecret;

/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



/**
 * CSS properties which accept numbers but are not in units of "px".
 */

var isUnitlessNumber = {
  animationIterationCount: true,
  borderImageOutset: true,
  borderImageSlice: true,
  borderImageWidth: true,
  boxFlex: true,
  boxFlexGroup: true,
  boxOrdinalGroup: true,
  columnCount: true,
  flex: true,
  flexGrow: true,
  flexPositive: true,
  flexShrink: true,
  flexNegative: true,
  flexOrder: true,
  gridRow: true,
  gridRowEnd: true,
  gridRowSpan: true,
  gridRowStart: true,
  gridColumn: true,
  gridColumnEnd: true,
  gridColumnSpan: true,
  gridColumnStart: true,
  fontWeight: true,
  lineClamp: true,
  lineHeight: true,
  opacity: true,
  order: true,
  orphans: true,
  tabSize: true,
  widows: true,
  zIndex: true,
  zoom: true,

  // SVG-related properties
  fillOpacity: true,
  floodOpacity: true,
  stopOpacity: true,
  strokeDasharray: true,
  strokeDashoffset: true,
  strokeMiterlimit: true,
  strokeOpacity: true,
  strokeWidth: true
};

/**
 * @param {string} prefix vendor-specific prefix, eg: Webkit
 * @param {string} key style name, eg: transitionDuration
 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
 * WebkitTransitionDuration
 */
function prefixKey(prefix, key) {
  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
}

/**
 * Support style names that may come passed in prefixed by adding permutations
 * of vendor prefixes.
 */
var prefixes = ['Webkit', 'ms', 'Moz', 'O'];

// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
// infinite loop, because it iterates over the newly added props too.
Object.keys(isUnitlessNumber).forEach(function (prop) {
  prefixes.forEach(function (prefix) {
    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
  });
});

/**
 * Most style properties can be unset by doing .style[prop] = '' but IE8
 * doesn't like doing that with shorthand properties so for the properties that
 * IE8 breaks on, which are listed here, we instead unset each of the
 * individual properties. See http://bugs.jquery.com/ticket/12385.
 * The 4-value 'clock' properties like margin, padding, border-width seem to
 * behave without any problems. Curiously, list-style works too without any
 * special prodding.
 */
var shorthandPropertyExpansions = {
  background: {
    backgroundAttachment: true,
    backgroundColor: true,
    backgroundImage: true,
    backgroundPositionX: true,
    backgroundPositionY: true,
    backgroundRepeat: true
  },
  backgroundPosition: {
    backgroundPositionX: true,
    backgroundPositionY: true
  },
  border: {
    borderWidth: true,
    borderStyle: true,
    borderColor: true
  },
  borderBottom: {
    borderBottomWidth: true,
    borderBottomStyle: true,
    borderBottomColor: true
  },
  borderLeft: {
    borderLeftWidth: true,
    borderLeftStyle: true,
    borderLeftColor: true
  },
  borderRight: {
    borderRightWidth: true,
    borderRightStyle: true,
    borderRightColor: true
  },
  borderTop: {
    borderTopWidth: true,
    borderTopStyle: true,
    borderTopColor: true
  },
  font: {
    fontStyle: true,
    fontVariant: true,
    fontWeight: true,
    fontSize: true,
    lineHeight: true,
    fontFamily: true
  },
  outline: {
    outlineWidth: true,
    outlineStyle: true,
    outlineColor: true
  }
};

var CSSProperty = {
  isUnitlessNumber: isUnitlessNumber,
  shorthandPropertyExpansions: shorthandPropertyExpansions
};

module.exports = CSSProperty;

/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var _prodInvariant = __webpack_require__(4);

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

var PooledClass = __webpack_require__(28);

var invariant = __webpack_require__(2);

/**
 * A specialized pseudo-event module to help keep track of components waiting to
 * be notified when their DOM representations are available for use.
 *
 * This implements `PooledClass`, so you should never need to instantiate this.
 * Instead, use `CallbackQueue.getPooled()`.
 *
 * @class ReactMountReady
 * @implements PooledClass
 * @internal
 */

var CallbackQueue = function () {
  function CallbackQueue(arg) {
    _classCallCheck(this, CallbackQueue);

    this._callbacks = null;
    this._contexts = null;
    this._arg = arg;
  }

  /**
   * Enqueues a callback to be invoked when `notifyAll` is invoked.
   *
   * @param {function} callback Invoked when `notifyAll` is invoked.
   * @param {?object} context Context to call `callback` with.
   * @internal
   */

  CallbackQueue.prototype.enqueue = function enqueue(callback, context) {
    this._callbacks = this._callbacks || [];
    this._callbacks.push(callback);
    this._contexts = this._contexts || [];
    this._contexts.push(context);
  };

  /**
   * Invokes all enqueued callbacks and clears the queue. This is invoked after
   * the DOM representation of a component has been created or updated.
   *
   * @internal
   */

  CallbackQueue.prototype.notifyAll = function notifyAll() {
    var callbacks = this._callbacks;
    var contexts = this._contexts;
    var arg = this._arg;
    if (callbacks && contexts) {
      !(callbacks.length === contexts.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Mismatched list of contexts in callback queue') : _prodInvariant('24') : void 0;
      this._callbacks = null;
      this._contexts = null;
      for (var i = 0; i < callbacks.length; i++) {
        callbacks[i].call(contexts[i], arg);
      }
      callbacks.length = 0;
      contexts.length = 0;
    }
  };

  CallbackQueue.prototype.checkpoint = function checkpoint() {
    return this._callbacks ? this._callbacks.length : 0;
  };

  CallbackQueue.prototype.rollback = function rollback(len) {
    if (this._callbacks && this._contexts) {
      this._callbacks.length = len;
      this._contexts.length = len;
    }
  };

  /**
   * Resets the internal queue.
   *
   * @internal
   */

  CallbackQueue.prototype.reset = function reset() {
    this._callbacks = null;
    this._contexts = null;
  };

  /**
   * `PooledClass` looks for this.
   */

  CallbackQueue.prototype.destructor = function destructor() {
    this.reset();
  };

  return CallbackQueue;
}();

module.exports = PooledClass.addPoolingTo(CallbackQueue);
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var DOMProperty = __webpack_require__(27);
var ReactDOMComponentTree = __webpack_require__(7);
var ReactInstrumentation = __webpack_require__(15);

var quoteAttributeValueForBrowser = __webpack_require__(236);
var warning = __webpack_require__(3);

var VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + DOMProperty.ATTRIBUTE_NAME_START_CHAR + '][' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$');
var illegalAttributeNameCache = {};
var validatedAttributeNameCache = {};

function isAttributeNameSafe(attributeName) {
  if (validatedAttributeNameCache.hasOwnProperty(attributeName)) {
    return true;
  }
  if (illegalAttributeNameCache.hasOwnProperty(attributeName)) {
    return false;
  }
  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
    validatedAttributeNameCache[attributeName] = true;
    return true;
  }
  illegalAttributeNameCache[attributeName] = true;
  process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid attribute name: `%s`', attributeName) : void 0;
  return false;
}

function shouldIgnoreValue(propertyInfo, value) {
  return value == null || propertyInfo.hasBooleanValue && !value || propertyInfo.hasNumericValue && isNaN(value) || propertyInfo.hasPositiveNumericValue && value < 1 || propertyInfo.hasOverloadedBooleanValue && value === false;
}

/**
 * Operations for dealing with DOM properties.
 */
var DOMPropertyOperations = {
  /**
   * Creates markup for the ID property.
   *
   * @param {string} id Unescaped ID.
   * @return {string} Markup string.
   */
  createMarkupForID: function createMarkupForID(id) {
    return DOMProperty.ID_ATTRIBUTE_NAME + '=' + quoteAttributeValueForBrowser(id);
  },

  setAttributeForID: function setAttributeForID(node, id) {
    node.setAttribute(DOMProperty.ID_ATTRIBUTE_NAME, id);
  },

  createMarkupForRoot: function createMarkupForRoot() {
    return DOMProperty.ROOT_ATTRIBUTE_NAME + '=""';
  },

  setAttributeForRoot: function setAttributeForRoot(node) {
    node.setAttribute(DOMProperty.ROOT_ATTRIBUTE_NAME, '');
  },

  /**
   * Creates markup for a property.
   *
   * @param {string} name
   * @param {*} value
   * @return {?string} Markup string, or null if the property was invalid.
   */
  createMarkupForProperty: function createMarkupForProperty(name, value) {
    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
    if (propertyInfo) {
      if (shouldIgnoreValue(propertyInfo, value)) {
        return '';
      }
      var attributeName = propertyInfo.attributeName;
      if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
        return attributeName + '=""';
      }
      return attributeName + '=' + quoteAttributeValueForBrowser(value);
    } else if (DOMProperty.isCustomAttribute(name)) {
      if (value == null) {
        return '';
      }
      return name + '=' + quoteAttributeValueForBrowser(value);
    }
    return null;
  },

  /**
   * Creates markup for a custom property.
   *
   * @param {string} name
   * @param {*} value
   * @return {string} Markup string, or empty string if the property was invalid.
   */
  createMarkupForCustomAttribute: function createMarkupForCustomAttribute(name, value) {
    if (!isAttributeNameSafe(name) || value == null) {
      return '';
    }
    return name + '=' + quoteAttributeValueForBrowser(value);
  },

  /**
   * Sets the value for a property on a node.
   *
   * @param {DOMElement} node
   * @param {string} name
   * @param {*} value
   */
  setValueForProperty: function setValueForProperty(node, name, value) {
    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
    if (propertyInfo) {
      var mutationMethod = propertyInfo.mutationMethod;
      if (mutationMethod) {
        mutationMethod(node, value);
      } else if (shouldIgnoreValue(propertyInfo, value)) {
        this.deleteValueForProperty(node, name);
        return;
      } else if (propertyInfo.mustUseProperty) {
        // Contrary to `setAttribute`, object properties are properly
        // `toString`ed by IE8/9.
        node[propertyInfo.propertyName] = value;
      } else {
        var attributeName = propertyInfo.attributeName;
        var namespace = propertyInfo.attributeNamespace;
        // `setAttribute` with objects becomes only `[object]` in IE8/9,
        // ('' + value) makes it output the correct toString()-value.
        if (namespace) {
          node.setAttributeNS(namespace, attributeName, '' + value);
        } else if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
          node.setAttribute(attributeName, '');
        } else {
          node.setAttribute(attributeName, '' + value);
        }
      }
    } else if (DOMProperty.isCustomAttribute(name)) {
      DOMPropertyOperations.setValueForAttribute(node, name, value);
      return;
    }

    if (process.env.NODE_ENV !== 'production') {
      var payload = {};
      payload[name] = value;
      ReactInstrumentation.debugTool.onHostOperation({
        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
        type: 'update attribute',
        payload: payload
      });
    }
  },

  setValueForAttribute: function setValueForAttribute(node, name, value) {
    if (!isAttributeNameSafe(name)) {
      return;
    }
    if (value == null) {
      node.removeAttribute(name);
    } else {
      node.setAttribute(name, '' + value);
    }

    if (process.env.NODE_ENV !== 'production') {
      var payload = {};
      payload[name] = value;
      ReactInstrumentation.debugTool.onHostOperation({
        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
        type: 'update attribute',
        payload: payload
      });
    }
  },

  /**
   * Deletes an attributes from a node.
   *
   * @param {DOMElement} node
   * @param {string} name
   */
  deleteValueForAttribute: function deleteValueForAttribute(node, name) {
    node.removeAttribute(name);
    if (process.env.NODE_ENV !== 'production') {
      ReactInstrumentation.debugTool.onHostOperation({
        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
        type: 'remove attribute',
        payload: name
      });
    }
  },

  /**
   * Deletes the value for a property on a node.
   *
   * @param {DOMElement} node
   * @param {string} name
   */
  deleteValueForProperty: function deleteValueForProperty(node, name) {
    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
    if (propertyInfo) {
      var mutationMethod = propertyInfo.mutationMethod;
      if (mutationMethod) {
        mutationMethod(node, undefined);
      } else if (propertyInfo.mustUseProperty) {
        var propName = propertyInfo.propertyName;
        if (propertyInfo.hasBooleanValue) {
          node[propName] = false;
        } else {
          node[propName] = '';
        }
      } else {
        node.removeAttribute(propertyInfo.attributeName);
      }
    } else if (DOMProperty.isCustomAttribute(name)) {
      node.removeAttribute(name);
    }

    if (process.env.NODE_ENV !== 'production') {
      ReactInstrumentation.debugTool.onHostOperation({
        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
        type: 'remove attribute',
        payload: name
      });
    }
  }
};

module.exports = DOMPropertyOperations;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ReactDOMComponentFlags = {
  hasCachedChildNodes: 1 << 0
};

module.exports = ReactDOMComponentFlags;

/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(6);

var LinkedValueUtils = __webpack_require__(63);
var ReactDOMComponentTree = __webpack_require__(7);
var ReactUpdates = __webpack_require__(19);

var warning = __webpack_require__(3);

var didWarnValueLink = false;
var didWarnValueDefaultValue = false;

function updateOptionsIfPendingUpdateAndMounted() {
  if (this._rootNodeID && this._wrapperState.pendingUpdate) {
    this._wrapperState.pendingUpdate = false;

    var props = this._currentElement.props;
    var value = LinkedValueUtils.getValue(props);

    if (value != null) {
      updateOptions(this, Boolean(props.multiple), value);
    }
  }
}

function getDeclarationErrorAddendum(owner) {
  if (owner) {
    var name = owner.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';
    }
  }
  return '';
}

var valuePropNames = ['value', 'defaultValue'];

/**
 * Validation function for `value` and `defaultValue`.
 * @private
 */
function checkSelectPropTypes(inst, props) {
  var owner = inst._currentElement._owner;
  LinkedValueUtils.checkPropTypes('select', props, owner);

  if (props.valueLink !== undefined && !didWarnValueLink) {
    process.env.NODE_ENV !== 'production' ? warning(false, '`valueLink` prop on `select` is deprecated; set `value` and `onChange` instead.') : void 0;
    didWarnValueLink = true;
  }

  for (var i = 0; i < valuePropNames.length; i++) {
    var propName = valuePropNames[i];
    if (props[propName] == null) {
      continue;
    }
    var isArray = Array.isArray(props[propName]);
    if (props.multiple && !isArray) {
      process.env.NODE_ENV !== 'production' ? warning(false, 'The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum(owner)) : void 0;
    } else if (!props.multiple && isArray) {
      process.env.NODE_ENV !== 'production' ? warning(false, 'The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum(owner)) : void 0;
    }
  }
}

/**
 * @param {ReactDOMComponent} inst
 * @param {boolean} multiple
 * @param {*} propValue A stringable (with `multiple`, a list of stringables).
 * @private
 */
function updateOptions(inst, multiple, propValue) {
  var selectedValue, i;
  var options = ReactDOMComponentTree.getNodeFromInstance(inst).options;

  if (multiple) {
    selectedValue = {};
    for (i = 0; i < propValue.length; i++) {
      selectedValue['' + propValue[i]] = true;
    }
    for (i = 0; i < options.length; i++) {
      var selected = selectedValue.hasOwnProperty(options[i].value);
      if (options[i].selected !== selected) {
        options[i].selected = selected;
      }
    }
  } else {
    // Do not set `select.value` as exact behavior isn't consistent across all
    // browsers for all cases.
    selectedValue = '' + propValue;
    for (i = 0; i < options.length; i++) {
      if (options[i].value === selectedValue) {
        options[i].selected = true;
        return;
      }
    }
    if (options.length) {
      options[0].selected = true;
    }
  }
}

/**
 * Implements a <select> host component that allows optionally setting the
 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
 * stringable. If `multiple` is true, the prop must be an array of stringables.
 *
 * If `value` is not supplied (or null/undefined), user actions that change the
 * selected option will trigger updates to the rendered options.
 *
 * If it is supplied (and not null/undefined), the rendered options will not
 * update in response to user actions. Instead, the `value` prop must change in
 * order for the rendered options to update.
 *
 * If `defaultValue` is provided, any options with the supplied values will be
 * selected.
 */
var ReactDOMSelect = {
  getHostProps: function getHostProps(inst, props) {
    return _assign({}, props, {
      onChange: inst._wrapperState.onChange,
      value: undefined
    });
  },

  mountWrapper: function mountWrapper(inst, props) {
    if (process.env.NODE_ENV !== 'production') {
      checkSelectPropTypes(inst, props);
    }

    var value = LinkedValueUtils.getValue(props);
    inst._wrapperState = {
      pendingUpdate: false,
      initialValue: value != null ? value : props.defaultValue,
      listeners: null,
      onChange: _handleChange.bind(inst),
      wasMultiple: Boolean(props.multiple)
    };

    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
      process.env.NODE_ENV !== 'production' ? warning(false, 'Select elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled select ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components') : void 0;
      didWarnValueDefaultValue = true;
    }
  },

  getSelectValueContext: function getSelectValueContext(inst) {
    // ReactDOMOption looks at this initial value so the initial generated
    // markup has correct `selected` attributes
    return inst._wrapperState.initialValue;
  },

  postUpdateWrapper: function postUpdateWrapper(inst) {
    var props = inst._currentElement.props;

    // After the initial mount, we control selected-ness manually so don't pass
    // this value down
    inst._wrapperState.initialValue = undefined;

    var wasMultiple = inst._wrapperState.wasMultiple;
    inst._wrapperState.wasMultiple = Boolean(props.multiple);

    var value = LinkedValueUtils.getValue(props);
    if (value != null) {
      inst._wrapperState.pendingUpdate = false;
      updateOptions(inst, Boolean(props.multiple), value);
    } else if (wasMultiple !== Boolean(props.multiple)) {
      // For simplicity, reapply `defaultValue` if `multiple` is toggled.
      if (props.defaultValue != null) {
        updateOptions(inst, Boolean(props.multiple), props.defaultValue);
      } else {
        // Revert the select back to its default unselected state.
        updateOptions(inst, Boolean(props.multiple), props.multiple ? [] : '');
      }
    }
  }
};

function _handleChange(event) {
  var props = this._currentElement.props;
  var returnValue = LinkedValueUtils.executeOnChange(props, event);

  if (this._rootNodeID) {
    this._wrapperState.pendingUpdate = true;
  }
  ReactUpdates.asap(updateOptionsIfPendingUpdateAndMounted, this);
  return returnValue;
}

module.exports = ReactDOMSelect;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var emptyComponentFactory;

var ReactEmptyComponentInjection = {
  injectEmptyComponentFactory: function injectEmptyComponentFactory(factory) {
    emptyComponentFactory = factory;
  }
};

var ReactEmptyComponent = {
  create: function create(instantiate) {
    return emptyComponentFactory(instantiate);
  }
};

ReactEmptyComponent.injection = ReactEmptyComponentInjection;

module.exports = ReactEmptyComponent;

/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var ReactFeatureFlags = {
  // When true, call console.time() before and .timeEnd() after each top-level
  // render (both initial renders and updates). Useful when looking at prod-mode
  // timeline profiles in Chrome, for example.
  logTopLevelRenders: false
};

module.exports = ReactFeatureFlags;

/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(4);

var invariant = __webpack_require__(2);

var genericComponentClass = null;
var textComponentClass = null;

var ReactHostComponentInjection = {
  // This accepts a class that receives the tag string. This is a catch all
  // that can render any kind of tag.
  injectGenericComponentClass: function injectGenericComponentClass(componentClass) {
    genericComponentClass = componentClass;
  },
  // This accepts a text component class that takes the text string to be
  // rendered as props.
  injectTextComponentClass: function injectTextComponentClass(componentClass) {
    textComponentClass = componentClass;
  }
};

/**
 * Get a host internal component class for a specific tag.
 *
 * @param {ReactElement} element The element to create.
 * @return {function} The internal class constructor function.
 */
function createInternalComponent(element) {
  !genericComponentClass ? process.env.NODE_ENV !== 'production' ? invariant(false, 'There is no registered component for the tag %s', element.type) : _prodInvariant('111', element.type) : void 0;
  return new genericComponentClass(element);
}

/**
 * @param {ReactText} text
 * @return {ReactComponent}
 */
function createInstanceForText(text) {
  return new textComponentClass(text);
}

/**
 * @param {ReactComponent} component
 * @return {boolean}
 */
function isTextComponent(component) {
  return component instanceof textComponentClass;
}

var ReactHostComponent = {
  createInternalComponent: createInternalComponent,
  createInstanceForText: createInstanceForText,
  isTextComponent: isTextComponent,
  injection: ReactHostComponentInjection
};

module.exports = ReactHostComponent;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ReactDOMSelection = __webpack_require__(191);

var containsNode = __webpack_require__(153);
var focusNode = __webpack_require__(82);
var getActiveElement = __webpack_require__(83);

function isInDocument(node) {
  return containsNode(document.documentElement, node);
}

/**
 * @ReactInputSelection: React input selection module. Based on Selection.js,
 * but modified to be suitable for react and has a couple of bug fixes (doesn't
 * assume buttons have range selections allowed).
 * Input selection module for React.
 */
var ReactInputSelection = {
  hasSelectionCapabilities: function hasSelectionCapabilities(elem) {
    var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
    return nodeName && (nodeName === 'input' && elem.type === 'text' || nodeName === 'textarea' || elem.contentEditable === 'true');
  },

  getSelectionInformation: function getSelectionInformation() {
    var focusedElem = getActiveElement();
    return {
      focusedElem: focusedElem,
      selectionRange: ReactInputSelection.hasSelectionCapabilities(focusedElem) ? ReactInputSelection.getSelection(focusedElem) : null
    };
  },

  /**
   * @restoreSelection: If any selection information was potentially lost,
   * restore it. This is useful when performing operations that could remove dom
   * nodes and place them back in, resulting in focus being lost.
   */
  restoreSelection: function restoreSelection(priorSelectionInformation) {
    var curFocusedElem = getActiveElement();
    var priorFocusedElem = priorSelectionInformation.focusedElem;
    var priorSelectionRange = priorSelectionInformation.selectionRange;
    if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
        ReactInputSelection.setSelection(priorFocusedElem, priorSelectionRange);
      }
      focusNode(priorFocusedElem);
    }
  },

  /**
   * @getSelection: Gets the selection bounds of a focused textarea, input or
   * contentEditable node.
   * -@input: Look up selection bounds of this input
   * -@return {start: selectionStart, end: selectionEnd}
   */
  getSelection: function getSelection(input) {
    var selection;

    if ('selectionStart' in input) {
      // Modern browser with input or textarea.
      selection = {
        start: input.selectionStart,
        end: input.selectionEnd
      };
    } else if (document.selection && input.nodeName && input.nodeName.toLowerCase() === 'input') {
      // IE8 input.
      var range = document.selection.createRange();
      // There can only be one selection per document in IE, so it must
      // be in our element.
      if (range.parentElement() === input) {
        selection = {
          start: -range.moveStart('character', -input.value.length),
          end: -range.moveEnd('character', -input.value.length)
        };
      }
    } else {
      // Content editable or old IE textarea.
      selection = ReactDOMSelection.getOffsets(input);
    }

    return selection || { start: 0, end: 0 };
  },

  /**
   * @setSelection: Sets the selection bounds of a textarea or input and focuses
   * the input.
   * -@input     Set selection bounds of this input or textarea
   * -@offsets   Object of same form that is returned from get*
   */
  setSelection: function setSelection(input, offsets) {
    var start = offsets.start;
    var end = offsets.end;
    if (end === undefined) {
      end = start;
    }

    if ('selectionStart' in input) {
      input.selectionStart = start;
      input.selectionEnd = Math.min(end, input.value.length);
    } else if (document.selection && input.nodeName && input.nodeName.toLowerCase() === 'input') {
      var range = input.createTextRange();
      range.collapse(true);
      range.moveStart('character', start);
      range.moveEnd('character', end - start);
      range.select();
    } else {
      ReactDOMSelection.setOffsets(input, offsets);
    }
  }
};

module.exports = ReactInputSelection;

/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(4);

var DOMLazyTree = __webpack_require__(30);
var DOMProperty = __webpack_require__(27);
var React = __webpack_require__(32);
var ReactBrowserEventEmitter = __webpack_require__(44);
var ReactCurrentOwner = __webpack_require__(20);
var ReactDOMComponentTree = __webpack_require__(7);
var ReactDOMContainerInfo = __webpack_require__(183);
var ReactDOMFeatureFlags = __webpack_require__(185);
var ReactFeatureFlags = __webpack_require__(92);
var ReactInstanceMap = __webpack_require__(38);
var ReactInstrumentation = __webpack_require__(15);
var ReactMarkupChecksum = __webpack_require__(205);
var ReactReconciler = __webpack_require__(31);
var ReactUpdateQueue = __webpack_require__(66);
var ReactUpdates = __webpack_require__(19);

var emptyObject = __webpack_require__(42);
var instantiateReactComponent = __webpack_require__(104);
var invariant = __webpack_require__(2);
var setInnerHTML = __webpack_require__(48);
var shouldUpdateReactComponent = __webpack_require__(72);
var warning = __webpack_require__(3);

var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
var ROOT_ATTR_NAME = DOMProperty.ROOT_ATTRIBUTE_NAME;

var ELEMENT_NODE_TYPE = 1;
var DOC_NODE_TYPE = 9;
var DOCUMENT_FRAGMENT_NODE_TYPE = 11;

var instancesByReactRootID = {};

/**
 * Finds the index of the first character
 * that's not common between the two given strings.
 *
 * @return {number} the index of the character where the strings diverge
 */
function firstDifferenceIndex(string1, string2) {
  var minLen = Math.min(string1.length, string2.length);
  for (var i = 0; i < minLen; i++) {
    if (string1.charAt(i) !== string2.charAt(i)) {
      return i;
    }
  }
  return string1.length === string2.length ? -1 : minLen;
}

/**
 * @param {DOMElement|DOMDocument} container DOM element that may contain
 * a React component
 * @return {?*} DOM element that may have the reactRoot ID, or null.
 */
function getReactRootElementInContainer(container) {
  if (!container) {
    return null;
  }

  if (container.nodeType === DOC_NODE_TYPE) {
    return container.documentElement;
  } else {
    return container.firstChild;
  }
}

function internalGetID(node) {
  // If node is something like a window, document, or text node, none of
  // which support attributes or a .getAttribute method, gracefully return
  // the empty string, as if the attribute were missing.
  return node.getAttribute && node.getAttribute(ATTR_NAME) || '';
}

/**
 * Mounts this component and inserts it into the DOM.
 *
 * @param {ReactComponent} componentInstance The instance to mount.
 * @param {DOMElement} container DOM element to mount into.
 * @param {ReactReconcileTransaction} transaction
 * @param {boolean} shouldReuseMarkup If true, do not insert markup
 */
function mountComponentIntoNode(wrapperInstance, container, transaction, shouldReuseMarkup, context) {
  var markerName;
  if (ReactFeatureFlags.logTopLevelRenders) {
    var wrappedElement = wrapperInstance._currentElement.props.child;
    var type = wrappedElement.type;
    markerName = 'React mount: ' + (typeof type === 'string' ? type : type.displayName || type.name);
    console.time(markerName);
  }

  var markup = ReactReconciler.mountComponent(wrapperInstance, transaction, null, ReactDOMContainerInfo(wrapperInstance, container), context, 0 /* parentDebugID */
  );

  if (markerName) {
    console.timeEnd(markerName);
  }

  wrapperInstance._renderedComponent._topLevelWrapper = wrapperInstance;
  ReactMount._mountImageIntoNode(markup, container, wrapperInstance, shouldReuseMarkup, transaction);
}

/**
 * Batched mount.
 *
 * @param {ReactComponent} componentInstance The instance to mount.
 * @param {DOMElement} container DOM element to mount into.
 * @param {boolean} shouldReuseMarkup If true, do not insert markup
 */
function batchedMountComponentIntoNode(componentInstance, container, shouldReuseMarkup, context) {
  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled(
  /* useCreateElement */
  !shouldReuseMarkup && ReactDOMFeatureFlags.useCreateElement);
  transaction.perform(mountComponentIntoNode, null, componentInstance, container, transaction, shouldReuseMarkup, context);
  ReactUpdates.ReactReconcileTransaction.release(transaction);
}

/**
 * Unmounts a component and removes it from the DOM.
 *
 * @param {ReactComponent} instance React component instance.
 * @param {DOMElement} container DOM element to unmount from.
 * @final
 * @internal
 * @see {ReactMount.unmountComponentAtNode}
 */
function unmountComponentFromNode(instance, container, safely) {
  if (process.env.NODE_ENV !== 'production') {
    ReactInstrumentation.debugTool.onBeginFlush();
  }
  ReactReconciler.unmountComponent(instance, safely);
  if (process.env.NODE_ENV !== 'production') {
    ReactInstrumentation.debugTool.onEndFlush();
  }

  if (container.nodeType === DOC_NODE_TYPE) {
    container = container.documentElement;
  }

  // http://jsperf.com/emptying-a-node
  while (container.lastChild) {
    container.removeChild(container.lastChild);
  }
}

/**
 * True if the supplied DOM node has a direct React-rendered child that is
 * not a React root element. Useful for warning in `render`,
 * `unmountComponentAtNode`, etc.
 *
 * @param {?DOMElement} node The candidate DOM node.
 * @return {boolean} True if the DOM element contains a direct child that was
 * rendered by React but is not a root element.
 * @internal
 */
function hasNonRootReactChild(container) {
  var rootEl = getReactRootElementInContainer(container);
  if (rootEl) {
    var inst = ReactDOMComponentTree.getInstanceFromNode(rootEl);
    return !!(inst && inst._hostParent);
  }
}

/**
 * True if the supplied DOM node is a React DOM element and
 * it has been rendered by another copy of React.
 *
 * @param {?DOMElement} node The candidate DOM node.
 * @return {boolean} True if the DOM has been rendered by another copy of React
 * @internal
 */
function nodeIsRenderedByOtherInstance(container) {
  var rootEl = getReactRootElementInContainer(container);
  return !!(rootEl && isReactNode(rootEl) && !ReactDOMComponentTree.getInstanceFromNode(rootEl));
}

/**
 * True if the supplied DOM node is a valid node element.
 *
 * @param {?DOMElement} node The candidate DOM node.
 * @return {boolean} True if the DOM is a valid DOM node.
 * @internal
 */
function isValidContainer(node) {
  return !!(node && (node.nodeType === ELEMENT_NODE_TYPE || node.nodeType === DOC_NODE_TYPE || node.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE));
}

/**
 * True if the supplied DOM node is a valid React node element.
 *
 * @param {?DOMElement} node The candidate DOM node.
 * @return {boolean} True if the DOM is a valid React DOM node.
 * @internal
 */
function isReactNode(node) {
  return isValidContainer(node) && (node.hasAttribute(ROOT_ATTR_NAME) || node.hasAttribute(ATTR_NAME));
}

function getHostRootInstanceInContainer(container) {
  var rootEl = getReactRootElementInContainer(container);
  var prevHostInstance = rootEl && ReactDOMComponentTree.getInstanceFromNode(rootEl);
  return prevHostInstance && !prevHostInstance._hostParent ? prevHostInstance : null;
}

function getTopLevelWrapperInContainer(container) {
  var root = getHostRootInstanceInContainer(container);
  return root ? root._hostContainerInfo._topLevelWrapper : null;
}

/**
 * Temporary (?) hack so that we can store all top-level pending updates on
 * composites instead of having to worry about different types of components
 * here.
 */
var topLevelRootCounter = 1;
var TopLevelWrapper = function TopLevelWrapper() {
  this.rootID = topLevelRootCounter++;
};
TopLevelWrapper.prototype.isReactComponent = {};
if (process.env.NODE_ENV !== 'production') {
  TopLevelWrapper.displayName = 'TopLevelWrapper';
}
TopLevelWrapper.prototype.render = function () {
  return this.props.child;
};
TopLevelWrapper.isReactTopLevelWrapper = true;

/**
 * Mounting is the process of initializing a React component by creating its
 * representative DOM elements and inserting them into a supplied `container`.
 * Any prior content inside `container` is destroyed in the process.
 *
 *   ReactMount.render(
 *     component,
 *     document.getElementById('container')
 *   );
 *
 *   <div id="container">                   <-- Supplied `container`.
 *     <div data-reactid=".3">              <-- Rendered reactRoot of React
 *       // ...                                 component.
 *     </div>
 *   </div>
 *
 * Inside of `container`, the first element rendered is the "reactRoot".
 */
var ReactMount = {
  TopLevelWrapper: TopLevelWrapper,

  /**
   * Used by devtools. The keys are not important.
   */
  _instancesByReactRootID: instancesByReactRootID,

  /**
   * This is a hook provided to support rendering React components while
   * ensuring that the apparent scroll position of its `container` does not
   * change.
   *
   * @param {DOMElement} container The `container` being rendered into.
   * @param {function} renderCallback This must be called once to do the render.
   */
  scrollMonitor: function scrollMonitor(container, renderCallback) {
    renderCallback();
  },

  /**
   * Take a component that's already mounted into the DOM and replace its props
   * @param {ReactComponent} prevComponent component instance already in the DOM
   * @param {ReactElement} nextElement component instance to render
   * @param {DOMElement} container container to render into
   * @param {?function} callback function triggered on completion
   */
  _updateRootComponent: function _updateRootComponent(prevComponent, nextElement, nextContext, container, callback) {
    ReactMount.scrollMonitor(container, function () {
      ReactUpdateQueue.enqueueElementInternal(prevComponent, nextElement, nextContext);
      if (callback) {
        ReactUpdateQueue.enqueueCallbackInternal(prevComponent, callback);
      }
    });

    return prevComponent;
  },

  /**
   * Render a new component into the DOM. Hooked by hooks!
   *
   * @param {ReactElement} nextElement element to render
   * @param {DOMElement} container container to render into
   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion
   * @return {ReactComponent} nextComponent
   */
  _renderNewRootComponent: function _renderNewRootComponent(nextElement, container, shouldReuseMarkup, context) {
    // Various parts of our code (such as ReactCompositeComponent's
    // _renderValidatedComponent) assume that calls to render aren't nested;
    // verify that that's the case.
    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '_renderNewRootComponent(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from ' + 'render is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : void 0;

    !isValidContainer(container) ? process.env.NODE_ENV !== 'production' ? invariant(false, '_registerComponent(...): Target container is not a DOM element.') : _prodInvariant('37') : void 0;

    ReactBrowserEventEmitter.ensureScrollValueMonitoring();
    var componentInstance = instantiateReactComponent(nextElement, false);

    // The initial render is synchronous but any updates that happen during
    // rendering, in componentWillMount or componentDidMount, will be batched
    // according to the current batching strategy.

    ReactUpdates.batchedUpdates(batchedMountComponentIntoNode, componentInstance, container, shouldReuseMarkup, context);

    var wrapperID = componentInstance._instance.rootID;
    instancesByReactRootID[wrapperID] = componentInstance;

    return componentInstance;
  },

  /**
   * Renders a React component into the DOM in the supplied `container`.
   *
   * If the React component was previously rendered into `container`, this will
   * perform an update on it and only mutate the DOM as necessary to reflect the
   * latest React component.
   *
   * @param {ReactComponent} parentComponent The conceptual parent of this render tree.
   * @param {ReactElement} nextElement Component element to render.
   * @param {DOMElement} container DOM element to render into.
   * @param {?function} callback function triggered on completion
   * @return {ReactComponent} Component instance rendered in `container`.
   */
  renderSubtreeIntoContainer: function renderSubtreeIntoContainer(parentComponent, nextElement, container, callback) {
    !(parentComponent != null && ReactInstanceMap.has(parentComponent)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'parentComponent must be a valid React Component') : _prodInvariant('38') : void 0;
    return ReactMount._renderSubtreeIntoContainer(parentComponent, nextElement, container, callback);
  },

  _renderSubtreeIntoContainer: function _renderSubtreeIntoContainer(parentComponent, nextElement, container, callback) {
    ReactUpdateQueue.validateCallback(callback, 'ReactDOM.render');
    !React.isValidElement(nextElement) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOM.render(): Invalid component element.%s', typeof nextElement === 'string' ? " Instead of passing a string like 'div', pass " + "React.createElement('div') or <div />." : typeof nextElement === 'function' ? ' Instead of passing a class like Foo, pass ' + 'React.createElement(Foo) or <Foo />.' : // Check if it quacks like an element
    nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : _prodInvariant('39', typeof nextElement === 'string' ? " Instead of passing a string like 'div', pass " + "React.createElement('div') or <div />." : typeof nextElement === 'function' ? ' Instead of passing a class like Foo, pass ' + 'React.createElement(Foo) or <Foo />.' : nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : void 0;

    process.env.NODE_ENV !== 'production' ? warning(!container || !container.tagName || container.tagName.toUpperCase() !== 'BODY', 'render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.') : void 0;

    var nextWrappedElement = React.createElement(TopLevelWrapper, {
      child: nextElement
    });

    var nextContext;
    if (parentComponent) {
      var parentInst = ReactInstanceMap.get(parentComponent);
      nextContext = parentInst._processChildContext(parentInst._context);
    } else {
      nextContext = emptyObject;
    }

    var prevComponent = getTopLevelWrapperInContainer(container);

    if (prevComponent) {
      var prevWrappedElement = prevComponent._currentElement;
      var prevElement = prevWrappedElement.props.child;
      if (shouldUpdateReactComponent(prevElement, nextElement)) {
        var publicInst = prevComponent._renderedComponent.getPublicInstance();
        var updatedCallback = callback && function () {
          callback.call(publicInst);
        };
        ReactMount._updateRootComponent(prevComponent, nextWrappedElement, nextContext, container, updatedCallback);
        return publicInst;
      } else {
        ReactMount.unmountComponentAtNode(container);
      }
    }

    var reactRootElement = getReactRootElementInContainer(container);
    var containerHasReactMarkup = reactRootElement && !!internalGetID(reactRootElement);
    var containerHasNonRootReactChild = hasNonRootReactChild(container);

    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.') : void 0;

      if (!containerHasReactMarkup || reactRootElement.nextSibling) {
        var rootElementSibling = reactRootElement;
        while (rootElementSibling) {
          if (internalGetID(rootElementSibling)) {
            process.env.NODE_ENV !== 'production' ? warning(false, 'render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.') : void 0;
            break;
          }
          rootElementSibling = rootElementSibling.nextSibling;
        }
      }
    }

    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent && !containerHasNonRootReactChild;
    var component = ReactMount._renderNewRootComponent(nextWrappedElement, container, shouldReuseMarkup, nextContext)._renderedComponent.getPublicInstance();
    if (callback) {
      callback.call(component);
    }
    return component;
  },

  /**
   * Renders a React component into the DOM in the supplied `container`.
   * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.render
   *
   * If the React component was previously rendered into `container`, this will
   * perform an update on it and only mutate the DOM as necessary to reflect the
   * latest React component.
   *
   * @param {ReactElement} nextElement Component element to render.
   * @param {DOMElement} container DOM element to render into.
   * @param {?function} callback function triggered on completion
   * @return {ReactComponent} Component instance rendered in `container`.
   */
  render: function render(nextElement, container, callback) {
    return ReactMount._renderSubtreeIntoContainer(null, nextElement, container, callback);
  },

  /**
   * Unmounts and destroys the React component rendered in the `container`.
   * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.unmountcomponentatnode
   *
   * @param {DOMElement} container DOM element containing a React component.
   * @return {boolean} True if a component was found in and unmounted from
   *                   `container`
   */
  unmountComponentAtNode: function unmountComponentAtNode(container) {
    // Various parts of our code (such as ReactCompositeComponent's
    // _renderValidatedComponent) assume that calls to render aren't nested;
    // verify that that's the case. (Strictly speaking, unmounting won't cause a
    // render but we still don't expect to be in a render call here.)
    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, 'unmountComponentAtNode(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from render ' + 'is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : void 0;

    !isValidContainer(container) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'unmountComponentAtNode(...): Target container is not a DOM element.') : _prodInvariant('40') : void 0;

    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(!nodeIsRenderedByOtherInstance(container), "unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by another copy of React.') : void 0;
    }

    var prevComponent = getTopLevelWrapperInContainer(container);
    if (!prevComponent) {
      // Check if the node being unmounted was rendered by React, but isn't a
      // root node.
      var containerHasNonRootReactChild = hasNonRootReactChild(container);

      // Check if the container itself is a React root node.
      var isContainerReactRoot = container.nodeType === 1 && container.hasAttribute(ROOT_ATTR_NAME);

      if (process.env.NODE_ENV !== 'production') {
        process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, "unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.') : void 0;
      }

      return false;
    }
    delete instancesByReactRootID[prevComponent._instance.rootID];
    ReactUpdates.batchedUpdates(unmountComponentFromNode, prevComponent, container, false);
    return true;
  },

  _mountImageIntoNode: function _mountImageIntoNode(markup, container, instance, shouldReuseMarkup, transaction) {
    !isValidContainer(container) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mountComponentIntoNode(...): Target container is not valid.') : _prodInvariant('41') : void 0;

    if (shouldReuseMarkup) {
      var rootElement = getReactRootElementInContainer(container);
      if (ReactMarkupChecksum.canReuseMarkup(markup, rootElement)) {
        ReactDOMComponentTree.precacheNode(instance, rootElement);
        return;
      } else {
        var checksum = rootElement.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
        rootElement.removeAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);

        var rootMarkup = rootElement.outerHTML;
        rootElement.setAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME, checksum);

        var normalizedMarkup = markup;
        if (process.env.NODE_ENV !== 'production') {
          // because rootMarkup is retrieved from the DOM, various normalizations
          // will have occurred which will not be present in `markup`. Here,
          // insert markup into a <div> or <iframe> depending on the container
          // type to perform the same normalizations before comparing.
          var normalizer;
          if (container.nodeType === ELEMENT_NODE_TYPE) {
            normalizer = document.createElement('div');
            normalizer.innerHTML = markup;
            normalizedMarkup = normalizer.innerHTML;
          } else {
            normalizer = document.createElement('iframe');
            document.body.appendChild(normalizer);
            normalizer.contentDocument.write(markup);
            normalizedMarkup = normalizer.contentDocument.documentElement.outerHTML;
            document.body.removeChild(normalizer);
          }
        }

        var diffIndex = firstDifferenceIndex(normalizedMarkup, rootMarkup);
        var difference = ' (client) ' + normalizedMarkup.substring(diffIndex - 20, diffIndex + 20) + '\n (server) ' + rootMarkup.substring(diffIndex - 20, diffIndex + 20);

        !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\'re trying to render a component to the document using server rendering but the checksum was invalid. This usually means you rendered a different component type or props on the client from the one on the server, or your render() methods are impure. React cannot handle this case due to cross-browser quirks by rendering at the document root. You should look for environment dependent code in your components and ensure the props are the same client and server side:\n%s', difference) : _prodInvariant('42', difference) : void 0;

        if (process.env.NODE_ENV !== 'production') {
          process.env.NODE_ENV !== 'production' ? warning(false, 'React attempted to reuse markup in a container but the ' + 'checksum was invalid. This generally means that you are ' + 'using server rendering and the markup generated on the ' + 'server was not what the client was expecting. React injected ' + 'new markup to compensate which works but you have lost many ' + 'of the benefits of server rendering. Instead, figure out ' + 'why the markup being generated is different on the client ' + 'or server:\n%s', difference) : void 0;
        }
      }
    }

    !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\'re trying to render a component to the document but you didn\'t use server rendering. We can\'t do this without using server rendering due to cross-browser quirks. See ReactDOMServer.renderToString() for server rendering.') : _prodInvariant('43') : void 0;

    if (transaction.useCreateElement) {
      while (container.lastChild) {
        container.removeChild(container.lastChild);
      }
      DOMLazyTree.insertTreeBefore(container, markup, null);
    } else {
      setInnerHTML(container, markup);
      ReactDOMComponentTree.precacheNode(instance, container.firstChild);
    }

    if (process.env.NODE_ENV !== 'production') {
      var hostNode = ReactDOMComponentTree.getInstanceFromNode(container.firstChild);
      if (hostNode._debugID !== 0) {
        ReactInstrumentation.debugTool.onHostOperation({
          instanceID: hostNode._debugID,
          type: 'mount',
          payload: markup.toString()
        });
      }
    }
  }
};

module.exports = ReactMount;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var _prodInvariant = __webpack_require__(4);

var React = __webpack_require__(32);

var invariant = __webpack_require__(2);

var ReactNodeTypes = {
  HOST: 0,
  COMPOSITE: 1,
  EMPTY: 2,

  getType: function getType(node) {
    if (node === null || node === false) {
      return ReactNodeTypes.EMPTY;
    } else if (React.isValidElement(node)) {
      if (typeof node.type === 'function') {
        return ReactNodeTypes.COMPOSITE;
      } else {
        return ReactNodeTypes.HOST;
      }
    }
     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Unexpected node: %s', node) : _prodInvariant('26', node) : void 0;
  }
};

module.exports = ReactNodeTypes;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

module.exports = ReactPropTypesSecret;

/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ViewportMetrics = {
  currentScrollLeft: 0,

  currentScrollTop: 0,

  refreshScrollValues: function refreshScrollValues(scrollPosition) {
    ViewportMetrics.currentScrollLeft = scrollPosition.x;
    ViewportMetrics.currentScrollTop = scrollPosition.y;
  }
};

module.exports = ViewportMetrics;

/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var _prodInvariant = __webpack_require__(4);

var invariant = __webpack_require__(2);

/**
 * Accumulates items that must not be null or undefined into the first one. This
 * is used to conserve memory by avoiding array allocations, and thus sacrifices
 * API cleanness. Since `current` can be null before being passed in and not
 * null after this function, make sure to assign it back to `current`:
 *
 * `a = accumulateInto(a, b);`
 *
 * This API should be sparingly used. Try `accumulate` for something cleaner.
 *
 * @return {*|array<*>} An accumulation of items.
 */

function accumulateInto(current, next) {
  !(next != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'accumulateInto(...): Accumulated items must not be null or undefined.') : _prodInvariant('30') : void 0;

  if (current == null) {
    return next;
  }

  // Both are not empty. Warning: Never call x.concat(y) when you are not
  // certain that x is an Array (x could be a string with concat method).
  if (Array.isArray(current)) {
    if (Array.isArray(next)) {
      current.push.apply(current, next);
      return current;
    }
    current.push(next);
    return current;
  }

  if (Array.isArray(next)) {
    // A bit too dangerous to mutate `next`.
    return [current].concat(next);
  }

  return [current, next];
}

module.exports = accumulateInto;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



/**
 * @param {array} arr an "accumulation" of items which is either an Array or
 * a single item. Useful when paired with the `accumulate` module. This is a
 * simple utility that allows us to reason about a collection of items, but
 * handling the case when there is exactly one item (and we do not need to
 * allocate an array).
 */

function forEachAccumulated(arr, cb, scope) {
  if (Array.isArray(arr)) {
    arr.forEach(cb, scope);
  } else if (arr) {
    cb.call(scope, arr);
  }
}

module.exports = forEachAccumulated;

/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ReactNodeTypes = __webpack_require__(96);

function getHostComponentFromComposite(inst) {
  var type;

  while ((type = inst._renderedNodeType) === ReactNodeTypes.COMPOSITE) {
    inst = inst._renderedComponent;
  }

  if (type === ReactNodeTypes.HOST) {
    return inst._renderedComponent;
  } else if (type === ReactNodeTypes.EMPTY) {
    return null;
  }
}

module.exports = getHostComponentFromComposite;

/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ExecutionEnvironment = __webpack_require__(9);

var contentKey = null;

/**
 * Gets the key used to access text content on a DOM node.
 *
 * @return {?string} Key used to access text content.
 * @internal
 */
function getTextContentAccessor() {
  if (!contentKey && ExecutionEnvironment.canUseDOM) {
    // Prefer textContent to innerText because many browsers support both but
    // SVG <text> elements don't support innerText even when <div> does.
    contentKey = 'textContent' in document.documentElement ? 'textContent' : 'innerText';
  }
  return contentKey;
}

module.exports = getTextContentAccessor;

/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ReactDOMComponentTree = __webpack_require__(7);

function isCheckable(elem) {
  var type = elem.type;
  var nodeName = elem.nodeName;
  return nodeName && nodeName.toLowerCase() === 'input' && (type === 'checkbox' || type === 'radio');
}

function getTracker(inst) {
  return inst._wrapperState.valueTracker;
}

function attachTracker(inst, tracker) {
  inst._wrapperState.valueTracker = tracker;
}

function detachTracker(inst) {
  delete inst._wrapperState.valueTracker;
}

function getValueFromNode(node) {
  var value;
  if (node) {
    value = isCheckable(node) ? '' + node.checked : node.value;
  }
  return value;
}

var inputValueTracking = {
  // exposed for testing
  _getTrackerFromNode: function _getTrackerFromNode(node) {
    return getTracker(ReactDOMComponentTree.getInstanceFromNode(node));
  },

  track: function track(inst) {
    if (getTracker(inst)) {
      return;
    }

    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
    var valueField = isCheckable(node) ? 'checked' : 'value';
    var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);

    var currentValue = '' + node[valueField];

    // if someone has already defined a value or Safari, then bail
    // and don't track value will cause over reporting of changes,
    // but it's better then a hard failure
    // (needed for certain tests that spyOn input values and Safari)
    if (node.hasOwnProperty(valueField) || typeof descriptor.get !== 'function' || typeof descriptor.set !== 'function') {
      return;
    }

    Object.defineProperty(node, valueField, {
      enumerable: descriptor.enumerable,
      configurable: true,
      get: function get() {
        return descriptor.get.call(this);
      },
      set: function set(value) {
        currentValue = '' + value;
        descriptor.set.call(this, value);
      }
    });

    attachTracker(inst, {
      getValue: function getValue() {
        return currentValue;
      },
      setValue: function setValue(value) {
        currentValue = '' + value;
      },
      stopTracking: function stopTracking() {
        detachTracker(inst);
        delete node[valueField];
      }
    });
  },

  updateValueIfChanged: function updateValueIfChanged(inst) {
    if (!inst) {
      return false;
    }
    var tracker = getTracker(inst);

    if (!tracker) {
      inputValueTracking.track(inst);
      return true;
    }

    var lastValue = tracker.getValue();
    var nextValue = getValueFromNode(ReactDOMComponentTree.getNodeFromInstance(inst));

    if (nextValue !== lastValue) {
      tracker.setValue(nextValue);
      return true;
    }

    return false;
  },
  stopTracking: function stopTracking(inst) {
    var tracker = getTracker(inst);
    if (tracker) {
      tracker.stopTracking();
    }
  }
};

module.exports = inputValueTracking;

/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _prodInvariant = __webpack_require__(4),
    _assign = __webpack_require__(6);

var ReactCompositeComponent = __webpack_require__(180);
var ReactEmptyComponent = __webpack_require__(91);
var ReactHostComponent = __webpack_require__(93);

var getNextDebugID = __webpack_require__(248);
var invariant = __webpack_require__(2);
var warning = __webpack_require__(3);

// To avoid a cyclic dependency, we create the final class in this module
var ReactCompositeComponentWrapper = function ReactCompositeComponentWrapper(element) {
  this.construct(element);
};

function getDeclarationErrorAddendum(owner) {
  if (owner) {
    var name = owner.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';
    }
  }
  return '';
}

/**
 * Check if the type reference is a known internal type. I.e. not a user
 * provided composite type.
 *
 * @param {function} type
 * @return {boolean} Returns true if this is a valid internal type.
 */
function isInternalComponentType(type) {
  return typeof type === 'function' && typeof type.prototype !== 'undefined' && typeof type.prototype.mountComponent === 'function' && typeof type.prototype.receiveComponent === 'function';
}

/**
 * Given a ReactNode, create an instance that will actually be mounted.
 *
 * @param {ReactNode} node
 * @param {boolean} shouldHaveDebugID
 * @return {object} A new instance of the element's constructor.
 * @protected
 */
function instantiateReactComponent(node, shouldHaveDebugID) {
  var instance;

  if (node === null || node === false) {
    instance = ReactEmptyComponent.create(instantiateReactComponent);
  } else if ((typeof node === 'undefined' ? 'undefined' : _typeof(node)) === 'object') {
    var element = node;
    var type = element.type;
    if (typeof type !== 'function' && typeof type !== 'string') {
      var info = '';
      if (process.env.NODE_ENV !== 'production') {
        if (type === undefined || (typeof type === 'undefined' ? 'undefined' : _typeof(type)) === 'object' && type !== null && Object.keys(type).length === 0) {
          info += ' You likely forgot to export your component from the file ' + "it's defined in.";
        }
      }
      info += getDeclarationErrorAddendum(element._owner);
       true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s', type == null ? type : typeof type === 'undefined' ? 'undefined' : _typeof(type), info) : _prodInvariant('130', type == null ? type : typeof type === 'undefined' ? 'undefined' : _typeof(type), info) : void 0;
    }

    // Special case string values
    if (typeof element.type === 'string') {
      instance = ReactHostComponent.createInternalComponent(element);
    } else if (isInternalComponentType(element.type)) {
      // This is temporarily available for custom components that are not string
      // representations. I.e. ART. Once those are updated to use the string
      // representation, we can drop this code path.
      instance = new element.type(element);

      // We renamed this. Allow the old name for compat. :(
      if (!instance.getHostNode) {
        instance.getHostNode = instance.getNativeNode;
      }
    } else {
      instance = new ReactCompositeComponentWrapper(element);
    }
  } else if (typeof node === 'string' || typeof node === 'number') {
    instance = ReactHostComponent.createInstanceForText(node);
  } else {
     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Encountered invalid React node of type %s', typeof node === 'undefined' ? 'undefined' : _typeof(node)) : _prodInvariant('131', typeof node === 'undefined' ? 'undefined' : _typeof(node)) : void 0;
  }

  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(typeof instance.mountComponent === 'function' && typeof instance.receiveComponent === 'function' && typeof instance.getHostNode === 'function' && typeof instance.unmountComponent === 'function', 'Only React Components can be mounted.') : void 0;
  }

  // These two fields are used by the DOM and ART diffing algorithms
  // respectively. Instead of using expandos on components, we should be
  // storing the state needed by the diffing algorithms elsewhere.
  instance._mountIndex = 0;
  instance._mountImage = null;

  if (process.env.NODE_ENV !== 'production') {
    instance._debugID = shouldHaveDebugID ? getNextDebugID() : 0;
  }

  // Internal instances should fully constructed at this point, so they should
  // not get any new fields added to them at this point.
  if (process.env.NODE_ENV !== 'production') {
    if (Object.preventExtensions) {
      Object.preventExtensions(instance);
    }
  }

  return instance;
}

_assign(ReactCompositeComponentWrapper.prototype, ReactCompositeComponent, {
  _instantiateReactComponent: instantiateReactComponent
});

module.exports = instantiateReactComponent;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



/**
 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
 */

var supportedInputTypes = {
  color: true,
  date: true,
  datetime: true,
  'datetime-local': true,
  email: true,
  month: true,
  number: true,
  password: true,
  range: true,
  search: true,
  tel: true,
  text: true,
  time: true,
  url: true,
  week: true
};

function isTextInputElement(elem) {
  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();

  if (nodeName === 'input') {
    return !!supportedInputTypes[elem.type];
  }

  if (nodeName === 'textarea') {
    return true;
  }

  return false;
}

module.exports = isTextInputElement;

/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ExecutionEnvironment = __webpack_require__(9);
var escapeTextContentForBrowser = __webpack_require__(47);
var setInnerHTML = __webpack_require__(48);

/**
 * Set the textContent property of a node, ensuring that whitespace is preserved
 * even in IE8. innerText is a poor substitute for textContent and, among many
 * issues, inserts <br> instead of the literal newline chars. innerHTML behaves
 * as it should.
 *
 * @param {DOMElement} node
 * @param {string} text
 * @internal
 */
var setTextContent = function setTextContent(node, text) {
  if (text) {
    var firstChild = node.firstChild;

    if (firstChild && firstChild === node.lastChild && firstChild.nodeType === 3) {
      firstChild.nodeValue = text;
      return;
    }
  }
  node.textContent = text;
};

if (ExecutionEnvironment.canUseDOM) {
  if (!('textContent' in document.documentElement)) {
    setTextContent = function setTextContent(node, text) {
      if (node.nodeType === 3) {
        node.nodeValue = text;
        return;
      }
      setInnerHTML(node, escapeTextContentForBrowser(text));
    };
  }
}

module.exports = setTextContent;

/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _prodInvariant = __webpack_require__(4);

var ReactCurrentOwner = __webpack_require__(20);
var REACT_ELEMENT_TYPE = __webpack_require__(199);

var getIteratorFn = __webpack_require__(233);
var invariant = __webpack_require__(2);
var KeyEscapeUtils = __webpack_require__(62);
var warning = __webpack_require__(3);

var SEPARATOR = '.';
var SUBSEPARATOR = ':';

/**
 * This is inlined from ReactElement since this file is shared between
 * isomorphic and renderers. We could extract this to a
 *
 */

/**
 * TODO: Test that a single child and an array with one item have the same key
 * pattern.
 */

var didWarnAboutMaps = false;

/**
 * Generate a key string that identifies a component within a set.
 *
 * @param {*} component A component that could contain a manual key.
 * @param {number} index Index that is used if a manual key is not provided.
 * @return {string}
 */
function getComponentKey(component, index) {
  // Do some typechecking here since we call this blindly. We want to ensure
  // that we don't block potential future ES APIs.
  if (component && (typeof component === 'undefined' ? 'undefined' : _typeof(component)) === 'object' && component.key != null) {
    // Explicit key
    return KeyEscapeUtils.escape(component.key);
  }
  // Implicit key determined by the index in the set
  return index.toString(36);
}

/**
 * @param {?*} children Children tree container.
 * @param {!string} nameSoFar Name of the key path so far.
 * @param {!function} callback Callback to invoke with each child found.
 * @param {?*} traverseContext Used to pass information throughout the traversal
 * process.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
  var type = typeof children === 'undefined' ? 'undefined' : _typeof(children);

  if (type === 'undefined' || type === 'boolean') {
    // All of the above are perceived as null.
    children = null;
  }

  if (children === null || type === 'string' || type === 'number' ||
  // The following is inlined from ReactElement. This means we can optimize
  // some checks. React Fiber also inlines this logic for similar purposes.
  type === 'object' && children.$$typeof === REACT_ELEMENT_TYPE) {
    callback(traverseContext, children,
    // If it's the only child, treat the name as if it was wrapped in an array
    // so that it's consistent if the number of children grows.
    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
    return 1;
  }

  var child;
  var nextName;
  var subtreeCount = 0; // Count of children found in the current subtree.
  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      child = children[i];
      nextName = nextNamePrefix + getComponentKey(child, i);
      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
    }
  } else {
    var iteratorFn = getIteratorFn(children);
    if (iteratorFn) {
      var iterator = iteratorFn.call(children);
      var step;
      if (iteratorFn !== children.entries) {
        var ii = 0;
        while (!(step = iterator.next()).done) {
          child = step.value;
          nextName = nextNamePrefix + getComponentKey(child, ii++);
          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
        }
      } else {
        if (process.env.NODE_ENV !== 'production') {
          var mapsAsChildrenAddendum = '';
          if (ReactCurrentOwner.current) {
            var mapsAsChildrenOwnerName = ReactCurrentOwner.current.getName();
            if (mapsAsChildrenOwnerName) {
              mapsAsChildrenAddendum = ' Check the render method of `' + mapsAsChildrenOwnerName + '`.';
            }
          }
          process.env.NODE_ENV !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.%s', mapsAsChildrenAddendum) : void 0;
          didWarnAboutMaps = true;
        }
        // Iterator will provide entry [k,v] tuples rather than values.
        while (!(step = iterator.next()).done) {
          var entry = step.value;
          if (entry) {
            child = entry[1];
            nextName = nextNamePrefix + KeyEscapeUtils.escape(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
          }
        }
      }
    } else if (type === 'object') {
      var addendum = '';
      if (process.env.NODE_ENV !== 'production') {
        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
        if (children._isReactElement) {
          addendum = " It looks like you're using an element created by a different " + 'version of React. Make sure to use only one copy of React.';
        }
        if (ReactCurrentOwner.current) {
          var name = ReactCurrentOwner.current.getName();
          if (name) {
            addendum += ' Check the render method of `' + name + '`.';
          }
        }
      }
      var childrenString = String(children);
       true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : _prodInvariant('31', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : void 0;
    }
  }

  return subtreeCount;
}

/**
 * Traverses children that are typically specified as `props.children`, but
 * might also be specified through attributes:
 *
 * - `traverseAllChildren(this.props.children, ...)`
 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
 *
 * The `traverseContext` is an optional argument that is passed through the
 * entire traversal. It can be used to store accumulations or anything else that
 * the callback might find relevant.
 *
 * @param {?*} children Children tree object.
 * @param {!function} callback To invoke upon traversing each child.
 * @param {?*} traverseContext Context for traversal.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildren(children, callback, traverseContext) {
  if (children == null) {
    return 0;
  }

  return traverseAllChildrenImpl(children, '', callback, traverseContext);
}

module.exports = traverseAllChildren;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _prodInvariant = __webpack_require__(33),
    _assign = __webpack_require__(6);

var ReactNoopUpdateQueue = __webpack_require__(111);

var canDefineProperty = __webpack_require__(49);
var emptyObject = __webpack_require__(42);
var invariant = __webpack_require__(2);
var lowPriorityWarning = __webpack_require__(74);

/**
 * Base class helpers for the updating state of a component.
 */
function ReactComponent(props, context, updater) {
  this.props = props;
  this.context = context;
  this.refs = emptyObject;
  // We initialize the default updater but the real one gets injected by the
  // renderer.
  this.updater = updater || ReactNoopUpdateQueue;
}

ReactComponent.prototype.isReactComponent = {};

/**
 * Sets a subset of the state. Always use this to mutate
 * state. You should treat `this.state` as immutable.
 *
 * There is no guarantee that `this.state` will be immediately updated, so
 * accessing `this.state` after calling this method may return the old value.
 *
 * There is no guarantee that calls to `setState` will run synchronously,
 * as they may eventually be batched together.  You can provide an optional
 * callback that will be executed when the call to setState is actually
 * completed.
 *
 * When a function is provided to setState, it will be called at some point in
 * the future (not synchronously). It will be called with the up to date
 * component arguments (state, props, context). These values can be different
 * from this.* because your function may be called after receiveProps but before
 * shouldComponentUpdate, and this new state, props, and context will not yet be
 * assigned to this.
 *
 * @param {object|function} partialState Next partial state or function to
 *        produce next partial state to be merged with current state.
 * @param {?function} callback Called after state is updated.
 * @final
 * @protected
 */
ReactComponent.prototype.setState = function (partialState, callback) {
  !((typeof partialState === 'undefined' ? 'undefined' : _typeof(partialState)) === 'object' || typeof partialState === 'function' || partialState == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'setState(...): takes an object of state variables to update or a function which returns an object of state variables.') : _prodInvariant('85') : void 0;
  this.updater.enqueueSetState(this, partialState);
  if (callback) {
    this.updater.enqueueCallback(this, callback, 'setState');
  }
};

/**
 * Forces an update. This should only be invoked when it is known with
 * certainty that we are **not** in a DOM transaction.
 *
 * You may want to call this when you know that some deeper aspect of the
 * component's state has changed but `setState` was not called.
 *
 * This will not invoke `shouldComponentUpdate`, but it will invoke
 * `componentWillUpdate` and `componentDidUpdate`.
 *
 * @param {?function} callback Called after update is complete.
 * @final
 * @protected
 */
ReactComponent.prototype.forceUpdate = function (callback) {
  this.updater.enqueueForceUpdate(this);
  if (callback) {
    this.updater.enqueueCallback(this, callback, 'forceUpdate');
  }
};

/**
 * Deprecated APIs. These APIs used to exist on classic React classes but since
 * we would like to deprecate them, we're not going to move them over to this
 * modern base class. Instead, we define a getter that warns if it's accessed.
 */
if (process.env.NODE_ENV !== 'production') {
  var deprecatedAPIs = {
    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
  };
  var defineDeprecationWarning = function defineDeprecationWarning(methodName, info) {
    if (canDefineProperty) {
      Object.defineProperty(ReactComponent.prototype, methodName, {
        get: function get() {
          lowPriorityWarning(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);
          return undefined;
        }
      });
    }
  };
  for (var fnName in deprecatedAPIs) {
    if (deprecatedAPIs.hasOwnProperty(fnName)) {
      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
    }
  }
}

/**
 * Base class helpers for the updating state of a component.
 */
function ReactPureComponent(props, context, updater) {
  // Duplicated from ReactComponent.
  this.props = props;
  this.context = context;
  this.refs = emptyObject;
  // We initialize the default updater but the real one gets injected by the
  // renderer.
  this.updater = updater || ReactNoopUpdateQueue;
}

function ComponentDummy() {}
ComponentDummy.prototype = ReactComponent.prototype;
ReactPureComponent.prototype = new ComponentDummy();
ReactPureComponent.prototype.constructor = ReactPureComponent;
// Avoid an extra prototype jump for these methods.
_assign(ReactPureComponent.prototype, ReactComponent.prototype);
ReactPureComponent.prototype.isPureReactComponent = true;

module.exports = {
  Component: ReactComponent,
  PureComponent: ReactPureComponent
};
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



// The Symbol used to tag the ReactElement type. If there is no native Symbol
// nor polyfill, then a plain number is used for performance.

var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;

module.exports = REACT_ELEMENT_TYPE;

/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

/**
 * ReactElementValidator provides a wrapper around a element factory
 * which validates the props passed to the element. This is intended to be
 * used only in DEV and could be replaced by a static type checker for languages
 * that support it.
 */



var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var ReactCurrentOwner = __webpack_require__(20);
var ReactComponentTreeHook = __webpack_require__(12);
var ReactElement = __webpack_require__(29);

var checkReactTypeSpec = __webpack_require__(246);

var canDefineProperty = __webpack_require__(49);
var getIteratorFn = __webpack_require__(112);
var warning = __webpack_require__(3);
var lowPriorityWarning = __webpack_require__(74);

function getDeclarationErrorAddendum() {
  if (ReactCurrentOwner.current) {
    var name = ReactCurrentOwner.current.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';
    }
  }
  return '';
}

function getSourceInfoErrorAddendum(elementProps) {
  if (elementProps !== null && elementProps !== undefined && elementProps.__source !== undefined) {
    var source = elementProps.__source;
    var fileName = source.fileName.replace(/^.*[\\\/]/, '');
    var lineNumber = source.lineNumber;
    return ' Check your code at ' + fileName + ':' + lineNumber + '.';
  }
  return '';
}

/**
 * Warn if there's no key explicitly set on dynamic arrays of children or
 * object keys are not valid. This allows us to keep track of children between
 * updates.
 */
var ownerHasKeyUseWarning = {};

function getCurrentComponentErrorInfo(parentType) {
  var info = getDeclarationErrorAddendum();

  if (!info) {
    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
    if (parentName) {
      info = ' Check the top-level render call using <' + parentName + '>.';
    }
  }
  return info;
}

/**
 * Warn if the element doesn't have an explicit key assigned to it.
 * This element is in an array. The array could grow and shrink or be
 * reordered. All children that haven't already been validated are required to
 * have a "key" property assigned to it. Error statuses are cached so a warning
 * will only be shown once.
 *
 * @internal
 * @param {ReactElement} element Element that requires a key.
 * @param {*} parentType element's parent's type.
 */
function validateExplicitKey(element, parentType) {
  if (!element._store || element._store.validated || element.key != null) {
    return;
  }
  element._store.validated = true;

  var memoizer = ownerHasKeyUseWarning.uniqueKey || (ownerHasKeyUseWarning.uniqueKey = {});

  var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
  if (memoizer[currentComponentErrorInfo]) {
    return;
  }
  memoizer[currentComponentErrorInfo] = true;

  // Usually the current owner is the offender, but if it accepts children as a
  // property, it may be the creator of the child that's responsible for
  // assigning it a key.
  var childOwner = '';
  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
    // Give the component that originally created this child.
    childOwner = ' It was passed a child from ' + element._owner.getName() + '.';
  }

  process.env.NODE_ENV !== 'production' ? warning(false, 'Each child in an array or iterator should have a unique "key" prop.' + '%s%s See https://fb.me/react-warning-keys for more information.%s', currentComponentErrorInfo, childOwner, ReactComponentTreeHook.getCurrentStackAddendum(element)) : void 0;
}

/**
 * Ensure that every element either is passed in a static location, in an
 * array with an explicit keys property defined, or in an object literal
 * with valid key property.
 *
 * @internal
 * @param {ReactNode} node Statically passed child of any type.
 * @param {*} parentType node's parent's type.
 */
function validateChildKeys(node, parentType) {
  if ((typeof node === 'undefined' ? 'undefined' : _typeof(node)) !== 'object') {
    return;
  }
  if (Array.isArray(node)) {
    for (var i = 0; i < node.length; i++) {
      var child = node[i];
      if (ReactElement.isValidElement(child)) {
        validateExplicitKey(child, parentType);
      }
    }
  } else if (ReactElement.isValidElement(node)) {
    // This element was passed in a valid location.
    if (node._store) {
      node._store.validated = true;
    }
  } else if (node) {
    var iteratorFn = getIteratorFn(node);
    // Entry iterators provide implicit keys.
    if (iteratorFn) {
      if (iteratorFn !== node.entries) {
        var iterator = iteratorFn.call(node);
        var step;
        while (!(step = iterator.next()).done) {
          if (ReactElement.isValidElement(step.value)) {
            validateExplicitKey(step.value, parentType);
          }
        }
      }
    }
  }
}

/**
 * Given an element, validate that its props follow the propTypes definition,
 * provided by the type.
 *
 * @param {ReactElement} element
 */
function validatePropTypes(element) {
  var componentClass = element.type;
  if (typeof componentClass !== 'function') {
    return;
  }
  var name = componentClass.displayName || componentClass.name;
  if (componentClass.propTypes) {
    checkReactTypeSpec(componentClass.propTypes, element.props, 'prop', name, element, null);
  }
  if (typeof componentClass.getDefaultProps === 'function') {
    process.env.NODE_ENV !== 'production' ? warning(componentClass.getDefaultProps.isReactClassApproved, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : void 0;
  }
}

var ReactElementValidator = {
  createElement: function createElement(type, props, children) {
    var validType = typeof type === 'string' || typeof type === 'function';
    // We warn in this case but don't throw. We expect the element creation to
    // succeed and there will likely be errors in render.
    if (!validType) {
      if (typeof type !== 'function' && typeof type !== 'string') {
        var info = '';
        if (type === undefined || (typeof type === 'undefined' ? 'undefined' : _typeof(type)) === 'object' && type !== null && Object.keys(type).length === 0) {
          info += ' You likely forgot to export your component from the file ' + "it's defined in.";
        }

        var sourceInfo = getSourceInfoErrorAddendum(props);
        if (sourceInfo) {
          info += sourceInfo;
        } else {
          info += getDeclarationErrorAddendum();
        }

        info += ReactComponentTreeHook.getCurrentStackAddendum();

        var currentSource = props !== null && props !== undefined && props.__source !== undefined ? props.__source : null;
        ReactComponentTreeHook.pushNonStandardWarningStack(true, currentSource);
        process.env.NODE_ENV !== 'production' ? warning(false, 'React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', type == null ? type : typeof type === 'undefined' ? 'undefined' : _typeof(type), info) : void 0;
        ReactComponentTreeHook.popNonStandardWarningStack();
      }
    }

    var element = ReactElement.createElement.apply(this, arguments);

    // The result can be nullish if a mock or a custom function is used.
    // TODO: Drop this when these are no longer allowed as the type argument.
    if (element == null) {
      return element;
    }

    // Skip key warning if the type isn't valid since our key validation logic
    // doesn't expect a non-string/function type and can throw confusing errors.
    // We don't want exception behavior to differ between dev and prod.
    // (Rendering will throw with a helpful message and as soon as the type is
    // fixed, the key warnings will appear.)
    if (validType) {
      for (var i = 2; i < arguments.length; i++) {
        validateChildKeys(arguments[i], type);
      }
    }

    validatePropTypes(element);

    return element;
  },

  createFactory: function createFactory(type) {
    var validatedFactory = ReactElementValidator.createElement.bind(null, type);
    // Legacy hook TODO: Warn if this is accessed
    validatedFactory.type = type;

    if (process.env.NODE_ENV !== 'production') {
      if (canDefineProperty) {
        Object.defineProperty(validatedFactory, 'type', {
          enumerable: false,
          get: function get() {
            lowPriorityWarning(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.');
            Object.defineProperty(this, 'type', {
              value: type
            });
            return type;
          }
        });
      }
    }

    return validatedFactory;
  },

  cloneElement: function cloneElement(element, props, children) {
    var newElement = ReactElement.cloneElement.apply(this, arguments);
    for (var i = 2; i < arguments.length; i++) {
      validateChildKeys(arguments[i], newElement.type);
    }
    validatePropTypes(newElement);
    return newElement;
  }
};

module.exports = ReactElementValidator;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var warning = __webpack_require__(3);

function warnNoop(publicInstance, callerName) {
  if (process.env.NODE_ENV !== 'production') {
    var constructor = publicInstance.constructor;
    process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, constructor && (constructor.displayName || constructor.name) || 'ReactClass') : void 0;
  }
}

/**
 * This is the abstract API for an update queue.
 */
var ReactNoopUpdateQueue = {
  /**
   * Checks whether or not this composite component is mounted.
   * @param {ReactClass} publicInstance The instance we want to test.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */
  isMounted: function isMounted(publicInstance) {
    return false;
  },

  /**
   * Enqueue a callback that will be executed after all the pending updates
   * have processed.
   *
   * @param {ReactClass} publicInstance The instance to use as `this` context.
   * @param {?function} callback Called after state is updated.
   * @internal
   */
  enqueueCallback: function enqueueCallback(publicInstance, callback) {},

  /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldComponentUpdate`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @internal
   */
  enqueueForceUpdate: function enqueueForceUpdate(publicInstance) {
    warnNoop(publicInstance, 'forceUpdate');
  },

  /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} completeState Next state.
   * @internal
   */
  enqueueReplaceState: function enqueueReplaceState(publicInstance, completeState) {
    warnNoop(publicInstance, 'replaceState');
  },

  /**
   * Sets a subset of the state. This only exists because _pendingState is
   * internal. This provides a merging strategy that is not available to deep
   * properties which is confusing. TODO: Expose pendingState or don't use it
   * during the merge.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialState Next partial state to be merged with state.
   * @internal
   */
  enqueueSetState: function enqueueSetState(publicInstance, partialState) {
    warnNoop(publicInstance, 'setState');
  }
};

module.exports = ReactNoopUpdateQueue;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



/* global Symbol */

var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

/**
 * Returns the iterator method function contained on the iterable object.
 *
 * Be sure to invoke the function with the iterable as context:
 *
 *     var iteratorFn = getIteratorFn(myIterable);
 *     if (iteratorFn) {
 *       var iterator = iteratorFn.call(myIterable);
 *       ...
 *     }
 *
 * @param {?object} maybeIterable
 * @return {?function}
 */
function getIteratorFn(maybeIterable) {
  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
  if (typeof iteratorFn === 'function') {
    return iteratorFn;
  }
}

module.exports = getIteratorFn;

/***/ }),
/* 113 */,
/* 114 */,
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

/*
create by wangzhiyong 创建树组件

 */

var React = __webpack_require__(1);
__webpack_require__(303);
var TreeNode = __webpack_require__(263);
var unit = __webpack_require__(5);
var showUpdate = __webpack_require__(21);
var Tree = React.createClass({
    displayName: "Tree",

    mixins: [showUpdate],
    propTypes: {
        name: React.PropTypes.string, //树名称
        value: React.PropTypes.oneOfType([React.PropTypes.number, React.PropTypes.string]), //值
        text: React.PropTypes.oneOfType([React.PropTypes.number, React.PropTypes.string]), //标题
        valueField: React.PropTypes.string, //数据字段值名称
        textField: React.PropTypes.string, //数据字段文本名称
        url: React.PropTypes.string, //后台查询地址
        params: React.PropTypes.object, //向后台传输的额外参数
        dataSource: React.PropTypes.string, //ajax的返回的数据源中哪个属性作为数据源,为null时直接后台返回的数据作为数据源
        data: React.PropTypes.array, //节点数据
        onSelect: React.PropTypes.func //选中后的事件

    },
    getDefaultProps: function getDefaultProps() {
        return {
            name: null,
            text: null,
            value: null,
            valueField: "value",
            textField: "text",
            url: null,
            params: null,
            dataSource: "data",
            data: [],
            onSelect: null
        };
    },
    getInitialState: function getInitialState() {
        var newData = this.setValueAndText(this.props.data); //对数据进行处理
        return {
            name: this.props.name,
            text: this.props.text,
            value: this.props.value,
            data: newData,
            onSelect: this.props.onSelect
        };
    },

    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        /*
         this.isChange :代表自身发生了改变,防止父组件没有绑定value,text,而导致无法选择
         */
        this.isChange = false; //重置
        var value = this.isChange ? this.state.value : nextProps.value;
        var text = this.isChange ? this.state.text : nextProps.text;
        var newData = [];
        if (nextProps.data != null && nextProps.data instanceof Array && (!nextProps.url || nextProps.url == "")) {
            //没有url,传的是死数据
            newData = [];
            //因为这里统一将数据进行了改造,所以这里要重新处理一下
            newData = this.setValueAndText(nextProps.data);
        } else {
            //url形式
            newData = this.state.data; //先得到以前的数据
            if (this.showUpdate(nextProps.params)) {
                //如果不相同则更新
                this.loadData(this.props.url, nextProps.params); //异步更新
            } else {}
        }

        this.setState({
            value: value,
            text: text,
            data: newData,
            url: nextProps.url,
            params: unit.clone(nextProps.params)
        });
    },
    componentDidUpdate: function componentDidUpdate() {
        if (this.isChange == true) {
            //说明已经改变了,回传给父组件
            if (this.props.onSelect != null) {
                this.props.onSelect(this.state.value, this.state.text, this.props.name, this.property);
            }
        }
    },

    componentDidMount: function componentDidMount() {
        this.loadData(this.state.url, this.state.params);
    },
    loadData: function loadData(url, params) {
        if (url != null && url != "") {
            if (params == null) {
                var fetchmodel = new FetchModel(url, this.loadSuccess, null, this.loadError);
                unit.fetch.get(fetchmodel);
            } else {
                var fetchmodel = new FetchModel(url, this.loadSuccess, params, this.loadError);
                unit.fetch.post(fetchmodel);
            }
            console.log("treepicker", fetchmodel);
        }
    },
    loadSuccess: function loadSuccess(data) {
        //数据加载成功
        var realData = data;
        if (this.props.dataSource == null) {} else {
            realData = unit.getSource(data, this.props.dataSource);
        }

        realData = this.setValueAndText(realData);
        this.setState({
            data: realData
        });
    },
    setValueAndText: function setValueAndText(realData) {
        //遍历设置text，value的值
        if (realData instanceof Array) {
            for (var i = 0; i < realData.length; i++) {
                realData[i].text = realData[i][this.props.textField];
                realData[i].value = realData[i][this.props.valueField];
                if (realData[i].data) {
                    realData[i].data = this.setValueAndText(realData[i].data);
                }
            }
        }

        return realData;
    },
    loadError: function loadError(errorCode, message) {
        //查询失败
        console.log("treepicker-error", errorCode, message);
        Message.error(message);
    },
    onSelect: function onSelect(value, text, property) {
        this.isChange = true; //代表自身发生了改变,防止父组件没有绑定value,text的状态值,而导致无法选择的结果
        this.property = property; //临时保存起来
        if (value == undefined) {
            console.error("绑定的valueField没有");
        }
        if (text == undefined) {
            console.error("绑定的textField没有");
        }
        this.setState({
            value: value,
            text: text
        });
    },
    render: function render() {
        var _this = this;

        var nodeControl = [];
        if (this.state.data instanceof Array) {
            this.state.data.map(function (item, index) {
                var isParent = false; //是否为父节点
                if (item.isParent == true || item.data instanceof Array && item.data.length > 0) {
                    //如果明确规定了，或者子节点不为空，则设置为父节点
                    isParent = true;
                } else {}
                nodeControl.push(React.createElement(TreeNode, _extends({ key: index, rootValue: _this.state.value, rootText: _this.state.text }, item, { isParent: isParent, onSelect: _this.onSelect })));
            });
        }
        return React.createElement(
            "ul",
            { className: "wasabi-tree" },
            nodeControl
        );
    }
});
module.exports = Tree;

/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*
 create by wangzy
 date:2016-05-20
 desc:将日期控件表头独立出来
 */
var React = __webpack_require__(1);
var Lang = __webpack_require__(34);
var Text = __webpack_require__(79);
var Message = __webpack_require__(14);
__webpack_require__(41);
var CalendarBody = React.createClass({
    displayName: "CalendarBody",

    PropTypes: {
        year: React.PropTypes.number, //年
        month: React.PropTypes.number, //月
        day: React.PropTypes.number, //日
        isRange: React.PropTypes.bool, //是否为范围选择
        min: React.PropTypes.number, //最小值，用于日期范围选择
        max: React.PropTypes.number, //最大值,用于日期范围选择
        dayHandler: React.PropTypes.func, //选择后的事件
        changeYear: React.PropTypes.bool,
        changeMonth: React.PropTypes.bool,
        changeYearHandler: React.PropTypes.func,
        changeMonthHandler: React.PropTypes.func
    },
    getInitialState: function getInitialState() {
        return {
            year: this.props.year,
            tempyear: this.props.tempyear, //临时的，防止输入框改变后对整个组件产生影响
            month: this.props.month,
            day: this.props.day,
            isRange: this.props.isRange,
            min: this.props.min,
            max: this.props.max,
            changeYear: this.props.changeYear,
            changeMonth: this.props.changeMonth
        };
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        this.setState({
            year: nextProps.year,
            tempyear: nextProps.year,
            month: nextProps.month,
            day: nextProps.day,
            isRange: nextProps.isRange,
            min: nextProps.min,
            max: nextProps.max,
            changeYear: nextProps.changeYear,
            changeMonth: nextProps.changeMonth
        });
    },
    getMonthDays: function getMonthDays() {
        //根据月份获取当月总天数
        return new Date(this.state.year, this.state.month, 0).getDate();
    },
    getFirstDayWeek: function getFirstDayWeek() {
        //获取当月第一天是星期几
        return new Date(this.state.year, this.state.month - 1, 1).getDay();
    },
    dayHandler: function dayHandler(day) {
        this.setState({
            day: day
        });
        this.props.dayHandler(day); // 执行父组件回调函数，改变父组件状态值
    },
    yearOnChange: function yearOnChange(event) {
        this.setState({
            tempyear: event.target.value
        });
    },
    changeYearHandler: function changeYearHandler(value) {
        if (this.props.changeYearHandler) {
            this.props.changeYearHandler(value);
        }
    },
    changeMonthHandler: function changeMonthHandler(value) {
        if (this.props.changeMonthHandler) {
            this.props.changeMonthHandler(value);
        }
    },
    yearOKHandler: function yearOKHandler(event) {
        if (event.keyCode == 13) {
            this.yearonBlur(event); //共用函数
        }
    },
    yearonBlur: function yearonBlur(event) {
        var year = event.target.value << 0; //转成数字
        year < 1900 || year > 9999 ? Message.error("不是有效年份") : this.changeYearHandler(event.target.value);
    },

    render: function render() {
        var _this = this;

        //TODO 以下代码有待优化
        var arry1 = [],
            arry2 = [];
        var getDays = this.getMonthDays(),
            FirstDayWeek = this.getFirstDayWeek();
        for (var i = 0; i < FirstDayWeek; i++) {
            arry1[i] = i;
        }
        for (var i = 0; i < getDays; i++) {
            arry2[i] = i + 1;
        }
        var node1 = arry1.map(function (item, i) {
            return React.createElement("div", { className: "datespan", key: i });
        });
        var node2 = arry2.map(function (item, index) {
            var choseed = false; //当前日期是否被选中
            if (_this.state.isRange) {
                if (_this.state.min && _this.state.max && _this.state.min <= item && _this.state.max >= item) {
                    choseed = true;
                }
            } else if (_this.state.day == item) {
                choseed = true;
            }
            var control = null;
            if (item == _this.state.min && item == _this.state.max) {
                control = React.createElement(
                    "div",
                    { className: "datespan ", key: "li2" + index, onClick: _this.dayHandler.bind(_this, item) },
                    React.createElement(
                        "div",
                        { className: "onlyradius" },
                        item
                    )
                );
            } else if (item == _this.state.min) {
                control = React.createElement(
                    "div",
                    { className: "datespan begin", key: "li2" + index, onClick: _this.dayHandler.bind(_this, item) },
                    React.createElement(
                        "div",
                        { className: "blank" },
                        React.createElement(
                            "div",
                            { className: "radius" },
                            item
                        )
                    )
                );
            } else if (item == _this.state.max) {
                control = React.createElement(
                    "div",
                    { className: "datespan end", key: "li2" + index, onClick: _this.dayHandler.bind(_this, item) },
                    React.createElement(
                        "div",
                        { className: "blank" },
                        React.createElement(
                            "div",
                            { className: "radius" },
                            item
                        )
                    )
                );
            } else if (choseed) {
                if (_this.state.isRange) {
                    control = React.createElement(
                        "div",
                        { className: "datespan chosed", key: "li2" + index, onClick: _this.dayHandler.bind(_this, item) },
                        item
                    );
                } else {
                    control = React.createElement(
                        "div",
                        { className: "datespan ", key: "li2" + index, onClick: _this.dayHandler.bind(_this, item) },
                        React.createElement(
                            "div",
                            { className: "onlyradius" },
                            item
                        )
                    );
                }
            } else {

                control = React.createElement(
                    "div",
                    { className: "datespan ", key: "li2" + index, onClick: _this.dayHandler.bind(_this, item) },
                    React.createElement(
                        "div",
                        { className: "radius" },
                        item
                    )
                );
            }
            return control;
        });

        var yearControl = [];
        for (var index = this.state.year * 1 - 7; index <= this.state.year * 1 + 4; index++) {
            if (index == this.state.year * 1) {
                yearControl.push(React.createElement(
                    "div",
                    { className: "datespan chosed", onClick: this.changeYearHandler.bind(this, index), key: "year" + index },
                    index
                ));
            } else {
                yearControl.push(React.createElement(
                    "div",
                    { className: "datespan", onClick: this.changeYearHandler.bind(this, index), key: "year" + index },
                    index
                ));
            }
        }
        return React.createElement(
            "div",
            { className: "wasabi-datetime-body" },
            React.createElement(
                "div",
                { className: "weekul", style: { display: !this.state.changeMonth && !this.state.changeYear ? "block" : "none" } },
                React.createElement(
                    "div",
                    { className: "weekspan" },
                    Lang.cn.SUN
                ),
                React.createElement(
                    "div",
                    { className: "weekspan" },
                    Lang.cn.MON
                ),
                React.createElement(
                    "div",
                    { className: "weekspan" },
                    Lang.cn.TUE
                ),
                React.createElement(
                    "div",
                    { className: "weekspan" },
                    Lang.cn.WED
                ),
                React.createElement(
                    "div",
                    { className: "weekspan" },
                    Lang.cn.THU
                ),
                React.createElement(
                    "div",
                    { className: "weekspan" },
                    Lang.cn.FRI
                ),
                React.createElement(
                    "div",
                    { className: "weekspan" },
                    Lang.cn.SAT
                )
            ),
            React.createElement(
                "div",
                { className: "dayul", style: { display: !this.state.changeMonth && !this.state.changeYear ? "block" : "none" } },
                node1,
                " ",
                node2
            ),
            React.createElement(
                "div",
                { className: "wasabi-datetime-month", style: { display: this.state.changeMonth ? "block" : "none" } },
                React.createElement(
                    "div",
                    { className: "datespan " + (this.state.month == 1 ? "chosed" : ""), onClick: this.changeMonthHandler.bind(this, 1) },
                    "\u4E00\u6708"
                ),
                React.createElement(
                    "div",
                    { className: "datespan " + (this.state.month == 2 ? "chosed" : ""), onClick: this.changeMonthHandler.bind(this, 2) },
                    "\u4E8C\u6708"
                ),
                React.createElement(
                    "div",
                    { className: "datespan " + (this.state.month == 3 ? "chosed" : ""), onClick: this.changeMonthHandler.bind(this, 3) },
                    "\u4E09\u6708"
                ),
                React.createElement(
                    "div",
                    { className: "datespan " + (this.state.month == 4 ? "chosed" : ""), onClick: this.changeMonthHandler.bind(this, 4) },
                    "\u56DB\u6708"
                ),
                React.createElement(
                    "div",
                    { className: "datespan " + (this.state.month == 5 ? "chosed" : ""), onClick: this.changeMonthHandler.bind(this, 5) },
                    "\u4E94\u6708"
                ),
                React.createElement(
                    "div",
                    { className: "datespan " + (this.state.month == 6 ? "chosed" : ""), onClick: this.changeMonthHandler.bind(this, 6) },
                    "\u516D\u6708"
                ),
                React.createElement(
                    "div",
                    { className: "datespan " + (this.state.month == 7 ? "chosed" : ""), onClick: this.changeMonthHandler.bind(this, 7) },
                    "\u4E03\u6708"
                ),
                React.createElement(
                    "div",
                    { className: "datespan " + (this.state.month == 8 ? "chosed" : ""), onClick: this.changeMonthHandler.bind(this, 8) },
                    "\u516B\u6708"
                ),
                React.createElement(
                    "div",
                    { className: "datespan " + (this.state.month == 9 ? "chosed" : ""), onClick: this.changeMonthHandler.bind(this, 9) },
                    "\u4E5D\u6708"
                ),
                React.createElement(
                    "div",
                    { className: "datespan " + (this.state.month == 10 ? "chosed" : ""), onClick: this.changeMonthHandler.bind(this, 10) },
                    "\u5341\u6708"
                ),
                React.createElement(
                    "div",
                    { className: "datespan " + (this.state.month == 11 ? "chosed" : ""), onClick: this.changeMonthHandler.bind(this, 11) },
                    "\u5341\u4E00\u6708"
                ),
                React.createElement(
                    "div",
                    { className: "datespan " + (this.state.month == 12 ? "chosed" : ""), onClick: this.changeMonthHandler.bind(this, 12) },
                    "\u5341\u4E8C\u6708"
                )
            ),
            React.createElement(
                "div",
                { className: "wasabi-datetime-year", style: { display: this.state.changeYear ? "block" : "none" } },
                React.createElement(
                    "div",
                    { style: { display: "block", textAlign: "center", marginBottom: 10 } },
                    React.createElement("input", { value: this.state.tempyear, name: "year", onBlur: this.yearonBlur, onKeyUp: this.yearOKHandler, style: { width: 60, height: 30, paddingLeft: 5 }, title: "\u56DE\u8F66\u786E\u8BA4", onChange: this.yearOnChange })
                ),
                yearControl
            )
        );
    }
});
module.exports = CalendarBody;

/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*
create by wangzy
date:2016-05-20
desc:将日期控件表头独立出来
 */
var React = __webpack_require__(1);
var Lang = __webpack_require__(34);
__webpack_require__(41);
var CalendarHeader = React.createClass({
    displayName: "CalendarHeader",

    getInitialState: function getInitialState() {
        return {
            year: this.props.year,
            month: this.props.month,
            day: this.props.day
        };
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        this.setState({
            year: nextProps.year,
            month: nextProps.month,
            day: nextProps.day
        });
    },
    /*
    * 处理月份变化
    *@param {Number} month 月份变化数1或-1
    *@return
    * */
    _dealMonthClick: function _dealMonthClick(month) {
        var m = parseInt(this.state.month, 10) + month;
        if (m < 1) {
            this.state.year--;
            m = 12;
        } else if (m > 12) {
            this.state.year++;
            m = 1;
        }
        this.state.month = m;
        this.setState(this.state);
        this.props.updateFilter(this.state.year, m); // 执行父组件回调函数，改变父组件状态值
    },
    handleLeftClick: function handleLeftClick() {
        this._dealMonthClick(-1);
    },
    handleRightClick: function handleRightClick() {
        this._dealMonthClick(1);
    },
    changeYear: function changeYear() {
        if (this.props.changeYear) {
            this.props.changeYear();
        }
    },
    changeMonth: function changeMonth() {
        if (this.props.changeMonth) {
            this.props.changeMonth();
        }
    },
    render: function render() {
        return React.createElement(
            "div",
            { className: "wasabi-datetime-header" },
            React.createElement(
                "div",
                { className: "header-text" },
                React.createElement(
                    "a",
                    { href: "javascript:void(0);", style: { marginRight: 8 }, onClick: this.changeYear },
                    React.createElement(
                        "span",
                        null,
                        this.state.year + "年"
                    ),
                    React.createElement("i", { style: { fontSize: 12, marginTop: 2 }, className: "icon-down" })
                ),
                React.createElement(
                    "a",
                    { href: "javascript:void(0);", onClick: this.changeMonth },
                    React.createElement(
                        "span",
                        null,
                        Lang.cn.Month[this.state.month - 1] + "月"
                    ),
                    React.createElement("i", { style: { fontSize: 12, marginTop: 2 }, className: "icon-down" })
                )
            ),
            React.createElement("a", { href: "javascript:void(0);", className: "triangle-left", onClick: this.handleLeftClick }),
            React.createElement("a", { href: "javascript:void(0);", className: "triangle-right", onClick: this.handleRightClick })
        );
    }
});
module.exports = CalendarHeader;

/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

/**
 * Created by zhiyongwang on 2016-04-26
 * desc:通用下拉框组件
 *
 */
__webpack_require__(147);
var React = __webpack_require__(1);
var unit = __webpack_require__(5);
var Time = __webpack_require__(40);
var DatePicker = __webpack_require__(119);
var Picker = __webpack_require__(128);
var Select = __webpack_require__(130);
var MutiText = __webpack_require__(125);
var GridPicker = __webpack_require__(124);
var TreePicker = __webpack_require__(132);
var PanelPicker = __webpack_require__(127);
var shouldComponentUpdate = __webpack_require__(8);
var ComboBox = React.createClass({
    displayName: "ComboBox",

    mixins: [shouldComponentUpdate],
    PropTypes: {
        type: React.PropTypes.oneOf[("select", //普通下拉
        "date", //日期选择
        "time", //时间选择
        "datetime", //时间选择
        "daterange", //日期范围选择
        "datetimerange", //日期时间范围选择
        "picker", //级联选择组件
        "gridpicker", //列表选择
        "treepicker", //下拉树选择
        "panelpicker", //面板选择
        "muti" //多行添加
        )], //类型
        name: React.PropTypes.string.isRequired, //字段名
        label: React.PropTypes.oneOfType([React.PropTypes.string, React.PropTypes.element, React.PropTypes.node]), //字段文字说明属性
        width: React.PropTypes.number, //宽度
        height: React.PropTypes.number, //高度
        value: React.PropTypes.oneOfType([React.PropTypes.number, React.PropTypes.string]), //默认值,
        text: React.PropTypes.oneOfType([React.PropTypes.number, React.PropTypes.string]), //默认文本值
        placeholder: React.PropTypes.string, //输入框预留文字
        readonly: React.PropTypes.bool, //是否只读
        required: React.PropTypes.bool, //是否必填
        onlyline: React.PropTypes.bool, //是否只占一行
        hide: React.PropTypes.bool, //是否隐藏
        regexp: React.PropTypes.string, //正则表达式
        invalidTip: React.PropTypes.string, //无效时的提示字符
        style: React.PropTypes.object, //自定义style
        className: React.PropTypes.string, //自定义class
        size: React.PropTypes.oneOf(["none", "default", "large", //兼容性值,与two相同
        "two", "three", "onlyline"]), //组件表单的大小
        position: React.PropTypes.oneOf(["left", "default", "right"]), //组件在表单一行中的位置

        //其他属性
        min: React.PropTypes.number, //最少选择几个
        max: React.PropTypes.number, //最多选择几个
        onClick: React.PropTypes.func, //自定义单击事件，这样就可以将普通下拉框组合其他组件
        //其他属性
        valueField: React.PropTypes.string, //数据字段值名称
        textField: React.PropTypes.string, //数据字段文本名称
        url: React.PropTypes.string, //ajax的后台地址
        params: React.PropTypes.object, //查询参数
        dataSource: React.PropTypes.string, //ajax的返回的数据源中哪个属性作为数据源,为null时直接后台返回的数据作为数据源
        data: React.PropTypes.array, //自定义数据源
        extraData: React.PropTypes.array, //额外的数据,对url有效
        onSelect: React.PropTypes.func, //选中后的事件，回传，value,与text,data

        //其他属性
        secondUrl: React.PropTypes.string, //第二层节点的后台地址,
        secondParams: React.PropTypes.object, //第二层节点的后台参数
        secondParamsKey: React.PropTypes.string, //第二层节点的后台参数中传递一级节点value值的参数名称
        thirdUrl: React.PropTypes.string, //第三层节点的后台地址，
        thirdParams: React.PropTypes.object, //第三层节点的后台参数
        thirdParamsKey: React.PropTypes.string, //第三层节点的后台参数中传递二级节点value值的参数名称
        hotTitle: React.PropTypes.string, //热门选择标题
        hotData: React.PropTypes.array //热门选择的数据
    },
    getDefaultProps: function getDefaultProps() {
        return {
            name: "",
            label: null,
            width: null,
            height: null,
            value: "",
            text: "",
            placeholder: "",
            readonly: false,
            required: false,
            onlyline: false,
            hide: false,
            regexp: null,
            invalidTip: null,
            style: null,
            className: null,
            size: "default",
            position: "default",
            //其他属性
            min: null,
            max: null,
            onClick: null,
            //其他属性
            multiple: false,
            valueField: "value",
            textField: "text",
            url: null,
            params: null,
            dataSource: "data",
            data: null,
            extraData: null,
            onSelect: null,
            //其他属性
            secondUrl: null,
            secondParams: null,
            secondParamsKey: null,
            thirdUrl: null,
            thirdParams: null,
            thirdParamsKey: null,
            hotTitle: "热门选择",
            hotData: null
        };
    },
    getInitialState: function getInitialState() {
        var text = this.props.text;
        if (this.props.type.indexOf("date") > -1 || this.props.type.indexOf("time") > -1) {
            text = this.props.value;
        }
        return {
            value: this.props.value,
            text: text,
            hide: this.props.hide,
            readonly: this.props.readonly,
            required: this.props.required,
            data: this.props.data,
            params: this.props.params,
            url: this.props.url

        };
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        var text = nextProps.text;
        if (this.props.type.indexOf("date") > -1 || this.props.type.indexOf("time") > -1) {
            //如果时间与日期相关组件，text就是value
            if ((!text || text == "") && nextProps.value && nextProps.value != "") {
                text = nextProps.value;
            }
        }
        this.setState({
            value: nextProps.value,
            text: text,
            readonly: nextProps.readonly,
            required: nextProps.required,
            data: nextProps.data,
            params: nextProps.params,
            url: nextProps.url,
            hide: nextProps.hide

        });
    },
    splitDate: function splitDate(splitdate) {
        //拆分日期格式
        var regs = /^(\d{4})-(\d{2})-(\d{2})$/;
        if (splitdate && splitdate != "" && regs.test(splitdate)) {
            var returnvalue = {
                year: splitdate.split("-")[0],
                month: splitdate.split("-")[1],
                day: splitdate.split("-")[2]
            };
            return returnvalue;
        } else {
            null;
        }
    },

    onSelect: function onSelect(value, text, name, rowData) {
        //选中事件
        this.setState({
            value: value,
            text: text
        });
        if (this.props.onSelect != null) {
            this.props.onSelect(value, text, this.props.name, rowData);
        }
    },
    changeHandler: function changeHandler(event) {},
    getComponentData: function getComponentData() {
        //只读属性，获取对应的字段的数据源
        return this.state.data;
    },
    validate: function validate() {
        return this.refs.combobox.validate();
    },
    renderMuti: function renderMuti() {
        //普通下拉框

        var props = _extends({}, this.props);
        props.value = this.state.value;
        props.text = this.state.text;
        props.hide = this.state.hide;
        props.data = this.state.data;
        props.readonly = this.state.readonly;
        props.params = this.state.params;
        props.url = this.state.url;
        props.data = this.state.data;
        return React.createElement(MutiText, _extends({ ref: "combobox" }, props, { onSelect: this.onSelect }));
    },
    renderSelect: function renderSelect() {
        //普通下拉框

        var props = _extends({}, this.props);
        props.value = this.state.value;
        props.text = this.state.text;
        props.hide = this.state.hide;
        props.data = this.state.data;
        props.readonly = this.state.readonly;
        props.params = this.state.params;
        props.url = this.state.url;
        props.data = this.state.data;
        return React.createElement(Select, _extends({ ref: "combobox" }, props, { onSelect: this.onSelect }));
    },
    renderPicker: function renderPicker() {
        //下拉面板
        var props = _extends({}, this.props);
        props.value = this.state.value;
        props.text = this.state.text;
        props.hide = this.state.hide;
        props.data = this.state.data;
        props.readonly = this.state.readonly;
        props.required = this.state.required;
        props.params = this.state.params;
        props.url = this.state.url;
        return React.createElement(Picker, _extends({ ref: "combobox" }, props, { onSelect: this.onSelect }));
    },
    renderTime: function renderTime() {
        var props = _extends({}, this.props);
        var props = _extends({}, this.props);
        props.value = this.state.value;
        props.text = this.state.text;
        props.hide = this.state.hide;
        props.data = this.state.data;
        props.readonly = this.state.readonly;

        return React.createElement(Time, _extends({ ref: "combobox" }, props, { onSelect: this.onSelect }));
    },
    renderDatePicker: function renderDatePicker() {
        var props = _extends({}, this.props);
        var props = _extends({}, this.props);
        props.value = this.state.value;
        props.text = this.state.text;
        props.hide = this.state.hide;
        props.readonly = this.state.readonly;
        props.params = this.state.params;
        return React.createElement(DatePicker, _extends({ ref: "combobox" }, props, { onSelect: this.onSelect }));
    },
    renderGridPicker: function renderGridPicker() {
        var props = _extends({}, this.props);
        props.value = this.state.value;
        props.text = this.state.text;
        props.data = this.state.data;
        props.readonly = this.state.readonly;
        props.params = this.state.params;
        return React.createElement(GridPicker, _extends({ ref: "combobox" }, props, { onSelect: this.onSelect }));
    },
    renderTreePicker: function renderTreePicker() {
        var props = _extends({}, this.props);
        props.value = this.state.value;
        props.text = this.state.text;
        props.data = this.state.data;
        props.readonly = this.state.readonly;
        props.params = this.state.params;
        return React.createElement(TreePicker, _extends({ ref: "combobox" }, props, { onSelect: this.onSelect }));
    },
    renderPanelPicker: function renderPanelPicker() {
        var props = _extends({}, this.props);
        var props = _extends({}, this.props);
        props.value = this.state.value;
        props.text = this.state.text;
        props.hide = this.state.hide;
        props.data = this.state.data;
        props.readonly = this.state.readonly;

        return React.createElement(PanelPicker, _extends({ ref: "combobox" }, props, { onSelect: this.onSelect }));
    },
    render: function render() {

        var control = null;
        switch (this.props.type) {
            case "muti":
                control = this.renderMuti();
                break;
            case "select":
                control = this.renderSelect();
                break;
            case "time":
                control = this.renderTime();
                break;
            case "picker":
                control = this.renderPicker();
                break;
            case "gridpicker":
                control = this.renderGridPicker();
                break;
            case "treepicker":
                control = this.renderTreePicker();
                break;
            case "date":
                control = this.renderDatePicker();

                break;
            case "datetime":
                control = this.renderDatePicker();

                break;
            case "daterange":
                control = this.renderDatePicker();

                break;
            case "datetimerange":
                control = this.renderDatePicker();

                break;

            case "panelpicker":
                control = this.renderPanelPicker();

                break;

        }
        return control;
    }
});
module.exports = ComboBox;

/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

/**
 * Created by zhiyongwang on 2016-04-26
 * desc:通用下拉日期,时间组件
 *
 */
__webpack_require__(147);
var React = __webpack_require__(1);
var unit = __webpack_require__(5);
var Time = __webpack_require__(40);
var DateD = __webpack_require__(52);
var DateTime = __webpack_require__(121);
var DateRange = __webpack_require__(120);
var DateTimeRange = __webpack_require__(122);

var validation = __webpack_require__(16);
var regs = __webpack_require__(35);
var setStyle = __webpack_require__(11);
var validate = __webpack_require__(22);
var shouldComponentUpdate = __webpack_require__(8);
var Label = __webpack_require__(18);
var ClickAway = __webpack_require__(23);
var DatePicker = React.createClass({
    displayName: "DatePicker",

    mixins: [setStyle, validate, shouldComponentUpdate, ClickAway],
    PropTypes: {
        type: React.PropTypes.oneOf[("date", //日期选择
        "datetime", //时间选择
        "daterange", //日期范围选择
        "datetimerange" //日期时间范围选择

        )], //类型
        name: React.PropTypes.string.isRequired, //字段名
        label: React.PropTypes.oneOfType([React.PropTypes.string, React.PropTypes.element, React.PropTypes.node]), //字段文字说明属性
        title: React.PropTypes.string, //提示信息
        width: React.PropTypes.number, //宽度
        height: React.PropTypes.number, //高度
        value: React.PropTypes.oneOfType([React.PropTypes.number, React.PropTypes.string]), //默认值,
        text: React.PropTypes.oneOfType([React.PropTypes.number, React.PropTypes.string]), //默认文本值
        placeholder: React.PropTypes.string, //输入框预留文字
        readonly: React.PropTypes.bool, //是否只读
        required: React.PropTypes.bool, //是否必填
        onlyline: React.PropTypes.bool, //是否只占一行
        hide: React.PropTypes.bool, //是否隐藏
        regexp: React.PropTypes.string, //正则表达式
        invalidTip: React.PropTypes.string, //无效时的提示字符
        style: React.PropTypes.object, //自定义style
        className: React.PropTypes.string, //自定义class
        size: React.PropTypes.oneOf(["none", "default", "large", //兼容性值,与two相同
        "two", "three", "onlyline"]), //组件表单的大小
        position: React.PropTypes.oneOf(["left", "default", "right"]), //组件在表单一行中的位置
        //其他属性
        onSelect: React.PropTypes.func //选中后的事件，回传，value,与text,data


    },
    getDefaultProps: function getDefaultProps() {
        return {
            type: "date",
            name: "",
            label: null,
            title: null,
            width: null,
            height: null,
            value: "",
            text: "",
            placeholder: "",
            readonly: false,
            required: false,
            onlyline: false,
            hide: false,
            regexp: null,
            invalidTip: null,
            style: null,
            className: null,
            size: "default",
            position: "default"
            //其他属性

        };
    },
    getInitialState: function getInitialState() {
        var text = this.props.text;
        if (this.props.type.indexOf("date") > -1 || this.props.type.indexOf("time") > -1) {
            text = this.props.value;
        }
        return {
            hide: this.props.hide,
            value: this.props.value,
            text: text,
            readonly: this.props.readonly,
            //验证
            required: this.props.required,
            validateClass: "", //验证的样式
            helpShow: "none", //提示信息是否显示
            helpTip: validation["required"], //提示信息
            invalidTip: ""
        };
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        var text = nextProps.text ? nextProps.text : nextProps.value;

        this.setState({
            hide: nextProps.hide,
            value: nextProps.value,
            text: text,
            readonly: nextProps.readonly,

            //验证
            required: this.props.required,
            helpShow: "none", //提示信息是否显示
            invalidTip: "",
            validateClass: "", //重置验证样式
            helpTip: validation["required"] //提示信息
        });
    },
    componentDidMount: function componentDidMount() {

        this.registerClickAway(this.hidePicker, this.refs.picker); //注册全局单击事件
    },
    onBlur: function onBlur() {
        this.refs.label.hideHelp(); //隐藏帮助信息
    },
    splitDate: function splitDate(splitdate) {
        //拆分日期格式


        if (splitdate && splitdate.indexOf(" ") > -1 && regs.datetime(splitdate)) {
            //有时间

            splitdate = splitdate.split(" ")[0];
            var returnvalue = {
                year: splitdate.split("-")[0],
                month: splitdate.split("-")[1],
                day: splitdate.split("-")[2]
            };
            return returnvalue;
        } else if (regs.date.test(splitdate)) {
            var returnvalue = {
                year: splitdate.split("-")[0],
                month: splitdate.split("-")[1],
                day: splitdate.split("-")[2]
            };
            return returnvalue;
        } else {
            null;
        }
    },
    splitDateTime: function splitDateTime(datetime) {
        //

        if (datetime && regs.datetime(datetime) && datetime.indexOf(" ") > -1) {
            //如果不为空
            var splitdate = datetime.split(" ")[0];
            if (splitdate && splitdate != "") {
                var returnvalue = {
                    year: splitdate.split("-")[0],
                    month: splitdate.split("-")[1],
                    day: splitdate.split("-")[2],
                    time: datetime.split(" ")[1]
                };
                return returnvalue;
            } else {
                return null;
            }
        } else {
            return null;
        }
    },
    showPicker: function showPicker(type) {
        //显示选择
        if (this.state.readonly) {
            //只读不显示
            return;
        } else {
            this.setState({
                show: type == 1 ? !this.state.show : true
            });
        }
        this.bindClickAway(); //绑定全局单击事件
    },
    hidePicker: function hidePicker() {
        this.setState({
            show: false
        });
        this.unbindClickAway(); //卸载全局单击事件
    },
    onSelect: function onSelect(value, text) {
        //选中事件
        if (this.props.name == "test") {
            console.log(value, text);
        }

        this.setState({
            show: false,
            value: value,
            text: text
        });
        this.validate(value);
        if (this.props.onSelect != null) {
            this.props.onSelect(value, text, this.props.name, null);
        }
    },
    clearHandler: function clearHandler() {
        //清除数据
        if (this.props.onSelect != null) {
            this.props.onSelect("", "", this.props.name, null);
        } else {
            this.setState({
                value: null,
                text: null
            });
        }
    },
    changeHandler: function changeHandler(event) {},
    setText: function setText() {
        var text = this.state.text;
        if (this.props.type == "date") {
            if (text && text.indexOf(" ") > -1) {
                text = text.split(" ")[0]; //除去显示的时间格式
            }
        } else if (this.props.type == "daterange") {
            if (text && text.indexOf(" ") > -1) {

                var arr = text.split(",");
                text = "";
                if (arr.length > 0 && arr[0].indexOf(" ") > -1) {
                    text = arr[0].split(" ")[0];
                }

                if (arr.length == 2) {
                    if (arr[0].indexOf(" ") > -1) {
                        text = arr[0].split(" ")[0];
                    }
                    if (arr[1].indexOf(" ") > -1) {
                        text += "," + arr[1].split(" ")[0];
                    }
                }
            }
        }
        return text;
    },
    renderDate: function renderDate() {
        var dateobj = this.splitDate(this.state.value);
        if (this.state.value && this.state.value.indexOf(" ") > -1) {
            //说明有时间
            dateobj = this.splitDateTime(this.state.value);
        }

        return React.createElement(DateD, _extends({ ref: "combobox", name: this.props.name, showTime: false }, dateobj, { onSelect: this.onSelect }));
    },
    renderDateTime: function renderDateTime() {
        var dateobj = this.splitDateTime(this.state.value);
        return React.createElement(DateTime, _extends({ ref: "combobox" }, dateobj, { name: this.props.name, showTime: true, onSelect: this.onSelect }));
    },
    renderDateTimeRange: function renderDateTimeRange() {
        var firstDate = null;var secondDate = null;
        var firstTime = null;var secondTime = null;
        if (this.state.value != null && this.state.value != "") {
            //传入一到两个值
            var dateArray = this.state.value.split(",");
            if (dateArray.length > 0) {
                if (dateArray[0].indexOf(" ") > -1) {
                    //有时间
                    firstDate = dateArray[0].split(" ")[0];
                    firstTime = dateArray[0].split(" ")[1];
                } else {
                    firstDate = dateArray[0];
                }
            }
            if (dateArray.length >= 2) {
                if (dateArray[1].indexOf(" ") > -1) {
                    //有时间
                    secondDate = dateArray[1].split(" ")[0];
                    secondTime = dateArray[1].split(" ")[1];
                } else {
                    secondDate = dateArray[1];
                }
            }
        }
        return React.createElement(DateTimeRange, { ref: "combobox", name: this.props.name, firstDate: firstDate, firstTime: firstTime, secondDate: secondDate, secondTime: secondTime, onSelect: this.onSelect });
    },
    renderDateRange: function renderDateRange() {
        var firstDate = null;var secondDate = null;
        if (this.state.value != null && this.state.value != "") {
            //传入一到两个值
            var dateArray = this.state.value.split(",");
            if (dateArray.length > 0) {
                firstDate = dateArray[0];
            }
            if (dateArray.length >= 2) {
                secondDate = dateArray[1];
            }
        }
        return React.createElement(DateRange, { ref: "combobox", name: this.props.name, firstDate: firstDate, secondDate: secondDate, onSelect: this.onSelect });
    },
    render: function render() {
        var control = null;
        var controlDropClassName = "";

        switch (this.props.type) {

            case "date":
                control = this.renderDate();
                controlDropClassName = "date";
                break;
            case "datetime":
                control = this.renderDateTime();
                controlDropClassName = "date time";
                break;
            case "daterange":
                control = this.renderDateRange();
                controlDropClassName = "range";
                break;
            case "datetimerange":
                control = this.renderDateTimeRange();
                controlDropClassName = "range";
                break;
        }
        var size = this.props.onlyline == true ? "onlyline" : this.props.size; //组件大小
        var componentClassName = "wasabi-form-group " + size; //组件的基本样式
        var style = this.setStyle("input"); //设置样式
        var controlStyle = this.props.controlStyle ? this.props.controlStyle : {};
        controlStyle.display = this.state.hide == true ? "none" : "block";
        var inputProps = {
            readOnly: this.state.readonly == true ? "readonly" : null,
            style: style,
            name: this.props.name,
            placeholder: this.props.placeholder === "" || this.props.placeholder == null ? this.state.required ? "必填项" : "" : this.props.placeholder,
            className: "wasabi-form-control  " + (this.props.className != null ? this.props.className : ""),
            title: this.props.title //文本框的属性

        };var text = this.setText();
        return React.createElement(
            "div",
            { className: componentClassName + this.state.validateClass, ref: "picker", style: controlStyle },
            React.createElement(Label, { name: this.props.label, ref: "label", hide: this.state.hide, required: this.state.required }),
            React.createElement(
                "div",
                { className: "wasabi-form-group-body", style: { width: !this.props.label ? "100%" : null } },
                React.createElement(
                    "div",
                    { className: "combobox", style: { display: this.props.hide == true ? "none" : "block", width: style.width } },
                    React.createElement("i", { className: "picker-clear", onClick: this.clearHandler, style: { display: this.state.readonly ? "none" : this.state.value == "" || !this.state.value ? "none" : "inline" } }),
                    React.createElement("i", { className: "pickericon  " + (this.state.show ? " rotate" : ""), onBlur: this.onBlur, onClick: this.showPicker.bind(this, 1) }),
                    React.createElement("input", _extends({ type: "text" }, inputProps, { value: text, onClick: this.showPicker.bind(this, 2), onChange: this.changeHandler })),
                    React.createElement(
                        "div",
                        { className: "dropcontainter " + controlDropClassName + " " + size + " " + this.props.position,
                            style: { display: this.state.show == true ? "block" : "none" } },
                        control
                    )
                ),
                React.createElement(
                    "small",
                    { className: "wasabi-help-block " + this.props.position,
                        style: { display: this.state.helpTip && this.state.helpTip != "" ? this.state.helpShow : "none" } },
                    React.createElement(
                        "div",
                        { className: "text" },
                        this.state.helpTip
                    )
                )
            )
        );
    }

});
module.exports = DatePicker;

/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*
create by wangzy
date:2016-05-20
desc:日期范围选择控件
 */
var React = __webpack_require__(1);
var Lang = __webpack_require__(34);
var regs = __webpack_require__(35);
var DateD = __webpack_require__(52);
var Button = __webpack_require__(10);
var shouldComponentUpdate = __webpack_require__(8);
var DateRange = React.createClass({
    displayName: "DateRange",

    mixins: [shouldComponentUpdate],
    PropTypes: {
        name: React.PropTypes.string, //名称
        firstDate: React.PropTypes.string, //第一个日期
        secondDate: React.PropTypes.string, //第二个日期
        onSelect: React.PropTypes.func, //确定事件
        attachTime: React.PropTypes.bool, //j是否附加时间格式
        time: React.PropTypes.string,
        timeEnd: React.PropTypes.string
    },
    getDefaultProps: function getDefaultProps() {
        return {
            name: null,
            firstDate: null,
            secondDate: null,
            onSelect: null, //

            attachTime: true,
            time: "00:00:00",
            timeEnd: "23:59:59"
        };
    },
    getInitialState: function getInitialState() {
        //先设置默认值的，再判断用户是否有输入值

        return this.setDefaultState(this.props);
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        this.setDefaultState(nextProps);
    },
    setDefaultState: function setDefaultState(props) {
        //先设置默认值的，再判断用户是否有输入值

        var newDate = new Date();
        var first_year = newDate.getFullYear();
        var first_month = newDate.getMonth() + 1;
        var first_day = null;
        var first_min = null;var first_max = null;
        var second_min = null;var second_max = null;
        var firstDate = props.firstDate;

        if (firstDate && firstDate.indexOf(" ") > -1 && regs.datetime(firstDate)) {
            //有时间
            firstDate = props.firstDate.split(" ")[0];
        } else if (regs.date.test(firstDate)) {//正规的日期格式

        } else {
            firstDate = null;
        }
        if (firstDate) {
            first_year = firstDate.split("-")[0] * 1;
            first_month = firstDate.split("-")[1] * 1;
            first_day = firstDate.split("-")[2] * 1;
        }
        //设置第二日期的默认值
        var second_year = first_year;var second_month;var second_day = null;
        second_month = parseInt(first_month) + 1;
        if (second_month > 12) {
            second_year++;
            second_month = 1;
        } else {}
        //第二个日期
        var secondDate = props.secondDate;
        if (secondDate && secondDate.indexOf(" ") > -1 && regs.datetime(secondDate)) {
            //有时间
            secondDate = props.secondDate.split(" ")[0];
        } else if (secondDate && regs.date.test(secondDate)) {//正规的日期格式

        } else {
            secondDate = null;
        }
        if (secondDate) {
            //输入了值
            if (secondDate.split("-")[0] * 1 > first_year || secondDate.split("-")[1] * 1 > first_month) {
                //不相等才赋值
                second_year = secondDate.split("-")[0] * 1;
                second_month = secondDate.split("-")[1] * 1;
                second_max = second_day = secondDate.split("-")[2] * 1;
                second_min = 1;
                first_min = first_day;
                first_max = 31;
            } else if (secondDate.split("-")[0] * 1 == first_year || secondDate.split("-")[1] * 1 == first_month) {
                //不相等才赋值

                first_max = secondDate.split("-")[2] * 1;
                first_min = first_day;
            }
        } else {
            //第二日期没有值
            first_min = first_max = first_day;
        }
        return {
            first_year: first_year,
            first_month: first_month,
            first_day: first_day,
            first_min: first_min,
            first_max: first_max,
            second_year: second_year,
            second_month: second_month,
            second_day: second_day,
            second_min: second_min,
            second_max: second_max
        };
    },

    firstMonthHandler: function firstMonthHandler(year, month) {
        this.setState({
            first_year: year,
            first_month: month,
            first_day: null,
            first_min: null,
            first_max: null
        });
    },
    secondMonthHandler: function secondMonthHandler(year, month) {
        this.setState({
            second_year: year,
            second_month: month,
            second_day: null,
            second_min: null,
            second_max: null
        });
    },
    firstHandler: function firstHandler(value) {
        //开始日期选择事件
        if (value && value.indexOf(" ") > -1) {
            //有时间
            value = value.split(" ")[0];
        }
        var min_day = this.state.first_min;
        var max_day = this.state.first_max;
        /*单向选择判断*/
        if (!min_day && !max_day || min_day != max_day) {
            //都为空，或者已经选择过了，重新选择
            min_day = value.split("-")[2] * 1;
            max_day = value.split("-")[2] * 1;
        } else if (min_day == max_day) {
            //已经选择了一个
            if (min_day < value.split("-")[2] * 1) {
                //比最小值大
                max_day = value.split("-")[2] * 1;
            } else {
                //比最小值小，调换
                max_day = min_day;
                min_day = value.split("-")[2] * 1;
            }
        }
        /*单向选择判断*/

        /*判断与第二个日期的复合情况*/
        var second_min = this.state.second_min;
        var second_max = this.state.second_max;
        if (min_day == max_day) {
            //第一个日期只选择了一个
            if (this.state.beign_min != this.state.first_max) {
                //第一个日期之前已经选择过了属于重新选择，第二个日期清空
                second_min = second_max = null;
            } else {
                //第一个日期之前没有选择过不属于重新选择
                if (second_min) {
                    //第二个日期框有选择
                    second_min = 1; //设置第二个日期中的开始日期为1
                    max_day = 31; //设置第一个日期中的结束日期为最大
                }
            }
        } else {
            //第一个日期中的开始日期与日期不相同，第二个日期默认清空
            second_min = null;
            second_min = null;
        }
        /*判断与后面一个的复合情况*/
        this.setState({
            first_year: value.split("-")[0] * 1,
            first_month: value.split("-")[1] * 1,
            first_day: value.split("-")[2] * 1,
            first_min: min_day,
            first_max: max_day,
            second_min: second_min,
            second_max: second_max
        });
    },
    secondHandler: function secondHandler(value) {
        //结束日期选择事
        if (value && value.indexOf(" ") > -1) {
            //有时间
            value = value.split(" ")[0];
        }
        var min_day = this.state.second_min;
        var max_day = this.state.second_max;
        /*单向选择判断*/
        if (!min_day && !max_day || min_day != max_day) {
            //都为空，或者已经选择过了，重新选择
            min_day = value.split("-")[2] * 1;
            max_day = value.split("-")[2] * 1;
        } else if (min_day == max_day) {
            //已经选择了一个
            if (min_day < value.split("-")[2] * 1) {
                //比最小值大
                max_day = value.split("-")[2] * 1;
            } else {
                //比最小值小，调换
                max_day = min_day;
                min_day = value.split("-")[2] * 1;
            }
        }
        /*单向选择判断*/

        /*判断与第一个的复合情况*/
        var first_min = this.state.first_min;
        var first_max = this.state.first_max;
        if (min_day == max_day) {
            //第二个日期只选择了一个
            if (this.state.second_min != this.state.second_max) {
                //第二个日期之前已经选择过了属于重新选择，第一个日期清空
                first_min = first_max = null;
            } else {
                //第二个日期之前没有选择过不属于重新选择
                if (first_min) {
                    //第一个日期框有选择
                    first_max = 31; //设置第一个日期 的结束日期为最大
                    min_day = 1; //设置第二个日期 的开始日期为最为1
                }
            }
        } else {
            //第二个日期中的开始日期与日期不相同，第一个日期默认清空
            first_min = null;
            first_max = null;
        }
        this.setState({
            second_year: value.split("-")[0] * 1,
            second_month: value.split("-")[1] * 1,
            second_day: value.split("-")[2] * 1,
            second_min: min_day,
            second_max: max_day,
            first_min: first_min,
            first_max: first_max
        });
    },
    onSelectHandler: function onSelectHandler() {
        var firstDate, secondDate;
        if (this.state.first_min != null) {
            firstDate = this.state.first_year + "-" + (this.state.first_month.toString().length == 1 ? "0" + this.state.first_month : this.state.first_month) + "-" + (this.state.first_min.toString().length == 1 ? "0" + this.state.first_min : this.state.first_min);
        } else if (this.state.second_min != null) {
            firstDate = this.state.second_year + "-" + (this.state.second_month.toString().length == 1 ? "0" + this.state.second_month : this.state.second_month) + "-" + (this.state.second_min.toString().length == 1 ? "0" + this.state.second_min : this.state.second_min);
        }

        if (this.state.second_max != null) {
            secondDate = this.state.second_year + "-" + (this.state.second_month.toString().length == 1 ? "0" + this.state.second_month : this.state.second_month) + "-" + (this.state.second_max.toString().length == 1 ? "0" + this.state.second_max : this.state.second_max);
        } else if (this.state.first_max != null) {
            secondDate = this.state.first_year + "-" + (this.state.first_month.toString().length == 1 ? "0" + this.state.first_month : this.state.first_month) + "-" + (this.state.first_max.toString().length == 1 ? "0" + this.state.first_max : this.state.first_max);
        }

        if (this.props.onSelect != null) {

            if (firstDate && secondDate) {
                if (this.props.attachTime) {
                    firstDate += " " + this.props.time;
                    secondDate += " " + this.props.timeEnd;
                }
                this.props.onSelect(firstDate + "," + secondDate, firstDate + "," + secondDate, this.props.name);
            }
        }
    },
    cancelHandler: function cancelHandler() {
        this.props.onSelect(null, null, this.props.name);
    },
    render: function render() {
        return React.createElement(
            "div",
            null,
            React.createElement(
                "div",
                { className: "ok" },
                React.createElement(Button, { title: "\u786E\u5B9A", name: "ok", ripple: false, theme: "green", onClick: this.onSelectHandler }),
                React.createElement(Button, { title: "\u53D6\u6D88", name: "ok", ripple: false, theme: "cancel", onClick: this.cancelHandler })
            ),
            React.createElement(DateD, { isRange: true, year: this.state.first_year, month: this.state.first_month, day: this.state.first_day,
                min: this.state.first_min, max: this.state.first_max,
                onSelect: this.firstHandler,
                updateYearAndMonth: this.firstMonthHandler
            }),
            React.createElement(DateD, { isRange: true, year: this.state.second_year, month: this.state.second_month, day: this.state.second_day,
                min: this.state.second_min, max: this.state.second_max,
                onSelect: this.secondHandler,
                updateYearAndMonth: this.secondMonthHandler
            })
        );
    }
});
module.exports = DateRange;

/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


//create by wangzy
//date:2016-04-25
//desc:日期时间组件，
var React = __webpack_require__(1);
var Lang = __webpack_require__(34);
__webpack_require__(41);
var Time = __webpack_require__(40);
var Button = __webpack_require__(10);
var CalendarHeader = __webpack_require__(117);
var CalendarBody = __webpack_require__(116);
var shouldComponentUpdate = __webpack_require__(8);

var DateTime = React.createClass({
    displayName: "DateTime",

    mixins: [shouldComponentUpdate],
    PropTypes: {
        name: React.PropTypes.string, //字段名称，对应于表单
        year: React.PropTypes.number, //年
        month: React.PropTypes.number, //月
        day: React.PropTypes.number, //日
        time: React.PropTypes.string, //时间
        isRange: React.PropTypes.bool, //是否为范围选择
        min: React.PropTypes.number, //最小值，用于日期范围选择
        max: React.PropTypes.number, //最大值,用于日期范围选择

        onSelect: React.PropTypes.func //选择后的事件

    },
    getDefaultProps: function getDefaultProps() {
        return {
            year: null,
            month: null,
            day: null,
            time: null,
            isRange: false, ///默认否
            min: null, //默认为空，不属于日期范围选择
            max: null //默认为空，不属于日期范围选择

        };
    },
    getInitialState: function getInitialState() {
        var newDate = new Date();
        var year = this.formatDate(newDate, 'yyyy');
        var month = this.formatDate(newDate, 'MM');
        return {
            year: this.props.year ? this.props.year : year,
            month: this.props.month ? this.props.month : month,
            day: this.props.day,
            time: this.props.time,
            isRange: this.props.isRange,
            min: this.props.min,
            max: this.props.max,
            changeYear: false, //选择年份
            changeMonth: false //选择月份
        };
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        if (nextProps.isRange == true) {
            //是日期范围选择，要更新最大值与最小值
            this.setState({
                year: nextProps.year ? nextProps.year : this.state.year,
                month: nextProps.month ? nextProps.month : this.state.month,
                day: nextProps.day,
                time: nextProps.time,
                isRange: nextProps.isRange,
                min: nextProps.min,
                max: nextProps.max
            });
        } else {
            this.setState({
                year: nextProps.year ? nextProps.year : this.state.year,
                month: nextProps.month ? nextProps.month : this.state.month,
                day: nextProps.day,
                time: nextProps.time,
                isRange: nextProps.isRange
            });
        }
    },
    updateYearAndMonth: function updateYearAndMonth(filterYear, filterMonth) {
        this.setState({
            year: filterYear,
            month: filterMonth,
            day: null, //清空
            min: null,
            max: null
        });

        if (this.props.updateYearAndMonth != null) {
            this.props.updateYearAndMonth(filterYear, filterMonth);
        }
    },
    dayHandler: function dayHandler(day) {

        var time = this.refs.time.getValue();
        this.setState({
            day: day,
            min: day,
            max: day,
            time: time
        });
        if (this.props.onSelect != null) {

            var value = this.state.year + "-" + (this.state.month.toString().length == 1 ? "0" + this.state.month.toString() : this.state.month) + "-" + (day * 1 < 10 ? "0" + day.toString() : day) + (time ? " " + time : "");
            this.props.onSelect(value, value, this.props.name);
        }
    },
    changeYear: function changeYear() {
        this.setState({
            changeYear: !this.state.changeYear,
            changeMonth: false
        });
    },
    changeMonth: function changeMonth() {
        this.setState({
            changeYear: false,
            changeMonth: !this.state.changeMonth
        });
    },
    changeYearHandler: function changeYearHandler(value) {
        this.setState({
            year: value,
            changeYear: false,
            changeMonth: false,
            day: null, //清空
            min: null,
            max: null
        });
    },
    changeMonthHandler: function changeMonthHandler(value) {
        this.setState({
            month: value,
            changeYear: false,
            changeMonth: false,
            day: null, //清空
            min: null,
            max: null
        });
    },
    formatDate: function formatDate(date, format) {
        /**
         * 对Date的扩展，将 Date 转化为指定格式的String
         * 月(M)、日(d)、12小时(h)、24小时(H)、分(m)、秒(s)、周(E)、季度(q) 可以用 1-2 个占位符
         * 年(y)可以用 1-4 个占位符，毫秒(S)只能用 1 个占位符(是 1-3 位的数字)
         * eg:
         * Utils.formatDate(new Date(),'yyyy-MM-dd') ==> 2014-03-02
         * Utils.formatDate(new Date(),'yyyy-MM-dd hh:mm') ==> 2014-03-02 05:04
         * Utils.formatDate(new Date(),'yyyy-MM-dd HH:mm') ==> 2014-03-02 17:04
         * Utils.formatDate(new Date(),'yyyy-MM-dd hh:mm:ss.S') ==> 2006-07-02 08:09:04.423
         * Utils.formatDate(new Date(),'yyyy-MM-dd E HH:mm:ss') ==> 2009-03-10 二 20:09:04
         * Utils.formatDate(new Date(),'yyyy-MM-dd EE hh:mm:ss') ==> 2009-03-10 周二 08:09:04
         * Utils.formatDate(new Date(),'yyyy-MM-dd EEE hh:mm:ss') ==> 2009-03-10 星期二 08:09:04
         * Utils.formatDate(new Date(),'yyyy-M-d h:m:s.S') ==> 2006-7-2 8:9:4.18
         */
        if (!date) return;
        var o = {
            "M+": date.getMonth() + 1, //月份
            "d+": date.getDate(), //日
            "h+": date.getHours() % 12 == 0 ? 12 : date.getHours() % 12, //小时
            "H+": date.getHours(), //小时
            "m+": date.getMinutes(), //分
            "s+": date.getSeconds(), //秒
            "q+": Math.floor((date.getMonth() + 3) / 3), //季度
            "S": date.getMilliseconds() //毫秒
        };
        var week = {
            "0": "\u65E5",
            "1": "\u4E00",
            "2": "\u4E8C",
            "3": "\u4E09",
            "4": "\u56DB",
            "5": "\u4E94",
            "6": "\u516D"
        };

        if (/(y+)/.test(format)) {
            format = format.replace(RegExp.$1, (date.getFullYear() + "").substr(4 - RegExp.$1.length));
        }

        if (/(E+)/.test(format)) {
            format = format.replace(RegExp.$1, (RegExp.$1.length > 1 ? RegExp.$1.length > 2 ? "\u661F\u671F" : "\u5468" : "") + week[date.getDay() + ""]);
        }
        for (var k in o) {
            if (new RegExp("(" + k + ")").test(format)) {
                format = format.replace(RegExp.$1, RegExp.$1.length == 1 ? o[k] : ("00" + o[k]).substr(("" + o[k]).length));
            }
        }
        return format;
    },
    render: function render() {
        return React.createElement(
            "div",
            null,
            React.createElement(
                "div",
                { style: { position: "relative", height: 32 } },
                React.createElement(Time, { ref: "time", type: "time", key: "end" })
            ),
            React.createElement(
                "div",
                { className: "wasabi-datetime" },
                React.createElement(CalendarHeader, {
                    year: this.state.year,
                    month: this.state.month,
                    updateFilter: this.updateYearAndMonth,
                    changeYear: this.changeYear,
                    changeMonth: this.changeMonth
                }),
                React.createElement(CalendarBody, {
                    year: this.state.year,
                    month: this.state.month,
                    day: this.state.day,
                    isRange: this.state.isRange,
                    min: this.state.min,
                    max: this.state.max,
                    dayHandler: this.dayHandler,
                    changeYear: this.state.changeYear,
                    changeMonth: this.state.changeMonth,
                    changeYearHandler: this.changeYearHandler,
                    changeMonthHandler: this.changeMonthHandler
                })
            )
        );
    }
});
module.exports = DateTime;

/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*
 create by wangzy
 date:2016-06-12
 desc:日期范围选择控件
 */
var React = __webpack_require__(1);
var Lang = __webpack_require__(34);
var DateD = __webpack_require__(52);
var Time = __webpack_require__(40);
var Button = __webpack_require__(10);
var shouldComponentUpdate = __webpack_require__(8);
var DateTimeRange = React.createClass({
    displayName: "DateTimeRange",

    mixins: [shouldComponentUpdate],
    PropTypes: {
        name: React.PropTypes.string, //名称
        firstDate: React.PropTypes.string, //第一个日期
        firstTime: React.PropTypes.string, //第一个时间
        secondDate: React.PropTypes.string, //第二个日期
        secondTime: React.PropTypes.string, //第二个时间
        onSelect: React.PropTypes.func //确定事件
    },
    getInitialState: function getInitialState() {
        return this.setDefaultState(this.props);
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {

        var newstate = this.setDefaultState(nextProps);
        this.setState(newstate);
    },
    setDefaultState: function setDefaultState(props) {
        //先设置默认值的，再判断用户是否有输入值
        var regs = /^(\d{4})-(\d{2})-(\d{2})$/;
        var newDate = new Date();
        var first_year = newDate.getFullYear();
        var first_month = newDate.getMonth() + 1;
        var first_day = null;
        var first_min = null;var first_max = null;
        var second_min = null;var second_max = null;

        if (props.firstDate && regs.test(props.firstDate)) {
            //输入了值
            first_year = props.firstDate.split("-")[0] * 1;
            first_month = props.firstDate.split("-")[1] * 1;
            first_day = props.firstDate.split("-")[2] * 1;
        }
        //设置第二日期的默认值
        var second_year = first_year;var second_month;var second_day = null;
        second_month = parseInt(first_month) + 1;
        if (second_month > 12) {
            second_year++;
            second_month = 1;
        } else {}
        if (props.secondDate && regs.test(props.secondDate)) {
            //输入了值
            if (props.secondDate.split("-")[0] * 1 > first_year || props.secondDate.split("-")[1] * 1 > first_month) {
                //不相等才赋值
                second_year = props.secondDate.split("-")[0] * 1;
                second_month = props.secondDate.split("-")[1] * 1;
                second_max = second_day = props.secondDate.split("-")[2] * 1;
                second_min = 1;
                first_min = first_day;
                first_max = 31;
            } else if (props.secondDate.split("-")[0] * 1 == first_year || props.secondDate.split("-")[1] * 1 == first_month) {
                //不相等才赋值

                first_max = props.secondDate.split("-")[2] * 1;
                first_min = first_day;
            }
        } else {
            //第二日期没有值
            first_min = first_max = first_day;
        }
        return {
            first_year: first_year,
            first_month: first_month,
            first_day: first_day,
            first_time: props.firstTime,
            first_min: first_min,
            first_max: first_max,

            second_year: second_year,
            second_month: second_month,
            second_day: second_day,
            second_time: props.secondTime,
            second_min: second_min,
            second_max: second_max
        };
    },

    firstMonthHandler: function firstMonthHandler(year, month) {
        this.setState({
            first_year: year,
            first_month: month,
            first_day: null,
            first_min: null,
            first_max: null
        });
    },
    secondMonthHandler: function secondMonthHandler(year, month) {
        this.setState({
            second_year: year,
            second_month: month,
            second_day: null,
            second_min: null,
            second_max: null
        });
    },

    firstHandler: function firstHandler(value) {
        //开始日期选择事件
        if (value && value.indexOf(" ") > -1) {
            //有时间
            value = value.split(" ")[0];
        }
        var min_day = this.state.first_min;
        var max_day = this.state.first_max;
        /*单向选择判断*/
        if (!min_day && !max_day || min_day != max_day) {
            //都为空，或者已经选择过了，重新选择
            min_day = value.split("-")[2] * 1;
            max_day = value.split("-")[2] * 1;
        } else if (min_day == max_day) {
            //已经选择了一个
            if (min_day < value.split("-")[2] * 1) {
                //比最小值大
                max_day = value.split("-")[2] * 1;
            } else {
                //比最小值小，调换
                max_day = min_day;
                min_day = value.split("-")[2] * 1;
            }
        }
        /*单向选择判断*/

        /*判断与第二个日期的复合情况*/
        var second_min = this.state.second_min;
        var second_max = this.state.second_max;
        if (min_day == max_day) {
            //第一个日期只选择了一个
            if (this.state.beign_min != this.state.first_max) {
                //第一个日期之前已经选择过了属于重新选择，第二个日期清空
                second_min = second_max = null;
            } else {
                //第一个日期之前没有选择过不属于重新选择
                if (second_min) {
                    //第二个日期框有选择
                    second_min = 1; //设置第二个日期中的开始日期为1
                    max_day = 31; //设置第一个日期中的结束日期为最大
                }
            }
        } else {
            //第一个日期中的开始日期与日期不相同，第二个日期默认清空
            second_min = null;
            second_min = null;
        }
        /*判断与后面一个的复合情况*/
        this.setState({
            first_year: value.split("-")[0] * 1,
            first_month: value.split("-")[1] * 1,
            first_day: value.split("-")[2] * 1,
            first_min: min_day,
            first_max: max_day,
            second_min: second_min,
            second_max: second_max,
            first_time: this.refs.begin.getValue(),
            second_time: this.refs.end.getValue()
        });
    },
    secondHandler: function secondHandler(value) {
        //结束日期选择事
        if (value && value.indexOf(" ") > -1) {
            //有时间
            value = value.split(" ")[0];
        }
        var min_day = this.state.second_min;
        var max_day = this.state.second_max;
        /*单向选择判断*/
        if (!min_day && !max_day || min_day != max_day) {
            //都为空，或者已经选择过了，重新选择
            min_day = value.split("-")[2] * 1;
            max_day = value.split("-")[2] * 1;
        } else if (min_day == max_day) {
            //已经选择了一个
            if (min_day < value.split("-")[2] * 1) {
                //比最小值大
                max_day = value.split("-")[2] * 1;
            } else {
                //比最小值小，调换
                max_day = min_day;
                min_day = value.split("-")[2] * 1;
            }
        }
        /*单向选择判断*/

        /*判断与第一个的复合情况*/
        var first_min = this.state.first_min;
        var first_max = this.state.first_max;
        if (min_day == max_day) {
            //第二个日期只选择了一个
            if (this.state.second_min != this.state.second_max) {
                //第二个日期之前已经选择过了属于重新选择，第一个日期清空
                first_min = first_max = null;
            } else {
                //第二个日期之前没有选择过不属于重新选择
                if (first_min) {
                    //第一个日期框有选择
                    first_max = 31; //设置第一个日期 的结束日期为最大
                    min_day = 1; //设置第二个日期 的开始日期为最为1
                }
            }
        } else {
            //第二个日期中的开始日期与日期不相同，第一个日期默认清空
            first_min = null;
            first_max = null;
        }
        this.setState({
            second_year: value.split("-")[0] * 1,
            second_month: value.split("-")[1] * 1,
            second_day: value.split("-")[2] * 1,
            second_min: min_day,
            second_max: max_day,
            first_min: first_min,
            first_max: first_max,
            first_time: this.refs.begin.getValue(),
            second_time: this.refs.end.getValue()
        });
    },
    onSelectHandler: function onSelectHandler() {
        var firstDate, secondDate;
        if (this.state.first_min != null) {
            firstDate = this.state.first_year + "-" + (this.state.first_month.toString().length == 1 ? "0" + this.state.first_month : this.state.first_month) + "-" + (this.state.first_min.toString().length == 1 ? "0" + this.state.first_min : this.state.first_min);
        } else if (this.state.second_min != null) {
            firstDate = this.state.second_year + "-" + (this.state.second_month.toString().length == 1 ? "0" + this.state.second_month : this.state.second_month) + "-" + (this.state.second_min.toString().length == 1 ? "0" + this.state.second_min : this.state.second_min);
        }

        if (this.state.second_max != null) {
            secondDate = this.state.second_year + "-" + (this.state.second_month.toString().length == 1 ? "0" + this.state.second_month : this.state.second_month) + "-" + (this.state.second_max.toString().length == 1 ? "0" + this.state.second_max : this.state.second_max);
        } else if (this.state.first_max != null) {
            secondDate = this.state.first_year + "-" + (this.state.first_month.toString().length == 1 ? "0" + this.state.first_month : this.state.first_month) + "-" + (this.state.first_max.toString().length == 1 ? "0" + this.state.first_max : this.state.first_max);
        }
        if (firstDate && secondDate) {

            if (this.props.onSelect != null) {
                var first_time = " " + (this.state.first_time ? this.state.first_time : this.refs.begin.getValue());
                var second_time = " " + (this.state.second_time ? this.state.second_time : this.refs.end.getValue());
                this.props.onSelect(firstDate + first_time + "," + secondDate + second_time, firstDate + first_time + "," + secondDate + second_time, this.props.name);
            }
        }
    },
    beginTimeHandler: function beginTimeHandler(time) {
        this.setState({
            first_time: time
        });
    },
    endTimeHandler: function endTimeHandler(time) {
        this.setState({
            second_time: time
        });
    },
    cancelHandler: function cancelHandler() {
        this.props.onSelect(null, null, this.props.name);
    },
    render: function render() {
        var firstHour = null;var firstMinute = null;var firstSecond = null;
        var secondHour = null,
            secondMinute = null,
            secondSecond = null;
        if (this.state.first_time) {
            firstHour = this.state.first_time.split(":")[0] * 1;
            firstMinute = this.state.first_time.split(":")[1] * 1;
            firstSecond = this.state.first_time.split(":")[2] * 1;
        }
        if (this.state.second_time) {
            secondHour = this.state.second_time.split(":")[0] * 1;
            secondMinute = this.state.second_time.split(":")[1] * 1;
            secondSecond = this.state.second_time.split(":")[2] * 1;
        }
        return React.createElement(
            "div",
            null,
            React.createElement(
                "div",
                { className: "ok" },
                React.createElement(
                    "div",
                    { style: { float: "left", marginLeft: 5, marginTop: 5 } },
                    React.createElement(Time, { name: "begin", type: "time", key: "begin", onSelect: this.beginTimeHandler, ref: "begin",
                        hour: firstHour, minute: firstMinute, second: firstSecond })
                ),
                React.createElement(
                    "div",
                    { style: { float: "left", marginLeft: 68, marginTop: 5, height: 32 } },
                    React.createElement(Time, { name: "end", type: "time", key: "end", ref: "end", onSelect: this.endTimeHandler, hour: secondHour, minute: secondMinute, second: secondSecond })
                ),
                React.createElement(Button, { title: "\u786E\u5B9A", name: "ok", ripple: false, theme: "green", onClick: this.onSelectHandler }),
                React.createElement(Button, { title: "\u53D6\u6D88", name: "ok", ripple: false, theme: "cancel", onClick: this.cancelHandler })
            ),
            React.createElement(DateD, { isRange: true, year: this.state.first_year, month: this.state.first_month, day: this.state.first_day,
                min: this.state.first_min, max: this.state.first_max,
                onSelect: this.firstHandler,
                updateYearAndMonth: this.firstMonthHandler
            }),
            React.createElement(DateD, { isRange: true, year: this.state.second_year, month: this.state.second_month, day: this.state.second_day,
                min: this.state.second_min, max: this.state.second_max,
                onSelect: this.secondHandler,
                updateYearAndMonth: this.secondMonthHandler
            })
        );
    }
});
module.exports = DateTimeRange;

/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

//create by wangzy
//date:2016-04-05后开始独立改造
//desc:表单组件
__webpack_require__(304);
var React = __webpack_require__(1);
var Input = __webpack_require__(53);
var Button = __webpack_require__(10);
var unit = __webpack_require__(5);
var shouldComponentUpdate = __webpack_require__(8);
var Form = React.createClass({
    displayName: "Form",

    mixins: [shouldComponentUpdate],
    propTypes: {
        model: React.PropTypes.array.isRequired, //表单数据模型
        width: React.PropTypes.number, ///宽度
        height: React.PropTypes.number, //高度
        className: React.PropTypes.string, //自定义样式
        disabled: React.PropTypes.bool, //是否只读
        submitTitle: React.PropTypes.string, //提交按钮标题
        closeTitle: React.PropTypes.string, //关闭按钮标题
        submitHide: React.PropTypes.bool, //提交按钮是否隐藏
        closeHide: React.PropTypes.bool, //关闭按钮是否隐藏
        submitHandler: React.PropTypes.func, //提交成功后的回调事件
        closeHandler: React.PropTypes.func, //关闭事件的回调事件
        submitTheme: React.PropTypes.oneOf([//提交按钮默认主题
        "primary", "default", "success", "info", "warning", "danger", "green", "cancel"]),
        closeTheme: React.PropTypes.oneOf([//关闭按钮默认主题
        "primary", "default", "success", "info", "warning", "danger", "green", "cancel"]),
        columns: React.PropTypes.oneOf([//表单的列数，为none则系统不自动排版，为null则系统自动排版，为数字则指定列数
        "none", //不处理
        1, 2, 3, 4])
    },
    getDefaultProps: function getDefaultProps() {
        return {
            model: [], //表单数据模型
            width: null, //默认宽度
            height: null, //高度
            className: "", //自定义样式
            disabled: false, //是否只读
            submitTitle: "提交", //提交按钮标题
            closeTitle: "关闭", //关闭按钮标题
            submitHide: false, //提交按钮是否隐藏
            closeHide: false, //关闭按钮是否隐藏
            submitHandler: null, //提交成功后的回调事件
            closeHandler: null, //关闭事件的回调事件
            submitTheme: "green", //提交按钮默认主题
            closeTheme: "cancel", //关闭按钮默认主题
            columns: null //null系统自行处理列数
        };
    },
    getInitialState: function getInitialState() {
        this.isChange = false;
        //初始化时就获取可用宽度,如果每次更新获取,会产生晃动
        if (window.screen.availWidth < document.documentElement.clientWidth) {
            //屏幕可用宽度小,有滚动条
            this.availWidth = window.screen.availWidth;
        } else {
            //没有滚动条
            this.availWidth = window.screen.availWidth - 10; //防止后期出现滚动条,而产生样式变形,先减去滚动条宽度
        }
        return {
            model: this.props.model, //一定复制
            pickerRowModel: new Map(), //下拉框中选中的完整数据
            disabled: this.props.disabled, //是否只读
            columns: this.props.columns //自定义列数

        };
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        this.showUpdate = false; //清除自身标记
        this.setState({
            model: nextProps.model,
            disabled: nextProps.disabled,
            columns: nextProps.columns
        });
    },
    componentDidUpdate: function componentDidUpdate() {
        if (this.isChange && this.showUpdate) {
            this.showUpdate = false;
            if (this.props.changeHandler) {
                //用于父组件监听是否表单是否有修改，用于立即更新父组件中的按钮的权限之类的,
                this.props.changeHandler();
            }
        } else {}
    },
    changeHandler: function changeHandler(value, text, name, data) {
        //
        var newModel = this.state.model;
        var pickerRowModel = this.state.pickerRowModel;
        for (var i = 0; i < newModel.length; i++) {
            if (newModel[i].name == name) {
                newModel[i].value = value;
                newModel[i].text = text;
                if (newModel[i].type == "select" || newModel[i].type == "gridpicker") {
                    pickerRowModel.set(newModel[i].name, data);
                }
                break;
            }
        }
        this.isChange = true; //用于对外标记
        this.showUpdate = true; //用于自身标记

        this.setState({
            model: newModel,
            pickerRowModel: pickerRowModel

        });
    },
    getState: function getState() {
        //只读方法，用于父组件其他方法里来获取表单是否发生改变
        if (this.isChange) {
            return true;
        } else {
            return false;
        }
    },
    clearDirtyData: function clearDirtyData() {
        //清除组件的表单脏数据状态
        this.isChange = false;
    },
    getData: function getData() {
        //获取当前表单的数据，没有验证
        var data = {};
        var isva = true;
        for (var v in this.refs) {
            if (isva) {
                //验证成功，则继续验证
                isva = this.refs[v].validate(this.refs[v].state.value);
            } else {
                //不成功则继续验证但不再回执
                this.refs[v].validate(this.refs[v].state.value);
            }

            if (this.refs[v].props.name.indexOf(",") > -1) {
                //含有多个字段
                var nameSplit = this.refs[v].props.name.split(",");
                if (this.refs[v].state.value && this.refs[v].state.value != "") {
                    var valueSplit = this.refs[v].state.value.split(",");
                    for (var index = 0; index < valueSplit.length; index++) {
                        //有可能分离的值比字段少
                        if (index < valueSplit.length) {
                            data[nameSplit[index]] = valueSplit[index];
                        }
                    }
                } else {
                    for (var _index = 0; _index < nameSplit.length; _index++) {
                        data[nameSplit[_index]] = null;
                    }
                }
            } else {
                data[this.refs[v].props.name] = this.refs[v].state.value;
            }
        }
        return data;
    },
    setData: function setData(data) {
        //设置值,data是对象
        this.isChange = false;
        if (!data) {
            return;
        }
        var newModel = this.state.model;
        for (var i = 0; i < newModel.length; i++) {
            if (data[newModel[i].name]) {
                if (_typeof(data[newModel[i].name]) === "object") {
                    //键值对
                    try {
                        if (data[newModel[i].name].value) {
                            newModel[i].value = data[newModel[i].name].value;
                        }
                        if (data[newModel[i].name].text) {
                            newModel[i].text = data[newModel[i].name].text;
                        }
                    } catch (e) {
                        throw new Error(e.message);
                        return;
                    }
                } else {
                    //文本型
                    newModel[i].value = data[newModel[i].name];
                    newModel[i].text = data[newModel[i].name];
                }
            }
        }
        this.setState({
            model: newModel
        });
    },
    getTextData: function getTextData() {
        var textData = {}; //各个字段对应的文本值
        var isva = true;
        for (var v in this.refs) {
            if (isva) {
                //验证成功，则继续验证
                isva = this.refs[v].validate(this.refs[v].state.value);
            } else {
                //不成功则继续验证但不再回执
                this.refs[v].validate(this.refs[v].state.value);
            }
            if (this.refs[v].props.name.indexOf(",") > -1) {
                //含有多个字段
                var nameSplit = this.refs[v].props.name.split(",");
                if (this.refs[v].state.value && this.refs[v].state.value != "") {

                    var textSplit = this.refs[v].state.text.split(","); //文本值
                    for (var index = 0; index < textSplit.length; index++) {
                        //有可能分离的值比字段少
                        if (index < textSplit.length) {
                            textData[nameSplit[index]] = textSplit[index];
                        }
                    }
                } else {
                    for (var _index2 = 0; _index2 < nameSplit.length; _index2++) {
                        textData[nameSplit[_index2]] = "";
                    }
                }
            } else {
                textData[this.refs[v].props.name] = this.refs[v].state.text;
            }
        }
        return textData;
    },
    getRowDataByName: function getRowDataByName(name) {
        return this.state.pickerRowModel.get(name);
    },
    getModel: function getModel() {
        //获取当前表单数据model
        var newmodel = this.state.model; //
        return newmodel;
    },
    validate: function validate() {
        var data = {};
        var isva = true;
        for (var v in this.refs) {
            if (isva) {
                //验证成功，则继续验证,这样就可以显示所有验证样式
                isva = this.refs[v].validate();
            } else {
                //不成功则继续验证但不再回执
                this.refs[v].validate();
            }
            data[this.refs[v].props.name] = this.refs[v].state.value;
        }
        return isva;
    },
    getComponentData: function getComponentData(name) {
        //只读属性，获取对应的字段的数据源
        return JSON.parse(window.localStorage.getItem(name + "data"));
    },
    clearData: function clearData() {
        //清空数据
        this.isChange = false; //清除脏数据状态
        var newModel = this.state.model;
        for (var i = 0; i < newModel.length; i++) {
            newModel[i].value = null;
            newModel[i].text = null;
        }
        this.setState({
            model: newModel
        });
    },

    submitHandler: function submitHandler() {
        //提交 数据
        var data = {}; //各个字段对应的值
        var textData = {}; //各个字段对应的文本值
        var isva = true;
        for (var v in this.refs) {
            if (this.refs[v].props.type == "button") {
                continue; //如果按钮则跳过
            }
            if (isva) {
                //验证成功，则继续验证
                isva = this.refs[v].validate();
            } else {
                //不成功则继续验证但不再回执
                this.refs[v].validate();
            }
            if (this.refs[v].props.name.indexOf(",") > -1) {
                //含有多个字段
                var nameSplit = this.refs[v].props.name.split(",");
                if (this.refs[v].state.value && this.refs[v].state.value != "") {
                    var valueSplit = this.refs[v].state.value.split(",");
                    var textSplit = this.refs[v].state.text.split(","); //文本值
                    for (var index = 0; index < valueSplit.length; index++) //有可能分离的值比字段少
                    {
                        if (index < valueSplit.length) {
                            data[nameSplit[index]] = valueSplit[index];
                            textData[nameSplit[index]] = textSplit[index];
                        }
                    }
                } else {
                    for (var _index3 = 0; _index3 < nameSplit.length; _index3++) {
                        data[nameSplit[_index3]] = null;
                        textData[nameSplit[_index3]] = "";
                    }
                }
            } else {
                data[this.refs[v].props.name] = this.refs[v].state.value;
                textData[this.refs[v].props.name] = this.refs[v].state.text;
            }
        }

        if (isva) {

            if (this.props.submitHandler != null) {
                this.props.submitHandler(data, textData);
            }
        }
    },
    closeHandler: function closeHandler() {
        //关闭事件
        if (this.props.closeHandler != null) {
            this.props.closeHandler();
        }
    },
    setColumns: function setColumns() {
        //计算列数及样式
        var style = {}; //表单栏样式
        if (this.props.style) {
            style = this.props.style;
        }

        var columns = 0; //每一行的列数

        //表单实际宽度
        var actualWidth = this.props.width ? this.props.width : this.availWidth; //总宽度
        var columnClass = ""; //列排版样式
        if (this.state.columns) {
            //如果自定义了,则以自定义为标准
            columns = this.state.columns;
        } else if (this.state.columns == null) {
            //没设置，则自动计算
            if (actualWidth <= 610) {
                //一列
                columns = 1;
            } else if (actualWidth >= 611 && actualWidth <= 909) {
                //两列
                columns = 2;
            } else if (actualWidth >= 910 && actualWidth <= 1229) {
                //三列
                columns = 3;
            } else if (actualWidth >= 1230) {
                //四列
                columns = 4;
            }
        } else if (this.state.columns == "none" || this.state.columns == 0) {} //不处理

        // if(this.state.model.length<columns) {//如果数据小于列数
        //     columns = this.state.model.length;
        // }
        if (columns > 0) {
            //需要处理列的排版
            switch (columns) {
                case 1:
                    columnClass = "oneline";
                    break;
                case 2:
                    columnClass = "twoline";
                    break;
                case 3:
                    columnClass = "threeline";
                    break;
                case 4:
                    columnClass = "fourline";
                    break;
            }
        }

        style.width = actualWidth; //设置表单的宽度
        style.height = this.props.height; //设置表单的高度

        var result = {
            style: style,
            columns: columns,
            columnClass: columnClass
        };
        return result;
    },
    render: function render() {
        var _this = this;

        if (this.state.model instanceof Array) {} else {
            return;
        }
        var result = this.setColumns(); //得计算列的结果
        var formSubmitVisible = true; //按钮行是否可见
        if (this.state.disabled || this.props.submitHide && this.props.closeHide) {
            formSubmitVisible = false;
        } else {}
        var orderIndex = 0; //表单组件在表单的序号
        return React.createElement(
            "div",
            { className: "wasabi-form " + result.columnClass + " " + this.props.className, style: result.style },
            React.createElement(
                "div",
                { className: "form-body  " },
                this.state.model.map(function (child, index) {
                    var position = "right"; //默认都靠右

                    if (result.columns) {
                        //需要计算列的位置
                        position = orderIndex % result.columns; //求余,计算在表单中列位置
                        if (position == 0) {
                            position = "left";
                        } else if (position == result.columns - 1) {
                            position = "right";
                        } else {
                            position = "default";
                        }
                    }
                    var size = "default"; //列的大小
                    child.onlyline == true ? "onlyline" : child.size;
                    if (result.columns) {
                        //需要计算列的大小

                        if (child.hide == true) {//如果隐藏的话，不计算序号

                        } else {
                            if (size == "default") {
                                orderIndex++;
                            } else if (size == "large" || size == "two") {

                                if (result.columns == 1) {
                                    orderIndex++; //每行只有一列,算一列
                                } else {
                                    orderIndex += 2; //算两列
                                }
                            } else if (size == "three") {

                                if (result.columns == 1 || result.columns == 2) {
                                    orderIndex++; //每行只有一列或者两列,算一列
                                } else {
                                    orderIndex += 3; //算三列
                                }
                            } else if (size == "onlyline") {
                                orderIndex += result.columns;
                            }
                        }
                    }

                    return React.createElement(Input, _extends({ ref: child.name,
                        key: child.name + index.toString()
                    }, child, {
                        position: position,
                        readonly: _this.state.disabled == true ? true : child.readonly,
                        backFormHandler: _this.changeHandler
                    }));
                }),
                React.createElement("div", { className: "clear" })
            ),
            React.createElement(
                "div",
                { className: "form-submit", style: { display: formSubmitVisible == true ? "block" : "none" } },
                React.createElement(Button, { theme: this.props.submitTheme, onClick: this.submitHandler, title: this.props.submitTitle, hide: this.state.disabled == true ? true : this.props.submitHide == true ? true : false }),
                React.createElement(Button, { theme: this.props.closeTheme, onClick: this.closeHandler, title: this.props.closeTitle, hide: this.state.disabled == true ? true : this.props.closeHide == true ? true : false })
            )
        );
    }
});
module.exports = Form;

/***/ }),
/* 124 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

/*
 create by wangzy
 date:2016-07-04
 desc:列表下拉选择
 */
var React = __webpack_require__(1);

var SearchBox = __webpack_require__(78);
var DataGrid = __webpack_require__(261); //注意这里的引用
var unit = __webpack_require__(5);
var validation = __webpack_require__(16);
var setStyle = __webpack_require__(11);
var validate = __webpack_require__(22);
var showUpdate = __webpack_require__(21);
var shouldComponentUpdate = __webpack_require__(8);
var Label = __webpack_require__(18);
var ClickAway = __webpack_require__(23);
var GridPicker = React.createClass({
    displayName: "GridPicker",

    mixins: [setStyle, validate, showUpdate, shouldComponentUpdate, ClickAway],
    propTypes: {
        name: React.PropTypes.string.isRequired, //字段名
        label: React.PropTypes.oneOfType([React.PropTypes.string, React.PropTypes.element, React.PropTypes.node]), //字段文字说明属性
        title: React.PropTypes.string, //提示信息
        width: React.PropTypes.number, //宽度
        height: React.PropTypes.number, //高度
        value: React.PropTypes.oneOfType([React.PropTypes.number, React.PropTypes.string]), //默认值,
        text: React.PropTypes.oneOfType([React.PropTypes.number, React.PropTypes.string]), //默认文本值
        placeholder: React.PropTypes.string, //输入框预留文字
        readonly: React.PropTypes.bool, //是否只读
        required: React.PropTypes.bool, //是否必填
        onlyline: React.PropTypes.bool, //是否只占一行
        hide: React.PropTypes.bool, //是否隐藏
        regexp: React.PropTypes.string, //正则表达式
        invalidTip: React.PropTypes.string, //无效时的提示字符
        style: React.PropTypes.object, //自定义style
        className: React.PropTypes.string, //自定义class
        size: React.PropTypes.oneOf(["none", "default", "large", //兼容性值,与two相同
        "two", "three", "onlyline"]), //组件表单的大小
        position: React.PropTypes.oneOf(["left", "default", "right"]), //组件在表单一行中的位置

        //其他属性
        valueField: React.PropTypes.string, //数据字段值名称
        textField: React.PropTypes.string, //数据字段文本名称
        url: React.PropTypes.string, //ajax的后台地址
        params: React.PropTypes.object, //查询参数
        dataSource: React.PropTypes.string, //ajax的返回的数据源中哪个属性作为数据源,为null时直接后台返回的数据作为数据源
        data: React.PropTypes.array, //自定义数据源
        onSelect: React.PropTypes.func //选中后的事件，回传，value,与text,data

    },
    getDefaultProps: function getDefaultProps() {
        return {
            name: "",
            label: null,
            title: null,
            width: null,
            height: null,
            value: "",
            text: "",
            placeholder: "",
            readonly: false,
            required: false,
            onlyline: false,
            hide: false,
            regexp: null,
            invalidTip: null,
            style: null,
            className: null,
            size: "default",
            position: "default",

            //其他属性
            valueField: "value",
            textField: "text",
            url: null,
            params: null,
            dataSource: "data",
            data: null,
            onSelect: null,
            //其他属性
            keyField: "id",
            pagination: false,
            selectAble: false,
            detailAble: false,
            borderAble: false

        };
    },
    getInitialState: function getInitialState() {
        return {
            hide: this.props.hide,
            params: this.props.params, //默认筛选条件
            url: null, //默认为空,表示不查询,后期再更新,
            show: false, //
            value: this.props.value,
            text: this.props.text,
            readonly: this.props.readonly,
            data: this.props.data,
            //验证
            required: this.props.required,
            validateClass: "", //验证的样式
            helpShow: "none", //提示信息是否显示
            helpTip: validation["required"], //提示信息
            invalidTip: ""
        };
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        //只更新不查询,注意了
        if (nextProps.data != null && nextProps.data instanceof Array && (!nextProps.url || nextProps.url == "")) {
            //没有传url
            this.setState({
                hide: nextProps.hide,
                data: nextProps.data,
                value: nextProps.value,
                text: nextProps.text,
                readonly: nextProps.readonly,
                required: nextProps.required,
                params: nextProps.params,
                validateClass: "", //重置验证样式
                helpTip: validation["required"] //提示信息
            });
        } else {
            this.setState({
                hide: nextProps.hide,
                value: nextProps.value,
                text: nextProps.text,
                readonly: nextProps.readonly,
                required: nextProps.required,
                params: nextProps.params,
                validateClass: "", //重置验证样式
                helpTip: validation["required"] //提示信息
            });
        }
    },
    componentDidMount: function componentDidMount() {

        this.registerClickAway(this.hidePicker, this.refs.picker); //注册全局单击事件
    },
    onBlur: function onBlur() {
        this.refs.label.hideHelp(); //隐藏帮助信息
    },
    changeHandler: function changeHandler(event) {},
    showPicker: function showPicker(type) {
        //显示选择
        if (this.state.readonly) {
            //只读不显示
            return;
        } else {
            this.setState({
                show: type == 1 ? !this.state.show : true
            });
        }
        this.bindClickAway(); //绑定全局单击事件
    },
    hidePicker: function hidePicker() {
        this.setState({
            show: false
        });
        this.unbindClickAway(); //卸载全局单击事件
    },
    onSearch: function onSearch(params) {
        var newparams = this.state.params;
        if (!newparams) {
            newparams = {};
        }
        for (var v in params) {
            newparams[v] = params[v];
        }

        this.setState({
            params: newparams,
            url: this.props.url //查询的时候再赋值
        });
    },
    onSelect: function onSelect(rowIndex, rowData) {
        if (this.props.onSelect != null) {
            if (this.props.valueField && this.props.textField) {

                this.props.onSelect(rowData[this.props.valueField], rowData[this.props.textField], this.props.name, rowData);
            }
        }
        this.validate(rowData[this.props.valueField]);
        this.setState({
            value: rowData[this.props.valueField],
            text: rowData[this.props.textField],
            show: !this.state.show
        });
    },
    clearHandler: function clearHandler() {
        //清除数据
        if (this.props.onSelect != null) {
            this.props.onSelect("", "", this.props.name, null);
        } else {
            this.setState({
                value: null,
                text: null
            });
        }
    },
    render: function render() {
        var size = this.props.onlyline == true ? "onlyline" : this.props.size; //组件大小
        var componentClassName = "wasabi-form-group " + size; //组件的基本样式
        var style = this.setStyle("input"); //设置样式
        var controlStyle = this.props.controlStyle ? this.props.controlStyle : {};
        controlStyle.display = this.state.hide == true ? "none" : "block";
        var inputProps = {
            readOnly: this.state.readonly == true ? "readonly" : null,
            style: style,
            name: this.props.name,
            placeholder: this.props.placeholder === "" || this.props.placeholder == null ? this.state.required ? "必填项" : "" : this.props.placeholder,
            className: "wasabi-form-control  " + (this.props.className != null ? this.props.className : ""),
            title: this.props.title //文本框的属性
        };var props = _extends({}, this.props);
        props.onClick = this.onSelect; //生定向，但是仍然保留原来的属性
        props.width = 410;
        props.height = 398;
        props.url = this.state.url;
        props.data = this.state.data;
        props.type = null;
        return React.createElement(
            "div",
            { className: componentClassName + this.state.validateClass, ref: "picker", style: controlStyle },
            React.createElement(Label, { name: this.props.label, ref: "label", hide: this.state.hide, required: this.state.required }),
            React.createElement(
                "div",
                { className: "wasabi-form-group-body", style: { width: !this.props.label ? "100%" : null } },
                React.createElement(
                    "div",
                    { className: "combobox", style: { display: this.props.hide == true ? "none" : "block" } },
                    React.createElement("i", { className: "picker-clear ", onClick: this.clearHandler, style: { display: this.state.readonly ? "none" : this.state.value == "" || !this.state.value ? "none" : "inline" } }),
                    React.createElement("i", { className: "pickericon  " + (this.state.show ? "rotate" : ""), onClick: this.showPicker.bind(this, 1) }),
                    React.createElement("input", _extends({ type: "text" }, inputProps, { value: this.state.text, onBlur: this.onBlur, onClick: this.showPicker.bind(this, 2), onChange: this.changeHandler })),
                    React.createElement(
                        "div",
                        { className: "dropcontainter gridpicker  " + this.props.position, style: { height: this.props.height, display: this.state.show == true ? "block" : "none" } },
                        React.createElement(SearchBox, { name: this.props.name, valueField: this.props.valueField, textField: this.props.textField, onSearch: this.onSearch }),
                        React.createElement(DataGrid, _extends({}, props, { params: this.state.params }))
                    )
                ),
                React.createElement(
                    "small",
                    { className: "wasabi-help-block " + this.props.position, style: { display: this.state.helpTip && this.state.helpTip != "" ? this.state.helpShow : "none" } },
                    React.createElement(
                        "div",
                        { className: "text" },
                        this.state.helpTip
                    )
                )
            )
        );
    }
});
module.exports = GridPicker;

/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

//creete by wangzy
//date:2016-11-21
//desc 增加多行文本
var React = __webpack_require__(1);

var validation = __webpack_require__(16);
var setStyle = __webpack_require__(11);
var validate = __webpack_require__(22);
var shouldComponentUpdate = __webpack_require__(8);
var Label = __webpack_require__(18);
var Button = __webpack_require__(10);
var pasteExtend = __webpack_require__(80);
var ClickAway = __webpack_require__(23);
var MutiText = React.createClass({
    displayName: "MutiText",

    mixins: [setStyle, validate, shouldComponentUpdate, ClickAway],
    propTypes: {
        name: React.PropTypes.string.isRequired, //字段名
        label: React.PropTypes.oneOfType([React.PropTypes.string, React.PropTypes.element, React.PropTypes.node]), //字段文字说明属性
        title: React.PropTypes.string, //提示信息
        width: React.PropTypes.number, //宽度
        height: React.PropTypes.number, //高度
        value: React.PropTypes.oneOfType([React.PropTypes.number, React.PropTypes.string]), //默认值,
        text: React.PropTypes.oneOfType([React.PropTypes.number, React.PropTypes.string]), //默认文本值
        placeholder: React.PropTypes.string, //输入框预留文字
        readonly: React.PropTypes.bool, //是否只读
        required: React.PropTypes.bool, //是否必填
        onlyline: React.PropTypes.bool, //是否只占一行
        hide: React.PropTypes.bool, //是否隐藏
        regexp: React.PropTypes.string, //正则表达式
        invalidTip: React.PropTypes.string, //无效时的提示字符
        style: React.PropTypes.object, //自定义style
        className: React.PropTypes.string, //自定义class
        size: React.PropTypes.oneOf(["none", "default", "large", //兼容性值,与two相同
        "two", "three", "onlyline"]), //组件表单的大小
        position: React.PropTypes.oneOf(["left", "default", "right"]), //组件在表单一行中的位置

        //其他属性
        rows: React.PropTypes.number, //行数
        min: React.PropTypes.number, //最小值,最小长度,
        max: React.PropTypes.number, //最大值,最大长度
        onClick: React.PropTypes.func, //单击事件
        onChange: React.PropTypes.func //值改变事件

    },
    getDefaultProps: function getDefaultProps() {
        return {
            type: "text",
            name: "",
            label: null,
            title: null,
            width: null,
            height: null,
            value: "",
            text: "",
            placeholder: "",
            readonly: false,
            required: false,
            onlyline: false,
            hide: false,
            regexp: null,
            invalidTip: null,
            style: null,
            className: null,
            size: "default",
            position: "default"

        };
    },
    getInitialState: function getInitialState() {
        return {
            hide: this.props.hide,
            value: this.props.value,
            text: this.props.text,
            readonly: this.props.readonly,

            //其他属性
            show: false, //是否显示

            //验证
            required: this.props.required,
            validateClass: "", //验证的样式
            helpShow: "none", //提示信息是否显示
            helpTip: validation["required"], //提示信息
            invalidTip: "",
            areaValue: this.props.value ? this.props.value.replace(/,/g, "\n") : null //多行文本框的值

        };
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        this.setState({
            hide: nextProps.hide,
            min: nextProps.min,
            max: nextProps.max,
            value: nextProps.value,
            areaValue: nextProps.value ? nextProps.value.replace(/,/g, "\n") : null,
            text: nextProps.text,
            readonly: nextProps.readonly,
            required: nextProps.required,
            validateClass: "", //重置验证样式
            helpTip: validation["required"], //提示信息
            show: false

        });
    },
    componentDidMount: function componentDidMount() {

        this.registerClickAway(this.hidePicker, this.refs.picker); //注册全局单击事件
    },
    onBlur: function onBlur() {
        this.refs.label.hideHelp(); //隐藏帮助信息
    },
    changeHandler: function changeHandler(event) {
        this.setState({
            areaValue: event.target.value
        });
    },
    onlineChangeHandler: function onlineChangeHandler(event) {
        this.setState({
            value: event.target.value,
            text: event.target.value,
            areaValue: event.target.value,
            show: false
        });
        if (this.props.onSelect != null) {
            this.props.onSelect(event.target.value, event.target.value, this.props.name);
        }
    },
    showPicker: function showPicker() {
        //显示选择
        if (this.state.readonly) {
            //只读不显示
            return;
        } else {
            this.setState({
                show: !this.state.show
            });
        }
        this.bindClickAway(); //绑定全局单击事件
    },
    hidePicker: function hidePicker() {
        this.setState({
            show: false
        });
        this.unbindClickAway(); //卸载全局单击事件
    },
    clearHandler: function clearHandler() {
        //清除数据
        if (this.props.onSelect != null) {
            this.props.onSelect("", "", this.props.name, null);
        }
        this.setState({
            value: null,
            text: null,
            areaValue: ""
        });
    },
    cancelHandler: function cancelHandler() {
        //取消选择
        this.setState({
            show: false,
            areaValue: this.state.value ? this.state.value.replace(/,/g, "\n") : null //还原之前的值

        });
    },
    onSelectHandler: function onSelectHandler() {
        //确定事件
        this.setState({
            ulShow: false,
            value: this.state.areaValue ? this.state.areaValue.replace(/\n/g, ",") : null,
            text: this.state.areaValue ? this.state.areaValue.replace(/\n/g, ",") : null
        });
        if (this.props.onSelect != null) {
            this.props.onSelect(this.state.areaValue ? this.state.areaValue.replace(/\n/g, ",") : null, this.state.areaValue ? this.state.areaValue.replace(/\n/g, ",") : null, this.props.name);
        }
    },
    render: function render() {
        var size = this.props.onlyline == true ? "onlyline" : this.props.size; //组件大小
        var componentClassName = "wasabi-form-group " + size; //组件的基本样式
        var style = this.setStyle("input"); //设置样式
        var controlStyle = this.props.controlStyle ? this.props.controlStyle : {};
        controlStyle.display = this.state.hide == true ? "none" : "block";
        var inputProps = {
            readOnly: this.state.readonly == true ? "readonly" : null,
            style: style,
            name: this.props.name,
            placeholder: this.props.placeholder === "" || this.props.placeholder == null ? this.state.required ? "必填项" : "" : this.props.placeholder,
            className: "wasabi-form-control  " + (this.props.className != null ? this.props.className : "") //文本框的属性

            //textarea 不支持null值
        };var areaValue = this.state.areaValue;
        if (!areaValue) {
            areaValue = "";
        }
        return React.createElement(
            "div",
            { className: componentClassName + this.state.validateClass, ref: "picker", style: controlStyle },
            React.createElement(Label, { name: this.props.label, ref: "label", hide: this.state.hide, required: this.state.required }),
            React.createElement(
                "div",
                { className: "wasabi-form-group-body", style: { width: !this.props.label ? "100%" : null } },
                React.createElement(
                    "div",
                    { className: "combobox", style: { display: this.props.hide == true ? "none" : "block" } },
                    React.createElement("i", { className: "picker-clear", onClick: this.clearHandler, style: { display: this.state.readonly ? "none" : this.state.value == "" || !this.state.value ? "none" : "inline" } }),
                    React.createElement("i", { className: "pickeradd " + (this.state.show ? "rotate" : ""), onClick: this.showPicker }),
                    React.createElement("input", _extends({ type: "text" }, inputProps, { value: this.state.text, onBlur: this.onBlur, onChange: this.onlineChangeHandler })),
                    React.createElement(
                        "div",
                        { className: "dropcontainter  mutiText " + this.props.position, style: { display: this.state.show == true ? "block" : "none" } },
                        React.createElement(
                            "div",
                            { style: { height: 30, lineHeight: "30px", color: "#aaaaaa", overflow: "hidden" } },
                            this.props.title
                        ),
                        React.createElement("textarea", { value: areaValue, ref: "input", onChange: this.changeHandler,
                            style: { width: "100%", height: 100, border: "1px solid #d7dde2", resize: "none" } }),
                        React.createElement(
                            "div",
                            { className: "ok" },
                            React.createElement(Button, { title: "\u786E\u5B9A", name: "ok", ripple: false, theme: "green", onClick: this.onSelectHandler }),
                            React.createElement(Button, { title: "\u53D6\u6D88", name: "ok", ripple: false, theme: "cancel", onClick: this.cancelHandler })
                        )
                    )
                ),
                React.createElement(
                    "small",
                    { className: "wasabi-help-block " + this.props.position, style: { display: this.state.helpTip && this.state.helpTip != "" ? this.state.helpShow : "none" } },
                    React.createElement(
                        "div",
                        { className: "text" },
                        this.state.helpTip
                    )
                )
            )
        );
    }
});
module.exports = MutiText;

/***/ }),
/* 126 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


//creete by wangzy
//date:2016-11-25
//desc 表单中空的占位组件,方便排版
//属性与状态值保留,可能以后有用
var React = __webpack_require__(1);
var setStyle = __webpack_require__(11);
var None = React.createClass({
    displayName: "None",

    mixins: [setStyle],
    propTypes: {
        name: React.PropTypes.string.isRequired, //字段名
        label: React.PropTypes.oneOfType([React.PropTypes.string, React.PropTypes.element, React.PropTypes.node]), //字段文字说明属性
        width: React.PropTypes.number, //宽度
        height: React.PropTypes.number, //高度
        value: React.PropTypes.oneOfType([React.PropTypes.number, React.PropTypes.string]), //默认值,
        text: React.PropTypes.oneOfType([React.PropTypes.number, React.PropTypes.string]), //默认文本值
        placeholder: React.PropTypes.string, //输入框预留文字
        readonly: React.PropTypes.bool, //是否只读
        required: React.PropTypes.bool, //是否必填
        onlyline: React.PropTypes.bool, //是否只占一行
        hide: React.PropTypes.bool, //是否隐藏
        regexp: React.PropTypes.string, //正则表达式
        invalidTip: React.PropTypes.string, //无效时的提示字符
        style: React.PropTypes.object, //自定义style
        className: React.PropTypes.string, //自定义class
        size: React.PropTypes.oneOf(["none", "default", "large", //兼容性值,与two相同
        "two", "three", "onlyline"]), //组件表单的大小
        position: React.PropTypes.oneOf(["left", "default", "right"]), //组件在表单一行中的位置

        //其他属性
        rows: React.PropTypes.number, //行数
        min: React.PropTypes.number, //最小值,最小长度,
        max: React.PropTypes.number, //最大值,最大长度
        onClick: React.PropTypes.func, //单击事件
        onChange: React.PropTypes.func //值改变事件

    },
    getDefaultProps: function getDefaultProps() {
        return {
            type: "text",
            name: "",
            label: null,
            width: null,
            height: null,
            value: "",
            text: "",
            placeholder: "",
            readonly: false,
            required: false,
            onlyline: false,
            hide: false,
            regexp: null,
            invalidTip: null,
            style: null,
            className: null,
            size: "default",
            position: "default",

            //其他属性
            row: 5,
            min: null,
            max: null,
            onClick: null,
            onChange: null

        };
    },
    getInitialState: function getInitialState() {
        return {
            hide: this.props.hide,
            min: this.props.min,
            max: this.props.max,
            value: this.props.value,
            text: this.props.text,
            readonly: this.props.readonly,
            //验证
            required: this.props.required,
            validateClass: "", //验证的样式
            helpShow: "none", //提示信息是否显示
            helpTip: "", //提示信息
            invalidTip: ""
        };
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        this.setState({
            hide: nextProps.hide,
            min: nextProps.min,
            max: nextProps.max,
            value: nextProps.value,
            text: nextProps.text,
            readonly: nextProps.readonly,
            required: nextProps.required,
            validateClass: "" //重置验证样式
        });
    },

    render: function render() {
        var controlStyle = this.props.controlStyle ? this.props.controlStyle : {};
        controlStyle.display = this.state.hide == true ? "none" : "block";
        var size = this.props.onlyline == true ? "onlyline" : this.props.size; //组件大小
        var componentClassName = "wasabi-form-group " + size + " " + (this.props.className ? this.props.className : ""); //组件的基本样式
        var style = this.setStyle("input"); //设置样式
        return React.createElement(
            "div",
            { className: componentClassName + this.state.validateClass, style: controlStyle },
            React.createElement("div", { className: "wasabi-form-group-body", style: { width: "100%" } })
        );
    }
});
module.exports = None;

/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

/**
 * Created by jiaxuanliang on 2016/7/4.
 */
var React = __webpack_require__(1);
var validation = __webpack_require__(16);
var setStyle = __webpack_require__(11);
var validate = __webpack_require__(22);
var shouldComponentUpdate = __webpack_require__(8);
var Label = __webpack_require__(18);
var ClickAway = __webpack_require__(23);
var PanelPicker = React.createClass({
    displayName: "PanelPicker",

    mixins: [setStyle, validate, shouldComponentUpdate, ClickAway],
    PropTypes: {
        type: React.PropTypes.oneOf[("date", //日期选择
        "datetime", //时间选择
        "daterange", //日期范围选择
        "datetimerange" //日期时间范围选择

        )], //类型
        name: React.PropTypes.string.isRequired, //字段名
        label: React.PropTypes.oneOfType([React.PropTypes.string, React.PropTypes.element, React.PropTypes.node]), //字段文字说明属性
        title: React.PropTypes.string, //提示信息
        width: React.PropTypes.number, //宽度
        height: React.PropTypes.number, //高度
        value: React.PropTypes.oneOfType([React.PropTypes.number, React.PropTypes.string]), //默认值,
        text: React.PropTypes.oneOfType([React.PropTypes.number, React.PropTypes.string]), //默认文本值
        placeholder: React.PropTypes.string, //输入框预留文字
        readonly: React.PropTypes.bool, //是否只读
        required: React.PropTypes.bool, //是否必填
        onlyline: React.PropTypes.bool, //是否只占一行
        hide: React.PropTypes.bool, //是否隐藏
        regexp: React.PropTypes.string, //正则表达式
        invalidTip: React.PropTypes.string, //无效时的提示字符
        style: React.PropTypes.object, //自定义style
        className: React.PropTypes.string, //自定义class
        size: React.PropTypes.oneOf(["none", "default", "large", //兼容性值,与two相同
        "two", "three", "onlyline"]), //组件表单的大小
        position: React.PropTypes.oneOf(["left", "default", "right"]), //组件在表单一行中的位置

        //其他属性
        valueField: React.PropTypes.string, //数据字段值名称
        textField: React.PropTypes.string, //数据字段文本名称
        onSelect: React.PropTypes.func.isRequired

    },
    getDefaultProps: function getDefaultProps() {
        return {
            name: "",
            label: null,
            title: null,
            width: null,
            height: null,
            value: "",
            text: "",
            placeholder: "",
            readonly: false,
            required: false,
            onlyline: false,
            hide: false,
            regexp: null,
            invalidTip: null,
            style: null,
            className: null,
            size: "default",
            position: "default",
            //其他属性
            valueField: "value",
            textField: "text",
            onSelect: null
        };
    },
    getInitialState: function getInitialState() {
        return {
            hide: this.props.hide,
            value: this.props.value,
            text: this.props.text,
            readonly: this.props.readonly,
            show: false,
            //验证
            required: this.props.required,
            validateClass: "", //验证的样式
            helpShow: "none", //提示信息是否显示
            helpTip: validation["required"], //提示信息
            invalidTip: ""
        };
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {

        this.setState({
            hide: nextProps.hide,
            value: nextProps.value,
            text: nextProps.text,
            readonly: nextProps.readonly,

            //验证
            required: this.props.required,
            helpShow: "none", //提示信息是否显示
            invalidTip: "",
            validateClass: "", //重置验证样式
            helpTip: validation["required"] //提示信息
        });
    },
    componentDidMount: function componentDidMount() {

        this.registerClickAway(this.hidePicker, this.refs.picker); //注册全局单击事件
    },
    componentDidUpdate: function componentDidUpdate() {
        if (this.showClick && this.props.showHandler) {
            this.showClick = false;
            this.props.showHandler(this.state.show);
        }
    },
    changeHandler: function changeHandler(event) {},
    onBlur: function onBlur() {
        this.refs.label.hideHelp(); //隐藏帮助信息
    },
    showPicker: function showPicker(type) {
        //显示选择
        if (this.state.readonly) {
            //只读不显示
            return;
        } else {
            this.setState({
                show: type == 1 ? !this.state.show : true
            });
            this.showClick = true; //点击了显示
        }
        this.bindClickAway(); //绑定全局单击事件
    },
    hidePicker: function hidePicker() {
        this.setState({
            show: false
        });
        this.unbindClickAway(); //卸载全局单击事件
    },
    clearHandler: function clearHandler() {
        //清除数据
        if (this.props.onSelect != null) {
            this.props.onSelect("", "", this.props.name, null);
        } else {
            this.setState({
                value: null,
                text: null
            });
        }
    },
    onSelect: function onSelect(value, txt) {
        this.setState({
            show: false,
            value: value,
            text: txt
        });
        this.validate(value);
        if (this.props.onSelect != null) {
            this.props.onSelect(value, txt, this.props.name, null);
        }
    },
    render: function render() {

        var size = this.props.onlyline == true ? "onlyline" : this.props.size; //组件大小
        var componentClassName = "wasabi-form-group " + size; //组件的基本样式
        var style = this.setStyle("input"); //设置样式
        var controlStyle = this.props.controlStyle ? this.props.controlStyle : {};
        controlStyle.display = this.state.hide == true ? "none" : "block";
        var inputProps = {
            readOnly: this.state.readonly == true ? "readonly" : null,
            style: style,
            name: this.props.name,
            placeholder: this.props.placeholder === "" || this.props.placeholder == null ? this.state.required ? "必填项" : "" : this.props.placeholder,
            className: "wasabi-form-control  " + (this.props.className != null ? this.props.className : ""),
            title: this.props.title //文本框的属性
        };var children = React.cloneElement(this.props.children, { onSelect: this.onSelect });
        return React.createElement(
            "div",
            { className: componentClassName + this.state.validateClass, ref: "picker", style: controlStyle },
            React.createElement(Label, { name: this.props.label, ref: "label", hide: this.state.hide, required: this.state.required }),
            React.createElement(
                "div",
                { className: "wasabi-form-group-body", style: { width: !this.props.label ? "100%" : null } },
                React.createElement(
                    "div",
                    { className: "combobox", style: { display: this.props.hide == true ? "none" : "block" }
                    },
                    React.createElement("i", { className: "picker-clear", onClick: this.clearHandler, style: { display: (this.state.readonly ? "none" : this.state.value == "" || !this.state.value) ? "none" : "inline" } }),
                    React.createElement("i", { className: "pickericon " + (this.state.show ? "rotate" : ""), onClick: this.showPicker.bind(this, 1) }),
                    React.createElement("input", _extends({ type: "text" }, inputProps, { value: this.state.text, onBlur: this.onBlur, onClick: this.showPicker.bind(this, 2), onChange: this.changeHandler })),
                    React.createElement(
                        "div",
                        { className: "dropcontainter panelpicker " + this.props.position,
                            style: { display: this.state.show == true ? "block" : "none" } },
                        children
                    )
                ),
                React.createElement(
                    "small",
                    { className: "wasabi-help-block " + this.props.position,
                        style: { display: this.state.helpTip && this.state.helpTip != "" ? this.state.helpShow : "none" } },
                    React.createElement(
                        "div",
                        { className: "text" },
                        this.state.helpTip
                    )
                )
            )
        );
    }
});

module.exports = PanelPicker;

/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/*
 create by wangzy
 date:2016-05-23
 desc:级联选择组件
 采用了es6语法
 */
var React = __webpack_require__(1);
__webpack_require__(310);
var unit = __webpack_require__(5);

var FetchModel = __webpack_require__(13);
var PickerModel = __webpack_require__(141);
var validation = __webpack_require__(16);
var setStyle = __webpack_require__(11);
var validate = __webpack_require__(22);
var showUpdate = __webpack_require__(21);
var shouldComponentUpdate = __webpack_require__(8);
var Label = __webpack_require__(18);
var Message = __webpack_require__(14);
var ClickAway = __webpack_require__(23);
var Picker = React.createClass({
    displayName: "Picker",

    mixins: [setStyle, validate, showUpdate, shouldComponentUpdate, ClickAway],
    propTypes: {
        name: React.PropTypes.string.isRequired, //字段名
        label: React.PropTypes.oneOfType([React.PropTypes.string, React.PropTypes.element, React.PropTypes.node]), //字段文字说明属性
        title: React.PropTypes.string, //提示信息
        width: React.PropTypes.number, //宽度
        height: React.PropTypes.number, //高度
        value: React.PropTypes.oneOfType([React.PropTypes.number, React.PropTypes.string]), //默认值,
        text: React.PropTypes.oneOfType([React.PropTypes.number, React.PropTypes.string]), //默认文本值
        placeholder: React.PropTypes.string, //输入框预留文字
        readonly: React.PropTypes.bool, //是否只读
        required: React.PropTypes.bool, //是否必填
        onlyline: React.PropTypes.bool, //是否只占一行
        hide: React.PropTypes.bool, //是否隐藏
        regexp: React.PropTypes.string, //正则表达式
        invalidTip: React.PropTypes.string, //无效时的提示字符
        style: React.PropTypes.object, //自定义style
        className: React.PropTypes.string, //自定义class
        size: React.PropTypes.oneOf(["none", "default", "large", //兼容性值,与two相同
        "two", "three", "onlyline"]), //组件表单的大小
        position: React.PropTypes.oneOf(["left", "default", "right"]), //组件在表单一行中的位置

        //其他属性
        valueField: React.PropTypes.string, //数据字段值名称
        textField: React.PropTypes.string, //数据字段文本名称
        url: React.PropTypes.string, //ajax的后台地址
        params: React.PropTypes.object, //查询参数
        dataSource: React.PropTypes.string, //ajax的返回的数据源中哪个属性作为数据源,为null时直接后台返回的数据作为数据源
        data: React.PropTypes.array, //自定义数据源
        onSelect: React.PropTypes.func, //选中后的事件，回传，value,与text,data

        //其他属性
        secondUrl: React.PropTypes.string, //第二层节点的后台地址,
        secondParams: React.PropTypes.object, //第二层节点的后台参数
        secondParamsKey: React.PropTypes.string, //第二层节点的后台参数中传递一级节点value值的参数名称
        thirdUrl: React.PropTypes.string, //第三层节点的后台地址，
        thirdParams: React.PropTypes.object, //第三层节点的后台参数
        thirdParamsKey: React.PropTypes.string, //第三层节点的后台参数中传递二级节点value值的参数名称
        hotTitle: React.PropTypes.string, //热门选择标题
        hotData: React.PropTypes.array //热门选择的数据
    },
    getDefaultProps: function getDefaultProps() {
        return {
            name: "",
            label: null,
            title: null,
            width: null,
            height: null,
            value: "",
            text: "",
            placeholder: "",
            readonly: false,
            required: false,
            onlyline: false,
            hide: false,
            regexp: null,
            invalidTip: null,
            style: null,
            className: null,
            size: "default",
            position: "default",

            //其他属性
            valueField: "value",
            textField: "text",
            url: null,
            params: null,
            dataSource: "data",
            data: null,
            onSelect: null,
            //其他属性
            secondUrl: null,
            secondParams: null,
            secondParamsKey: null,
            thirdUrl: null,
            thirdParams: null,
            thirdParamsKey: null,
            hotTitle: "热门选择",
            hotData: null
        };
    },
    getInitialState: function getInitialState() {
        return {
            hide: this.props.hide,
            value: this.props.value,
            text: this.props.text,
            readonly: this.props.readonly,

            //其他属性
            params: unit.clone(this.props.params),
            provinceActiveIndex: null, //一级激活节点下标
            cityActiveIndex: null, //二级激活节点下标
            distinctActiveIndex: null, //三级激活节点下标
            show: false, //是否显示
            //其他属性
            secondParams: this.props.secondParams,
            secondParamsKey: this.props.secondParamsKey,
            thirdParams: this.props.thirdParams,
            thirdParamsKey: this.props.thirdParamsKey,
            //验证
            required: this.props.required,
            validateClass: "", //验证的样式
            helpShow: "none", //提示信息是否显示
            helpTip: validation["required"], //提示信息
            invalidTip: ""
        };
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        if (nextProps.data != null && nextProps.data instanceof Array && (!nextProps.url || nextProps.url == "")) {
            this.setState({
                hide: nextProps.hide,
                data: nextProps.data,
                value: nextProps.value,
                text: nextProps.text,
                readonly: nextProps.readonly,
                required: nextProps.required,
                params: unit.clone(nextProps.params),
                secondParams: nextProps.secondParams,
                secondParamsKey: nextProps.secondParamsKey,
                thirdParams: nextProps.thirdParams,
                thirdParamsKey: nextProps.thirdParamsKey,
                validateClass: "", //重置验证样式
                helpTip: validation["required"], //提示信息
                show: false

            });
        } else {
            if (this.showUpdate(nextProps.params)) {
                //如果不相同则更新
                var fetchmodel = new FetchModel(this.props.url, this.loadProvinceSuccess, nextProps.params, this.loadError);
                console.log("picker", fetchmodel);
                unit.fetch.post(fetchmodel);
            } else {}
            this.setState({
                hide: nextProps.hide,
                value: nextProps.value,
                text: nextProps.text,
                readonly: nextProps.readonly,
                required: nextProps.required,

                params: unit.clone(nextProps.params),
                secondParams: nextProps.secondParams,
                secondParamsKey: nextProps.secondParamsKey,
                thirdParams: nextProps.thirdParams,
                thirdParamsKey: nextProps.thirdParamsKey,
                validateClass: "", //重置验证样式
                helpTip: validation["required"], //提示信息
                show: false
            });
        }
    },
    componentDidMount: function componentDidMount() {
        if (this.props.url != null) {
            var fetchmodel = new FetchModel(this.props.url, this.loadProvinceSuccess, this.state.params, this.loadError);
            console.log("picker", fetchmodel);
            unit.fetch.post(fetchmodel);
        }
        this.registerClickAway(this.hidePicker, this.refs.picker); //注册全局单击事件
    },

    loadProvinceSuccess: function loadProvinceSuccess(data) {
        //一级节点的数据加载成功
        var provinceData = []; //一级节点数据
        var realData = data;
        //获取真实数据
        if (this.props.dataSource == null) {} else {
            realData = unit.getSource(data, this.props.dataSource);
        }
        provinceData = this.setPickerModel(realData); //生成标准格式model
        this.setState({
            data: provinceData
        });
    },
    loadError: function loadError(errorCode, message) {
        //查询失败
        console.log("picker-error", errorCode, message);
        Message.error(message);
    },
    changeHandler: function changeHandler(event) {},
    onBlur: function onBlur() {
        this.refs.label.hideHelp(); //隐藏帮助信息
    },
    showPicker: function showPicker(type) {
        //显示选择
        if (this.state.readonly) {
            //只读不显示
            return;
        } else {
            this.setState({
                show: type == 1 ? !this.state.show : true
            });
        }
        this.bindClickAway(); //绑定全局单击事件
    },
    hidePicker: function hidePicker() {
        this.setState({
            show: false
        });
        this.unbindClickAway(); //卸载全局单击事件
    },
    clearHandler: function clearHandler() {
        //清除数据
        if (this.props.onSelect != null) {
            this.props.onSelect("", "", this.props.name, null);
        } else {
            this.setState({
                value: null,
                text: null
            });
        }
    },
    setPickerModel: function setPickerModel(data) {
        //根据数据生成标准格式
        var realData = [];
        for (var index = 0; index < data.length; index++) {
            var pickerModel = new PickerModel(data[index][this.props.valueField], data[index][this.props.textField]);
            realData.push(pickerModel);
        }
        return realData;
    },
    activeHot: function activeHot(value, text) {
        this.setState({
            show: false,
            value: value,
            text: text
        });
        this.validate(value); //验证
        if (this.props.onSelect != null) {

            this.props.onSelect(value, text, this.props.name);
        }
    },

    flodChildren: function flodChildren(data) {
        //将节点折叠起来
        for (var index = 0; index < data.length; index++) {
            data[index].expand = false;
            if (data[index].childrens && data[index].childrens instanceof Array) {
                data[index].childrens = this.flodChildren(data[index].childrens); //遍历
            }
        }
        return data;
    },
    activeProvince: function activeProvince(currentProvinceIndex, currentProvinceValue) {
        //一级节点激活
        var newData = this.state.data;
        var selectValue = this.state.value;
        var selectText = this.state.text;
        if (this.state.provinceActiveIndex === currentProvinceIndex) {
            //当前节点为激活节点
            var newData = this.state.data;
            if (newData[currentProvinceIndex].childrens instanceof Array && newData[currentProvinceIndex].childrens.length > 0) {
                //有子节点则不执行选中事件
                var expand = newData[currentProvinceIndex].expand;
                newData = this.flodChildren(newData); //折叠
                newData[currentProvinceIndex].expand = !expand; //如果为展开状态则隐藏,否则展开
            } else {
                //没有则立即执行选中事件
                selectValue = newData[currentProvinceIndex].value;
                selectText = newData[currentProvinceIndex].text;
                if (this.props.onSelect != null) {
                    this.props.onSelect(selectValue, selectText, this.props.name, null);
                }
            }
            this.validate(selectValue); //验证
            this.setState({
                value: selectValue,
                text: selectText,
                data: newData,
                provinceActiveIndex: currentProvinceIndex,
                cityActiveIndex: null,
                distinctActiveIndex: null
            });
        } else {
            //当前节点不是激活节点
            if (this.props.secondUrl != null && this.state.data[currentProvinceIndex].childrens == null) {
                //存在二级节点url并且没有查询过

                var url = this.props.secondUrl;
                var params = this.state.secondParams;
                if ((typeof params === "undefined" ? "undefined" : _typeof(params)) == "object") {
                    //判断是否为对象
                    params[this.state.secondParamsKey] = currentProvinceValue;
                } else {
                    params = {};
                    if (this.state.secondParamsKey != null) {
                        params[this.state.secondParamsKey] = currentProvinceValue;
                    }
                }
                var fetchmodel = new FetchModel(url, this.loadCitySuccess.bind(this, currentProvinceIndex), params, this.loadError);
                console.log("picker-second", fetchmodel);
                unit.fetch.post(fetchmodel);
            } else {
                //没有二级节点的url
                var newData = this.state.data;

                var expand = newData[currentProvinceIndex].expand;
                newData = this.flodChildren(newData); //折叠
                newData[currentProvinceIndex].expand = !expand;

                if (newData[currentProvinceIndex].childrens instanceof Array && newData[currentProvinceIndex].childrens.length > 0) {
                    //有子节点则不执行选中事件
                } else {
                    //没有则立即执行选中事件
                    selectValue = newData[currentProvinceIndex].value;
                    selectText = newData[currentProvinceIndex].text;
                    if (this.props.onSelect != null) {
                        this.props.onSelect(selectValue, selectText, this.props.name, null);
                    }
                }
                this.validate(selectValue); //验证
                this.setState({
                    value: selectValue,
                    text: selectText,
                    data: newData,
                    provinceActiveIndex: currentProvinceIndex,
                    cityActiveIndex: null,
                    distinctActiveIndex: null
                });
            }
        }
    },
    loadCitySuccess: function loadCitySuccess(currentProviceIndex, data) {
        //二级节点的数据加载成功
        var cityData = []; //当前一级节点的二级节点数据
        var realData = data;
        var newData = this.state.data;
        var selectValue = this.state.value;
        var selectText = this.state.text;
        //获取真实数据
        if (this.props.dataSource == null) {} else {
            realData = unit.getSource(data, this.props.dataSource);
        }
        cityData = this.setPickerModel(realData); //生成二级节点数据模型
        if (cityData instanceof Array && cityData.length > 0) {
            //有数据
            newData[currentProviceIndex].childrens = cityData; //将查询的二级节点赋值给一级激活节点
            var expand = newData[currentProviceIndex].expand;
            newData = this.flodChildren(newData); //折叠
            newData[currentProviceIndex].expand = !expand; //当前一级节点展开

        } else {
            //没有数据,则直接执行选择事件
            selectValue = newData[currentProviceIndex].value;
            selectText = newData[currentProviceIndex].text;
            if (this.props.onSelect != null) {
                this.props.onSelect(selectValue, selectText, this.props.name, null);
            }
        }
        this.validate(selectValue); //验证
        this.setState({
            value: selectValue,
            text: selectText,
            data: newData,
            provinceActiveIndex: currentProviceIndex,
            cityActiveIndex: null,
            distinctActiveIndex: null
        });
    },
    activeCity: function activeCity(currentProvinceIndex, currentCityIndex, currentCityValue) {
        //二级节点激活

        var newData = this.state.data;
        var selectValue = this.state.value;
        var selectText = this.state.text;
        if (this.state.provinceActiveIndex === currentProvinceIndex && this.state.cityActiveIndex === currentCityIndex) {
            //当前节点为激活节点
            if (newData[this.state.provinceActiveIndex].childrens[currentCityIndex].childrens instanceof Array && newData[this.state.provinceActiveIndex].childrens[currentCityIndex].childrens.length > 0) {
                //有子节点(三级节点)则不执行选中事件
                var expand = newData[this.state.provinceActiveIndex].childrens[currentCityIndex].expand;
                newData = this.flodChildren(newData); //折叠
                newData[this.state.provinceActiveIndex].expand = true; //一级节点展开
                newData[this.state.provinceActiveIndex].childrens[currentCityIndex].expand = !expand; //如果为展开状态则隐藏,否则展开
            } else {
                //没有则立即执行选中事件
                selectValue = newData[this.state.provinceActiveIndex].value + "," + newData[this.state.provinceActiveIndex].childrens[currentCityIndex].value;
                selectText = newData[this.state.provinceActiveIndex].text + "," + newData[this.state.provinceActiveIndex].childrens[currentCityIndex].text;
                if (this.props.onSelect != null) {
                    this.props.onSelect(selectValue, selectText, this.props.name, null);
                }
            }
            this.validate(selectValue); //验证
            this.setState({
                value: selectValue,
                text: selectText,
                data: newData,
                cityActiveIndex: currentCityIndex,
                distinctActiveIndex: null
            });
        } else {
            if (this.props.thirdUrl != null && this.state.data[this.state.provinceActiveIndex].childrens[currentCityIndex].childrens == null) {
                //存在三级节点url并且没有查询过
                var url = this.props.thirdUrl;
                var params = this.state.thirdParams;
                if ((typeof params === "undefined" ? "undefined" : _typeof(params)) == "object") {
                    //判断是否为对象
                    params[this.state.thirdParamsKey] = currentCityValue;
                } else {
                    params = {};
                    if (this.state.thirdParamsKey != null) {
                        params[this.state.thirdParamsKey] = currentCityValue;
                    }
                }
                var fetchmodel = new FetchModel(url, this.loadDistinctSuccess.bind(this, currentCityIndex), params, this.loadError);
                console.log("picker-third", fetchmodel);
                unit.fetch.post(fetchmodel);
            } else {

                for (var index = 0; index < newData[this.state.provinceActiveIndex].childrens.length; index++) {
                    newData[this.state.provinceActiveIndex].childrens[index].expand = false;
                }
                var expand = newData[this.state.provinceActiveIndex].childrens[currentCityIndex].expand;
                newData = this.flodChildren(newData); //折叠

                newData[this.state.provinceActiveIndex].expand = true; //一级节点展开
                newData[this.state.provinceActiveIndex].childrens[currentCityIndex].expand = !expand;

                if (newData[this.state.provinceActiveIndex].childrens[currentCityIndex].childrens instanceof Array && newData[this.state.provinceActiveIndex].childrens[currentCityIndex].childrens.length > 0) {
                    //有子节点(三级节点)则不执行选中事件
                } else {
                    //没有则立即执行选中事件
                    selectValue = newData[this.state.provinceActiveIndex].value + "," + newData[this.state.provinceActiveIndex].childrens[currentCityIndex].value;
                    selectText = newData[this.state.provinceActiveIndex].text + "," + newData[this.state.provinceActiveIndex].childrens[currentCityIndex].text;
                    if (this.props.onSelect != null) {
                        this.props.onSelect(selectValue, selectText, this.props.name, null);
                    }
                }
                this.validate(selectValue); //验证
                this.setState({
                    value: selectValue,
                    text: selectText,
                    data: newData,
                    cityActiveIndex: currentCityIndex,
                    distinctActiveIndex: null
                });
            }
        }
    },
    loadDistinctSuccess: function loadDistinctSuccess(currentCityIndex, data) {
        //三级节点查询成功
        var distinctData = []; //当前二级节点的二级节点数据
        var realData = data;
        var selectValue = this.state.value;
        var selectText = this.state.text;
        //获取真实数据
        if (this.props.dataSource == null) {} else {
            realData = unit.getSource(data, this.props.dataSource);
        }
        distinctData = this.setPickerModel(realData); //生成二级节点数据模型
        var newData = this.state.data;
        if (distinctData instanceof Array && distinctData.length > 0) {
            //有数据
            for (var index = 0; index < newData[this.state.provinceActiveIndex].childrens.length; index++) {
                newData[this.state.provinceActiveIndex].childrens[index].expand = false;
            }
            newData[this.state.provinceActiveIndex].childrens[currentCityIndex].childrens = distinctData; //将查询的三级节点赋值给二级激活节点
            var expand = newData[this.state.provinceActiveIndex].childrens[currentCityIndex].expand;
            newData = this.flodChildren(newData); //折叠
            newData[this.state.provinceActiveIndex].expand = true; //一级节点展开
            newData[this.state.provinceActiveIndex].childrens[currentCityIndex].expand = !expand;
        } else {
            selectValue = newData[this.state.provinceActiveIndex].value + "," + newData[this.state.provinceActiveIndex].childrens[currentCityIndex].value;
            selectText = newData[this.state.provinceActiveIndex].text + "," + newData[this.state.provinceActiveIndex].childrens[currentCityIndex].text;
            if (this.props.onSelect != null) {
                this.props.onSelect(selectValue, selectText, this.props.name, null);
            }
        }
        this.validate(selectValue); //验证
        this.setState({
            value: selectValue,
            text: selectText,
            data: newData,
            cityActiveIndex: currentCityIndex,
            distinctActiveIndex: null

        });
    },
    activeDistinct: function activeDistinct(currentDistinctIndex) {
        //三级节点激活
        var newData = this.state.data;
        var selectValue = this.state.value;
        var selectText = this.state.text;
        for (var index = 0; index < newData[this.state.provinceActiveIndex].childrens[this.state.cityActiveIndex].childrens.length; index++) {
            newData[this.state.provinceActiveIndex].childrens[this.state.cityActiveIndex].childrens[index].expand = false;
        }
        newData = this.flodChildren(newData); //折叠
        newData[this.state.provinceActiveIndex].expand = true;newData[this.state.provinceActiveIndex].childrens[this.state.cityActiveIndex].expand = true;
        newData[this.state.provinceActiveIndex].childrens[this.state.cityActiveIndex].childrens[currentDistinctIndex].expand = true;
        selectValue = newData[this.state.provinceActiveIndex].value + "," + newData[this.state.provinceActiveIndex].childrens[this.state.cityActiveIndex].value + "," + newData[this.state.provinceActiveIndex].childrens[this.state.cityActiveIndex].childrens[currentDistinctIndex].value;
        selectText = newData[this.state.provinceActiveIndex].text + "," + newData[this.state.provinceActiveIndex].childrens[this.state.cityActiveIndex].text + "," + newData[this.state.provinceActiveIndex].childrens[this.state.cityActiveIndex].childrens[currentDistinctIndex].text;

        if (this.props.onSelect != null) {
            this.props.onSelect(selectValue, selectText, this.props.name, null);
        }
        this.validate(selectValue); //验证
        this.setState({
            value: selectValue,
            text: selectText,
            data: newData,
            distinctActiveIndex: currentDistinctIndex
        });
    },
    renderHot: function renderHot() {
        var _this = this;

        //热门选择
        if (this.props.hotData instanceof Array) {
            var controlArray = [];
            this.props.hotData.map(function (item, index) {
                controlArray.push(React.createElement(
                    "li",
                    { key: "hot" + item.text, className: "hot-item", onClick: _this.activeHot.bind(_this, item.value, item.text), title: item.text },
                    item.text
                ));
            });
            return React.createElement(
                "div",
                null,
                React.createElement(
                    "div",
                    { className: "hot-wrap" },
                    React.createElement(
                        "p",
                        { style: { display: this.props.hotTitle && this.props.hotTitle != "" ? "block" : "none" } },
                        this.props.hotTitle
                    ),
                    React.createElement(
                        "ul",
                        null,
                        controlArray
                    )
                ),
                React.createElement(
                    "div",
                    { className: "line" },
                    " "
                )
            );
        } else {
            return null;
        }
    },
    renderProvince: function renderProvince() {
        var _this2 = this;

        //一级节点渲染
        var provinceComponents = [];
        if (this.state.data instanceof Array) {
            this.state.data.map(function (child, index) {
                var left = index % 5 * -65;

                provinceComponents.push(React.createElement(
                    "li",
                    { key: "province" + index, className: "picker-container  " + (child.expand ? "expand" : "") },
                    React.createElement(
                        "ul",
                        { className: "picker-container-wrap", style: { display: child.expand ? "block" : "none", left: left } },
                        _this2.renderCity(index, child.childrens)
                    ),
                    React.createElement(
                        "div",
                        { className: "picker-container-name " + (child.expand ? "expand" : ""), onClick: _this2.activeProvince.bind(_this2, index, child.value), title: child.text },
                        child.text
                    )
                ));
            });
            return provinceComponents;
        } else {
            return null;
        }
    },

    renderCity: function renderCity(provinceIndex, cityData) {
        var _this3 = this;

        //二级节点渲染
        var cityComponents = [];
        if (cityData instanceof Array) {
            cityData.map(function (child, index) {
                var left = index % 4 * -80;
                if (index % 4 == 0) {
                    left = -14;
                }

                cityComponents.push(React.createElement(
                    "li",
                    { key: "city" + index, className: "picker-container  " + (child.expand ? "expand" : "") },
                    React.createElement(
                        "ul",
                        { className: "picker-container-wrap", style: { display: child.expand ? "block" : "none", left: left } },
                        _this3.renderDistinct(child.childrens)
                    ),
                    React.createElement(
                        "div",
                        { className: "picker-container-name " + (child.expand ? "expand" : ""), onClick: _this3.activeCity.bind(_this3, provinceIndex, index, child.value), title: child.text },
                        child.text
                    )
                ));
            });
            return cityComponents;
        } else {
            return null;
        }
    },
    renderDistinct: function renderDistinct(distinctData) {
        var _this4 = this;

        //三级节点渲染
        var distinctComponents = [];
        if (distinctData instanceof Array) {
            distinctData.map(function (child, index) {
                distinctComponents.push(React.createElement(
                    "li",
                    { key: "distinct" + index, className: "pickeritem " + (_this4.state.distinctActiveIndex === index ? "expand" : ""), onClick: _this4.activeDistinct.bind(_this4, index, child.value), title: child.text },
                    child.text
                ));
            });
            return distinctComponents;
        } else {
            return null;
            return null;
        }
    },
    render: function render() {
        var size = this.props.onlyline == true ? "onlyline" : this.props.size; //组件大小
        var componentClassName = "wasabi-form-group " + size; //组件的基本样式
        var style = this.setStyle("input"); //设置样式
        var controlStyle = this.props.controlStyle ? this.props.controlStyle : {};
        controlStyle.display = this.state.hide == true ? "none" : "block";
        var inputProps = {
            readOnly: this.state.readonly == true ? "readonly" : null,
            style: style,
            name: this.props.name,
            placeholder: this.props.placeholder === "" || this.props.placeholder == null ? this.state.required ? "必填项" : "" : this.props.placeholder,
            className: "wasabi-form-control  " + (this.props.className != null ? this.props.className : ""),
            title: this.props.title //文本框的属性
        };var control = this.renderProvince();

        return React.createElement(
            "div",
            { className: componentClassName + this.state.validateClass, ref: "picker", style: controlStyle },
            React.createElement(Label, { name: this.props.label, ref: "label", hide: this.state.hide, required: this.state.required }),
            React.createElement(
                "div",
                { className: "wasabi-form-group-body", style: { width: !this.props.label ? "100%" : null } },
                React.createElement(
                    "div",
                    { className: "combobox", style: { display: this.props.hide == true ? "none" : "block" } },
                    React.createElement("i", { className: "picker-clear", onClick: this.clearHandler, style: { display: this.state.readonly ? "none" : this.state.value == "" || !this.state.value ? "none" : "inline" } }),
                    React.createElement("i", { className: "pickericon " + (this.state.show ? "rotate" : ""), onClick: this.showPicker.bind(this, 1) }),
                    React.createElement("input", _extends({ type: "text" }, inputProps, { onBlur: this.onBlur, value: this.state.text, onClick: this.showPicker.bind(this, 2), onChange: this.changeHandler })),
                    React.createElement(
                        "div",
                        { className: "dropcontainter  picker " + this.props.position, style: { display: this.state.show == true ? "block" : "none" } },
                        React.createElement(
                            "div",
                            { className: "picker" },
                            this.renderHot(),
                            React.createElement(
                                "ul",
                                { className: "wrap" },
                                React.createElement(
                                    "p",
                                    null,
                                    this.props.placeholder
                                ),
                                this.renderProvince()
                            )
                        )
                    )
                ),
                React.createElement(
                    "small",
                    { className: "wasabi-help-block " + this.props.position, style: { display: this.state.helpTip && this.state.helpTip != "" ? this.state.helpShow : "none" } },
                    React.createElement(
                        "div",
                        { className: "text" },
                        this.state.helpTip
                    )
                )
            )
        );
    }
});
module.exports = Picker;

/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

//create by wangzy
//date:2016-04-05后开始独立改造
//desc:页面筛选条件组件
__webpack_require__(306);
var React = __webpack_require__(1);
var Input = __webpack_require__(53);
var Button = __webpack_require__(10);
var unit = __webpack_require__(5);
var shouldComponentUpdate = __webpack_require__(8);
var SearchBar = React.createClass({
    displayName: "SearchBar",

    mixins: [shouldComponentUpdate],
    propTypes: {
        model: React.PropTypes.array.isRequired,
        searchTitle: React.PropTypes.string,
        searchHide: React.PropTypes.bool,
        filterHandler: React.PropTypes.func.isRequired,
        expandHandler: React.PropTypes.func,
        width: React.PropTypes.number

    },
    getDefaultProps: function getDefaultProps() {
        return {
            model: [], //表单数据模型
            searchTitle: "查询", //查询按钮的标题
            searchHide: false, //是否隐藏按钮
            filterHandler: null, //提交成功后的回调事件
            className: "",
            expandHandler: null, //展开与折叠事件
            width: null
        };
    },
    getInitialState: function getInitialState() {
        //初始化时就获取可用宽度,如果每次更新获取,会产生晃动
        if (window.screen.availWidth < document.documentElement.clientWidth) {
            //屏幕可用宽度小,有滚动条
            this.availWidth = window.screen.availWidth - 50;
        } else {
            //没有滚动条  现在每个页面留有左右20像素的边距
            this.availWidth = window.screen.availWidth - 40; //防止后期出现滚动条,而产生样式变形,先减去滚动条宽度
        }

        return {
            model: this.props.model,
            dropType: "wasabi-button wasabi-searchbar-down" //折叠按钮样式
        };
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        //屏幕可用宽度,


        this.setState({
            model: nextProps.model,
            style: nextProps.style,
            className: nextProps.className

        });
        //this.forceUpdate();//?强制刷新
    },
    changeHandler: function changeHandler(value, text, name) {
        //子组件值发生改变时
        var newModel = this.state.model;
        for (var i = 0; i < newModel.length; i++) {
            if (newModel[i].name == name) {
                newModel[i].value = value;
                newModel[i].text = text;
                break;
            }
        }
        this.setState({
            model: newModel
        });
    },
    clearData: function clearData() {
        //清空数据
        var newModel = this.state.model;
        for (var i = 0; i < newModel.length; i++) {
            newModel[i].value = null;
            newModel[i].text = null;
        }
        this.setState({
            model: newModel
        });
    },
    getData: function getData() {
        var data = {};
        for (var v in this.refs) {
            if (this.refs[v].props.type == "button") {
                continue; //如果按钮则跳过
            }
            if (this.refs[v].props.name.indexOf(",") > -1) {
                //含有多个字段
                var nameSplit = this.refs[v].props.name.split(",");
                if (this.refs[v].state.value && this.refs[v].state.value != "") {
                    var valueSplit = this.refs[v].state.value.split(",");
                    for (var index = 0; index < nameSplit.length; index++) {
                        if (index < valueSplit.length) {
                            data[nameSplit[index]] = valueSplit[index];
                        }
                    }
                } else {
                    for (var _index = 0; _index < nameSplit.length; _index++) {
                        data[nameSplit[_index]] = null;
                    }
                }
            } else {
                data[this.refs[v].props.name] = this.refs[v].state.value;
            }
        }
        return data;
    },
    getTextData: function getTextData() {
        var textData = {}; //各个字段对应的文本值
        for (var v in this.refs) {
            if (this.refs[v].props.name.indexOf(",") > -1) {
                //含有多个字段
                var nameSplit = this.refs[v].props.name.split(",");
                if (this.refs[v].state.value && this.refs[v].state.value != "") {

                    var textSplit = this.refs[v].state.text.split(","); //文本值
                    for (var index = 0; index < nameSplit.length; index++) {
                        if (index < textSplit.length) {
                            textData[nameSplit[index]] = textSplit[index];
                        }
                    }
                } else {
                    for (var _index2 = 0; _index2 < nameSplit.length; _index2++) {
                        textData[nameSplit[_index2]] = "";
                    }
                }
            } else {
                textData[this.refs[v].props.name] = this.refs[v].state.text;
            }
        }
        return textData;
    },
    onSubmit: function onSubmit() {
        //筛选查询开始
        var data = {}; //各个字段对应的值
        var textData = {}; //各个字段对应的文本值
        var isva = true;
        for (var v in this.refs) {
            if (isva) {
                //验证成功，则继续验证
                isva = this.refs[v].validate();
            } else {
                //不成功则继续验证但不再回执
                this.refs[v].validate();
            }
            if (this.refs[v].props.name.indexOf(",") > -1) {
                //含有多个字段
                var nameSplit = this.refs[v].props.name.split(",");
                if (this.refs[v].state.value && this.refs[v].state.value != "") {
                    var valueSplit = this.refs[v].state.value.split(",");
                    var textSplit = this.refs[v].state.text.split(","); //文本值
                    for (var index = 0; index < nameSplit.length; index++) {
                        if (index < valueSplit.length) {
                            data[nameSplit[index]] = valueSplit[index];
                            textData[nameSplit[index]] = textSplit[index];
                        }
                    }
                } else {
                    for (var _index3 = 0; _index3 < nameSplit.length; _index3++) {
                        data[nameSplit[_index3]] = null;
                        textData[nameSplit[_index3]] = "";
                    }
                }
            } else {
                data[this.refs[v].props.name] = this.refs[v].state.value;
                textData[this.refs[v].props.name] = this.refs[v].state.text;
            }
        }
        if (isva) {
            this.props.filterHandler(data, textData);
        }
    },
    getComponentData: function getComponentData(name) {
        //只读属性，获取对应的字段的数据源
        return JSON.parse(window.localStorage.getItem(name + "data"));
    },
    expandHandler: function expandHandler() {
        var expand = false;
        if (this.state.dropType == "wasabi-button wasabi-searchbar-down") {
            this.setState({
                dropType: "wasabi-button wasabi-searchbar-up"

            });
            expand = true;
        } else {
            this.setState({
                dropType: "wasabi-button wasabi-searchbar-down"
            });
        }
        if (this.props.expandHandler != null) {
            this.props.expandHandler(expand);
        }
    },
    setColumns: function setColumns() {
        //计算列数及样式
        var style = {}; //表单栏样式
        if (this.props.style) {
            style = this.props.style;
        }

        var columns = 0; //每一行的列数
        //表单实际宽度
        var actualWidth = this.props.width ? this.props.width : this.availWidth; //总宽度

        var leftWidth = actualWidth - 130; //左侧表单宽度

        var columnClass = ""; //列样式
        if (this.state.columns) {
            //如果自定义了,则以自定义为标准
            columns = this.state.columns;
        } else {
            //否则自动计算
            if (leftWidth <= 610) {
                //一列
                columns = 1;
            } else if (leftWidth >= 611 && leftWidth <= 909) {
                //两列
                columns = 2;
            } else if (leftWidth >= 910 && leftWidth <= 1229) {
                //三列
                columns = 3;
            } else if (leftWidth >= 1230) {
                //四列
                columns = 4;
            }
        }
        if (this.state.model.length < columns) {
            //如果数据小于列数
            columns = this.state.model.length;
            if (columns <= 2) {
                //如果只有两列的话,重新定义宽度
                actualWidth = 800;
                leftWidth = actualWidth - 130;
            }
        }
        switch (columns) {
            case 1:
                columnClass = "oneline";
                break;
            case 2:
                columnClass = "twoline";
                break;
            case 3:
                columnClass = "threeline";
                break;
            case 4:
                columnClass = "fourline";
                break;

        }
        style.width = actualWidth; //设置表单的宽度

        this.state.dropType == "wasabi-button wasabi-searchbar-down" ? style.height = 54 : style.height = null; //判断高度

        var result = {
            style: style,
            columns: columns,
            columnClass: columnClass,
            leftWidth: leftWidth
        };

        return result;
    },

    render: function render() {
        var _this = this;

        if (this.state.model instanceof Array) {} else {
            return null;
        }
        var result = this.setColumns(); //得计算列的结果
        var props = {
            className: "wasabi-searchbar " + result.columnClass + " " + this.props.className,
            style: result.style
        };
        var orderIndex = 0; //表单组件在表单的序号,
        return React.createElement(
            "div",
            props,
            React.createElement(
                "div",
                { className: "leftform", style: { width: result.leftWidth } },
                this.state.model.map(function (child, index) {
                    var position = orderIndex % result.columns; //求余,计算在表单中列位置
                    if (position == 0) {
                        position = "left";
                    } else if (position == result.columns - 1) {
                        position = "right";
                    } else {
                        position = "default";
                    }
                    var size = child.onlyline == true ? "onlyline" : child.size; //组件大小
                    if (size == "default") {
                        orderIndex++;
                    } else if (size == "large" || size == "two") {

                        if (result.columns == 1) {
                            orderIndex++; //每行只有一列,算一列
                        } else {
                            orderIndex += 2; //算两列
                        }
                    } else if (size == "three") {

                        if (result.columns == 1 || result.columns == 2) {
                            orderIndex++; //每行只有一列或者两列,算一列
                        } else {
                            orderIndex += 3; //算三列
                        }
                    } else if (size == "onlyline") {
                        orderIndex += result.columns;
                    }
                    //因为orderIndex代表的是下一个序号,所以要小于等于来判断是否隐藏

                    return React.createElement(
                        "div",
                        { className: "wasabi-searchbar-item", key: orderIndex,
                            style: { display: _this.state.dropType == "wasabi-button wasabi-searchbar-down" ? orderIndex <= result.columns ? "inline" : "none" : "inline" } },
                        React.createElement(Input, _extends({ ref: child.name,
                            key: child.name + index.toString()
                        }, child, {
                            position: position,
                            readonly: _this.state.disabled == true ? true : child.readonly,
                            backFormHandler: _this.changeHandler
                        }))
                    );
                }),
                React.createElement("div", { className: "clear" })
            ),
            React.createElement(
                "div",
                { className: "rightbutton" },
                React.createElement("button", { className: this.state.dropType, style: { float: "left", display: result.columns < this.state.model.length ? "inline" : "none" }, onClick: this.expandHandler }),
                React.createElement(
                    Button,
                    { onClick: this.onSubmit.bind(this, "submit"), theme: "green", style: { float: "right", marginTop: result.columns < this.state.model.length ? -22 : 0, display: this.props.searchHide == true ? "none" : null }, title: this.props.searchTitle },
                    this.props.searchTitle
                )
            ),
            React.createElement("div", { className: "clear" })
        );
    }
});
module.exports = SearchBar;

/***/ }),
/* 130 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

/**
 * Created by zhiyongwang
 * date:2016-04-05后开始独立改造
 * 下拉框
 */
__webpack_require__(308);
var React = __webpack_require__(1);
var unit = __webpack_require__(5);
var FetchModel = __webpack_require__(13);
var validation = __webpack_require__(16);
var setStyle = __webpack_require__(11);
var validate = __webpack_require__(22);
var showUpdate = __webpack_require__(21);
var shouldComponentUpdate = __webpack_require__(8);
var Label = __webpack_require__(18);
var Message = __webpack_require__(14);
var ClickAway = __webpack_require__(23);
var Select = React.createClass({
    displayName: "Select",

    mixins: [setStyle, validate, showUpdate, shouldComponentUpdate, ClickAway],
    PropTypes: {
        name: React.PropTypes.string.isRequired, //字段名
        label: React.PropTypes.oneOfType([React.PropTypes.string, React.PropTypes.element, React.PropTypes.node]), //字段文字说明属性
        width: React.PropTypes.number, //宽度
        height: React.PropTypes.number, //高度
        value: React.PropTypes.oneOfType([React.PropTypes.number, React.PropTypes.string]), //默认值,
        text: React.PropTypes.oneOfType([React.PropTypes.number, React.PropTypes.string]), //默认文本值
        placeholder: React.PropTypes.string, //输入框预留文字
        readonly: React.PropTypes.bool, //是否只读
        required: React.PropTypes.bool, //是否必填
        onlyline: React.PropTypes.bool, //是否只占一行
        hide: React.PropTypes.bool, //是否隐藏
        regexp: React.PropTypes.string, //正则表达式
        invalidTip: React.PropTypes.string, //无效时的提示字符
        style: React.PropTypes.object, //自定义style
        className: React.PropTypes.string, //自定义class
        size: React.PropTypes.oneOf(["none", "default", "large", //兼容性值,与two相同
        "two", "three", "onlyline"]), //组件表单的大小
        position: React.PropTypes.oneOf(["left", "default", "right"]), //组件在表单一行中的位置

        //其他属性
        min: React.PropTypes.number, //最少选择几个
        max: React.PropTypes.number, //最多选择几个
        onClick: React.PropTypes.func, //自定义单击事件，这样就可以将普通下拉框组合其他组件

        //其他属性
        multiple: React.PropTypes.bool, //是否允许多选
        valueField: React.PropTypes.string, //数据字段值名称
        textField: React.PropTypes.string, //数据字段文本名称
        url: React.PropTypes.string, //ajax的后台地址
        params: React.PropTypes.object, //查询参数
        dataSource: React.PropTypes.string, //ajax的返回的数据源中哪个属性作为数据源,为null时直接后台返回的数据作为数据源
        data: React.PropTypes.array, //自定义数据源
        extraData: React.PropTypes.array, //额外的数据,对url有效
        onSelect: React.PropTypes.func, //选中后的事件，回传，value,与text,data
        addAbled: React.PropTypes.bool, //是否允许自动添加
        addHandler: React.PropTypes.func, //添加后的回调
        onBeforeSelect: React.PropTypes.func //选择之前的事件


    },
    getDefaultProps: function getDefaultProps() {
        return {
            name: "",
            label: null,
            width: null,
            height: null,
            value: "",
            text: "",
            placeholder: "",
            readonly: false,
            required: false,
            onlyline: false,
            hide: false,
            regexp: null,
            invalidTip: null,
            style: null,
            className: null,
            size: "default",
            position: "default",
            //其他属性
            min: null,
            max: null,
            onClick: null,
            //其他属性
            multiple: false,
            valueField: "value",
            textField: "text",
            url: null,
            params: null,
            dataSource: "data",
            data: null,
            extraData: null,
            onSelect: null,
            writable: false,
            addAbled: false,
            addHandler: null

        };
    },
    getInitialState: function getInitialState() {
        var newData = [];
        var text = this.props.text;
        if (this.props.data && this.props.data instanceof Array) {
            for (var i = 0; i < this.props.data.length; i++) {
                var obj = this.props.data[i];
                obj.text = this.props.data[i][this.props.textField];
                obj.value = this.props.data[i][this.props.valueField];
                if (obj.value == this.props.value) {
                    text = obj.text; //根据value赋值
                }
                newData.push(obj);
            }
        }

        return {
            hide: this.props.hide,
            params: unit.clone(this.props.params), //参数
            data: newData,
            value: this.props.value,
            text: text,
            show: false, //是否显示下拉选项
            multiple: this.props.multiple,
            min: this.props.min,
            max: this.props.max,
            readonly: this.props.readonly,

            //验证
            required: this.props.required,
            validateClass: "", //验证的样式
            helpShow: "none", //提示信息是否显示
            helpTip: validation["required"], //提示信息
            invalidTip: "",
            filterValue: null //筛选框的值
        };
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        /*
         this.isChange :代表自身发生了改变,防止父组件没有绑定value,text,而导致无法选择
         */

        var value = this.isChange ? this.state.value : nextProps.value;
        var text = this.isChange ? this.state.text : nextProps.text;
        this.isChange = false; //重置
        var newData = null;
        if (nextProps.data != null && nextProps.data instanceof Array && (!nextProps.url || nextProps.url == "")) {
            //没有url,传的是死数据
            newData = [];
            //因为这里统一将数据进行了改造,所以这里要重新处理一下
            for (var i = 0; i < nextProps.data.length; i++) {
                var obj = nextProps.data[i];
                obj.text = nextProps.data[i][this.props.textField];
                obj.value = nextProps.data[i][this.props.valueField];
                if (obj.value == nextProps.value) {
                    text = obj.text; //根据value赋值
                }
                newData.push(obj);
            }
        } else {
            //url形式
            newData = this.state.data; //先得到以前的数据
            if (this.showUpdate(nextProps.params)) {
                //如果不相同则更新
                this.loadData(this.props.url, nextProps.params); //异步更新
            } else {}
        }

        this.setState({
            hide: nextProps.hide,
            value: value,
            text: text,
            data: newData,
            params: unit.clone(nextProps.params),
            multiple: nextProps.multiple,
            min: nextProps.min,
            max: nextProps.max,
            readonly: nextProps.readonly,
            required: nextProps.required,
            validateClass: "", //重置验证样式
            helpTip: validation["required"], //提示信息
            filterValue: null
        });
    },
    componentWillMount: function componentWillMount() {
        //如果指定url,先查询数据再绑定
        this.loadData(this.props.url, this.state.params); //查询数据
    },
    componentDidMount: function componentDidMount() {

        this.registerClickAway(this.hideOptions, this.refs.select); //注册全局单击事件
    },
    componentDidUpdate: function componentDidUpdate() {
        if (this.isChange == true) {
            //说明已经改变了,回传给父组件
            if (this.props.onSelect != null) {
                this.props.onSelect(this.state.value, this.state.text, this.props.name, this.rowData);
            }
        }
    },

    loadData: function loadData(url, params) {
        if (url != null && url != "") {
            if (params == null) {
                var fetchmodel = new FetchModel(url, this.loadSuccess, null, this.loadError);
                unit.fetch.get(fetchmodel);
            } else {
                var fetchmodel = new FetchModel(url, this.loadSuccess, params, this.loadError);
                unit.fetch.post(fetchmodel);
            }
            console.log("select", fetchmodel);
        }
    },
    loadSuccess: function loadSuccess(data) {
        //数据加载成功
        var realData = data;
        if (this.props.dataSource == null) {} else {
            realData = unit.getSource(data, this.props.dataSource);
        }
        var newData = [];
        var text = this.state.text;
        for (var i = 0; i < realData.length; i++) {
            var obj = realData[i]; //将所有字段添加进来
            obj.text = realData[i][this.props.textField];
            obj.value = realData[i][this.props.valueField];
            if (obj.value == this.state.value) {
                text = obj.text; //根据value赋值
            }
            newData.push(obj);
        }
        if (this.props.extraData == null || this.props.extraData.length == 0) {
            //没有额外的数据
        } else {
            //有额外的数据
            for (var _i = 0; _i < this.props.extraData.length; _i++) {
                var _obj = {};
                _obj.text = this.props.extraData[_i][this.props.textField];
                _obj.value = this.props.extraData[_i][this.props.valueField];
                if (_obj.value == this.state.value) {
                    text = _obj.text; //根据value赋值
                }
                newData.unshift(_obj);
            }
        }
        window.localStorage.setItem(this.props.name + 'data', JSON.stringify(newData)); //用于后期获取所有数据

        this.setState({
            data: newData,
            value: this.state.value,
            text: text
        });
    },
    loadError: function loadError(errorCode, message) {
        //查询失败
        console.log("select-error", errorCode, message);
        Message.error(message);
    },
    showOptions: function showOptions(type) {
        //显示下拉选项
        console.log("show");
        if (this.state.readonly) {
            return;
        }
        if (this.props.onClick != null) {
            this.props.onClick();
        }
        this.setState({
            show: type == 1 ? !this.state.show : true
        });
        this.bindClickAway(); //绑定全局单击事件
    },
    hideOptions: function hideOptions(event) {
        console.log("hide");
        this.setState({
            show: false
        });
        this.unbindClickAway(); //卸载全局单击事件
    },

    onSelect: function onSelect(value, text, rowData) {
        //选中事件
        console.log("test");
        if (this.props.onBeforeSelect && value != this.state.value && this.props.onBeforeSelect(value, text, rowData) || !this.props.onBeforeSelect) {
            //选择之前的确定事件返回true,或者没有

            this.isChange = true; //代表自身发生了改变,防止父组件没有绑定value,text的状态值,而导致无法选择的结果
            this.rowData = rowData; //临时保存起来
            var newvalue = "";
            var newtext = "";
            if (value == undefined) {
                console.error("绑定的valueField没有");
            }
            if (text == undefined) {
                console.error("绑定的textField没有");
            }
            if (this.state.multiple) {

                var oldvalue = [];
                var oldtext = [];
                if (this.state.value) {
                    oldvalue = this.state.value.toString().split(",");
                    oldtext = this.state.text.toString().split(",");
                }
                if (oldvalue.indexOf(value.toString()) > -1) {
                    //取消选中
                    oldvalue.splice(oldvalue.indexOf(value.toString()), 1);
                    oldtext.splice(oldvalue.indexOf(value.toString()), 1);
                    newvalue = oldvalue.join(",");
                    newtext = oldtext.join(",");
                } else {
                    //选中
                    if (this.state.value) {
                        newvalue = this.state.value + "," + value;
                        newtext = this.state.text + "," + text;
                    } else {
                        newvalue = value;
                        newtext = text;
                    }
                }
                this.setState({
                    value: newvalue,
                    text: newtext
                });
            } else {
                var newvalue = value;
                var newtext = text;
                this.setState({
                    show: false,
                    value: newvalue,
                    text: newtext,
                    filterValue: null
                });
            }
            this.validate(newvalue); //
        }
    },
    getComponentData: function getComponentData() {
        //只读属性，获取当前下拉的数据源
        return this.state.data;
    },
    onBlur: function onBlur() {

        this.refs.label.hideHelp(); //隐藏帮助信息
    },

    keyUpHandler: function keyUpHandler(event) {
        if (this.props.addAbled && event.keyCode == 13) {
            var filter = this.state.data.filter(function (item, index) {
                return item.text == event.target.value;
            });
            if (filter.length == 0) {

                this.state.data.push({
                    value: event.target.value,
                    text: event.target.value
                });
                this.setState({
                    data: this.state.data
                });
                if (this.props.addHandler) {
                    this.props.addHandler(this.state.data);
                }
            }
            ;
        }
    },
    filterChangeHandler: function filterChangeHandler(event) {
        //筛选查询
        this.setState({
            filterValue: event.target.value,
            show: true
        });
        this.refs.ul.scrollTop = 0; //回到顶部

    },
    clearHandler: function clearHandler() {
        //清除数据
        if (this.props.onSelect != null) {
            this.props.onSelect("", "", this.props.name, null);
        } else {
            this.setState({
                value: null,
                text: null
            });
        }
    },
    render: function render() {
        var _this = this;

        var size = this.props.onlyline == true ? "onlyline" : this.props.size; //组件大小
        var componentClassName = "wasabi-form-group " + size; //组件的基本样式
        var style = this.setStyle("input"); //设置样式
        var controlStyle = this.props.controlStyle ? this.props.controlStyle : {};
        controlStyle.display = this.state.hide == true ? "none" : "block";
        var inputProps = {
            readOnly: this.state.readonly == true ? "readonly" : null,
            style: style,
            name: this.props.name,
            placeholder: this.props.placeholder === "" || this.props.placeholder == null ? this.state.required ? "必填项" : "" : this.props.placeholder,
            className: "wasabi-form-control  " + (this.props.className != null ? this.props.className : ""),
            title: this.props.title //文本框的属性
        };var control = null;
        if (this.state.data && this.state.data.length > 0) {
            control = React.createElement(
                "ul",
                { style: { display: this.state.show == true ? "block" : "none" }, ref: "ul" },
                this.state.data.map(function (child, i) {
                    var reg = new RegExp(_this.state.filterValue, "i");
                    if (_this.state.filterValue && child.text.search(reg) == -1) {
                        return;
                    } else {
                        //TODO 这里要用正则，先保留
                        var checked = false;
                        if (_this.state.value && child.value && ("," + _this.state.value.toString() + ",").indexOf("," + child.value + ",") > -1) {
                            checked = true;
                        } else if (_this.state.value == "" && child.value == "") {
                            checked = true;
                        }
                        return React.createElement(
                            "li",
                            { key: "li" + i, className: checked == true ? "active" : "",
                                onClick: _this.onSelect.bind(_this, child.value, child.text, child) },
                            child.text
                        );
                    }
                })
            );
        }

        return React.createElement(
            "div",
            { className: componentClassName + this.state.validateClass, ref: "select", style: controlStyle },
            React.createElement(Label, { name: this.props.label, ref: "label", hide: this.state.hide,
                required: this.state.required }),
            React.createElement(
                "div",
                { className: "wasabi-form-group-body" },
                React.createElement(
                    "div",
                    { className: "nice-select ", style: style },
                    React.createElement("i", { className: "picker-clear", onClick: this.clearHandler,
                        style: { display: this.state.readonly ? "none" : this.state.value == "" || !this.state.value ? "none" : "inline" } }),
                    React.createElement("i", { className: "icon " + (this.state.show ? "rotate" : ""),
                        onClick: this.showOptions.bind(this, 1) }),
                    React.createElement("input", _extends({ type: "text" }, inputProps, { title: this.props.addAbled ? "输入搜索，回车添加" : "输入搜索",
                        onKeyUp: this.keyUpHandler,
                        value: this.state.filterValue != null ? this.state.filterValue : this.state.text,
                        onClick: this.showOptions.bind(this, 2), onBlur: this.onBlur,
                        onChange: this.filterChangeHandler })),
                    control
                ),
                React.createElement(
                    "small",
                    { className: "wasabi-help-block " + this.props.position,
                        style: { display: this.state.helpTip && this.state.helpTip != "" ? this.state.helpShow : "none" } },
                    React.createElement(
                        "div",
                        { className: "text" },
                        this.state.helpTip
                    )
                )
            )
        );
    }

});
module.exports = Select;

/***/ }),
/* 131 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Created by jiaxuanliang
 * date:2016-04-05后开始独立改造
 * edit by wangzy
 * date:2016-04-26
 * desc:重命名为SwitchButton 并将完善
 */
__webpack_require__(309);
var React = __webpack_require__(1);
var setStyle = __webpack_require__(11);
var shouldComponentUpdate = __webpack_require__(8);
var Label = __webpack_require__(18);
var SwitchButton = React.createClass({
    displayName: 'SwitchButton',

    mixins: [setStyle, shouldComponentUpdate],
    propTypes: {
        name: React.PropTypes.string.isRequired, //字段名
        label: React.PropTypes.oneOfType([React.PropTypes.string, React.PropTypes.element, React.PropTypes.node]), //字段文字说明属性
        width: React.PropTypes.number, //宽度
        height: React.PropTypes.number, //高度
        value: React.PropTypes.oneOfType([React.PropTypes.number, React.PropTypes.string]), //默认值,
        text: React.PropTypes.oneOfType([React.PropTypes.number, React.PropTypes.string]), //默认文本值
        placeholder: React.PropTypes.string, //输入框预留文字
        readonly: React.PropTypes.bool, //是否只读
        required: React.PropTypes.bool, //是否必填
        onlyline: React.PropTypes.bool, //是否只占一行
        hide: React.PropTypes.bool, //是否隐藏
        regexp: React.PropTypes.string, //正则表达式
        invalidTip: React.PropTypes.string, //无效时的提示字符
        style: React.PropTypes.object, //自定义style
        className: React.PropTypes.string, //自定义class
        size: React.PropTypes.oneOf(["none", "default", "large", //兼容性值,与two相同
        "two", "three", "onlyline"]), //组件表单的大小
        position: React.PropTypes.oneOf(["left", "default", "right"]), //组件在表单一行中的位置
        onSelect: React.PropTypes.func //单击事件，专门用于表单

    },
    getDefaultProp: function getDefaultProp() {
        return { type: "text",
            name: "",
            label: null,
            width: null,
            height: null,
            value: 0,
            text: "false",
            placeholder: "",
            readonly: false,
            required: false,
            onlyline: false,
            hide: false,
            regexp: null,
            invalidTip: null,
            style: null,
            className: null,
            size: "default",
            position: "default"

        };
    },
    getInitialState: function getInitialState() {
        return {
            hide: this.props.hide,
            value: this.props.value === "" ? 0 : this.props.value, //用于回传给表单组件
            text: this.props.value === "" ? "false" : "true",
            readonly: this.props.readonly
        };
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        this.setState({
            hide: nextProps.hide,
            value: nextProps.value != 0 && nextProps.value != 1 ? 0 : nextProps.value,
            text: nextProps.value != 0 && nextProps.value != 1 ? "false" : nextProps.text,
            readonly: nextProps.readonly
        });
    },
    validate: function validate() {
        return true;
    },
    handleClick: function handleClick() {
        if (this.state.readonly) {
            return;
        }
        this.setState({
            value: this.state.value == 1 ? 0 : 1,
            text: this.state.value == 1 ? "false" : "true"
        });

        if (this.props.onSelect != null) {
            //返回给comboBox组件
            this.props.onSelect(this.state.value == 1 ? 0 : 1, this.state.value == 1 ? "false" : "true", this.props.name);
        }
    },
    render: function render() {
        var inputType = "text";
        if (this.props.type == "password") {
            inputType = "password";
        }
        var size = this.props.onlyline == true ? "onlyline" : this.props.size; //组件大小
        var componentClassName = "wasabi-form-group " + size + " " + (this.props.className ? this.props.className : ""); //组件的基本样式
        var style = this.setStyle("input"); //设置样式
        var controlStyle = this.props.controlStyle ? this.props.controlStyle : {};
        controlStyle.display = this.state.hide == true ? "none" : "block";
        var className = "syncbtn ";
        if (this.state.value == 1) {
            className += "checktrue";
        } else {
            className += "checkfalse";
        }

        if (this.state.readonly) {
            className += " disabled";
        }

        return React.createElement(
            'div',
            { className: componentClassName + this.state.validateClass, style: controlStyle },
            React.createElement(Label, { name: this.props.label, ref: 'label', hide: this.state.hide, required: this.state.required }),
            React.createElement(
                'div',
                { className: "wasabi-form-group-body", style: { width: !this.props.label ? "100%" : null } },
                React.createElement(
                    'div',
                    { className: className, onClick: this.handleClick },
                    React.createElement('div', { className: "slideblock " })
                ),
                React.createElement(
                    'small',
                    { className: "wasabi-help-block " + this.props.position, style: { display: this.state.helpTip && this.state.helpTip != "" ? this.state.helpShow : "none" } },
                    React.createElement(
                        'div',
                        { className: 'text' },
                        this.state.helpTip
                    )
                )
            )
        );
    }
});
module.exports = SwitchButton;

/***/ }),
/* 132 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

/*
 create by wangzy
 date:2016-07-04
 desc:列表下拉选择
 */
var React = __webpack_require__(1);

var SearchBox = __webpack_require__(78);
var Tree = __webpack_require__(115);
var unit = __webpack_require__(5);
var validation = __webpack_require__(16);
var setStyle = __webpack_require__(11);
var validate = __webpack_require__(22);
var showUpdate = __webpack_require__(21);
var shouldComponentUpdate = __webpack_require__(8);
var Label = __webpack_require__(18);
var ClickAway = __webpack_require__(23);
var TreePicker = React.createClass({
    displayName: "TreePicker",

    mixins: [setStyle, validate, showUpdate, shouldComponentUpdate, ClickAway],
    propTypes: {
        name: React.PropTypes.string.isRequired, //字段名
        label: React.PropTypes.oneOfType([React.PropTypes.string, React.PropTypes.element, React.PropTypes.node]), //字段文字说明属性
        title: React.PropTypes.string, //提示信息
        width: React.PropTypes.number, //宽度
        height: React.PropTypes.number, //高度
        value: React.PropTypes.oneOfType([React.PropTypes.number, React.PropTypes.string]), //默认值,
        text: React.PropTypes.oneOfType([React.PropTypes.number, React.PropTypes.string]), //默认文本值
        placeholder: React.PropTypes.string, //输入框预留文字
        readonly: React.PropTypes.bool, //是否只读
        required: React.PropTypes.bool, //是否必填
        onlyline: React.PropTypes.bool, //是否只占一行
        hide: React.PropTypes.bool, //是否隐藏
        regexp: React.PropTypes.string, //正则表达式
        invalidTip: React.PropTypes.string, //无效时的提示字符
        style: React.PropTypes.object, //自定义style
        className: React.PropTypes.string, //自定义class
        size: React.PropTypes.oneOf(["none", "default", "large", //兼容性值,与two相同
        "two", "three", "onlyline"]), //组件表单的大小
        position: React.PropTypes.oneOf(["left", "default", "right"]), //组件在表单一行中的位置

        //其他属性
        valueField: React.PropTypes.string, //数据字段值名称
        textField: React.PropTypes.string, //数据字段文本名称
        url: React.PropTypes.string, //ajax的后台地址
        params: React.PropTypes.object, //查询参数
        dataSource: React.PropTypes.string, //ajax的返回的数据源中哪个属性作为数据源,为null时直接后台返回的数据作为数据源
        data: React.PropTypes.array, //自定义数据源
        onSelect: React.PropTypes.func //选中后的事件，回传，value,与text,data


    },
    getDefaultProps: function getDefaultProps() {
        return {
            name: "",
            label: null,
            title: null,
            width: null,
            height: null,
            value: "",
            text: "",
            placeholder: "",
            readonly: false,
            required: false,
            onlyline: false,
            hide: false,
            regexp: null,
            invalidTip: null,
            style: null,
            className: null,
            size: "default",
            position: "default",

            //其他属性
            valueField: "value",
            textField: "text",
            url: null,
            params: null,
            dataSource: "data",
            data: null,
            onSelect: null

        };
    },
    getInitialState: function getInitialState() {
        return {
            hide: this.props.hide,
            params: this.props.params, //默认筛选条件
            url: null, //默认为空,表示不查询,后期再更新,
            show: false, //
            value: this.props.value,
            text: this.props.text,
            readonly: this.props.readonly,
            data: this.props.data,
            //验证
            required: this.props.required,
            validateClass: "", //验证的样式
            helpShow: "none", //提示信息是否显示
            helpTip: validation["required"], //提示信息
            invalidTip: ""
        };
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        /*
         this.isChange :代表自身发生了改变,防止父组件没有绑定value,text,而导致无法选择
         */
        this.isChange = false; //重置
        var value = this.isChange ? this.state.value : nextProps.value;
        var text = this.isChange ? this.state.text : nextProps.text;
        this.setState({
            hide: nextProps.hide,
            value: value,
            text: text,
            url: nextProps.url,
            data: nextProps.data,
            params: unit.clone(nextProps.params),
            readonly: nextProps.readonly,
            required: nextProps.required,
            validateClass: "", //重置验证样式
            helpTip: validation["required"] //提示信息
        });
    },
    componentDidUpdate: function componentDidUpdate() {
        if (this.isChange == true) {
            //说明已经改变了,回传给父组件
            if (this.props.onSelect != null) {
                this.props.onSelect(this.state.value, this.state.text, this.props.name, this.property);
            }
        }
    },
    componentDidMount: function componentDidMount() {

        this.registerClickAway(this.hidePicker, this.refs.picker); //注册全局单击事件
    },
    changeHandler: function changeHandler(event) {},
    onBlur: function onBlur() {
        this.refs.label.hideHelp(); //隐藏帮助信息
    },
    showPicker: function showPicker(type) {
        //显示选择
        if (this.state.readonly) {
            //只读不显示
            return;
        } else {
            this.setState({
                show: type == 1 ? !this.state.show : true
            });
        }
        this.bindClickAway(); //绑定全局单击事件
    },
    hidePicker: function hidePicker() {
        this.setState({
            show: false
        });
        this.unbindClickAway(); //卸载全局单击事件
    },
    onSelect: function onSelect(value, text, name, property) {
        this.isChange = true; //代表自身发生了改变,防止父组件没有绑定value,text的状态值,而导致无法选择的结果
        this.property = property; //临时保存起来
        if (value == undefined) {
            console.error("绑定的valueField没有");
        }
        if (text == undefined) {
            console.error("绑定的textField没有");
        }
        this.validate(value);
        this.setState({
            value: value,
            text: text,
            show: !this.state.show
        });
    },
    clearHandler: function clearHandler() {
        //清除数据
        if (this.props.onSelect != null) {
            this.props.onSelect("", "", this.props.name, null);
        } else {
            this.setState({
                value: null,
                text: null
            });
        }
    },
    render: function render() {

        var size = this.props.onlyline == true ? "onlyline" : this.props.size; //组件大小
        var componentClassName = "wasabi-form-group " + size; //组件的基本样式
        var style = this.setStyle("input"); //设置样式
        var controlStyle = this.props.controlStyle ? this.props.controlStyle : {};
        controlStyle.display = this.state.hide == true ? "none" : "block";
        var inputProps = {
            readOnly: this.state.readonly == true ? "readonly" : null,
            style: style,
            name: this.props.name,
            placeholder: this.props.placeholder === "" || this.props.placeholder == null ? this.state.required ? "必填项" : "" : this.props.placeholder,
            className: "wasabi-form-control  " + (this.props.className != null ? this.props.className : ""),
            title: this.props.title //文本框的属性


        };return React.createElement(
            "div",
            { className: componentClassName + this.state.validateClass, ref: "picker", style: controlStyle },
            React.createElement(Label, { name: this.props.label, ref: "label", hide: this.state.hide, required: this.state.required }),
            React.createElement(
                "div",
                { className: "wasabi-form-group-body", style: { width: !this.props.label ? "100%" : null } },
                React.createElement(
                    "div",
                    { className: "combobox", style: { display: this.props.hide == true ? "none" : "block" } },
                    React.createElement("i", { className: "picker-clear ", onClick: this.clearHandler, style: { display: this.state.readonly ? "none" : this.state.value == "" || !this.state.value ? "none" : "inline" } }),
                    React.createElement("i", { className: "pickericon  " + (this.state.show ? "rotate" : ""), onClick: this.showPicker.bind(this, 1) }),
                    React.createElement("input", _extends({ type: "text" }, inputProps, { value: this.state.text, onBlur: this.onBlur, onClick: this.showPicker.bind(this, 2), onChange: this.changeHandler })),
                    React.createElement(
                        "div",
                        { className: "dropcontainter treepicker  " + this.props.position, style: { height: this.props.height, display: this.state.show == true ? "block" : "none" } },
                        React.createElement(Tree, {
                            name: this.props.name, value: this.state.value, text: this.state.text,
                            valueField: this.props.valueField, textField: this.props.textField, dataSource: this.props.dataSource,
                            url: this.props.url, params: this.props.params, data: this.state.data, onSelect: this.onSelect
                        })
                    )
                ),
                React.createElement(
                    "small",
                    { className: "wasabi-help-block " + this.props.position, style: { display: this.state.helpTip && this.state.helpTip != "" ? this.state.helpShow : "none" } },
                    this.state.helpTip
                )
            )
        );
    }
});
module.exports = TreePicker;

/***/ }),
/* 133 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

//create by wangzy
//date:2016-03-22
//desc:模态窗口
__webpack_require__(312);
__webpack_require__(142);
var React = __webpack_require__(1);
var Button = __webpack_require__(10);
var Resize = __webpack_require__(134);

var Modal = function (_React$Component) {
    _inherits(Modal, _React$Component);

    function Modal(props) {
        _classCallCheck(this, Modal);

        var _this = _possibleConstructorReturn(this, (Modal.__proto__ || Object.getPrototypeOf(Modal)).call(this, props));

        _this.state = {
            visible: false,
            width: _this.props.width,
            height: _this.props.height,
            left: (document.body.clientWidth - _this.props.width) / 2,
            top: 50,
            oldLeft: (document.body.clientWidth - _this.props.width) / 2,
            oldTop: 50,
            moveX: null,
            moveY: null
        };
        _this.close = _this.close.bind(_this);
        _this.open = _this.open.bind(_this);
        _this.mouseMoveHandler = _this.mouseMoveHandler.bind(_this);
        _this.mouseDownHandler = _this.mouseDownHandler.bind(_this);
        _this.mouseOutHandler = _this.mouseOutHandler.bind(_this);
        _this.mouseUpHandler = _this.mouseUpHandler.bind(_this);
        _this.OKHandler = _this.OKHandler.bind(_this);
        _this.cancelHandler = _this.cancelHandler.bind(_this);
        return _this;
    }

    _createClass(Modal, [{
        key: "componentWillReceiveProps",
        value: function componentWillReceiveProps(nextProps) {
            this.setState({
                width: nextProps.width,
                height: nextProps.height
            });
        }
    }, {
        key: "componentDidMount",
        value: function componentDidMount() {}
    }, {
        key: "close",
        value: function close() {
            //关闭事件
            this.setState({ visible: false });
            if (this.props.closedHandler != null) {
                this.props.closedHandler();
            }
        }
    }, {
        key: "open",
        value: function open() {
            //打开事件
            this.setState({ visible: true });
        }
    }, {
        key: "mouseMoveHandler",
        value: function mouseMoveHandler(event) {
            if (this.state.moveX != null && event.target.className == "wasabi-modal-header") {
                this.setState({
                    left: this.state.oldLeft + event.clientX - this.state.moveX,
                    top: this.state.oldTop + event.clientY - this.state.moveY
                });
            }
        }
    }, {
        key: "mouseDownHandler",
        value: function mouseDownHandler(event) {
            this.setState({
                moveX: event.clientX,
                moveY: event.clientY
            });
        }
    }, {
        key: "mouseOutHandler",
        value: function mouseOutHandler(event) {
            this.setState({
                moveX: null,
                moveY: null,
                oldLeft: this.state.left,
                oldTop: this.state.top
            });
        }
    }, {
        key: "mouseUpHandler",
        value: function mouseUpHandler(event) {
            this.setState({
                moveX: null,
                moveY: null,
                oldLeft: this.state.left,
                oldTop: this.state.top
            });
        }
    }, {
        key: "OKHandler",
        value: function OKHandler() {
            if (this.props.OKHandler != null) {
                this.props.OKHandler();
            }
            this.close(); //关闭
        }
    }, {
        key: "cancelHandler",
        value: function cancelHandler() {
            if (this.props.cancelHandler != null) {
                this.props.cancelHandler();
            }
            this.close(); //关闭
        }
    }, {
        key: "render",
        value: function render() {

            var activename = "wasabi-modal-container ";
            if (this.state.visible == true) {
                activename = "wasabi-modal-container active";
            }
            var width = this.state.width;
            var height = this.state.height;
            var left = this.state.left;
            var top = this.state.top;
            var control = void 0;
            var footer = null;
            var buttons = [];
            if (this.props.showOK == true || this.props.showCancel == true) {
                if (this.props.showOK) {
                    buttons.push(React.createElement(Button, { title: "\u786E\u5B9A", key: "ok", theme: "green", onClick: this.OKHandler,
                        style: { width: 60, height: 30 } }));
                }
                if (this.props.showCancel) {
                    buttons.push(React.createElement(Button, { title: "\u53D6\u6D88", key: "cancel", theme: "cancel", onClick: this.cancelHandler,
                        style: { width: 60, height: 30, backgroundColor: "gray" } }));
                }
                footer = React.createElement(
                    "div",
                    { className: "wasabi-modal-footer" },
                    buttons
                );
            }
            return React.createElement(
                "div",
                { className: activename },
                React.createElement("div", { className: " wasabi-overlay " + (this.props.modal == true ? "active" : "") }),
                React.createElement(
                    Resize,
                    { width: width, height: height, left: left, top: top,
                        className: "wasabi-modal fadein", resize: this.props.resize },
                    React.createElement("a", { className: "wasabi-modal-close", onClick: this.close }),
                    React.createElement(
                        "div",
                        { className: "wasabi-modal-header", ref: "header", onMouseMove: this.mouseMoveHandler,
                            onMouseDown: this.mouseDownHandler,
                            onMouseUp: this.mouseUpHandler,
                            onMouseOut: this.mouseOutHandler
                        },
                        React.createElement(
                            "div",
                            { style: { display: "inline" } },
                            this.props.title
                        )
                    ),
                    React.createElement(
                        "div",
                        { className: "wasabi-modal-content", style: { height: this.state.height - 40 } },
                        this.props.children
                    ),
                    footer
                )
            );
        }
    }]);

    return Modal;
}(React.Component);

Modal.propTypes = {
    width: React.PropTypes.number,
    height: React.PropTypes.number,
    resize: React.PropTypes.bool,
    closedHandler: React.PropTypes.func,
    showOK: React.PropTypes.bool,
    showCancel: React.PropTypes.bool,
    OKHandler: React.PropTypes.func,
    cancelHandler: React.PropTypes.func
};

Modal.defaultProps = _extends({}, Modal.defaultProps, {
    width: 730, //宽度
    height: 650, //高度
    resize: false, //是否可以改变大小
    modal: true, //默认没有遮罩层
    showOK: false, //是否显示确定按钮
    showCancel: false, //是否显示取消按钮
    OKHandler: null //确定按钮的事件,
});

module.exports = Modal;

/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


//create by wangzy
//date:2016-03-22
//desc:模态窗口
var React = __webpack_require__(1);
__webpack_require__(315);
var Resize = React.createClass({
    displayName: "Resize",

    propTypes: {
        width: React.PropTypes.number,
        height: React.PropTypes.number,
        left: React.PropTypes.number,
        top: React.PropTypes.number,
        onlyWidth: React.PropTypes.bool, //是否只允许改变宽度
        className: React.PropTypes.string,
        resize: React.PropTypes.bool //属性内部使用
    },
    getDefaultProps: function getDefaultProps() {
        return {
            width: 700,
            height: 500,
            left: 0,
            top: 0,
            onlyWidth: false,
            className: "",
            resize: true //默认是可以改变大小的
        };
    },
    getInitialState: function getInitialState() {
        return {
            oldClientX: null,
            oldCllientY: null,
            width: this.props.width,
            oldwidth: this.props.width,
            height: this.props.height,
            oldheight: this.props.height,
            min: 8
        };
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {},
    componentDidMount: function componentDidMount() {
        //设置鼠标事件
        if (this.props.resize) {
            //允许改变大小

            document.onmousemove = this.mouseMoveHandler;
            document.onmouseup = this.mouseUpHandler;
            document.onmousedown = this.mouseDownHandler;
        }
    },
    mouseDownHandler: function mouseDownHandler(event) {
        //鼠标按下事件,保存鼠标位置
        var dir = this.getDirection(event);
        if (dir != "") {
            this.setState({
                oldClientX: event.clientX,
                oldClientY: event.clientY
            });
        } else {
            this.setState({
                oldClientX: null,
                oldClientY: null
            });
        }
        //取消默认事件
        //window.event.returnValue = false;
        //window.event.cancelBubble = true;
    },
    mouseUpHandler: function mouseUpHandler() {
        //鼠标松开事件
        this.setState({
            oldClientX: null,
            oldwidth: this.state.width,
            oldheight: this.state.height,
            oldClientY: null

        });
    },
    mouseMoveHandler: function mouseMoveHandler(event) {
        //鼠标移动事件
        var dir = this.getDirection(event);
        if (this.state.oldClientX != null && dir != "") {
            //判断是否可以拖动

            try {
                var newwidth = this.state.width;
                var newheight = this.state.height;
                if (dir.indexOf("e") > -1) {
                    //向东
                    newwidth = Math.max(this.state.min, this.state.oldwidth + event.clientX - this.state.oldClientX);
                }
                if (dir.indexOf("s") > -1) {
                    //向南
                    if (this.props.onlyWidth == false) {
                        //允许改变高度
                        newheight = Math.max(this.state.min, this.state.oldheight + event.clientY - this.state.oldClientY);
                    }
                }

                this.setState({
                    width: newwidth,
                    height: newheight
                });
            } catch (e) {}
        } else {}
        //取消默认事件
        //window.event.returnValue = false;
        //window.event.cancelBubble = true;
    },
    getDirection: function getDirection(event) {
        //此处计算方向与光标图形分开，
        //当缩小时，要将方向向里多计算一点，否则缩小不流畅
        var xPos, yPos, offset, dir;
        dir = "";
        xPos = event.offsetX;
        yPos = event.offsetY;
        offset = this.state.min;
        if (this.props.onlyWidth == false) {
            //允许改变高度
            if (yPos > this.refs.resizediv.offsetHeight - 4 * offset) dir += "s";
        }
        if (xPos > this.refs.resizediv.offsetWidth - 4 * offset) dir += "e";
        var cursor = "";
        if (this.props.onlyWidth == false) {
            //允许改变高度
            if (yPos > this.refs.resizediv.offsetHeight - offset) {
                cursor += "s";
            }
        }
        if (xPos > this.refs.resizediv.offsetWidth - offset) {
            cursor += "e";
        }
        if (cursor == "") {
            cursor = "default";
        } else {
            cursor = cursor + "-resize";
        }
        this.refs.resizediv.style.cursor = cursor; //设置鼠标样式
        return dir;
    },
    render: function render() {

        return React.createElement(
            "div",
            { className: "resize  " + this.props.className, ref: "resizediv",
                style: { height: this.props.onlyWidth == true ? "auto" : this.state.height, left: this.props.left, top: this.props.top, width: this.state.width, zIndex: 8888,
                    borderBottom: this.props.onlyWidth == true ? "none" : null
                }
            },
            this.props.children
        );
    }
});
module.exports = Resize;

/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/*
滑动面板
create by wangzy
date:2016-04-05
desc:滑动面板
*/
var React = __webpack_require__(1);
__webpack_require__(314);
var Toolbar = __webpack_require__(50);
var Button = __webpack_require__(10);

var SlidePanel = function (_React$Component) {
    _inherits(SlidePanel, _React$Component);

    function SlidePanel(props) {
        _classCallCheck(this, SlidePanel);

        var _this = _possibleConstructorReturn(this, (SlidePanel.__proto__ || Object.getPrototypeOf(SlidePanel)).call(this, props));

        _this.state = {
            title: _this.props.title,
            buttons: _this.props.buttons,
            buttonClick: _this.props.buttonClick,
            panelwidth: 0, //总宽度
            containerwidth: 0, //容器宽度
            leftwidth: 0, //左侧滑块宽度
            rightwidth: 0, //右侧内容宽度
            overlayOpacity: 0 //遮盖层透明度
        };
        _this.slideHandler = _this.slideHandler.bind(_this);
        _this.buttonClick = _this.buttonClick.bind(_this);

        return _this;
    }

    _createClass(SlidePanel, [{
        key: "componentWillReceiveProps",
        value: function componentWillReceiveProps(nextProps) {
            this.setState(_extends({}, nextProps));
        }
    }, {
        key: "open",
        value: function open() {
            //打开事件，用于外部调用
            this.slideHandler();
        }
    }, {
        key: "close",
        value: function close() {
            //关闭事件,用于外部调用
            this.slideHandler();
        }
    }, {
        key: "slideHandler",
        value: function slideHandler() {
            var _this2 = this;

            if (this.state.panelwidth != 0) {
                //关闭时，外面宽度等过渡效果完成后再设置
                this.setState({
                    containerwidth: this.state.containerwidth == 0 ? this.props.width - 34 : 0,
                    overlayOpacity: this.state.overlayOpacity == 0 ? 0.5 : 0
                });
                setTimeout(function () {
                    _this2.setState({
                        panelwidth: 0
                    });
                }, 700); //过渡效果结束后立即关闭
            } else {
                //打开时，立即将外面宽度设置
                this.setState({
                    containerwidth: this.state.containerwidth == 0 ? this.props.width - 34 : 0,
                    overlayOpacity: this.state.overlayOpacity == 0 ? 0.5 : 0,
                    panelwidth: this.props.width
                });
            }
        }
    }, {
        key: "buttonClick",
        value: function buttonClick(name, title) {
            if (this.state.buttonClick != null) {
                this.state.buttonClick(name, title);
            }
        }
    }, {
        key: "render",
        value: function render() {
            return React.createElement(
                "div",
                { className: "wasabi-slidepanel ", style: { width: this.state.panelwidth } },
                React.createElement("div", { className: "slide-overlay", style: { width: this.state.panelwidth, opacity: this.state.overlayOpacity } }),
                React.createElement(
                    "div",
                    { className: "slide-container", style: { width: this.state.containerwidth } },
                    React.createElement(
                        "div",
                        { className: "slide-header" },
                        React.createElement(
                            "div",
                            { className: "title" },
                            this.state.title
                        )
                    ),
                    React.createElement(
                        "div",
                        { className: "slide-body" },
                        this.props.children
                    ),
                    React.createElement(
                        "div",
                        { className: "slide-footer" },
                        React.createElement(
                            "div",
                            { className: "slide-toolbar" },
                            React.createElement(Toolbar, { buttons: this.state.buttons, buttonClick: this.buttonClick })
                        ),
                        React.createElement(
                            "div",
                            { className: "slide-close" },
                            React.createElement(Button, { name: "close", title: "\u5173\u95ED", onClick: this.slideHandler })
                        )
                    )
                )
            );
        }
    }]);

    return SlidePanel;
}(React.Component);

SlidePanel.propTypes = {
    title: React.PropTypes.string, //标题
    width: React.PropTypes.number, //自定义宽度
    buttons: React.PropTypes.array, //自定义按钮
    buttonClick: React.PropTypes.func //按钮的单击事件,
};
SlidePanel.defaultProps = {
    title: "",
    width: document.body.clientWidth,
    buttons: [],
    buttonClick: null,
    url: null
};
;
module.exports = SlidePanel;

/***/ }),
/* 136 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Created by wangzhiyong on 2016/10/25.
 * 将原有的单击与双击事件
 * 将新增,修改,粘贴,鼠标右键,滚动,固定表头,固定列,等功能
 * 作为DataGrid扩展功能
 */
var React = __webpack_require__(1);
var unit = __webpack_require__(5);
var FetchModel = __webpack_require__(13);
var Message = __webpack_require__(14);
var DataGridExtend = {
    //表体常用操作
    onClick: function onClick(rowIndex, rowData) {

        if (this.props.selectChecked == true) {
            var key = this.getKey(rowIndex); //获取关键字
            if (this.state.checkedData.has(key)) {
                this.onChecked(rowIndex, "");
            } else {
                this.onChecked(rowIndex, key);
            }
        }
        if (this.props.onClick != null) {
            this.props.onClick(rowIndex, rowData); //注意参数换了位置,因为早期版本就是这样子
        }
    },
    onDoubleClick: function onDoubleClick(rowIndex, rowData) {
        if (this.props.onDoubleClick != null) {
            //如果自定义了,
            this.props.onDoubleClick(rowIndex, rowData);
        } else if (this.state.editAble) {
            //没有自定义,允许编辑表格
            if (this.state.editIndex != null && this.state.editIndex != rowIndex) {
                //说明上一行编辑完成
                this.remoteUpdateRow(rowIndex);
            } else {
                //没有上一行
                this.setState({
                    editIndex: rowIndex
                });
            }
        }
    },
    remoteUpdateRow: function remoteUpdateRow(newEditIndex) {
        //远程提交某一行数据
        if (this.state.updateUrl) {
            //定义url,保存上一行
            var fetchmodel = new FetchModel(this.state.updateUrl, this.remoteUpdateRowuccess.bind(this, newEditIndex), { model: this.state.data[this.state.editIndex] }, this.ajaxError);
            console.log("datagrid-updateRow:", fetchmodel);
            unit.fetch.post(fetchmodel);
        } else {
            //没有定义url
            if (this.state.addData.has(this.getKey(this.state.editIndex))) {
                //说明是属于新增的
                this.state.addData.set(this.getKey(this.state.editIndex), this.state.data[this.state.editIndex]);
            } else {
                //属于修改的
                this.state.updatedData.set(this.getKey(this.state.editIndex), this.state.data[this.state.editIndex]);
            }
            this.setState({
                editIndex: newEditIndex,
                data: this.state.data,
                addData: this.state.addData,
                updatedData: this.state.updatedData
            });
        }
    },
    remoteUpdateRowuccess: function remoteUpdateRowuccess(newEditIndex, result) {
        //远程提交某一行数据
        if (this.state.addData.has(this.getKey(this.state.editIndex))) {
            //说明是属于新增的
            this.state.addData.delete(this.getKey(this.state.editIndex));
        } else {
            //属于修改的
            this.state.updatedData.delete(this.getKey(this.state.editIndex));
        }
        if (result.success) {
            this.setState({
                editIndex: newEditIndex
            });
        }
    },
    pageUpdateHandler: function pageUpdateHandler(pageSize, pageIndex) {
        //改变分页大小，或者跳转
        this.updateHandler(this.state.url, pageSize * 1, pageIndex * 1, this.state.sortName, this.state.sortOrder, null, null);
    },

    //粘贴事件
    pasteSuccess: function pasteSuccess(data) {
        if (this.props.pasteUrl != null && this.props.pasteUrl != "") {
            //用户定义了粘贴url
            var actualParams = null; //实际参数
            if (this.props.pasteParamsHandler != null) {
                //如果粘贴参数处理函数不为空
                actualParams = this.props.pasteParamsHandler(data);
            }
            //保留以前的状态值,保存以前的查询条件
            var fetchmodel = new FetchModel(this.props.pasteUrl, this.loadSuccess.bind(this, this.state.url, this.props.pageSize, 1, this.props.sortName, this.props.sortOrder, this.state.params), actualParams, this.loadError);
            fetchmodel.lang = this.props.lang;
            console.log("datagrid-paste-fetch", fetchmodel);
            unit.fetch.post(fetchmodel);
        }
    },

    //详情页面
    detailViewHandler: function detailViewHandler(detail) {
        var colSpan = this.state.headers.length;

        var key = this.getKey(this.focusIndex);
        if (this.props.selectAble == true) {
            colSpan++;
        }
        this.setState({
            detailIndex: key,
            detailView: React.createElement(
                "tr",
                { key: key + "detail" },
                React.createElement(
                    "td",
                    { colSpan: colSpan },
                    React.createElement(
                        "div",
                        { className: "wasabi-detail" },
                        detail
                    )
                )
            )
        });
    },

    //调整高宽
    setWidthAndHeight: function setWidthAndHeight() {
        //重新计算列表的高度,及固定的表头每一列的宽度
        var parent = this.refs.grid.parentElement;
        while (parent && parent.className != "wasabi-detail" && parent.nodeName.toLowerCase() != "body") {
            parent = parent.parentElement;
        }
        if (parent.className == "wasabi-detail") {//如果列表是在详情列表中不处理
        } else {
            //主列表
            if (this.refs.realTable.getBoundingClientRect().width == 0) {//TODO 暂时不清楚为什么会0的情况

            } else {
                /*
                 数据生成后,先调整两个表格的宽度，因为有可能出现滚动条
                 再得到表头的各列的宽度,修改固定表头列宽度,使得固定表头与表格对齐
                 */
                this.resizeTableWidthHandler(); //调速表格的宽度
            }

            /*
             如果没有设定列表的高度,则要自适应页面的高度,增强布局效果
             */
            if (!this.state.height && (this.state.url || this.state.data.constructor == Array && this.state.data.length > 0)) {
                //如果没有设定高度
                var blankHeight = this.clientHeight - this.refs.grid.getBoundingClientRect().top - 5; //当前页面的空白高度
                this.setState({
                    height: blankHeight
                });
            }
        }
    },

    //表体的监听处理事件
    onPaste: function onPaste(event) {
        //调用公共用的粘贴处理函数
        this.pasteHandler(event, this.pasteSuccess);
    },

    gridMouseDownHandler: function gridMouseDownHandler(event) {
        //鼠标按下事件

        if (event.button != 2) {
            //不是鼠标右键
            if (event.target.className == "header-menu-item") {//点击中的就是菜单项不处理

            } else {
                this.hideMenuHandler(); //隐藏菜单
            }
        } else {
            //又是鼠标右键
            if (event.target.className == "header-menu-item") {//点击中的就是菜单项不处理

            } else {
                //隐藏
                this.hideMenuHandler(); //隐藏菜单
            }
        }
    },
    hideMenuHandler: function hideMenuHandler(event) {
        //外层组件的单击事件，隐藏菜单，远程更新某一行
        this.refs.headermenu.style.display = "none"; //表头菜单隐藏
        this.menuHeaderName = null; //清空
        this.unbindClickAway(); //卸载全局单击事件
    },

    gridContextMenuHandler: function gridContextMenuHandler(event) {
        // event.preventDefault();//阻止默认事件
    },

    //固定表头容器的处理事件
    fixedTableMouseMoveHandler: function fixedTableMouseMoveHandler(event) {
        //表头行.拖动事件
        if (this.refs.tabledivide.style.display == "block") {
            //说明已经处理拖动状态
            this.refs.tabledivide.style.left = event.clientX + "px";
            event.target.style.cursor = "ew-resize"; //设置鼠标样式,这样拖动不会有停滞的效果
        } else {}
    },
    fixedTableMouseUpHandler: function fixedTableMouseUpHandler(event) {
        //保证鼠标松开后会隐藏
        this.refs.tabledivide.style.left = "0px";
        this.refs.tabledivide.style.display = "none";
    },

    //表头的处理事件
    headerMouseMoveHandler: function headerMouseMoveHandler(event) {
        //表头列,鼠标经过事件,用以判断
        var position = event.target.getBoundingClientRect();
        var last = this.refs.fixedTable.getBoundingClientRect().right - position.right;
        if (last > 0 && last <= 3) {
            //说明是最后一列,不处理
            return;
        }
        var diff = position.left + position.width - event.clientX;

        if (diff >= 0 && diff <= 3) {
            event.target.style.cursor = "ew-resize";
        } else {
            event.target.style.cursor = "default";
        }
    },
    headerMouseDownHandler: function headerMouseDownHandler(event) {
        //表头列,鼠标按下事件

        if (event.button == 0 && event.target.style.cursor == "ew-resize") {
            //鼠标左键,如果有箭头,说明可以调整宽度

            this.refs.headermenu.style.display = "none"; //隐藏菜单

            // 先保存好,要调整宽度的是哪一列及原始宽度,并且保存当前鼠标left位置
            this.moveHeaderName = event.target.getAttribute("name");
            this.divideinitLeft = event.clientX; //初始化位置
            this.moveHeaderWidth = event.target.getBoundingClientRect().width;
            //显示分割线
            this.refs.tabledivide.style.left = event.clientX + "px";
            //计算分割线的高度
            if (this.props.pagePosition == "top" || this.props.pagePosition == "both") {
                //如果列表上面显示分页控件

                this.refs.tabledivide.style.height = this.refs.grid.clientHeight - 70 + "px";
            } else {

                this.refs.tabledivide.style.height = this.refs.grid.clientHeight - 35 + "px";
            }
            //显示分割线
            this.refs.tabledivide.style.display = "block";
            this.refs.grid.style.webkitUserSelect = "none"; //不可以选择
        } else {
            //不可以调整宽度

            this.refs.headermenu.style.display = "none"; //隐藏菜单
            // 设置为空
            this.moveHeaderName = null;
            this.moveHeaderWidth = null;
            this.divideinitLeft = null; //
            this.refs.grid.style.webkitUserSelect = "text"; //可以选择
        }
    },
    headerContextMenuHandler: function headerContextMenuHandler(event) {
        //显示菜单
        if (this.refs.headermenu.style.display == "block") {//已经出现了,不处理

        } else {
            //
            this.menuHeaderName = event.target.getAttribute("name"); //保存当前列名
            this.refs.headermenu.style.left = event.clientX - this.refs.grid.getBoundingClientRect().left + "px";
            this.refs.headermenu.style.top = event.clientY - this.refs.grid.getBoundingClientRect().top + "px";
            this.refs.headermenu.style.display = "block";
            event.preventDefault(); //阻止默认事件
        }
        this.bindClickAway(); //绑定全局单击事件
    },

    //表体横行滚动的处理事件
    tableBodyScrollHandler: function tableBodyScrollHandler(event) {
        //监听列表的横向滚动的事件,以便固定表头可以一同滚动
        this.refs.fixedTableContainer.style.left = "-" + event.target.scrollLeft + "px";
    },

    //分割线的处理事件
    divideMouseUpHandler: function divideMouseUpHandler(event) {
        //分割线,鼠标松开事件
        event.target.style.display = "none";
        this.refs.grid.style.webkitUserSelect = "text"; //可以选择
        var diffWidth = event.clientX - this.divideinitLeft;
        if (diffWidth <= this.moveHeaderWidth - 2 * this.moveHeaderWidth) {//缩小的宽度小于原来的宽度时不处理

        } else {
            this.resizeCellWidthHandler(diffWidth); //调整宽度
        }
    },

    //右键菜单处理事件
    menuHideHandler: function menuHideHandler(event) {
        //没有使用单击事件,用户有可能继续使用鼠标右键,隐藏某一列的事件
        var headers = this.state.headers; //列表数据
        var headerMenu = this.state.headerMenu;
        for (var index = 0; index < headers.length; index++) {
            //使用label,因为多个列可能绑定一个字段
            if (headers[index].label == this.menuHeaderName) {
                //需要隐藏的列
                headerMenu.push(this.menuHeaderName); //放入隐藏列中
                headers[index].hide = true;
                this.hideMenuHandler(); //隐藏菜单
            }
        }
        this.setState({
            headers: headers,
            headerMenu: headerMenu
        });
    },
    menuHeaderShowHandler: function menuHeaderShowHandler(itemIndex, label) {
        //没有使用单击事件,用户有可能继续使用鼠标右键,显示某列

        var headers = this.state.headers; //列表数据
        var headerMenu = this.state.headerMenu;

        for (var index = 0; index < headers.length; index++) {
            //使用label,因为多个列可能绑定一个字段
            if (headers[index].label == label) {
                //需要显示的列
                headerMenu.splice(itemIndex, 1); //从隐藏列中删除
                headers[index].hide = false; //显示此列
                this.hideMenuHandler(); //隐藏菜单
            }
        }
        this.setState({
            headers: headers,
            headerMenu: headerMenu
        });
    },

    //操作面板面板的处理事件
    panelShow: function panelShow() {
        //面板显示/隐藏
        this.setState({
            panelShow: !this.state.panelShow
        });
    },

    //单元格宽度调整
    resizeCellWidthHandler: function resizeCellWidthHandler(diffWidth) {
        //调整单元格的宽度

        if (diffWidth) {
            //拖动宽度
            var fixedTableHeaderth = this.refs.fixedTable.children[0].children[0].children;
            //列表的原始表头的列
            var realTableHeaderth = this.refs.realTable.children[0].children[0].children;
            var realTableBodyTr = this.refs.realTable.children[1].children;
            for (var index = 0; index < realTableHeaderth.length; index++) {
                if (realTableHeaderth[index].getAttribute("name") == this.moveHeaderName) {
                    var width = this.moveHeaderWidth + diffWidth;
                    fixedTableHeaderth[index].style.width = width + "px";
                    realTableHeaderth[index].style.width = width + "px";
                    //设置cell
                    fixedTableHeaderth[index].children[0].style.width = width - 1 + "px";
                    realTableHeaderth[index].children[0].style.width = width - 1 + "px";

                    for (var rowIndex = 0; rowIndex < realTableBodyTr.length; rowIndex++) {
                        //调整表体对应列的宽度
                        try {
                            //存在子表的问题
                            realTableBodyTr[rowIndex].children[index].children[0].style.width = width - 1 + "px";
                        } catch (e) {}
                    }
                    if (diffWidth < 0) {
                        this.refs.realTable.style.width = (this.refs.realTable.getBoundingClientRect().width + diffWidth).toString() + "px";
                        this.refs.fixedTable.style.width = (this.refs.realTable.getBoundingClientRect().width + diffWidth).toString() + "px";
                        this.setAlign(); //调整对齐问题
                    }
                    break;
                }
            }
        }
    },

    //表格宽度调整
    resizeTableWidthHandler: function resizeTableWidthHandler() {
        var width = null; //判断是否需要调整表格的宽度
        if (this.refs.realTableContainer.getBoundingClientRect().width == this.refs.realTable.getBoundingClientRect().width && this.refs.realTableContainer.getBoundingClientRect().height < this.refs.realTable.getBoundingClientRect().height) {
            //如果列表与列表容器的宽度相同但高度高度超过了,说明刚好有内侧滚动条了，调整宽度
            width = this.refs.realTable.getBoundingClientRect().width - 10;
        } else if (!this.refs.fixedTable.style.width || this.refs.fixedTable.style.width == "100%" || this.refs.realTable.getBoundingClientRect().width != this.refs.fixedTable.getBoundingClientRect().width) {
            //没有设定宽度,或者宽度不相等
            width = this.refs.realTable.getBoundingClientRect().width;
        } else if (this.refs.grid.getBoundingClientRect().width - 20 == this.refs.realTable.getBoundingClientRect().width) {
            //页面的滚动条没有了
            width = this.refs.realTable.getBoundingClientRect().width + 10;
        }

        if (width) {
            //如果需要调整宽度
            this.refs.fixedTable.style.width = width + "px";
            this.refs.realTable.style.width = width + "px";
        }

        this.setAlign(); //调整对齐问题
    },
    setAlign: function setAlign(type) {
        //处理对齐问题
        var fixedTableHeaderth = this.refs.fixedTable.children[0].children[0].children;
        //列表的原始表头的列
        var realTableHeaderth = this.refs.realTable.children[0].children[0].children;

        for (var index = 0; index < realTableHeaderth.length; index++) {
            //遍历，如果原始表头的列的宽度与固定表头对应列不一样,就设置
            //设置th的宽度
            if (realTableHeaderth[index].getBoundingClientRect().width != fixedTableHeaderth[index].getBoundingClientRect().width) {
                var thwidth = realTableHeaderth[index].getBoundingClientRect().width;

                fixedTableHeaderth[index].style.width = thwidth + "px";
                realTableHeaderth[index].style.width = thwidth + "px";
                //设置cell
                fixedTableHeaderth[index].children[0].style.width = thwidth - 1 + "px";
                realTableHeaderth[index].children[0].style.width = thwidth - 1 + "px";
            }
        }
    },

    //自定义列事件
    getHeaderDataHandler: function getHeaderDataHandler(headerUrl) {
        //获取自定义列
        if (!headerUrl) {
            headerUrl = this.state.headerUrl;
        }
        if (headerUrl) {
            var fetchmodel = new FetchModel(headerUrl, this.getHeaderDataHandlerSuccess, { url: this.state.url }, this.ajaxError);
            console.log("datagrid-header-get:", fetchmodel);
            unit.fetch.post(fetchmodel);
        }
        this.setState({
            loading: true //正在加载
        });
    },
    getHeaderDataHandlerSuccess: function getHeaderDataHandlerSuccess(result) {
        if (result.rows) {
            result.data = result.rows;
        }
        var filterResult = this.headerFilterHandler(result.data);
        //更新
        this.setState({
            headers: filterResult.headers,
            remoteHeaders: filterResult.remoteHeaders,
            loading: false //正在加载
        });
    },

    //表格内部修改的监听事件
    rowEditHandler: function rowEditHandler(columnIndex, value, text, name, data) {
        //表格内部修改的监听事件
        if (this.state.headers[columnIndex].editor && typeof this.state.headers[columnIndex].editor.edited === "function") {
            //得到新的一行数据
            this.state.data[this.state.editIndex] = this.state.headers[columnIndex].editor.edited(value, text, this.state.data[this.state.editIndex]); //先将值保存起来，不更新状态
        } else if (this.state.headers[columnIndex].editor) {
            //没有则默认以value作为值
            this.state.data[this.state.editIndex][name] = value; //先将值保存起来，不更新状态值
        }

        if (this.state.addData.has(this.state.editIndex)) {
            //说明是属于新增的
            this.state.addData.set(this.getKey(this.state.editIndex), this.state.data[this.state.editIndex]);
        } else {
            //属于修改的
            this.state.updatedData.set(this.getKey(this.state.editIndex), this.state.data[this.state.editIndex]);
        }
    },

    //错误处理事件
    ajaxError: function ajaxError(errorCode, message) {
        //错误处理事件
        Message.error(message);
    },

    //新增，修改，删除
    addRow: function addRow(rowData, editAble) {
        //添加一行,如果editable为true，说明添加以后处理编辑状态
        var newData = this.state.data;
        newData.unshift(rowData);
        this.state.addData.set(this.getKey(0), rowData); //添加到脏数据里
        this.focusIndex = 0;
        this.setState({
            detailIndex: null,
            detailView: null,
            data: newData,
            total: this.state.total + 1,
            addData: this.state.addData,
            editIndex: editAble ? 0 : null
        });
    },
    deleteRow: function deleteRow(rowIndex) {
        //删除指定行数据

        this.state.deleteData.push(this.state.data.splice(rowIndex, 1));
        var newData = this.state.data.splice(rowIndex, 1);

        this.setState({
            data: newData,
            total: this.state.total - 1,
            deleteData: this.state.deleteData
        });
    },
    editRow: function editRow(rowIndex) {
        //让某一个处理编辑状态

        this.setState({
            editIndex: rowIndex
        });
    },
    updateRow: function updateRow(rowIndex, rowData) {
        // //只读函数,更新某一行数据
        this.state.updatedData.set(this.getKey(rowIndex), rowData); //更新某一行

        if (rowIndex >= 0 && rowIndex < this.state.data.length) {
            var newData = this.state.data;
            newData[rowIndex] = rowData;
            this.setState({
                data: newData,
                updatedData: this.state.updatedData
            });
        }
    },

    //获取各类脏数据，及清空脏数据
    getAddData: function getAddData() {
        //获取新增数据
        var addData = [];
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
            for (var _iterator = this.state.addData.values()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                var value = _step.value;

                addData.push(value);
            }
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion && _iterator.return) {
                    _iterator.return();
                }
            } finally {
                if (_didIteratorError) {
                    throw _iteratorError;
                }
            }
        }

        return addData;
    },
    getUpdateData: function getUpdateData() {
        //获取被修改过的数据
        var updatedData = [];
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
            for (var _iterator2 = this.state.updatedData.values()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                var value = _step2.value;

                updatedData.push(value);
            }
        } catch (err) {
            _didIteratorError2 = true;
            _iteratorError2 = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion2 && _iterator2.return) {
                    _iterator2.return();
                }
            } finally {
                if (_didIteratorError2) {
                    throw _iteratorError2;
                }
            }
        }

        return updatedData;
    },
    getDeleteData: function getDeleteData() {
        //获取被删除的数据
        return this.state.deleteData;
    },
    clearDirtyData: function clearDirtyData() {
        //清除脏数据

        //清除脏数据
        this.setState({
            addData: new Map(),
            updatedData: new Map(),
            deleteData: []
        });
    }

};
module.exports = DataGridExtend;

/***/ }),
/* 137 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/**
 * Created by wangzhiyong on 2016/10/25.
 * 将DataGrid拆分,基本处理事件存在这里
 */
var React = __webpack_require__(1);
var unit = __webpack_require__(5);
var FetchModel = __webpack_require__(13);
var Message = __webpack_require__(14);
var DataGridHandler = {

    //列表常用处理函数
    paginationHandler: function paginationHandler(pageIndex) {
        //分页处理函数
        if (pageIndex == this.state.pageIndex) {
            //当前页,不处理
            return;
        } else {
            //跳转到指定页
            this.updateHandler(this.state.url, this.state.pageSize, pageIndex, this.state.sortName, this.state.sortOrder, null, null);
        }
    },
    prePaginationHandler: function prePaginationHandler() {
        //上一页
        if (this.state.pageIndex == 1) {} else {
            this.paginationHandler(this.state.pageIndex - 1);
        }
    },
    nextPaginationHandler: function nextPaginationHandler() {
        //下一页
        var pageAll = parseInt(this.state.total / this.state.pageSize); //共多少页
        var lastPageNum = this.state.total % this.state.pageSize;
        if (lastPageNum > 0) {
            pageAll++;
        }
        if (this.state.pageIndex == pageAll) {} else {
            this.paginationHandler(this.state.pageIndex + 1);
        }
    },
    pageSizeHandler: function pageSizeHandler(event) {

        this.updateHandler(this.state.url, event.target.value * 1, this.state.pageIndex, this.state.sortName, this.state.sortOrder, null);
    },
    sumHandler: function sumHandler(footerModel) {
        //计算某一列的总和
        var sum = null;
        if (this.state.data instanceof Array) {
            this.state.data.map(function (rowData, rowIndex) {

                var footerModelValue = rowData[footerModel.name]; //当前行当前列的值
                if (typeof footerModel.content === "function") {
                    //有函数则通过计算得到值
                    footerModelValue = footerModel.content(rowData, rowIndex); //
                }

                if (typeof (footerModelValue * 1) == "number") {
                    //如果值可以传为数值
                    if (sum == null) {
                        sum = 0; //可以计算则先设置为0
                    }
                    sum += footerModelValue * 1;
                } else {}
            });
        } else {}
        return sum;
    },
    avgHandler: function avgHandler(footerModel) {
        //计算某一列的平均值
        var sum = 0;var avg = null;
        if (this.state.data instanceof Array) {
            this.state.data.map(function (rowData, rowIndex) {
                var footerModelValue = rowData[footerModel.name]; //当前行当前列的值
                if (typeof footerModel.content === "function") {
                    //有函数则通过计算得到值
                    footerModelValue = footerModel.content(rowData, rowIndex); //
                }

                if (typeof (footerModelValue * 1) == "number") {
                    if (sum == null) {
                        sum = 0; //可以计算则先设置为0
                    }
                    sum += footerModelValue * 1;
                } else {}
            });
            avg = (sum / this.state.data.length).toFixed(2);
        } else {}
        return avg;
    },
    onSort: function onSort(sortName, sortOrder) {
        //排序事件
        this.updateHandler(this.state.url, this.state.pageSize, 1, sortName, sortOrder);
    },

    //更新函数
    updateHandler: function updateHandler(url, pageSize, pageIndex, sortName, sortOrder, params) {
        ////数据处理函数,更新


        if (this.state.addData.length > 0 || this.state.deleteData.length > 0 || this.state.updatedData.length > 0) {
            Message.confirm("有脏数据,是否继续更新列表?", this.updateHandlerConfirm.bind(this, url, pageSize, pageIndex, sortName, sortOrder, params), function () {
                return;
            });
        } else {
            this.updateHandlerConfirm(url, pageSize, pageIndex, sortName, sortOrder, params);
        }
    },
    updateHandlerConfirm: function updateHandlerConfirm(url, pageSize, pageIndex, sortName, sortOrder, params) {
        /*
        url与params而url可能是通过reload方法传进来的,并没有作为状态值绑定
        headers可能是后期才传了,见Page组件可知
        所以此处需要详细判断
        */
        if (!url) {
            //如果为空,先取状态值中...
            url = this.state.url;
        }

        if (url) {
            this.setState({
                loading: true,
                url: url, //更新,有可能从reload那里直接改变了url
                pageSize: pageSize,
                pageIndex: pageIndex
            });
            var actualParams = {};
            if (!params && this.state.params && _typeof(this.state.params) == "object") {
                //新的参数为null或者undefined，旧参数不为空
                if (this.props.pagination == true) {
                    actualParams.data = this.state.params;
                } else {
                    actualParams = this.state.params;
                }
                params = this.state.params; //保存以便下一次更新
            } else {
                //新参数不为空
                if (this.props.pagination == true) {
                    actualParams.data = params;
                } else {
                    actualParams = params;
                }
            }

            if (this.props.pagination == true) {
                actualParams.pageSize = pageSize;
                actualParams.pageIndex = pageIndex;
                actualParams.sortName = sortName;
                actualParams.sortOrder = sortOrder;
            } else {}
            /*
             在查询失败后可能要继续调用updateHandler查询前一页数据,所以传url,以便回调,
             而pageSize,pageIndex,sortName,sortOrder,params这些参数在查询成功后再更新
             所以回传
             */
            var fetchmodel = new FetchModel(url, this.loadSuccess.bind(this, url, pageSize, pageIndex, sortName, sortOrder, params), actualParams, this.loadError);
            console.log("datagrid-开始查询:", fetchmodel);
            unit.fetch.post(fetchmodel);
        } else {
            //没有传url,判断用户是否自定义了更新函数
            if (this.props.updateHandler != null) {

                this.props.updateHandler(pageSize, pageIndex, sortName, sortOrder);
            }
        }
    },

    loadSuccess: function loadSuccess(url, pageSize, pageIndex, sortName, sortOrder, params, result) {
        //数据加载成功
        var dataResult; //最终数据
        var totalResult; //最终总共记录
        var footerResult; //最终统计数据
        var dataSource = this.props.dataSource; //数据源
        if (dataSource == "data" && this.props.backSource != "data" && this.props.backSource != "data.data") {
            //dataSource属性为默认,backSource不为默认又不是旧版的data.data默认值,说明是旧版本中自定义的,
            dataSource = this.props.backSource;
        }
        if (dataSource) {
            //需要重新指定数据源
            dataResult = unit.getSource(result, dataSource);
        } else {
            dataResult = result;
        }
        if (this.props.pagination && this.props.totalSource) {
            //分页而且需要重新指定总记录数的数据源
            totalResult = unit.getSource(result, this.props.totalSource);
        } else if (this.props.pagination) {
            //分页了,没有指定,使用默认的
            if (result.total) {
                totalResult = result.total;
            } else {
                totalResult = null;
                throw "datagrid分页了,但返回的数据没有指定total";
            }
        } else {
            //不分页
            totalResult = dataResult.length;
        }

        if (this.props.footerSource) //需要重新指定页脚的数据源
            {
                footerResult = unit.getSource(result, this.props.footerSource);
            } else {
            //没有指定，
            if (result.footer) {
                footerResult = result.footer; //默认的
            } else {}
        }
        if (!footerResult) {
            footerResult = this.state.footer;
        }
        console.log("datagrid-fetch结果", {
            "原数据": result,
            "处理后的数据": dataResult
        });
        if (totalResult > 0 && dataResult && dataResult instanceof Array && dataResult.length == 0 && totalResult > 0 && pageIndex != 1) {
            //有总记录，没有当前记录数,不是第一页，继续查询转到上一页
            this.updateHandler(url, pageSize, pageIndex - 1, sortName, sortOrder, params);
        } else {
            //查询成功
            if (dataResult && dataResult instanceof Array) {
                //是数组,
                dataResult = this.props.pagination == true ? dataResult.slice(0, this.state.pageSize) : dataResult;
            }
            var checkedData = this.state.checkedData; //之前被选择的数据
            if (this.props.clearChecked == false) {
                //不清除之前的选择
                for (var dataIndex = 0; dataIndex < dataResult; dataIndex++) {
                    var currentKey = this.getKey(dataIndex, pageIndex); //得到当前的key
                    if (checkedData.has(currentKey)) {
                        //如果被选择则修改数据源
                        checkedData.set(currentKey, dataResult[dataIndex]);
                    }
                }
            }
            this.setState({
                pageSize: pageSize,
                params: unit.clone(params), //这里一定要复制,只有复制才可以比较两次参数是否发生改变没有,防止父组件状态任何改变而导致不停的查询
                pageIndex: pageIndex,
                sortName: sortName,
                sortOrder: sortOrder,
                data: dataResult,
                total: totalResult,
                footer: footerResult,
                loading: false,
                checkedData: this.props.clearChecked == true ? new Map() : checkedData,
                detailIndex: null, //重新查询要清空详情
                detailView: null

            });
        }
    },
    loadError: function loadError(errorCode, message) {
        //查询失败
        console.log("datagrid-error", errorCode, message);
        Message.error(message);
        this.setState({
            loading: false
        });
    },
    //选择处理函数
    getKey: function getKey(index, pageIndex) {
        //获取指定行的关键字，没有指定页号则为当前页
        var key = void 0;
        if (!pageIndex) {
            pageIndex = this.state.pageIndex;
        }
        if (index == null && index == undefined) {
            console.log(new Error("index 值传错"));
        } else {
            key = pageIndex.toString() + "-" + index.toString(); //默认用序号作为关键字
        }

        return key;
    },
    onChecked: function onChecked(index, value) {
        //选中事件
        var checkedData = this.state.checkedData; //已经选中的行
        if (this.props.singleSelect == true) {
            //单选则清空
            checkedData = new Map(); //单选先清空之前的选择
        }
        var key = this.getKey(index); //获取关键字
        if (value && value != "") {
            checkedData.set(key, this.state.data[index]);
        } else {
            checkedData.delete(key, this.state.data[index]);
        }

        this.setState({
            checkedData: checkedData
        });
        if (this.props.onChecked != null) {
            var data = [];
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = checkedData.values()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var _value = _step.value;

                    data.push(_value);
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            this.props.onChecked(data); //用于返回
        }
    },
    onMouseDown: function onMouseDown(index, event) {
        //一定要用鼠标按下事件,不保存在状态值中
        if (this.props.focusAble) {
            var node = event.target;
            while (node.nodeName.toLowerCase() != "tr" && node.nodeName.toLowerCase() != "body") {
                node = node.parentElement;
            }
            var trs = this.refs.realTable.children[1].children;
            for (var i = 0; i < trs.length; i++) {
                trs[i].className = trs[i].className.replace("selected", ""); //先去掉
            }
            if (node.className.indexOf("selected") > -1) {} else {
                node.className = node.className + " selected";
            }
        }
        this.focusIndex = index; //不更新状态值，否则导致频繁的更新
    },
    checkCurrentPageCheckedAll: function checkCurrentPageCheckedAll() {
        //判断当前页是否全部选中
        if (this.state.data instanceof Array) {} else {
            return;
        }
        var length = this.state.data.length;
        if (length == 0) {
            return false; //如果没有数据，则不判断，直接返回
        }
        var ischeckall = true;
        for (var i = 0; i < length; i++) {
            if (!this.state.checkedData.has(this.getKey(i))) {
                ischeckall = false;
                break;
            }
        }
        return ischeckall;
    },
    checkedAllHandler: function checkedAllHandler(value) {
        //全选按钮的单击事件
        if (this.state.data instanceof Array) {} else {
            return;
        }
        var length = this.state.data.length;
        var checkedData = this.state.checkedData;
        for (var i = 0; i < length; i++) {
            var key = this.getKey(i);
            if (value == "yes") {
                if (!checkedData.has(key)) {
                    checkedData.set(key, this.state.data[i]); //添加
                }
            } else {
                if (checkedData.has(key)) {
                    checkedData.delete(key, this.state.data[i]); //删除
                }
            }
        }

        this.setState({ checkedData: checkedData });
        if (this.props.onChecked != null) {
            //执行父组件的onchecked事件
            var data = [];
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = checkedData.values()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var _value2 = _step2.value;

                    data.push(_value2);
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }

            this.props.onChecked(data);
        }
    },

    //只读函数,父组件通过refs调用
    clearData: function clearData() {
        //清空数据
        this.setState({
            data: [],
            params: []
        });
    },
    reload: function reload(params, url) {
        //重新查询数据,

        //存在用户第一次没有传url,第二次才传url
        if (!url) {
            //如果为空,则使用旧的
            url = this.state.url; //得到旧的url
        }
        if (!params || params == "reload") {
            //说明是刷新(reload字符,是因为从刷新按钮过来的


            params = this.state.params;
        } else {
            //说明是重新查询
            this.isReloadType = true; //标记一下,说明用户使用的是ref方式查询数据
        }
        if (!url) {
            //没有传url

            if (this.props.updateHandler) {
                //用户自定义了更新事件
                this.props.updateHandler(this.state.pageSize, this.state.pageIndex, this.state.sortName, this.state.sortOrder);
            }
        } else {
            //传了url

            if (this.showUpdate(params, this.state.para)) {
                //参数发生改变,从第一页查起
                this.updateHandler(url, this.state.pageSize, 1, this.state.sortName, this.state.sortOrder, params);
            } else {
                //从当前页查起
                this.updateHandler(url, this.state.pageSize, this.state.pageIndex, this.state.sortName, this.state.sortOrder, params);
            }
        }
    },
    getFocusIndex: function getFocusIndex() {
        //只读函数,用于父组件获取数据

        return this.focusIndex;
    },
    getFocusRowData: function getFocusRowData(index) {
        //获取当前焦点行的数据
        if (index != null && index != undefined) {} else {
            index = this.focusIndex;
        }
        return this.state.data[index];
    },
    getChecked: function getChecked() {
        //获取选中的行数据
        var data = [];
        var _iteratorNormalCompletion3 = true;
        var _didIteratorError3 = false;
        var _iteratorError3 = undefined;

        try {
            for (var _iterator3 = this.state.checkedData.values()[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                var value = _step3.value;

                data.push(value);
            }
        } catch (err) {
            _didIteratorError3 = true;
            _iteratorError3 = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion3 && _iterator3.return) {
                    _iterator3.return();
                }
            } finally {
                if (_didIteratorError3) {
                    throw _iteratorError3;
                }
            }
        }

        return data;
    },
    getFooterData: function getFooterData() {
        //获取得页脚的统计值
        return this.footerActualData;
    },
    detailHandler: function detailHandler(rowIndex, rowData) {
        //执行显示详情功能
        var key = this.getKey(rowIndex); //获取关键值
        if (key == this.state.detailIndex) {
            this.setState({
                detailIndex: null,
                detailView: null
            });
        } else {
            if (this.props.detailHandler != null) {
                var detail = this.props.detailHandler(rowData);
                if (!detail) {
                    this.setState({
                        detailIndex: null, //方便下次操作
                        detailView: null
                    });
                } else {
                    var colSpan = this.state.headers.length;
                    if (this.props.selectAble == true) {
                        colSpan++;
                    }

                    this.setState({
                        detailIndex: key,
                        detailView: React.createElement(
                            "tr",
                            { key: key + "detail" },
                            React.createElement(
                                "td",
                                { colSpan: colSpan },
                                React.createElement(
                                    "div",
                                    { className: "wasabi-detail" },
                                    detail
                                )
                            )
                        )
                    });
                }
            }
        }
    }
};
module.exports = DataGridHandler;

/***/ }),
/* 138 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Created by zhiyongwang on 2016-02-25.
 * 工具栏按钮数据模型
 */
var ButtonModel = function ButtonModel(name, title) {
    var theme = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "default";

    _classCallCheck(this, ButtonModel);

    this.name = name;
    this.title = title;
    this.disabled = false;
    this.iconCls = null;
    this.iconAlign = "left";
    this.href = "javascript:void(0);";
    this.onClick = null;
    this.backgroundColor = null;
    this.tip = null;
    this.theme = theme;
    this.size = "default";
    this.color = null;
    this.hide = false;
    this.className = null;
    this.style = null;
    this.draggable = false;
};

module.exports = ButtonModel;

/***/ }),
/* 139 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Created by zhiyongwang on 2016-02-19.
 * 表单数据模型
 */
//
var FormModel = function FormModel(name) {
    var label = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
    var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "text";
    var required = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
    var value = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : "";
    var hide = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;
    var url = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : null;
    var data = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : [];
    var extraData = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : [];
    var valueField = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : "value";
    var textField = arguments.length > 10 && arguments[10] !== undefined ? arguments[10] : "text";

    _classCallCheck(this, FormModel);

    this.type = type; //控件类型
    this.name = name; // 数据key名称，唯一
    this.value = value; ///默认值
    this.readonly = false; ///，是否只读，默认为 false
    this.onClick = null; //单击事件
    this.onChange = null, //值改变事件
    this.className = null; // 需要额外添加的 className
    this.label = label; //{string|element}  // 表单字段提示文字
    this.equal = ""; // 判断值是否与另一个 Input 相等，string 为另一个  name
    this.min = null; // 值类型为 string 时，最小长度；为 number 时，最小值；为 array 时，最少选项数
    this.max = null; // 值类型为 string 时，最大长度；为 number 时，最大值；为 array 时，最多选项数
    this.required = required; // 是否必填，默认为 false
    this.regexp = null; //正则表达式
    this.placeholder = ""; //占位提示文字
    this.onlyline = false; //表单控件是否占一行
    this.rows = 5; //textarea行数
    this.hide = hide; //是否隐藏
    this.text = ""; //下拉框默认显示的文本值
    this.valueField = valueField; //下拉框数据字段值名称
    this.textField = textField; //下拉框数据字段文本名称
    this.url = url; //ajax的后台地址
    this.backSource = null; //ajax的返回的数据源中哪个属性作为数据源,为null时直接后台返回的数据作为数据源
    this.data = data; //数据源
    this.onSelect = null; //下拉框的选中事件
    this.extraData = extraData; //下拉框附加的数据
    this.secondUrl = null; //下拉选择面板中的二级节点查询url
    this.thirdUrl = null; //下拉选择面板中的三级节点查询url
    this.params = {}; //下拉选择面板中的一级节点查询url所需要的参数
    this.secondParams = {}; //下拉选择面板中的二级节点查询url所需要的参数
    this.secondParamsKey = null; //下拉选择面板中的查询二级节点时一级节点传递的value对应的参数名称
    this.thirdParams = {}; //下拉选择面板中的三级节点查询url所需要的参数
    this.thirdParamsKey = null; //下拉选择面板中的查询三级节点时二级节点传递的value对应的参数名称
    this.hotTitle = null; //热门选择标题
    this.hotData = null; //热门选择数据
    this.headers = null; //gridpicker下拉表格中的表格头部
    this.size = "default"; //表单大小
    this.postion = "default"; //表单位置
};

module.exports = FormModel;

/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Created by zhiyongwang on 2016-02-24.
 * 列表表头模型
 */
var EditorModel = __webpack_require__(275);

var HeaderModel = function HeaderModel(name, label) {
    var content = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    var hide = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
    var sortAble = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
    var width = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;

    _classCallCheck(this, HeaderModel);

    this.name = name;
    this.label = label;
    this.content = content;
    this.hide = hide;
    this.sortAble = sortAble;
    this.width = width;
    this.fixed = false;
    this.align = "left";
    this.rowspan = null; //表头占几行
    this.colspan = null; //表头占几列
    this.editor = null; //处理编辑时的,默认为文本
};

module.exports = HeaderModel;

/***/ }),
/* 141 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Created by zhiyongwang on 2016-05-24.
 * 三级联动选择面板数据模型
 */

var PickerModel = function PickerModel(value) {
    var text = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
    var expand = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    var childrens = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

    _classCallCheck(this, PickerModel);

    this.value = value; //名称
    this.text = text; //标题
    this.expand = expand; //是否为展开状态
    this.childrens = childrens; //子节点
};

module.exports = PickerModel;

/***/ }),
/* 142 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 143 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 144 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 145 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 146 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 147 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 148 */,
/* 149 */,
/* 150 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _assign = __webpack_require__(6);

var emptyObject = __webpack_require__(42);
var _invariant = __webpack_require__(2);

if (process.env.NODE_ENV !== 'production') {
  var warning = __webpack_require__(3);
}

var MIXINS_KEY = 'mixins';

// Helper function to allow the creation of anonymous functions which do not
// have .name set to the name of the variable being assigned to.
function identity(fn) {
  return fn;
}

var ReactPropTypeLocationNames;
if (process.env.NODE_ENV !== 'production') {
  ReactPropTypeLocationNames = {
    prop: 'prop',
    context: 'context',
    childContext: 'child context'
  };
} else {
  ReactPropTypeLocationNames = {};
}

function factory(ReactComponent, isValidElement, ReactNoopUpdateQueue) {
  /**
   * Policies that describe methods in `ReactClassInterface`.
   */

  var injectedMixins = [];

  /**
   * Composite components are higher-level components that compose other composite
   * or host components.
   *
   * To create a new type of `ReactClass`, pass a specification of
   * your new class to `React.createClass`. The only requirement of your class
   * specification is that you implement a `render` method.
   *
   *   var MyComponent = React.createClass({
   *     render: function() {
   *       return <div>Hello World</div>;
   *     }
   *   });
   *
   * The class specification supports a specific protocol of methods that have
   * special meaning (e.g. `render`). See `ReactClassInterface` for
   * more the comprehensive protocol. Any other properties and methods in the
   * class specification will be available on the prototype.
   *
   * @interface ReactClassInterface
   * @internal
   */
  var ReactClassInterface = {
    /**
     * An array of Mixin objects to include when defining your component.
     *
     * @type {array}
     * @optional
     */
    mixins: 'DEFINE_MANY',

    /**
     * An object containing properties and methods that should be defined on
     * the component's constructor instead of its prototype (static methods).
     *
     * @type {object}
     * @optional
     */
    statics: 'DEFINE_MANY',

    /**
     * Definition of prop types for this component.
     *
     * @type {object}
     * @optional
     */
    propTypes: 'DEFINE_MANY',

    /**
     * Definition of context types for this component.
     *
     * @type {object}
     * @optional
     */
    contextTypes: 'DEFINE_MANY',

    /**
     * Definition of context types this component sets for its children.
     *
     * @type {object}
     * @optional
     */
    childContextTypes: 'DEFINE_MANY',

    // ==== Definition methods ====

    /**
     * Invoked when the component is mounted. Values in the mapping will be set on
     * `this.props` if that prop is not specified (i.e. using an `in` check).
     *
     * This method is invoked before `getInitialState` and therefore cannot rely
     * on `this.state` or use `this.setState`.
     *
     * @return {object}
     * @optional
     */
    getDefaultProps: 'DEFINE_MANY_MERGED',

    /**
     * Invoked once before the component is mounted. The return value will be used
     * as the initial value of `this.state`.
     *
     *   getInitialState: function() {
     *     return {
     *       isOn: false,
     *       fooBaz: new BazFoo()
     *     }
     *   }
     *
     * @return {object}
     * @optional
     */
    getInitialState: 'DEFINE_MANY_MERGED',

    /**
     * @return {object}
     * @optional
     */
    getChildContext: 'DEFINE_MANY_MERGED',

    /**
     * Uses props from `this.props` and state from `this.state` to render the
     * structure of the component.
     *
     * No guarantees are made about when or how often this method is invoked, so
     * it must not have side effects.
     *
     *   render: function() {
     *     var name = this.props.name;
     *     return <div>Hello, {name}!</div>;
     *   }
     *
     * @return {ReactComponent}
     * @required
     */
    render: 'DEFINE_ONCE',

    // ==== Delegate methods ====

    /**
     * Invoked when the component is initially created and about to be mounted.
     * This may have side effects, but any external subscriptions or data created
     * by this method must be cleaned up in `componentWillUnmount`.
     *
     * @optional
     */
    componentWillMount: 'DEFINE_MANY',

    /**
     * Invoked when the component has been mounted and has a DOM representation.
     * However, there is no guarantee that the DOM node is in the document.
     *
     * Use this as an opportunity to operate on the DOM when the component has
     * been mounted (initialized and rendered) for the first time.
     *
     * @param {DOMElement} rootNode DOM element representing the component.
     * @optional
     */
    componentDidMount: 'DEFINE_MANY',

    /**
     * Invoked before the component receives new props.
     *
     * Use this as an opportunity to react to a prop transition by updating the
     * state using `this.setState`. Current props are accessed via `this.props`.
     *
     *   componentWillReceiveProps: function(nextProps, nextContext) {
     *     this.setState({
     *       likesIncreasing: nextProps.likeCount > this.props.likeCount
     *     });
     *   }
     *
     * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
     * transition may cause a state change, but the opposite is not true. If you
     * need it, you are probably looking for `componentWillUpdate`.
     *
     * @param {object} nextProps
     * @optional
     */
    componentWillReceiveProps: 'DEFINE_MANY',

    /**
     * Invoked while deciding if the component should be updated as a result of
     * receiving new props, state and/or context.
     *
     * Use this as an opportunity to `return false` when you're certain that the
     * transition to the new props/state/context will not require a component
     * update.
     *
     *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
     *     return !equal(nextProps, this.props) ||
     *       !equal(nextState, this.state) ||
     *       !equal(nextContext, this.context);
     *   }
     *
     * @param {object} nextProps
     * @param {?object} nextState
     * @param {?object} nextContext
     * @return {boolean} True if the component should update.
     * @optional
     */
    shouldComponentUpdate: 'DEFINE_ONCE',

    /**
     * Invoked when the component is about to update due to a transition from
     * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
     * and `nextContext`.
     *
     * Use this as an opportunity to perform preparation before an update occurs.
     *
     * NOTE: You **cannot** use `this.setState()` in this method.
     *
     * @param {object} nextProps
     * @param {?object} nextState
     * @param {?object} nextContext
     * @param {ReactReconcileTransaction} transaction
     * @optional
     */
    componentWillUpdate: 'DEFINE_MANY',

    /**
     * Invoked when the component's DOM representation has been updated.
     *
     * Use this as an opportunity to operate on the DOM when the component has
     * been updated.
     *
     * @param {object} prevProps
     * @param {?object} prevState
     * @param {?object} prevContext
     * @param {DOMElement} rootNode DOM element representing the component.
     * @optional
     */
    componentDidUpdate: 'DEFINE_MANY',

    /**
     * Invoked when the component is about to be removed from its parent and have
     * its DOM representation destroyed.
     *
     * Use this as an opportunity to deallocate any external resources.
     *
     * NOTE: There is no `componentDidUnmount` since your component will have been
     * destroyed by that point.
     *
     * @optional
     */
    componentWillUnmount: 'DEFINE_MANY',

    // ==== Advanced methods ====

    /**
     * Updates the component's currently mounted DOM representation.
     *
     * By default, this implements React's rendering and reconciliation algorithm.
     * Sophisticated clients may wish to override this.
     *
     * @param {ReactReconcileTransaction} transaction
     * @internal
     * @overridable
     */
    updateComponent: 'OVERRIDE_BASE'
  };

  /**
   * Mapping from class specification keys to special processing functions.
   *
   * Although these are declared like instance properties in the specification
   * when defining classes using `React.createClass`, they are actually static
   * and are accessible on the constructor instead of the prototype. Despite
   * being static, they must be defined outside of the "statics" key under
   * which all other static methods are defined.
   */
  var RESERVED_SPEC_KEYS = {
    displayName: function displayName(Constructor, _displayName) {
      Constructor.displayName = _displayName;
    },
    mixins: function mixins(Constructor, _mixins) {
      if (_mixins) {
        for (var i = 0; i < _mixins.length; i++) {
          mixSpecIntoComponent(Constructor, _mixins[i]);
        }
      }
    },
    childContextTypes: function childContextTypes(Constructor, _childContextTypes) {
      if (process.env.NODE_ENV !== 'production') {
        validateTypeDef(Constructor, _childContextTypes, 'childContext');
      }
      Constructor.childContextTypes = _assign({}, Constructor.childContextTypes, _childContextTypes);
    },
    contextTypes: function contextTypes(Constructor, _contextTypes) {
      if (process.env.NODE_ENV !== 'production') {
        validateTypeDef(Constructor, _contextTypes, 'context');
      }
      Constructor.contextTypes = _assign({}, Constructor.contextTypes, _contextTypes);
    },
    /**
     * Special case getDefaultProps which should move into statics but requires
     * automatic merging.
     */
    getDefaultProps: function getDefaultProps(Constructor, _getDefaultProps) {
      if (Constructor.getDefaultProps) {
        Constructor.getDefaultProps = createMergedResultFunction(Constructor.getDefaultProps, _getDefaultProps);
      } else {
        Constructor.getDefaultProps = _getDefaultProps;
      }
    },
    propTypes: function propTypes(Constructor, _propTypes) {
      if (process.env.NODE_ENV !== 'production') {
        validateTypeDef(Constructor, _propTypes, 'prop');
      }
      Constructor.propTypes = _assign({}, Constructor.propTypes, _propTypes);
    },
    statics: function statics(Constructor, _statics) {
      mixStaticSpecIntoComponent(Constructor, _statics);
    },
    autobind: function autobind() {}
  };

  function validateTypeDef(Constructor, typeDef, location) {
    for (var propName in typeDef) {
      if (typeDef.hasOwnProperty(propName)) {
        // use a warning instead of an _invariant so components
        // don't show up in prod but only in __DEV__
        if (process.env.NODE_ENV !== 'production') {
          warning(typeof typeDef[propName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', Constructor.displayName || 'ReactClass', ReactPropTypeLocationNames[location], propName);
        }
      }
    }
  }

  function validateMethodOverride(isAlreadyDefined, name) {
    var specPolicy = ReactClassInterface.hasOwnProperty(name) ? ReactClassInterface[name] : null;

    // Disallow overriding of base class methods unless explicitly allowed.
    if (ReactClassMixin.hasOwnProperty(name)) {
      _invariant(specPolicy === 'OVERRIDE_BASE', 'ReactClassInterface: You are attempting to override ' + '`%s` from your class specification. Ensure that your method names ' + 'do not overlap with React methods.', name);
    }

    // Disallow defining methods more than once unless explicitly allowed.
    if (isAlreadyDefined) {
      _invariant(specPolicy === 'DEFINE_MANY' || specPolicy === 'DEFINE_MANY_MERGED', 'ReactClassInterface: You are attempting to define ' + '`%s` on your component more than once. This conflict may be due ' + 'to a mixin.', name);
    }
  }

  /**
   * Mixin helper which handles policy validation and reserved
   * specification keys when building React classes.
   */
  function mixSpecIntoComponent(Constructor, spec) {
    if (!spec) {
      if (process.env.NODE_ENV !== 'production') {
        var typeofSpec = typeof spec === 'undefined' ? 'undefined' : _typeof(spec);
        var isMixinValid = typeofSpec === 'object' && spec !== null;

        if (process.env.NODE_ENV !== 'production') {
          warning(isMixinValid, "%s: You're attempting to include a mixin that is either null " + 'or not an object. Check the mixins included by the component, ' + 'as well as any mixins they include themselves. ' + 'Expected object but got %s.', Constructor.displayName || 'ReactClass', spec === null ? null : typeofSpec);
        }
      }

      return;
    }

    _invariant(typeof spec !== 'function', "ReactClass: You're attempting to " + 'use a component class or function as a mixin. Instead, just use a ' + 'regular object.');
    _invariant(!isValidElement(spec), "ReactClass: You're attempting to " + 'use a component as a mixin. Instead, just use a regular object.');

    var proto = Constructor.prototype;
    var autoBindPairs = proto.__reactAutoBindPairs;

    // By handling mixins before any other properties, we ensure the same
    // chaining order is applied to methods with DEFINE_MANY policy, whether
    // mixins are listed before or after these methods in the spec.
    if (spec.hasOwnProperty(MIXINS_KEY)) {
      RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
    }

    for (var name in spec) {
      if (!spec.hasOwnProperty(name)) {
        continue;
      }

      if (name === MIXINS_KEY) {
        // We have already handled mixins in a special case above.
        continue;
      }

      var property = spec[name];
      var isAlreadyDefined = proto.hasOwnProperty(name);
      validateMethodOverride(isAlreadyDefined, name);

      if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
        RESERVED_SPEC_KEYS[name](Constructor, property);
      } else {
        // Setup methods on prototype:
        // The following member methods should not be automatically bound:
        // 1. Expected ReactClass methods (in the "interface").
        // 2. Overridden methods (that were mixed in).
        var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);
        var isFunction = typeof property === 'function';
        var shouldAutoBind = isFunction && !isReactClassMethod && !isAlreadyDefined && spec.autobind !== false;

        if (shouldAutoBind) {
          autoBindPairs.push(name, property);
          proto[name] = property;
        } else {
          if (isAlreadyDefined) {
            var specPolicy = ReactClassInterface[name];

            // These cases should already be caught by validateMethodOverride.
            _invariant(isReactClassMethod && (specPolicy === 'DEFINE_MANY_MERGED' || specPolicy === 'DEFINE_MANY'), 'ReactClass: Unexpected spec policy %s for key %s ' + 'when mixing in component specs.', specPolicy, name);

            // For methods which are defined more than once, call the existing
            // methods before calling the new property, merging if appropriate.
            if (specPolicy === 'DEFINE_MANY_MERGED') {
              proto[name] = createMergedResultFunction(proto[name], property);
            } else if (specPolicy === 'DEFINE_MANY') {
              proto[name] = createChainedFunction(proto[name], property);
            }
          } else {
            proto[name] = property;
            if (process.env.NODE_ENV !== 'production') {
              // Add verbose displayName to the function, which helps when looking
              // at profiling tools.
              if (typeof property === 'function' && spec.displayName) {
                proto[name].displayName = spec.displayName + '_' + name;
              }
            }
          }
        }
      }
    }
  }

  function mixStaticSpecIntoComponent(Constructor, statics) {
    if (!statics) {
      return;
    }
    for (var name in statics) {
      var property = statics[name];
      if (!statics.hasOwnProperty(name)) {
        continue;
      }

      var isReserved = name in RESERVED_SPEC_KEYS;
      _invariant(!isReserved, 'ReactClass: You are attempting to define a reserved ' + 'property, `%s`, that shouldn\'t be on the "statics" key. Define it ' + 'as an instance property instead; it will still be accessible on the ' + 'constructor.', name);

      var isInherited = name in Constructor;
      _invariant(!isInherited, 'ReactClass: You are attempting to define ' + '`%s` on your component more than once. This conflict may be ' + 'due to a mixin.', name);
      Constructor[name] = property;
    }
  }

  /**
   * Merge two objects, but throw if both contain the same key.
   *
   * @param {object} one The first object, which is mutated.
   * @param {object} two The second object
   * @return {object} one after it has been mutated to contain everything in two.
   */
  function mergeIntoWithNoDuplicateKeys(one, two) {
    _invariant(one && two && (typeof one === 'undefined' ? 'undefined' : _typeof(one)) === 'object' && (typeof two === 'undefined' ? 'undefined' : _typeof(two)) === 'object', 'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.');

    for (var key in two) {
      if (two.hasOwnProperty(key)) {
        _invariant(one[key] === undefined, 'mergeIntoWithNoDuplicateKeys(): ' + 'Tried to merge two objects with the same key: `%s`. This conflict ' + 'may be due to a mixin; in particular, this may be caused by two ' + 'getInitialState() or getDefaultProps() methods returning objects ' + 'with clashing keys.', key);
        one[key] = two[key];
      }
    }
    return one;
  }

  /**
   * Creates a function that invokes two functions and merges their return values.
   *
   * @param {function} one Function to invoke first.
   * @param {function} two Function to invoke second.
   * @return {function} Function that invokes the two argument functions.
   * @private
   */
  function createMergedResultFunction(one, two) {
    return function mergedResult() {
      var a = one.apply(this, arguments);
      var b = two.apply(this, arguments);
      if (a == null) {
        return b;
      } else if (b == null) {
        return a;
      }
      var c = {};
      mergeIntoWithNoDuplicateKeys(c, a);
      mergeIntoWithNoDuplicateKeys(c, b);
      return c;
    };
  }

  /**
   * Creates a function that invokes two functions and ignores their return vales.
   *
   * @param {function} one Function to invoke first.
   * @param {function} two Function to invoke second.
   * @return {function} Function that invokes the two argument functions.
   * @private
   */
  function createChainedFunction(one, two) {
    return function chainedFunction() {
      one.apply(this, arguments);
      two.apply(this, arguments);
    };
  }

  /**
   * Binds a method to the component.
   *
   * @param {object} component Component whose method is going to be bound.
   * @param {function} method Method to be bound.
   * @return {function} The bound method.
   */
  function bindAutoBindMethod(component, method) {
    var boundMethod = method.bind(component);
    if (process.env.NODE_ENV !== 'production') {
      boundMethod.__reactBoundContext = component;
      boundMethod.__reactBoundMethod = method;
      boundMethod.__reactBoundArguments = null;
      var componentName = component.constructor.displayName;
      var _bind = boundMethod.bind;
      boundMethod.bind = function (newThis) {
        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        // User is trying to bind() an autobound method; we effectively will
        // ignore the value of "this" that the user is trying to use, so
        // let's warn.
        if (newThis !== component && newThis !== null) {
          if (process.env.NODE_ENV !== 'production') {
            warning(false, 'bind(): React component methods may only be bound to the ' + 'component instance. See %s', componentName);
          }
        } else if (!args.length) {
          if (process.env.NODE_ENV !== 'production') {
            warning(false, 'bind(): You are binding a component method to the component. ' + 'React does this for you automatically in a high-performance ' + 'way, so you can safely remove this call. See %s', componentName);
          }
          return boundMethod;
        }
        var reboundMethod = _bind.apply(boundMethod, arguments);
        reboundMethod.__reactBoundContext = component;
        reboundMethod.__reactBoundMethod = method;
        reboundMethod.__reactBoundArguments = args;
        return reboundMethod;
      };
    }
    return boundMethod;
  }

  /**
   * Binds all auto-bound methods in a component.
   *
   * @param {object} component Component whose method is going to be bound.
   */
  function bindAutoBindMethods(component) {
    var pairs = component.__reactAutoBindPairs;
    for (var i = 0; i < pairs.length; i += 2) {
      var autoBindKey = pairs[i];
      var method = pairs[i + 1];
      component[autoBindKey] = bindAutoBindMethod(component, method);
    }
  }

  var IsMountedPreMixin = {
    componentDidMount: function componentDidMount() {
      this.__isMounted = true;
    }
  };

  var IsMountedPostMixin = {
    componentWillUnmount: function componentWillUnmount() {
      this.__isMounted = false;
    }
  };

  /**
   * Add more to the ReactClass base class. These are all legacy features and
   * therefore not already part of the modern ReactComponent.
   */
  var ReactClassMixin = {
    /**
     * TODO: This will be deprecated because state should always keep a consistent
     * type signature and the only use case for this, is to avoid that.
     */
    replaceState: function replaceState(newState, callback) {
      this.updater.enqueueReplaceState(this, newState, callback);
    },

    /**
     * Checks whether or not this composite component is mounted.
     * @return {boolean} True if mounted, false otherwise.
     * @protected
     * @final
     */
    isMounted: function isMounted() {
      if (process.env.NODE_ENV !== 'production') {
        warning(this.__didWarnIsMounted, '%s: isMounted is deprecated. Instead, make sure to clean up ' + 'subscriptions and pending requests in componentWillUnmount to ' + 'prevent memory leaks.', this.constructor && this.constructor.displayName || this.name || 'Component');
        this.__didWarnIsMounted = true;
      }
      return !!this.__isMounted;
    }
  };

  var ReactClassComponent = function ReactClassComponent() {};
  _assign(ReactClassComponent.prototype, ReactComponent.prototype, ReactClassMixin);

  /**
   * Creates a composite component class given a class specification.
   * See https://facebook.github.io/react/docs/top-level-api.html#react.createclass
   *
   * @param {object} spec Class specification (which must define `render`).
   * @return {function} Component constructor function.
   * @public
   */
  function createClass(spec) {
    // To keep our warnings more understandable, we'll use a little hack here to
    // ensure that Constructor.name !== 'Constructor'. This makes sure we don't
    // unnecessarily identify a class without displayName as 'Constructor'.
    var Constructor = identity(function (props, context, updater) {
      // This constructor gets overridden by mocks. The argument is used
      // by mocks to assert on what gets mounted.

      if (process.env.NODE_ENV !== 'production') {
        warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory');
      }

      // Wire up auto-binding
      if (this.__reactAutoBindPairs.length) {
        bindAutoBindMethods(this);
      }

      this.props = props;
      this.context = context;
      this.refs = emptyObject;
      this.updater = updater || ReactNoopUpdateQueue;

      this.state = null;

      // ReactClasses doesn't have constructors. Instead, they use the
      // getInitialState and componentWillMount methods for initialization.

      var initialState = this.getInitialState ? this.getInitialState() : null;
      if (process.env.NODE_ENV !== 'production') {
        // We allow auto-mocks to proceed as if they're returning null.
        if (initialState === undefined && this.getInitialState._isMockFunction) {
          // This is probably bad practice. Consider warning here and
          // deprecating this convenience.
          initialState = null;
        }
      }
      _invariant((typeof initialState === 'undefined' ? 'undefined' : _typeof(initialState)) === 'object' && !Array.isArray(initialState), '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent');

      this.state = initialState;
    });
    Constructor.prototype = new ReactClassComponent();
    Constructor.prototype.constructor = Constructor;
    Constructor.prototype.__reactAutoBindPairs = [];

    injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));

    mixSpecIntoComponent(Constructor, IsMountedPreMixin);
    mixSpecIntoComponent(Constructor, spec);
    mixSpecIntoComponent(Constructor, IsMountedPostMixin);

    // Initialize the defaultProps property after all mixins have been merged.
    if (Constructor.getDefaultProps) {
      Constructor.defaultProps = Constructor.getDefaultProps();
    }

    if (process.env.NODE_ENV !== 'production') {
      // This is a tag to indicate that the use of these method names is ok,
      // since it's used with createClass. If it's not, then it's likely a
      // mistake so we'll warn you to use the static property, property
      // initializer or constructor respectively.
      if (Constructor.getDefaultProps) {
        Constructor.getDefaultProps.isReactClassApproved = {};
      }
      if (Constructor.prototype.getInitialState) {
        Constructor.prototype.getInitialState.isReactClassApproved = {};
      }
    }

    _invariant(Constructor.prototype.render, 'createClass(...): Class specification must implement a `render` method.');

    if (process.env.NODE_ENV !== 'production') {
      warning(!Constructor.prototype.componentShouldUpdate, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', spec.displayName || 'A component');
      warning(!Constructor.prototype.componentWillRecieveProps, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', spec.displayName || 'A component');
    }

    // Reduce time spent doing lookups by setting these on the prototype.
    for (var methodName in ReactClassInterface) {
      if (!Constructor.prototype[methodName]) {
        Constructor.prototype[methodName] = null;
      }
    }

    return Constructor;
  }

  return createClass;
}

module.exports = factory;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 151 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

var _hyphenPattern = /-(.)/g;

/**
 * Camelcases a hyphenated string, for example:
 *
 *   > camelize('background-color')
 *   < "backgroundColor"
 *
 * @param {string} string
 * @return {string}
 */
function camelize(string) {
  return string.replace(_hyphenPattern, function (_, character) {
    return character.toUpperCase();
  });
}

module.exports = camelize;

/***/ }),
/* 152 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */



var camelize = __webpack_require__(151);

var msPattern = /^-ms-/;

/**
 * Camelcases a hyphenated CSS property name, for example:
 *
 *   > camelizeStyleName('background-color')
 *   < "backgroundColor"
 *   > camelizeStyleName('-moz-transition')
 *   < "MozTransition"
 *   > camelizeStyleName('-ms-transition')
 *   < "msTransition"
 *
 * As Andi Smith suggests
 * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
 * is converted to lowercase `ms`.
 *
 * @param {string} string
 * @return {string}
 */
function camelizeStyleName(string) {
  return camelize(string.replace(msPattern, 'ms-'));
}

module.exports = camelizeStyleName;

/***/ }),
/* 153 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

var isTextNode = __webpack_require__(161);

/*eslint-disable no-bitwise */

/**
 * Checks if a given DOM node contains or is another DOM node.
 */
function containsNode(outerNode, innerNode) {
  if (!outerNode || !innerNode) {
    return false;
  } else if (outerNode === innerNode) {
    return true;
  } else if (isTextNode(outerNode)) {
    return false;
  } else if (isTextNode(innerNode)) {
    return containsNode(outerNode, innerNode.parentNode);
  } else if ('contains' in outerNode) {
    return outerNode.contains(innerNode);
  } else if (outerNode.compareDocumentPosition) {
    return !!(outerNode.compareDocumentPosition(innerNode) & 16);
  } else {
    return false;
  }
}

module.exports = containsNode;

/***/ }),
/* 154 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var invariant = __webpack_require__(2);

/**
 * Convert array-like objects to arrays.
 *
 * This API assumes the caller knows the contents of the data type. For less
 * well defined inputs use createArrayFromMixed.
 *
 * @param {object|function|filelist} obj
 * @return {array}
 */
function toArray(obj) {
  var length = obj.length;

  // Some browsers builtin objects can report typeof 'function' (e.g. NodeList
  // in old versions of Safari).
  !(!Array.isArray(obj) && ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object' || typeof obj === 'function')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Array-like object expected') : invariant(false) : void 0;

  !(typeof length === 'number') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object needs a length property') : invariant(false) : void 0;

  !(length === 0 || length - 1 in obj) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object should have keys for indices') : invariant(false) : void 0;

  !(typeof obj.callee !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object can\'t be `arguments`. Use rest params ' + '(function(...args) {}) or Array.from() instead.') : invariant(false) : void 0;

  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs
  // without method will throw during the slice call and skip straight to the
  // fallback.
  if (obj.hasOwnProperty) {
    try {
      return Array.prototype.slice.call(obj);
    } catch (e) {
      // IE < 9 does not support Array#slice on collections objects
    }
  }

  // Fall back to copying key by key. This assumes all keys have a value,
  // so will not preserve sparsely populated inputs.
  var ret = Array(length);
  for (var ii = 0; ii < length; ii++) {
    ret[ii] = obj[ii];
  }
  return ret;
}

/**
 * Perform a heuristic test to determine if an object is "array-like".
 *
 *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
 *   Joshu replied: "Mu."
 *
 * This function determines if its argument has "array nature": it returns
 * true if the argument is an actual array, an `arguments' object, or an
 * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
 *
 * It will return false for other array-like objects like Filelist.
 *
 * @param {*} obj
 * @return {boolean}
 */
function hasArrayNature(obj) {
  return (
    // not null/false
    !!obj && (
    // arrays are objects, NodeLists are functions in Safari
    (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) == 'object' || typeof obj == 'function') &&
    // quacks like an array
    'length' in obj &&
    // not window
    !('setInterval' in obj) &&
    // no DOM node should be considered an array-like
    // a 'select' element has 'length' and 'item' properties on IE8
    typeof obj.nodeType != 'number' && (
    // a real array
    Array.isArray(obj) ||
    // arguments
    'callee' in obj ||
    // HTMLCollection/NodeList
    'item' in obj)
  );
}

/**
 * Ensure that the argument is an array by wrapping it in an array if it is not.
 * Creates a copy of the argument if it is already an array.
 *
 * This is mostly useful idiomatically:
 *
 *   var createArrayFromMixed = require('createArrayFromMixed');
 *
 *   function takesOneOrMoreThings(things) {
 *     things = createArrayFromMixed(things);
 *     ...
 *   }
 *
 * This allows you to treat `things' as an array, but accept scalars in the API.
 *
 * If you need to convert an array-like object, like `arguments`, into an array
 * use toArray instead.
 *
 * @param {*} obj
 * @return {array}
 */
function createArrayFromMixed(obj) {
  if (!hasArrayNature(obj)) {
    return [obj];
  } else if (Array.isArray(obj)) {
    return obj.slice();
  } else {
    return toArray(obj);
  }
}

module.exports = createArrayFromMixed;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 155 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

/*eslint-disable fb-www/unsafe-html*/

var ExecutionEnvironment = __webpack_require__(9);

var createArrayFromMixed = __webpack_require__(154);
var getMarkupWrap = __webpack_require__(156);
var invariant = __webpack_require__(2);

/**
 * Dummy container used to render all markup.
 */
var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

/**
 * Pattern used by `getNodeName`.
 */
var nodeNamePattern = /^\s*<(\w+)/;

/**
 * Extracts the `nodeName` of the first element in a string of markup.
 *
 * @param {string} markup String of markup.
 * @return {?string} Node name of the supplied markup.
 */
function getNodeName(markup) {
  var nodeNameMatch = markup.match(nodeNamePattern);
  return nodeNameMatch && nodeNameMatch[1].toLowerCase();
}

/**
 * Creates an array containing the nodes rendered from the supplied markup. The
 * optionally supplied `handleScript` function will be invoked once for each
 * <script> element that is rendered. If no `handleScript` function is supplied,
 * an exception is thrown if any <script> elements are rendered.
 *
 * @param {string} markup A string of valid HTML markup.
 * @param {?function} handleScript Invoked once for each rendered <script>.
 * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.
 */
function createNodesFromMarkup(markup, handleScript) {
  var node = dummyNode;
  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup dummy not initialized') : invariant(false) : void 0;
  var nodeName = getNodeName(markup);

  var wrap = nodeName && getMarkupWrap(nodeName);
  if (wrap) {
    node.innerHTML = wrap[1] + markup + wrap[2];

    var wrapDepth = wrap[0];
    while (wrapDepth--) {
      node = node.lastChild;
    }
  } else {
    node.innerHTML = markup;
  }

  var scripts = node.getElementsByTagName('script');
  if (scripts.length) {
    !handleScript ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup(...): Unexpected <script> element rendered.') : invariant(false) : void 0;
    createArrayFromMixed(scripts).forEach(handleScript);
  }

  var nodes = Array.from(node.childNodes);
  while (node.lastChild) {
    node.removeChild(node.lastChild);
  }
  return nodes;
}

module.exports = createNodesFromMarkup;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 156 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

/*eslint-disable fb-www/unsafe-html */

var ExecutionEnvironment = __webpack_require__(9);

var invariant = __webpack_require__(2);

/**
 * Dummy container used to detect which wraps are necessary.
 */
var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

/**
 * Some browsers cannot use `innerHTML` to render certain elements standalone,
 * so we wrap them, render the wrapped nodes, then extract the desired node.
 *
 * In IE8, certain elements cannot render alone, so wrap all elements ('*').
 */

var shouldWrap = {};

var selectWrap = [1, '<select multiple="true">', '</select>'];
var tableWrap = [1, '<table>', '</table>'];
var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];

var svgWrap = [1, '<svg xmlns="http://www.w3.org/2000/svg">', '</svg>'];

var markupWrap = {
  '*': [1, '?<div>', '</div>'],

  'area': [1, '<map>', '</map>'],
  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
  'legend': [1, '<fieldset>', '</fieldset>'],
  'param': [1, '<object>', '</object>'],
  'tr': [2, '<table><tbody>', '</tbody></table>'],

  'optgroup': selectWrap,
  'option': selectWrap,

  'caption': tableWrap,
  'colgroup': tableWrap,
  'tbody': tableWrap,
  'tfoot': tableWrap,
  'thead': tableWrap,

  'td': trWrap,
  'th': trWrap
};

// Initialize the SVG elements since we know they'll always need to be wrapped
// consistently. If they are created inside a <div> they will be initialized in
// the wrong namespace (and will not display).
var svgElements = ['circle', 'clipPath', 'defs', 'ellipse', 'g', 'image', 'line', 'linearGradient', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'text', 'tspan'];
svgElements.forEach(function (nodeName) {
  markupWrap[nodeName] = svgWrap;
  shouldWrap[nodeName] = true;
});

/**
 * Gets the markup wrap configuration for the supplied `nodeName`.
 *
 * NOTE: This lazily detects which wraps are necessary for the current browser.
 *
 * @param {string} nodeName Lowercase `nodeName`.
 * @return {?array} Markup wrap configuration, if applicable.
 */
function getMarkupWrap(nodeName) {
  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Markup wrapping node not initialized') : invariant(false) : void 0;
  if (!markupWrap.hasOwnProperty(nodeName)) {
    nodeName = '*';
  }
  if (!shouldWrap.hasOwnProperty(nodeName)) {
    if (nodeName === '*') {
      dummyNode.innerHTML = '<link />';
    } else {
      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';
    }
    shouldWrap[nodeName] = !dummyNode.firstChild;
  }
  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;
}

module.exports = getMarkupWrap;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 157 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */



/**
 * Gets the scroll position of the supplied element or window.
 *
 * The return values are unbounded, unlike `getScrollPosition`. This means they
 * may be negative or exceed the element boundaries (which is possible using
 * inertial scrolling).
 *
 * @param {DOMWindow|DOMElement} scrollable
 * @return {object} Map with `x` and `y` keys.
 */

function getUnboundedScrollPosition(scrollable) {
  if (scrollable.Window && scrollable instanceof scrollable.Window) {
    return {
      x: scrollable.pageXOffset || scrollable.document.documentElement.scrollLeft,
      y: scrollable.pageYOffset || scrollable.document.documentElement.scrollTop
    };
  }
  return {
    x: scrollable.scrollLeft,
    y: scrollable.scrollTop
  };
}

module.exports = getUnboundedScrollPosition;

/***/ }),
/* 158 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

var _uppercasePattern = /([A-Z])/g;

/**
 * Hyphenates a camelcased string, for example:
 *
 *   > hyphenate('backgroundColor')
 *   < "background-color"
 *
 * For CSS style names, use `hyphenateStyleName` instead which works properly
 * with all vendor prefixes, including `ms`.
 *
 * @param {string} string
 * @return {string}
 */
function hyphenate(string) {
  return string.replace(_uppercasePattern, '-$1').toLowerCase();
}

module.exports = hyphenate;

/***/ }),
/* 159 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */



var hyphenate = __webpack_require__(158);

var msPattern = /^ms-/;

/**
 * Hyphenates a camelcased CSS property name, for example:
 *
 *   > hyphenateStyleName('backgroundColor')
 *   < "background-color"
 *   > hyphenateStyleName('MozTransition')
 *   < "-moz-transition"
 *   > hyphenateStyleName('msTransition')
 *   < "-ms-transition"
 *
 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
 * is converted to `-ms-`.
 *
 * @param {string} string
 * @return {string}
 */
function hyphenateStyleName(string) {
  return hyphenate(string).replace(msPattern, '-ms-');
}

module.exports = hyphenateStyleName;

/***/ }),
/* 160 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

/**
 * @param {*} object The object to check.
 * @return {boolean} Whether or not the object is a DOM node.
 */

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function isNode(object) {
  var doc = object ? object.ownerDocument || object : document;
  var defaultView = doc.defaultView || window;
  return !!(object && (typeof defaultView.Node === 'function' ? object instanceof defaultView.Node : (typeof object === 'undefined' ? 'undefined' : _typeof(object)) === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string'));
}

module.exports = isNode;

/***/ }),
/* 161 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

var isNode = __webpack_require__(160);

/**
 * @param {*} object The object to check.
 * @return {boolean} Whether or not the object is a DOM text node.
 */
function isTextNode(object) {
  return isNode(object) && object.nodeType == 3;
}

module.exports = isTextNode;

/***/ }),
/* 162 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 * @typechecks static-only
 */



/**
 * Memoizes the return value of a function that accepts one string argument.
 */

function memoizeStringOnly(callback) {
  var cache = {};
  return function (string) {
    if (!cache.hasOwnProperty(string)) {
      cache[string] = callback.call(this, string);
    }
    return cache[string];
  };
}

module.exports = memoizeStringOnly;

/***/ }),
/* 163 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */



var ExecutionEnvironment = __webpack_require__(9);

var performance;

if (ExecutionEnvironment.canUseDOM) {
  performance = window.performance || window.msPerformance || window.webkitPerformance;
}

module.exports = performance || {};

/***/ }),
/* 164 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

var performance = __webpack_require__(163);

var performanceNow;

/**
 * Detect if we can use `window.performance.now()` and gracefully fallback to
 * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now
 * because of Facebook's testing infrastructure.
 */
if (performance.now) {
  performanceNow = function performanceNow() {
    return performance.now();
  };
} else {
  performanceNow = function performanceNow() {
    return Date.now();
  };
}

module.exports = performanceNow;

/***/ }),
/* 165 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/**
 *  Copyright (c) 2014-2015, Facebook, Inc.
 *  All rights reserved.
 *
 *  This source code is licensed under the BSD-style license found in the
 *  LICENSE file in the root directory of this source tree. An additional grant
 *  of patent rights can be found in the PATENTS file in the same directory.
 */

(function (global, factory) {
  ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' ? module.exports = factory() :  true ? !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :
				__WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : global.Immutable = factory();
})(undefined, function () {
  'use strict';
  var SLICE$0 = Array.prototype.slice;

  function createClass(ctor, superClass) {
    if (superClass) {
      ctor.prototype = Object.create(superClass.prototype);
    }
    ctor.prototype.constructor = ctor;
  }

  function Iterable(value) {
    return isIterable(value) ? value : Seq(value);
  }

  createClass(KeyedIterable, Iterable);
  function KeyedIterable(value) {
    return isKeyed(value) ? value : KeyedSeq(value);
  }

  createClass(IndexedIterable, Iterable);
  function IndexedIterable(value) {
    return isIndexed(value) ? value : IndexedSeq(value);
  }

  createClass(SetIterable, Iterable);
  function SetIterable(value) {
    return isIterable(value) && !isAssociative(value) ? value : SetSeq(value);
  }

  function isIterable(maybeIterable) {
    return !!(maybeIterable && maybeIterable[IS_ITERABLE_SENTINEL]);
  }

  function isKeyed(maybeKeyed) {
    return !!(maybeKeyed && maybeKeyed[IS_KEYED_SENTINEL]);
  }

  function isIndexed(maybeIndexed) {
    return !!(maybeIndexed && maybeIndexed[IS_INDEXED_SENTINEL]);
  }

  function isAssociative(maybeAssociative) {
    return isKeyed(maybeAssociative) || isIndexed(maybeAssociative);
  }

  function isOrdered(maybeOrdered) {
    return !!(maybeOrdered && maybeOrdered[IS_ORDERED_SENTINEL]);
  }

  Iterable.isIterable = isIterable;
  Iterable.isKeyed = isKeyed;
  Iterable.isIndexed = isIndexed;
  Iterable.isAssociative = isAssociative;
  Iterable.isOrdered = isOrdered;

  Iterable.Keyed = KeyedIterable;
  Iterable.Indexed = IndexedIterable;
  Iterable.Set = SetIterable;

  var IS_ITERABLE_SENTINEL = '@@__IMMUTABLE_ITERABLE__@@';
  var IS_KEYED_SENTINEL = '@@__IMMUTABLE_KEYED__@@';
  var IS_INDEXED_SENTINEL = '@@__IMMUTABLE_INDEXED__@@';
  var IS_ORDERED_SENTINEL = '@@__IMMUTABLE_ORDERED__@@';

  // Used for setting prototype methods that IE8 chokes on.
  var DELETE = 'delete';

  // Constants describing the size of trie nodes.
  var SHIFT = 5; // Resulted in best performance after ______?
  var SIZE = 1 << SHIFT;
  var MASK = SIZE - 1;

  // A consistent shared value representing "not set" which equals nothing other
  // than itself, and nothing that could be provided externally.
  var NOT_SET = {};

  // Boolean references, Rough equivalent of `bool &`.
  var CHANGE_LENGTH = { value: false };
  var DID_ALTER = { value: false };

  function MakeRef(ref) {
    ref.value = false;
    return ref;
  }

  function SetRef(ref) {
    ref && (ref.value = true);
  }

  // A function which returns a value representing an "owner" for transient writes
  // to tries. The return value will only ever equal itself, and will not equal
  // the return of any subsequent call of this function.
  function OwnerID() {}

  // http://jsperf.com/copy-array-inline
  function arrCopy(arr, offset) {
    offset = offset || 0;
    var len = Math.max(0, arr.length - offset);
    var newArr = new Array(len);
    for (var ii = 0; ii < len; ii++) {
      newArr[ii] = arr[ii + offset];
    }
    return newArr;
  }

  function ensureSize(iter) {
    if (iter.size === undefined) {
      iter.size = iter.__iterate(returnTrue);
    }
    return iter.size;
  }

  function wrapIndex(iter, index) {
    // This implements "is array index" which the ECMAString spec defines as:
    //
    //     A String property name P is an array index if and only if
    //     ToString(ToUint32(P)) is equal to P and ToUint32(P) is not equal
    //     to 2^32−1.
    //
    // http://www.ecma-international.org/ecma-262/6.0/#sec-array-exotic-objects
    if (typeof index !== 'number') {
      var uint32Index = index >>> 0; // N >>> 0 is shorthand for ToUint32
      if ('' + uint32Index !== index || uint32Index === 4294967295) {
        return NaN;
      }
      index = uint32Index;
    }
    return index < 0 ? ensureSize(iter) + index : index;
  }

  function returnTrue() {
    return true;
  }

  function wholeSlice(begin, end, size) {
    return (begin === 0 || size !== undefined && begin <= -size) && (end === undefined || size !== undefined && end >= size);
  }

  function resolveBegin(begin, size) {
    return resolveIndex(begin, size, 0);
  }

  function resolveEnd(end, size) {
    return resolveIndex(end, size, size);
  }

  function resolveIndex(index, size, defaultIndex) {
    return index === undefined ? defaultIndex : index < 0 ? Math.max(0, size + index) : size === undefined ? index : Math.min(size, index);
  }

  /* global Symbol */

  var ITERATE_KEYS = 0;
  var ITERATE_VALUES = 1;
  var ITERATE_ENTRIES = 2;

  var REAL_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
  var FAUX_ITERATOR_SYMBOL = '@@iterator';

  var ITERATOR_SYMBOL = REAL_ITERATOR_SYMBOL || FAUX_ITERATOR_SYMBOL;

  function Iterator(next) {
    this.next = next;
  }

  Iterator.prototype.toString = function () {
    return '[Iterator]';
  };

  Iterator.KEYS = ITERATE_KEYS;
  Iterator.VALUES = ITERATE_VALUES;
  Iterator.ENTRIES = ITERATE_ENTRIES;

  Iterator.prototype.inspect = Iterator.prototype.toSource = function () {
    return this.toString();
  };
  Iterator.prototype[ITERATOR_SYMBOL] = function () {
    return this;
  };

  function iteratorValue(type, k, v, iteratorResult) {
    var value = type === 0 ? k : type === 1 ? v : [k, v];
    iteratorResult ? iteratorResult.value = value : iteratorResult = {
      value: value, done: false
    };
    return iteratorResult;
  }

  function iteratorDone() {
    return { value: undefined, done: true };
  }

  function hasIterator(maybeIterable) {
    return !!getIteratorFn(maybeIterable);
  }

  function isIterator(maybeIterator) {
    return maybeIterator && typeof maybeIterator.next === 'function';
  }

  function getIterator(iterable) {
    var iteratorFn = getIteratorFn(iterable);
    return iteratorFn && iteratorFn.call(iterable);
  }

  function getIteratorFn(iterable) {
    var iteratorFn = iterable && (REAL_ITERATOR_SYMBOL && iterable[REAL_ITERATOR_SYMBOL] || iterable[FAUX_ITERATOR_SYMBOL]);
    if (typeof iteratorFn === 'function') {
      return iteratorFn;
    }
  }

  function isArrayLike(value) {
    return value && typeof value.length === 'number';
  }

  createClass(Seq, Iterable);
  function Seq(value) {
    return value === null || value === undefined ? emptySequence() : isIterable(value) ? value.toSeq() : seqFromValue(value);
  }

  Seq.of = function () /*...values*/{
    return Seq(arguments);
  };

  Seq.prototype.toSeq = function () {
    return this;
  };

  Seq.prototype.toString = function () {
    return this.__toString('Seq {', '}');
  };

  Seq.prototype.cacheResult = function () {
    if (!this._cache && this.__iterateUncached) {
      this._cache = this.entrySeq().toArray();
      this.size = this._cache.length;
    }
    return this;
  };

  // abstract __iterateUncached(fn, reverse)

  Seq.prototype.__iterate = function (fn, reverse) {
    return seqIterate(this, fn, reverse, true);
  };

  // abstract __iteratorUncached(type, reverse)

  Seq.prototype.__iterator = function (type, reverse) {
    return seqIterator(this, type, reverse, true);
  };

  createClass(KeyedSeq, Seq);
  function KeyedSeq(value) {
    return value === null || value === undefined ? emptySequence().toKeyedSeq() : isIterable(value) ? isKeyed(value) ? value.toSeq() : value.fromEntrySeq() : keyedSeqFromValue(value);
  }

  KeyedSeq.prototype.toKeyedSeq = function () {
    return this;
  };

  createClass(IndexedSeq, Seq);
  function IndexedSeq(value) {
    return value === null || value === undefined ? emptySequence() : !isIterable(value) ? indexedSeqFromValue(value) : isKeyed(value) ? value.entrySeq() : value.toIndexedSeq();
  }

  IndexedSeq.of = function () /*...values*/{
    return IndexedSeq(arguments);
  };

  IndexedSeq.prototype.toIndexedSeq = function () {
    return this;
  };

  IndexedSeq.prototype.toString = function () {
    return this.__toString('Seq [', ']');
  };

  IndexedSeq.prototype.__iterate = function (fn, reverse) {
    return seqIterate(this, fn, reverse, false);
  };

  IndexedSeq.prototype.__iterator = function (type, reverse) {
    return seqIterator(this, type, reverse, false);
  };

  createClass(SetSeq, Seq);
  function SetSeq(value) {
    return (value === null || value === undefined ? emptySequence() : !isIterable(value) ? indexedSeqFromValue(value) : isKeyed(value) ? value.entrySeq() : value).toSetSeq();
  }

  SetSeq.of = function () /*...values*/{
    return SetSeq(arguments);
  };

  SetSeq.prototype.toSetSeq = function () {
    return this;
  };

  Seq.isSeq = isSeq;
  Seq.Keyed = KeyedSeq;
  Seq.Set = SetSeq;
  Seq.Indexed = IndexedSeq;

  var IS_SEQ_SENTINEL = '@@__IMMUTABLE_SEQ__@@';

  Seq.prototype[IS_SEQ_SENTINEL] = true;

  createClass(ArraySeq, IndexedSeq);
  function ArraySeq(array) {
    this._array = array;
    this.size = array.length;
  }

  ArraySeq.prototype.get = function (index, notSetValue) {
    return this.has(index) ? this._array[wrapIndex(this, index)] : notSetValue;
  };

  ArraySeq.prototype.__iterate = function (fn, reverse) {
    var array = this._array;
    var maxIndex = array.length - 1;
    for (var ii = 0; ii <= maxIndex; ii++) {
      if (fn(array[reverse ? maxIndex - ii : ii], ii, this) === false) {
        return ii + 1;
      }
    }
    return ii;
  };

  ArraySeq.prototype.__iterator = function (type, reverse) {
    var array = this._array;
    var maxIndex = array.length - 1;
    var ii = 0;
    return new Iterator(function () {
      return ii > maxIndex ? iteratorDone() : iteratorValue(type, ii, array[reverse ? maxIndex - ii++ : ii++]);
    });
  };

  createClass(ObjectSeq, KeyedSeq);
  function ObjectSeq(object) {
    var keys = Object.keys(object);
    this._object = object;
    this._keys = keys;
    this.size = keys.length;
  }

  ObjectSeq.prototype.get = function (key, notSetValue) {
    if (notSetValue !== undefined && !this.has(key)) {
      return notSetValue;
    }
    return this._object[key];
  };

  ObjectSeq.prototype.has = function (key) {
    return this._object.hasOwnProperty(key);
  };

  ObjectSeq.prototype.__iterate = function (fn, reverse) {
    var object = this._object;
    var keys = this._keys;
    var maxIndex = keys.length - 1;
    for (var ii = 0; ii <= maxIndex; ii++) {
      var key = keys[reverse ? maxIndex - ii : ii];
      if (fn(object[key], key, this) === false) {
        return ii + 1;
      }
    }
    return ii;
  };

  ObjectSeq.prototype.__iterator = function (type, reverse) {
    var object = this._object;
    var keys = this._keys;
    var maxIndex = keys.length - 1;
    var ii = 0;
    return new Iterator(function () {
      var key = keys[reverse ? maxIndex - ii : ii];
      return ii++ > maxIndex ? iteratorDone() : iteratorValue(type, key, object[key]);
    });
  };

  ObjectSeq.prototype[IS_ORDERED_SENTINEL] = true;

  createClass(IterableSeq, IndexedSeq);
  function IterableSeq(iterable) {
    this._iterable = iterable;
    this.size = iterable.length || iterable.size;
  }

  IterableSeq.prototype.__iterateUncached = function (fn, reverse) {
    if (reverse) {
      return this.cacheResult().__iterate(fn, reverse);
    }
    var iterable = this._iterable;
    var iterator = getIterator(iterable);
    var iterations = 0;
    if (isIterator(iterator)) {
      var step;
      while (!(step = iterator.next()).done) {
        if (fn(step.value, iterations++, this) === false) {
          break;
        }
      }
    }
    return iterations;
  };

  IterableSeq.prototype.__iteratorUncached = function (type, reverse) {
    if (reverse) {
      return this.cacheResult().__iterator(type, reverse);
    }
    var iterable = this._iterable;
    var iterator = getIterator(iterable);
    if (!isIterator(iterator)) {
      return new Iterator(iteratorDone);
    }
    var iterations = 0;
    return new Iterator(function () {
      var step = iterator.next();
      return step.done ? step : iteratorValue(type, iterations++, step.value);
    });
  };

  createClass(IteratorSeq, IndexedSeq);
  function IteratorSeq(iterator) {
    this._iterator = iterator;
    this._iteratorCache = [];
  }

  IteratorSeq.prototype.__iterateUncached = function (fn, reverse) {
    if (reverse) {
      return this.cacheResult().__iterate(fn, reverse);
    }
    var iterator = this._iterator;
    var cache = this._iteratorCache;
    var iterations = 0;
    while (iterations < cache.length) {
      if (fn(cache[iterations], iterations++, this) === false) {
        return iterations;
      }
    }
    var step;
    while (!(step = iterator.next()).done) {
      var val = step.value;
      cache[iterations] = val;
      if (fn(val, iterations++, this) === false) {
        break;
      }
    }
    return iterations;
  };

  IteratorSeq.prototype.__iteratorUncached = function (type, reverse) {
    if (reverse) {
      return this.cacheResult().__iterator(type, reverse);
    }
    var iterator = this._iterator;
    var cache = this._iteratorCache;
    var iterations = 0;
    return new Iterator(function () {
      if (iterations >= cache.length) {
        var step = iterator.next();
        if (step.done) {
          return step;
        }
        cache[iterations] = step.value;
      }
      return iteratorValue(type, iterations, cache[iterations++]);
    });
  };

  // # pragma Helper functions

  function isSeq(maybeSeq) {
    return !!(maybeSeq && maybeSeq[IS_SEQ_SENTINEL]);
  }

  var EMPTY_SEQ;

  function emptySequence() {
    return EMPTY_SEQ || (EMPTY_SEQ = new ArraySeq([]));
  }

  function keyedSeqFromValue(value) {
    var seq = Array.isArray(value) ? new ArraySeq(value).fromEntrySeq() : isIterator(value) ? new IteratorSeq(value).fromEntrySeq() : hasIterator(value) ? new IterableSeq(value).fromEntrySeq() : (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' ? new ObjectSeq(value) : undefined;
    if (!seq) {
      throw new TypeError('Expected Array or iterable object of [k, v] entries, ' + 'or keyed object: ' + value);
    }
    return seq;
  }

  function indexedSeqFromValue(value) {
    var seq = maybeIndexedSeqFromValue(value);
    if (!seq) {
      throw new TypeError('Expected Array or iterable object of values: ' + value);
    }
    return seq;
  }

  function seqFromValue(value) {
    var seq = maybeIndexedSeqFromValue(value) || (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && new ObjectSeq(value);
    if (!seq) {
      throw new TypeError('Expected Array or iterable object of values, or keyed object: ' + value);
    }
    return seq;
  }

  function maybeIndexedSeqFromValue(value) {
    return isArrayLike(value) ? new ArraySeq(value) : isIterator(value) ? new IteratorSeq(value) : hasIterator(value) ? new IterableSeq(value) : undefined;
  }

  function seqIterate(seq, fn, reverse, useKeys) {
    var cache = seq._cache;
    if (cache) {
      var maxIndex = cache.length - 1;
      for (var ii = 0; ii <= maxIndex; ii++) {
        var entry = cache[reverse ? maxIndex - ii : ii];
        if (fn(entry[1], useKeys ? entry[0] : ii, seq) === false) {
          return ii + 1;
        }
      }
      return ii;
    }
    return seq.__iterateUncached(fn, reverse);
  }

  function seqIterator(seq, type, reverse, useKeys) {
    var cache = seq._cache;
    if (cache) {
      var maxIndex = cache.length - 1;
      var ii = 0;
      return new Iterator(function () {
        var entry = cache[reverse ? maxIndex - ii : ii];
        return ii++ > maxIndex ? iteratorDone() : iteratorValue(type, useKeys ? entry[0] : ii - 1, entry[1]);
      });
    }
    return seq.__iteratorUncached(type, reverse);
  }

  function fromJS(json, converter) {
    return converter ? fromJSWith(converter, json, '', { '': json }) : fromJSDefault(json);
  }

  function fromJSWith(converter, json, key, parentJSON) {
    if (Array.isArray(json)) {
      return converter.call(parentJSON, key, IndexedSeq(json).map(function (v, k) {
        return fromJSWith(converter, v, k, json);
      }));
    }
    if (isPlainObj(json)) {
      return converter.call(parentJSON, key, KeyedSeq(json).map(function (v, k) {
        return fromJSWith(converter, v, k, json);
      }));
    }
    return json;
  }

  function fromJSDefault(json) {
    if (Array.isArray(json)) {
      return IndexedSeq(json).map(fromJSDefault).toList();
    }
    if (isPlainObj(json)) {
      return KeyedSeq(json).map(fromJSDefault).toMap();
    }
    return json;
  }

  function isPlainObj(value) {
    return value && (value.constructor === Object || value.constructor === undefined);
  }

  /**
   * An extension of the "same-value" algorithm as [described for use by ES6 Map
   * and Set](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map#Key_equality)
   *
   * NaN is considered the same as NaN, however -0 and 0 are considered the same
   * value, which is different from the algorithm described by
   * [`Object.is`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is).
   *
   * This is extended further to allow Objects to describe the values they
   * represent, by way of `valueOf` or `equals` (and `hashCode`).
   *
   * Note: because of this extension, the key equality of Immutable.Map and the
   * value equality of Immutable.Set will differ from ES6 Map and Set.
   *
   * ### Defining custom values
   *
   * The easiest way to describe the value an object represents is by implementing
   * `valueOf`. For example, `Date` represents a value by returning a unix
   * timestamp for `valueOf`:
   *
   *     var date1 = new Date(1234567890000); // Fri Feb 13 2009 ...
   *     var date2 = new Date(1234567890000);
   *     date1.valueOf(); // 1234567890000
   *     assert( date1 !== date2 );
   *     assert( Immutable.is( date1, date2 ) );
   *
   * Note: overriding `valueOf` may have other implications if you use this object
   * where JavaScript expects a primitive, such as implicit string coercion.
   *
   * For more complex types, especially collections, implementing `valueOf` may
   * not be performant. An alternative is to implement `equals` and `hashCode`.
   *
   * `equals` takes another object, presumably of similar type, and returns true
   * if the it is equal. Equality is symmetrical, so the same result should be
   * returned if this and the argument are flipped.
   *
   *     assert( a.equals(b) === b.equals(a) );
   *
   * `hashCode` returns a 32bit integer number representing the object which will
   * be used to determine how to store the value object in a Map or Set. You must
   * provide both or neither methods, one must not exist without the other.
   *
   * Also, an important relationship between these methods must be upheld: if two
   * values are equal, they *must* return the same hashCode. If the values are not
   * equal, they might have the same hashCode; this is called a hash collision,
   * and while undesirable for performance reasons, it is acceptable.
   *
   *     if (a.equals(b)) {
   *       assert( a.hashCode() === b.hashCode() );
   *     }
   *
   * All Immutable collections implement `equals` and `hashCode`.
   *
   */
  function is(valueA, valueB) {
    if (valueA === valueB || valueA !== valueA && valueB !== valueB) {
      return true;
    }
    if (!valueA || !valueB) {
      return false;
    }
    if (typeof valueA.valueOf === 'function' && typeof valueB.valueOf === 'function') {
      valueA = valueA.valueOf();
      valueB = valueB.valueOf();
      if (valueA === valueB || valueA !== valueA && valueB !== valueB) {
        return true;
      }
      if (!valueA || !valueB) {
        return false;
      }
    }
    if (typeof valueA.equals === 'function' && typeof valueB.equals === 'function' && valueA.equals(valueB)) {
      return true;
    }
    return false;
  }

  function deepEqual(a, b) {
    if (a === b) {
      return true;
    }

    if (!isIterable(b) || a.size !== undefined && b.size !== undefined && a.size !== b.size || a.__hash !== undefined && b.__hash !== undefined && a.__hash !== b.__hash || isKeyed(a) !== isKeyed(b) || isIndexed(a) !== isIndexed(b) || isOrdered(a) !== isOrdered(b)) {
      return false;
    }

    if (a.size === 0 && b.size === 0) {
      return true;
    }

    var notAssociative = !isAssociative(a);

    if (isOrdered(a)) {
      var entries = a.entries();
      return b.every(function (v, k) {
        var entry = entries.next().value;
        return entry && is(entry[1], v) && (notAssociative || is(entry[0], k));
      }) && entries.next().done;
    }

    var flipped = false;

    if (a.size === undefined) {
      if (b.size === undefined) {
        if (typeof a.cacheResult === 'function') {
          a.cacheResult();
        }
      } else {
        flipped = true;
        var _ = a;
        a = b;
        b = _;
      }
    }

    var allEqual = true;
    var bSize = b.__iterate(function (v, k) {
      if (notAssociative ? !a.has(v) : flipped ? !is(v, a.get(k, NOT_SET)) : !is(a.get(k, NOT_SET), v)) {
        allEqual = false;
        return false;
      }
    });

    return allEqual && a.size === bSize;
  }

  createClass(Repeat, IndexedSeq);

  function Repeat(value, times) {
    if (!(this instanceof Repeat)) {
      return new Repeat(value, times);
    }
    this._value = value;
    this.size = times === undefined ? Infinity : Math.max(0, times);
    if (this.size === 0) {
      if (EMPTY_REPEAT) {
        return EMPTY_REPEAT;
      }
      EMPTY_REPEAT = this;
    }
  }

  Repeat.prototype.toString = function () {
    if (this.size === 0) {
      return 'Repeat []';
    }
    return 'Repeat [ ' + this._value + ' ' + this.size + ' times ]';
  };

  Repeat.prototype.get = function (index, notSetValue) {
    return this.has(index) ? this._value : notSetValue;
  };

  Repeat.prototype.includes = function (searchValue) {
    return is(this._value, searchValue);
  };

  Repeat.prototype.slice = function (begin, end) {
    var size = this.size;
    return wholeSlice(begin, end, size) ? this : new Repeat(this._value, resolveEnd(end, size) - resolveBegin(begin, size));
  };

  Repeat.prototype.reverse = function () {
    return this;
  };

  Repeat.prototype.indexOf = function (searchValue) {
    if (is(this._value, searchValue)) {
      return 0;
    }
    return -1;
  };

  Repeat.prototype.lastIndexOf = function (searchValue) {
    if (is(this._value, searchValue)) {
      return this.size;
    }
    return -1;
  };

  Repeat.prototype.__iterate = function (fn, reverse) {
    for (var ii = 0; ii < this.size; ii++) {
      if (fn(this._value, ii, this) === false) {
        return ii + 1;
      }
    }
    return ii;
  };

  Repeat.prototype.__iterator = function (type, reverse) {
    var this$0 = this;
    var ii = 0;
    return new Iterator(function () {
      return ii < this$0.size ? iteratorValue(type, ii++, this$0._value) : iteratorDone();
    });
  };

  Repeat.prototype.equals = function (other) {
    return other instanceof Repeat ? is(this._value, other._value) : deepEqual(other);
  };

  var EMPTY_REPEAT;

  function invariant(condition, error) {
    if (!condition) throw new Error(error);
  }

  createClass(Range, IndexedSeq);

  function Range(start, end, step) {
    if (!(this instanceof Range)) {
      return new Range(start, end, step);
    }
    invariant(step !== 0, 'Cannot step a Range by 0');
    start = start || 0;
    if (end === undefined) {
      end = Infinity;
    }
    step = step === undefined ? 1 : Math.abs(step);
    if (end < start) {
      step = -step;
    }
    this._start = start;
    this._end = end;
    this._step = step;
    this.size = Math.max(0, Math.ceil((end - start) / step - 1) + 1);
    if (this.size === 0) {
      if (EMPTY_RANGE) {
        return EMPTY_RANGE;
      }
      EMPTY_RANGE = this;
    }
  }

  Range.prototype.toString = function () {
    if (this.size === 0) {
      return 'Range []';
    }
    return 'Range [ ' + this._start + '...' + this._end + (this._step !== 1 ? ' by ' + this._step : '') + ' ]';
  };

  Range.prototype.get = function (index, notSetValue) {
    return this.has(index) ? this._start + wrapIndex(this, index) * this._step : notSetValue;
  };

  Range.prototype.includes = function (searchValue) {
    var possibleIndex = (searchValue - this._start) / this._step;
    return possibleIndex >= 0 && possibleIndex < this.size && possibleIndex === Math.floor(possibleIndex);
  };

  Range.prototype.slice = function (begin, end) {
    if (wholeSlice(begin, end, this.size)) {
      return this;
    }
    begin = resolveBegin(begin, this.size);
    end = resolveEnd(end, this.size);
    if (end <= begin) {
      return new Range(0, 0);
    }
    return new Range(this.get(begin, this._end), this.get(end, this._end), this._step);
  };

  Range.prototype.indexOf = function (searchValue) {
    var offsetValue = searchValue - this._start;
    if (offsetValue % this._step === 0) {
      var index = offsetValue / this._step;
      if (index >= 0 && index < this.size) {
        return index;
      }
    }
    return -1;
  };

  Range.prototype.lastIndexOf = function (searchValue) {
    return this.indexOf(searchValue);
  };

  Range.prototype.__iterate = function (fn, reverse) {
    var maxIndex = this.size - 1;
    var step = this._step;
    var value = reverse ? this._start + maxIndex * step : this._start;
    for (var ii = 0; ii <= maxIndex; ii++) {
      if (fn(value, ii, this) === false) {
        return ii + 1;
      }
      value += reverse ? -step : step;
    }
    return ii;
  };

  Range.prototype.__iterator = function (type, reverse) {
    var maxIndex = this.size - 1;
    var step = this._step;
    var value = reverse ? this._start + maxIndex * step : this._start;
    var ii = 0;
    return new Iterator(function () {
      var v = value;
      value += reverse ? -step : step;
      return ii > maxIndex ? iteratorDone() : iteratorValue(type, ii++, v);
    });
  };

  Range.prototype.equals = function (other) {
    return other instanceof Range ? this._start === other._start && this._end === other._end && this._step === other._step : deepEqual(this, other);
  };

  var EMPTY_RANGE;

  createClass(Collection, Iterable);
  function Collection() {
    throw TypeError('Abstract');
  }

  createClass(KeyedCollection, Collection);function KeyedCollection() {}

  createClass(IndexedCollection, Collection);function IndexedCollection() {}

  createClass(SetCollection, Collection);function SetCollection() {}

  Collection.Keyed = KeyedCollection;
  Collection.Indexed = IndexedCollection;
  Collection.Set = SetCollection;

  var imul = typeof Math.imul === 'function' && Math.imul(0xffffffff, 2) === -2 ? Math.imul : function imul(a, b) {
    a = a | 0; // int
    b = b | 0; // int
    var c = a & 0xffff;
    var d = b & 0xffff;
    // Shift by 0 fixes the sign on the high part.
    return c * d + ((a >>> 16) * d + c * (b >>> 16) << 16 >>> 0) | 0; // int
  };

  // v8 has an optimization for storing 31-bit signed numbers.
  // Values which have either 00 or 11 as the high order bits qualify.
  // This function drops the highest order bit in a signed number, maintaining
  // the sign bit.
  function smi(i32) {
    return i32 >>> 1 & 0x40000000 | i32 & 0xBFFFFFFF;
  }

  function hash(o) {
    if (o === false || o === null || o === undefined) {
      return 0;
    }
    if (typeof o.valueOf === 'function') {
      o = o.valueOf();
      if (o === false || o === null || o === undefined) {
        return 0;
      }
    }
    if (o === true) {
      return 1;
    }
    var type = typeof o === 'undefined' ? 'undefined' : _typeof(o);
    if (type === 'number') {
      if (o !== o || o === Infinity) {
        return 0;
      }
      var h = o | 0;
      if (h !== o) {
        h ^= o * 0xFFFFFFFF;
      }
      while (o > 0xFFFFFFFF) {
        o /= 0xFFFFFFFF;
        h ^= o;
      }
      return smi(h);
    }
    if (type === 'string') {
      return o.length > STRING_HASH_CACHE_MIN_STRLEN ? cachedHashString(o) : hashString(o);
    }
    if (typeof o.hashCode === 'function') {
      return o.hashCode();
    }
    if (type === 'object') {
      return hashJSObj(o);
    }
    if (typeof o.toString === 'function') {
      return hashString(o.toString());
    }
    throw new Error('Value type ' + type + ' cannot be hashed.');
  }

  function cachedHashString(string) {
    var hash = stringHashCache[string];
    if (hash === undefined) {
      hash = hashString(string);
      if (STRING_HASH_CACHE_SIZE === STRING_HASH_CACHE_MAX_SIZE) {
        STRING_HASH_CACHE_SIZE = 0;
        stringHashCache = {};
      }
      STRING_HASH_CACHE_SIZE++;
      stringHashCache[string] = hash;
    }
    return hash;
  }

  // http://jsperf.com/hashing-strings
  function hashString(string) {
    // This is the hash from JVM
    // The hash code for a string is computed as
    // s[0] * 31 ^ (n - 1) + s[1] * 31 ^ (n - 2) + ... + s[n - 1],
    // where s[i] is the ith character of the string and n is the length of
    // the string. We "mod" the result to make it between 0 (inclusive) and 2^31
    // (exclusive) by dropping high bits.
    var hash = 0;
    for (var ii = 0; ii < string.length; ii++) {
      hash = 31 * hash + string.charCodeAt(ii) | 0;
    }
    return smi(hash);
  }

  function hashJSObj(obj) {
    var hash;
    if (usingWeakMap) {
      hash = weakMap.get(obj);
      if (hash !== undefined) {
        return hash;
      }
    }

    hash = obj[UID_HASH_KEY];
    if (hash !== undefined) {
      return hash;
    }

    if (!canDefineProperty) {
      hash = obj.propertyIsEnumerable && obj.propertyIsEnumerable[UID_HASH_KEY];
      if (hash !== undefined) {
        return hash;
      }

      hash = getIENodeHash(obj);
      if (hash !== undefined) {
        return hash;
      }
    }

    hash = ++objHashUID;
    if (objHashUID & 0x40000000) {
      objHashUID = 0;
    }

    if (usingWeakMap) {
      weakMap.set(obj, hash);
    } else if (isExtensible !== undefined && isExtensible(obj) === false) {
      throw new Error('Non-extensible objects are not allowed as keys.');
    } else if (canDefineProperty) {
      Object.defineProperty(obj, UID_HASH_KEY, {
        'enumerable': false,
        'configurable': false,
        'writable': false,
        'value': hash
      });
    } else if (obj.propertyIsEnumerable !== undefined && obj.propertyIsEnumerable === obj.constructor.prototype.propertyIsEnumerable) {
      // Since we can't define a non-enumerable property on the object
      // we'll hijack one of the less-used non-enumerable properties to
      // save our hash on it. Since this is a function it will not show up in
      // `JSON.stringify` which is what we want.
      obj.propertyIsEnumerable = function () {
        return this.constructor.prototype.propertyIsEnumerable.apply(this, arguments);
      };
      obj.propertyIsEnumerable[UID_HASH_KEY] = hash;
    } else if (obj.nodeType !== undefined) {
      // At this point we couldn't get the IE `uniqueID` to use as a hash
      // and we couldn't use a non-enumerable property to exploit the
      // dontEnum bug so we simply add the `UID_HASH_KEY` on the node
      // itself.
      obj[UID_HASH_KEY] = hash;
    } else {
      throw new Error('Unable to set a non-enumerable property on object.');
    }

    return hash;
  }

  // Get references to ES5 object methods.
  var isExtensible = Object.isExtensible;

  // True if Object.defineProperty works as expected. IE8 fails this test.
  var canDefineProperty = function () {
    try {
      Object.defineProperty({}, '@', {});
      return true;
    } catch (e) {
      return false;
    }
  }();

  // IE has a `uniqueID` property on DOM nodes. We can construct the hash from it
  // and avoid memory leaks from the IE cloneNode bug.
  function getIENodeHash(node) {
    if (node && node.nodeType > 0) {
      switch (node.nodeType) {
        case 1:
          // Element
          return node.uniqueID;
        case 9:
          // Document
          return node.documentElement && node.documentElement.uniqueID;
      }
    }
  }

  // If possible, use a WeakMap.
  var usingWeakMap = typeof WeakMap === 'function';
  var weakMap;
  if (usingWeakMap) {
    weakMap = new WeakMap();
  }

  var objHashUID = 0;

  var UID_HASH_KEY = '__immutablehash__';
  if (typeof Symbol === 'function') {
    UID_HASH_KEY = Symbol(UID_HASH_KEY);
  }

  var STRING_HASH_CACHE_MIN_STRLEN = 16;
  var STRING_HASH_CACHE_MAX_SIZE = 255;
  var STRING_HASH_CACHE_SIZE = 0;
  var stringHashCache = {};

  function assertNotInfinite(size) {
    invariant(size !== Infinity, 'Cannot perform this action with an infinite size.');
  }

  createClass(Map, KeyedCollection);

  // @pragma Construction

  function Map(value) {
    return value === null || value === undefined ? emptyMap() : isMap(value) && !isOrdered(value) ? value : emptyMap().withMutations(function (map) {
      var iter = KeyedIterable(value);
      assertNotInfinite(iter.size);
      iter.forEach(function (v, k) {
        return map.set(k, v);
      });
    });
  }

  Map.of = function () {
    var keyValues = SLICE$0.call(arguments, 0);
    return emptyMap().withMutations(function (map) {
      for (var i = 0; i < keyValues.length; i += 2) {
        if (i + 1 >= keyValues.length) {
          throw new Error('Missing value for key: ' + keyValues[i]);
        }
        map.set(keyValues[i], keyValues[i + 1]);
      }
    });
  };

  Map.prototype.toString = function () {
    return this.__toString('Map {', '}');
  };

  // @pragma Access

  Map.prototype.get = function (k, notSetValue) {
    return this._root ? this._root.get(0, undefined, k, notSetValue) : notSetValue;
  };

  // @pragma Modification

  Map.prototype.set = function (k, v) {
    return updateMap(this, k, v);
  };

  Map.prototype.setIn = function (keyPath, v) {
    return this.updateIn(keyPath, NOT_SET, function () {
      return v;
    });
  };

  Map.prototype.remove = function (k) {
    return updateMap(this, k, NOT_SET);
  };

  Map.prototype.deleteIn = function (keyPath) {
    return this.updateIn(keyPath, function () {
      return NOT_SET;
    });
  };

  Map.prototype.update = function (k, notSetValue, updater) {
    return arguments.length === 1 ? k(this) : this.updateIn([k], notSetValue, updater);
  };

  Map.prototype.updateIn = function (keyPath, notSetValue, updater) {
    if (!updater) {
      updater = notSetValue;
      notSetValue = undefined;
    }
    var updatedValue = updateInDeepMap(this, forceIterator(keyPath), notSetValue, updater);
    return updatedValue === NOT_SET ? undefined : updatedValue;
  };

  Map.prototype.clear = function () {
    if (this.size === 0) {
      return this;
    }
    if (this.__ownerID) {
      this.size = 0;
      this._root = null;
      this.__hash = undefined;
      this.__altered = true;
      return this;
    }
    return emptyMap();
  };

  // @pragma Composition

  Map.prototype.merge = function () /*...iters*/{
    return mergeIntoMapWith(this, undefined, arguments);
  };

  Map.prototype.mergeWith = function (merger) {
    var iters = SLICE$0.call(arguments, 1);
    return mergeIntoMapWith(this, merger, iters);
  };

  Map.prototype.mergeIn = function (keyPath) {
    var iters = SLICE$0.call(arguments, 1);
    return this.updateIn(keyPath, emptyMap(), function (m) {
      return typeof m.merge === 'function' ? m.merge.apply(m, iters) : iters[iters.length - 1];
    });
  };

  Map.prototype.mergeDeep = function () /*...iters*/{
    return mergeIntoMapWith(this, deepMerger, arguments);
  };

  Map.prototype.mergeDeepWith = function (merger) {
    var iters = SLICE$0.call(arguments, 1);
    return mergeIntoMapWith(this, deepMergerWith(merger), iters);
  };

  Map.prototype.mergeDeepIn = function (keyPath) {
    var iters = SLICE$0.call(arguments, 1);
    return this.updateIn(keyPath, emptyMap(), function (m) {
      return typeof m.mergeDeep === 'function' ? m.mergeDeep.apply(m, iters) : iters[iters.length - 1];
    });
  };

  Map.prototype.sort = function (comparator) {
    // Late binding
    return OrderedMap(sortFactory(this, comparator));
  };

  Map.prototype.sortBy = function (mapper, comparator) {
    // Late binding
    return OrderedMap(sortFactory(this, comparator, mapper));
  };

  // @pragma Mutability

  Map.prototype.withMutations = function (fn) {
    var mutable = this.asMutable();
    fn(mutable);
    return mutable.wasAltered() ? mutable.__ensureOwner(this.__ownerID) : this;
  };

  Map.prototype.asMutable = function () {
    return this.__ownerID ? this : this.__ensureOwner(new OwnerID());
  };

  Map.prototype.asImmutable = function () {
    return this.__ensureOwner();
  };

  Map.prototype.wasAltered = function () {
    return this.__altered;
  };

  Map.prototype.__iterator = function (type, reverse) {
    return new MapIterator(this, type, reverse);
  };

  Map.prototype.__iterate = function (fn, reverse) {
    var this$0 = this;
    var iterations = 0;
    this._root && this._root.iterate(function (entry) {
      iterations++;
      return fn(entry[1], entry[0], this$0);
    }, reverse);
    return iterations;
  };

  Map.prototype.__ensureOwner = function (ownerID) {
    if (ownerID === this.__ownerID) {
      return this;
    }
    if (!ownerID) {
      this.__ownerID = ownerID;
      this.__altered = false;
      return this;
    }
    return makeMap(this.size, this._root, ownerID, this.__hash);
  };

  function isMap(maybeMap) {
    return !!(maybeMap && maybeMap[IS_MAP_SENTINEL]);
  }

  Map.isMap = isMap;

  var IS_MAP_SENTINEL = '@@__IMMUTABLE_MAP__@@';

  var MapPrototype = Map.prototype;
  MapPrototype[IS_MAP_SENTINEL] = true;
  MapPrototype[DELETE] = MapPrototype.remove;
  MapPrototype.removeIn = MapPrototype.deleteIn;

  // #pragma Trie Nodes


  function ArrayMapNode(ownerID, entries) {
    this.ownerID = ownerID;
    this.entries = entries;
  }

  ArrayMapNode.prototype.get = function (shift, keyHash, key, notSetValue) {
    var entries = this.entries;
    for (var ii = 0, len = entries.length; ii < len; ii++) {
      if (is(key, entries[ii][0])) {
        return entries[ii][1];
      }
    }
    return notSetValue;
  };

  ArrayMapNode.prototype.update = function (ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
    var removed = value === NOT_SET;

    var entries = this.entries;
    var idx = 0;
    for (var len = entries.length; idx < len; idx++) {
      if (is(key, entries[idx][0])) {
        break;
      }
    }
    var exists = idx < len;

    if (exists ? entries[idx][1] === value : removed) {
      return this;
    }

    SetRef(didAlter);
    (removed || !exists) && SetRef(didChangeSize);

    if (removed && entries.length === 1) {
      return; // undefined
    }

    if (!exists && !removed && entries.length >= MAX_ARRAY_MAP_SIZE) {
      return createNodes(ownerID, entries, key, value);
    }

    var isEditable = ownerID && ownerID === this.ownerID;
    var newEntries = isEditable ? entries : arrCopy(entries);

    if (exists) {
      if (removed) {
        idx === len - 1 ? newEntries.pop() : newEntries[idx] = newEntries.pop();
      } else {
        newEntries[idx] = [key, value];
      }
    } else {
      newEntries.push([key, value]);
    }

    if (isEditable) {
      this.entries = newEntries;
      return this;
    }

    return new ArrayMapNode(ownerID, newEntries);
  };

  function BitmapIndexedNode(ownerID, bitmap, nodes) {
    this.ownerID = ownerID;
    this.bitmap = bitmap;
    this.nodes = nodes;
  }

  BitmapIndexedNode.prototype.get = function (shift, keyHash, key, notSetValue) {
    if (keyHash === undefined) {
      keyHash = hash(key);
    }
    var bit = 1 << ((shift === 0 ? keyHash : keyHash >>> shift) & MASK);
    var bitmap = this.bitmap;
    return (bitmap & bit) === 0 ? notSetValue : this.nodes[popCount(bitmap & bit - 1)].get(shift + SHIFT, keyHash, key, notSetValue);
  };

  BitmapIndexedNode.prototype.update = function (ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
    if (keyHash === undefined) {
      keyHash = hash(key);
    }
    var keyHashFrag = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;
    var bit = 1 << keyHashFrag;
    var bitmap = this.bitmap;
    var exists = (bitmap & bit) !== 0;

    if (!exists && value === NOT_SET) {
      return this;
    }

    var idx = popCount(bitmap & bit - 1);
    var nodes = this.nodes;
    var node = exists ? nodes[idx] : undefined;
    var newNode = updateNode(node, ownerID, shift + SHIFT, keyHash, key, value, didChangeSize, didAlter);

    if (newNode === node) {
      return this;
    }

    if (!exists && newNode && nodes.length >= MAX_BITMAP_INDEXED_SIZE) {
      return expandNodes(ownerID, nodes, bitmap, keyHashFrag, newNode);
    }

    if (exists && !newNode && nodes.length === 2 && isLeafNode(nodes[idx ^ 1])) {
      return nodes[idx ^ 1];
    }

    if (exists && newNode && nodes.length === 1 && isLeafNode(newNode)) {
      return newNode;
    }

    var isEditable = ownerID && ownerID === this.ownerID;
    var newBitmap = exists ? newNode ? bitmap : bitmap ^ bit : bitmap | bit;
    var newNodes = exists ? newNode ? setIn(nodes, idx, newNode, isEditable) : spliceOut(nodes, idx, isEditable) : spliceIn(nodes, idx, newNode, isEditable);

    if (isEditable) {
      this.bitmap = newBitmap;
      this.nodes = newNodes;
      return this;
    }

    return new BitmapIndexedNode(ownerID, newBitmap, newNodes);
  };

  function HashArrayMapNode(ownerID, count, nodes) {
    this.ownerID = ownerID;
    this.count = count;
    this.nodes = nodes;
  }

  HashArrayMapNode.prototype.get = function (shift, keyHash, key, notSetValue) {
    if (keyHash === undefined) {
      keyHash = hash(key);
    }
    var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;
    var node = this.nodes[idx];
    return node ? node.get(shift + SHIFT, keyHash, key, notSetValue) : notSetValue;
  };

  HashArrayMapNode.prototype.update = function (ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
    if (keyHash === undefined) {
      keyHash = hash(key);
    }
    var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;
    var removed = value === NOT_SET;
    var nodes = this.nodes;
    var node = nodes[idx];

    if (removed && !node) {
      return this;
    }

    var newNode = updateNode(node, ownerID, shift + SHIFT, keyHash, key, value, didChangeSize, didAlter);
    if (newNode === node) {
      return this;
    }

    var newCount = this.count;
    if (!node) {
      newCount++;
    } else if (!newNode) {
      newCount--;
      if (newCount < MIN_HASH_ARRAY_MAP_SIZE) {
        return packNodes(ownerID, nodes, newCount, idx);
      }
    }

    var isEditable = ownerID && ownerID === this.ownerID;
    var newNodes = setIn(nodes, idx, newNode, isEditable);

    if (isEditable) {
      this.count = newCount;
      this.nodes = newNodes;
      return this;
    }

    return new HashArrayMapNode(ownerID, newCount, newNodes);
  };

  function HashCollisionNode(ownerID, keyHash, entries) {
    this.ownerID = ownerID;
    this.keyHash = keyHash;
    this.entries = entries;
  }

  HashCollisionNode.prototype.get = function (shift, keyHash, key, notSetValue) {
    var entries = this.entries;
    for (var ii = 0, len = entries.length; ii < len; ii++) {
      if (is(key, entries[ii][0])) {
        return entries[ii][1];
      }
    }
    return notSetValue;
  };

  HashCollisionNode.prototype.update = function (ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
    if (keyHash === undefined) {
      keyHash = hash(key);
    }

    var removed = value === NOT_SET;

    if (keyHash !== this.keyHash) {
      if (removed) {
        return this;
      }
      SetRef(didAlter);
      SetRef(didChangeSize);
      return mergeIntoNode(this, ownerID, shift, keyHash, [key, value]);
    }

    var entries = this.entries;
    var idx = 0;
    for (var len = entries.length; idx < len; idx++) {
      if (is(key, entries[idx][0])) {
        break;
      }
    }
    var exists = idx < len;

    if (exists ? entries[idx][1] === value : removed) {
      return this;
    }

    SetRef(didAlter);
    (removed || !exists) && SetRef(didChangeSize);

    if (removed && len === 2) {
      return new ValueNode(ownerID, this.keyHash, entries[idx ^ 1]);
    }

    var isEditable = ownerID && ownerID === this.ownerID;
    var newEntries = isEditable ? entries : arrCopy(entries);

    if (exists) {
      if (removed) {
        idx === len - 1 ? newEntries.pop() : newEntries[idx] = newEntries.pop();
      } else {
        newEntries[idx] = [key, value];
      }
    } else {
      newEntries.push([key, value]);
    }

    if (isEditable) {
      this.entries = newEntries;
      return this;
    }

    return new HashCollisionNode(ownerID, this.keyHash, newEntries);
  };

  function ValueNode(ownerID, keyHash, entry) {
    this.ownerID = ownerID;
    this.keyHash = keyHash;
    this.entry = entry;
  }

  ValueNode.prototype.get = function (shift, keyHash, key, notSetValue) {
    return is(key, this.entry[0]) ? this.entry[1] : notSetValue;
  };

  ValueNode.prototype.update = function (ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
    var removed = value === NOT_SET;
    var keyMatch = is(key, this.entry[0]);
    if (keyMatch ? value === this.entry[1] : removed) {
      return this;
    }

    SetRef(didAlter);

    if (removed) {
      SetRef(didChangeSize);
      return; // undefined
    }

    if (keyMatch) {
      if (ownerID && ownerID === this.ownerID) {
        this.entry[1] = value;
        return this;
      }
      return new ValueNode(ownerID, this.keyHash, [key, value]);
    }

    SetRef(didChangeSize);
    return mergeIntoNode(this, ownerID, shift, hash(key), [key, value]);
  };

  // #pragma Iterators

  ArrayMapNode.prototype.iterate = HashCollisionNode.prototype.iterate = function (fn, reverse) {
    var entries = this.entries;
    for (var ii = 0, maxIndex = entries.length - 1; ii <= maxIndex; ii++) {
      if (fn(entries[reverse ? maxIndex - ii : ii]) === false) {
        return false;
      }
    }
  };

  BitmapIndexedNode.prototype.iterate = HashArrayMapNode.prototype.iterate = function (fn, reverse) {
    var nodes = this.nodes;
    for (var ii = 0, maxIndex = nodes.length - 1; ii <= maxIndex; ii++) {
      var node = nodes[reverse ? maxIndex - ii : ii];
      if (node && node.iterate(fn, reverse) === false) {
        return false;
      }
    }
  };

  ValueNode.prototype.iterate = function (fn, reverse) {
    return fn(this.entry);
  };

  createClass(MapIterator, Iterator);

  function MapIterator(map, type, reverse) {
    this._type = type;
    this._reverse = reverse;
    this._stack = map._root && mapIteratorFrame(map._root);
  }

  MapIterator.prototype.next = function () {
    var type = this._type;
    var stack = this._stack;
    while (stack) {
      var node = stack.node;
      var index = stack.index++;
      var maxIndex;
      if (node.entry) {
        if (index === 0) {
          return mapIteratorValue(type, node.entry);
        }
      } else if (node.entries) {
        maxIndex = node.entries.length - 1;
        if (index <= maxIndex) {
          return mapIteratorValue(type, node.entries[this._reverse ? maxIndex - index : index]);
        }
      } else {
        maxIndex = node.nodes.length - 1;
        if (index <= maxIndex) {
          var subNode = node.nodes[this._reverse ? maxIndex - index : index];
          if (subNode) {
            if (subNode.entry) {
              return mapIteratorValue(type, subNode.entry);
            }
            stack = this._stack = mapIteratorFrame(subNode, stack);
          }
          continue;
        }
      }
      stack = this._stack = this._stack.__prev;
    }
    return iteratorDone();
  };

  function mapIteratorValue(type, entry) {
    return iteratorValue(type, entry[0], entry[1]);
  }

  function mapIteratorFrame(node, prev) {
    return {
      node: node,
      index: 0,
      __prev: prev
    };
  }

  function makeMap(size, root, ownerID, hash) {
    var map = Object.create(MapPrototype);
    map.size = size;
    map._root = root;
    map.__ownerID = ownerID;
    map.__hash = hash;
    map.__altered = false;
    return map;
  }

  var EMPTY_MAP;
  function emptyMap() {
    return EMPTY_MAP || (EMPTY_MAP = makeMap(0));
  }

  function updateMap(map, k, v) {
    var newRoot;
    var newSize;
    if (!map._root) {
      if (v === NOT_SET) {
        return map;
      }
      newSize = 1;
      newRoot = new ArrayMapNode(map.__ownerID, [[k, v]]);
    } else {
      var didChangeSize = MakeRef(CHANGE_LENGTH);
      var didAlter = MakeRef(DID_ALTER);
      newRoot = updateNode(map._root, map.__ownerID, 0, undefined, k, v, didChangeSize, didAlter);
      if (!didAlter.value) {
        return map;
      }
      newSize = map.size + (didChangeSize.value ? v === NOT_SET ? -1 : 1 : 0);
    }
    if (map.__ownerID) {
      map.size = newSize;
      map._root = newRoot;
      map.__hash = undefined;
      map.__altered = true;
      return map;
    }
    return newRoot ? makeMap(newSize, newRoot) : emptyMap();
  }

  function updateNode(node, ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
    if (!node) {
      if (value === NOT_SET) {
        return node;
      }
      SetRef(didAlter);
      SetRef(didChangeSize);
      return new ValueNode(ownerID, keyHash, [key, value]);
    }
    return node.update(ownerID, shift, keyHash, key, value, didChangeSize, didAlter);
  }

  function isLeafNode(node) {
    return node.constructor === ValueNode || node.constructor === HashCollisionNode;
  }

  function mergeIntoNode(node, ownerID, shift, keyHash, entry) {
    if (node.keyHash === keyHash) {
      return new HashCollisionNode(ownerID, keyHash, [node.entry, entry]);
    }

    var idx1 = (shift === 0 ? node.keyHash : node.keyHash >>> shift) & MASK;
    var idx2 = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;

    var newNode;
    var nodes = idx1 === idx2 ? [mergeIntoNode(node, ownerID, shift + SHIFT, keyHash, entry)] : (newNode = new ValueNode(ownerID, keyHash, entry), idx1 < idx2 ? [node, newNode] : [newNode, node]);

    return new BitmapIndexedNode(ownerID, 1 << idx1 | 1 << idx2, nodes);
  }

  function createNodes(ownerID, entries, key, value) {
    if (!ownerID) {
      ownerID = new OwnerID();
    }
    var node = new ValueNode(ownerID, hash(key), [key, value]);
    for (var ii = 0; ii < entries.length; ii++) {
      var entry = entries[ii];
      node = node.update(ownerID, 0, undefined, entry[0], entry[1]);
    }
    return node;
  }

  function packNodes(ownerID, nodes, count, excluding) {
    var bitmap = 0;
    var packedII = 0;
    var packedNodes = new Array(count);
    for (var ii = 0, bit = 1, len = nodes.length; ii < len; ii++, bit <<= 1) {
      var node = nodes[ii];
      if (node !== undefined && ii !== excluding) {
        bitmap |= bit;
        packedNodes[packedII++] = node;
      }
    }
    return new BitmapIndexedNode(ownerID, bitmap, packedNodes);
  }

  function expandNodes(ownerID, nodes, bitmap, including, node) {
    var count = 0;
    var expandedNodes = new Array(SIZE);
    for (var ii = 0; bitmap !== 0; ii++, bitmap >>>= 1) {
      expandedNodes[ii] = bitmap & 1 ? nodes[count++] : undefined;
    }
    expandedNodes[including] = node;
    return new HashArrayMapNode(ownerID, count + 1, expandedNodes);
  }

  function mergeIntoMapWith(map, merger, iterables) {
    var iters = [];
    for (var ii = 0; ii < iterables.length; ii++) {
      var value = iterables[ii];
      var iter = KeyedIterable(value);
      if (!isIterable(value)) {
        iter = iter.map(function (v) {
          return fromJS(v);
        });
      }
      iters.push(iter);
    }
    return mergeIntoCollectionWith(map, merger, iters);
  }

  function deepMerger(existing, value, key) {
    return existing && existing.mergeDeep && isIterable(value) ? existing.mergeDeep(value) : is(existing, value) ? existing : value;
  }

  function deepMergerWith(merger) {
    return function (existing, value, key) {
      if (existing && existing.mergeDeepWith && isIterable(value)) {
        return existing.mergeDeepWith(merger, value);
      }
      var nextValue = merger(existing, value, key);
      return is(existing, nextValue) ? existing : nextValue;
    };
  }

  function mergeIntoCollectionWith(collection, merger, iters) {
    iters = iters.filter(function (x) {
      return x.size !== 0;
    });
    if (iters.length === 0) {
      return collection;
    }
    if (collection.size === 0 && !collection.__ownerID && iters.length === 1) {
      return collection.constructor(iters[0]);
    }
    return collection.withMutations(function (collection) {
      var mergeIntoMap = merger ? function (value, key) {
        collection.update(key, NOT_SET, function (existing) {
          return existing === NOT_SET ? value : merger(existing, value, key);
        });
      } : function (value, key) {
        collection.set(key, value);
      };
      for (var ii = 0; ii < iters.length; ii++) {
        iters[ii].forEach(mergeIntoMap);
      }
    });
  }

  function updateInDeepMap(existing, keyPathIter, notSetValue, updater) {
    var isNotSet = existing === NOT_SET;
    var step = keyPathIter.next();
    if (step.done) {
      var existingValue = isNotSet ? notSetValue : existing;
      var newValue = updater(existingValue);
      return newValue === existingValue ? existing : newValue;
    }
    invariant(isNotSet || existing && existing.set, 'invalid keyPath');
    var key = step.value;
    var nextExisting = isNotSet ? NOT_SET : existing.get(key, NOT_SET);
    var nextUpdated = updateInDeepMap(nextExisting, keyPathIter, notSetValue, updater);
    return nextUpdated === nextExisting ? existing : nextUpdated === NOT_SET ? existing.remove(key) : (isNotSet ? emptyMap() : existing).set(key, nextUpdated);
  }

  function popCount(x) {
    x = x - (x >> 1 & 0x55555555);
    x = (x & 0x33333333) + (x >> 2 & 0x33333333);
    x = x + (x >> 4) & 0x0f0f0f0f;
    x = x + (x >> 8);
    x = x + (x >> 16);
    return x & 0x7f;
  }

  function setIn(array, idx, val, canEdit) {
    var newArray = canEdit ? array : arrCopy(array);
    newArray[idx] = val;
    return newArray;
  }

  function spliceIn(array, idx, val, canEdit) {
    var newLen = array.length + 1;
    if (canEdit && idx + 1 === newLen) {
      array[idx] = val;
      return array;
    }
    var newArray = new Array(newLen);
    var after = 0;
    for (var ii = 0; ii < newLen; ii++) {
      if (ii === idx) {
        newArray[ii] = val;
        after = -1;
      } else {
        newArray[ii] = array[ii + after];
      }
    }
    return newArray;
  }

  function spliceOut(array, idx, canEdit) {
    var newLen = array.length - 1;
    if (canEdit && idx === newLen) {
      array.pop();
      return array;
    }
    var newArray = new Array(newLen);
    var after = 0;
    for (var ii = 0; ii < newLen; ii++) {
      if (ii === idx) {
        after = 1;
      }
      newArray[ii] = array[ii + after];
    }
    return newArray;
  }

  var MAX_ARRAY_MAP_SIZE = SIZE / 4;
  var MAX_BITMAP_INDEXED_SIZE = SIZE / 2;
  var MIN_HASH_ARRAY_MAP_SIZE = SIZE / 4;

  createClass(List, IndexedCollection);

  // @pragma Construction

  function List(value) {
    var empty = emptyList();
    if (value === null || value === undefined) {
      return empty;
    }
    if (isList(value)) {
      return value;
    }
    var iter = IndexedIterable(value);
    var size = iter.size;
    if (size === 0) {
      return empty;
    }
    assertNotInfinite(size);
    if (size > 0 && size < SIZE) {
      return makeList(0, size, SHIFT, null, new VNode(iter.toArray()));
    }
    return empty.withMutations(function (list) {
      list.setSize(size);
      iter.forEach(function (v, i) {
        return list.set(i, v);
      });
    });
  }

  List.of = function () /*...values*/{
    return this(arguments);
  };

  List.prototype.toString = function () {
    return this.__toString('List [', ']');
  };

  // @pragma Access

  List.prototype.get = function (index, notSetValue) {
    index = wrapIndex(this, index);
    if (index >= 0 && index < this.size) {
      index += this._origin;
      var node = listNodeFor(this, index);
      return node && node.array[index & MASK];
    }
    return notSetValue;
  };

  // @pragma Modification

  List.prototype.set = function (index, value) {
    return updateList(this, index, value);
  };

  List.prototype.remove = function (index) {
    return !this.has(index) ? this : index === 0 ? this.shift() : index === this.size - 1 ? this.pop() : this.splice(index, 1);
  };

  List.prototype.insert = function (index, value) {
    return this.splice(index, 0, value);
  };

  List.prototype.clear = function () {
    if (this.size === 0) {
      return this;
    }
    if (this.__ownerID) {
      this.size = this._origin = this._capacity = 0;
      this._level = SHIFT;
      this._root = this._tail = null;
      this.__hash = undefined;
      this.__altered = true;
      return this;
    }
    return emptyList();
  };

  List.prototype.push = function () /*...values*/{
    var values = arguments;
    var oldSize = this.size;
    return this.withMutations(function (list) {
      setListBounds(list, 0, oldSize + values.length);
      for (var ii = 0; ii < values.length; ii++) {
        list.set(oldSize + ii, values[ii]);
      }
    });
  };

  List.prototype.pop = function () {
    return setListBounds(this, 0, -1);
  };

  List.prototype.unshift = function () /*...values*/{
    var values = arguments;
    return this.withMutations(function (list) {
      setListBounds(list, -values.length);
      for (var ii = 0; ii < values.length; ii++) {
        list.set(ii, values[ii]);
      }
    });
  };

  List.prototype.shift = function () {
    return setListBounds(this, 1);
  };

  // @pragma Composition

  List.prototype.merge = function () /*...iters*/{
    return mergeIntoListWith(this, undefined, arguments);
  };

  List.prototype.mergeWith = function (merger) {
    var iters = SLICE$0.call(arguments, 1);
    return mergeIntoListWith(this, merger, iters);
  };

  List.prototype.mergeDeep = function () /*...iters*/{
    return mergeIntoListWith(this, deepMerger, arguments);
  };

  List.prototype.mergeDeepWith = function (merger) {
    var iters = SLICE$0.call(arguments, 1);
    return mergeIntoListWith(this, deepMergerWith(merger), iters);
  };

  List.prototype.setSize = function (size) {
    return setListBounds(this, 0, size);
  };

  // @pragma Iteration

  List.prototype.slice = function (begin, end) {
    var size = this.size;
    if (wholeSlice(begin, end, size)) {
      return this;
    }
    return setListBounds(this, resolveBegin(begin, size), resolveEnd(end, size));
  };

  List.prototype.__iterator = function (type, reverse) {
    var index = 0;
    var values = iterateList(this, reverse);
    return new Iterator(function () {
      var value = values();
      return value === DONE ? iteratorDone() : iteratorValue(type, index++, value);
    });
  };

  List.prototype.__iterate = function (fn, reverse) {
    var index = 0;
    var values = iterateList(this, reverse);
    var value;
    while ((value = values()) !== DONE) {
      if (fn(value, index++, this) === false) {
        break;
      }
    }
    return index;
  };

  List.prototype.__ensureOwner = function (ownerID) {
    if (ownerID === this.__ownerID) {
      return this;
    }
    if (!ownerID) {
      this.__ownerID = ownerID;
      return this;
    }
    return makeList(this._origin, this._capacity, this._level, this._root, this._tail, ownerID, this.__hash);
  };

  function isList(maybeList) {
    return !!(maybeList && maybeList[IS_LIST_SENTINEL]);
  }

  List.isList = isList;

  var IS_LIST_SENTINEL = '@@__IMMUTABLE_LIST__@@';

  var ListPrototype = List.prototype;
  ListPrototype[IS_LIST_SENTINEL] = true;
  ListPrototype[DELETE] = ListPrototype.remove;
  ListPrototype.setIn = MapPrototype.setIn;
  ListPrototype.deleteIn = ListPrototype.removeIn = MapPrototype.removeIn;
  ListPrototype.update = MapPrototype.update;
  ListPrototype.updateIn = MapPrototype.updateIn;
  ListPrototype.mergeIn = MapPrototype.mergeIn;
  ListPrototype.mergeDeepIn = MapPrototype.mergeDeepIn;
  ListPrototype.withMutations = MapPrototype.withMutations;
  ListPrototype.asMutable = MapPrototype.asMutable;
  ListPrototype.asImmutable = MapPrototype.asImmutable;
  ListPrototype.wasAltered = MapPrototype.wasAltered;

  function VNode(array, ownerID) {
    this.array = array;
    this.ownerID = ownerID;
  }

  // TODO: seems like these methods are very similar

  VNode.prototype.removeBefore = function (ownerID, level, index) {
    if (index === level ? 1 << level : 0 || this.array.length === 0) {
      return this;
    }
    var originIndex = index >>> level & MASK;
    if (originIndex >= this.array.length) {
      return new VNode([], ownerID);
    }
    var removingFirst = originIndex === 0;
    var newChild;
    if (level > 0) {
      var oldChild = this.array[originIndex];
      newChild = oldChild && oldChild.removeBefore(ownerID, level - SHIFT, index);
      if (newChild === oldChild && removingFirst) {
        return this;
      }
    }
    if (removingFirst && !newChild) {
      return this;
    }
    var editable = editableVNode(this, ownerID);
    if (!removingFirst) {
      for (var ii = 0; ii < originIndex; ii++) {
        editable.array[ii] = undefined;
      }
    }
    if (newChild) {
      editable.array[originIndex] = newChild;
    }
    return editable;
  };

  VNode.prototype.removeAfter = function (ownerID, level, index) {
    if (index === (level ? 1 << level : 0) || this.array.length === 0) {
      return this;
    }
    var sizeIndex = index - 1 >>> level & MASK;
    if (sizeIndex >= this.array.length) {
      return this;
    }

    var newChild;
    if (level > 0) {
      var oldChild = this.array[sizeIndex];
      newChild = oldChild && oldChild.removeAfter(ownerID, level - SHIFT, index);
      if (newChild === oldChild && sizeIndex === this.array.length - 1) {
        return this;
      }
    }

    var editable = editableVNode(this, ownerID);
    editable.array.splice(sizeIndex + 1);
    if (newChild) {
      editable.array[sizeIndex] = newChild;
    }
    return editable;
  };

  var DONE = {};

  function iterateList(list, reverse) {
    var left = list._origin;
    var right = list._capacity;
    var tailPos = getTailOffset(right);
    var tail = list._tail;

    return iterateNodeOrLeaf(list._root, list._level, 0);

    function iterateNodeOrLeaf(node, level, offset) {
      return level === 0 ? iterateLeaf(node, offset) : iterateNode(node, level, offset);
    }

    function iterateLeaf(node, offset) {
      var array = offset === tailPos ? tail && tail.array : node && node.array;
      var from = offset > left ? 0 : left - offset;
      var to = right - offset;
      if (to > SIZE) {
        to = SIZE;
      }
      return function () {
        if (from === to) {
          return DONE;
        }
        var idx = reverse ? --to : from++;
        return array && array[idx];
      };
    }

    function iterateNode(node, level, offset) {
      var values;
      var array = node && node.array;
      var from = offset > left ? 0 : left - offset >> level;
      var to = (right - offset >> level) + 1;
      if (to > SIZE) {
        to = SIZE;
      }
      return function () {
        do {
          if (values) {
            var value = values();
            if (value !== DONE) {
              return value;
            }
            values = null;
          }
          if (from === to) {
            return DONE;
          }
          var idx = reverse ? --to : from++;
          values = iterateNodeOrLeaf(array && array[idx], level - SHIFT, offset + (idx << level));
        } while (true);
      };
    }
  }

  function makeList(origin, capacity, level, root, tail, ownerID, hash) {
    var list = Object.create(ListPrototype);
    list.size = capacity - origin;
    list._origin = origin;
    list._capacity = capacity;
    list._level = level;
    list._root = root;
    list._tail = tail;
    list.__ownerID = ownerID;
    list.__hash = hash;
    list.__altered = false;
    return list;
  }

  var EMPTY_LIST;
  function emptyList() {
    return EMPTY_LIST || (EMPTY_LIST = makeList(0, 0, SHIFT));
  }

  function updateList(list, index, value) {
    index = wrapIndex(list, index);

    if (index !== index) {
      return list;
    }

    if (index >= list.size || index < 0) {
      return list.withMutations(function (list) {
        index < 0 ? setListBounds(list, index).set(0, value) : setListBounds(list, 0, index + 1).set(index, value);
      });
    }

    index += list._origin;

    var newTail = list._tail;
    var newRoot = list._root;
    var didAlter = MakeRef(DID_ALTER);
    if (index >= getTailOffset(list._capacity)) {
      newTail = updateVNode(newTail, list.__ownerID, 0, index, value, didAlter);
    } else {
      newRoot = updateVNode(newRoot, list.__ownerID, list._level, index, value, didAlter);
    }

    if (!didAlter.value) {
      return list;
    }

    if (list.__ownerID) {
      list._root = newRoot;
      list._tail = newTail;
      list.__hash = undefined;
      list.__altered = true;
      return list;
    }
    return makeList(list._origin, list._capacity, list._level, newRoot, newTail);
  }

  function updateVNode(node, ownerID, level, index, value, didAlter) {
    var idx = index >>> level & MASK;
    var nodeHas = node && idx < node.array.length;
    if (!nodeHas && value === undefined) {
      return node;
    }

    var newNode;

    if (level > 0) {
      var lowerNode = node && node.array[idx];
      var newLowerNode = updateVNode(lowerNode, ownerID, level - SHIFT, index, value, didAlter);
      if (newLowerNode === lowerNode) {
        return node;
      }
      newNode = editableVNode(node, ownerID);
      newNode.array[idx] = newLowerNode;
      return newNode;
    }

    if (nodeHas && node.array[idx] === value) {
      return node;
    }

    SetRef(didAlter);

    newNode = editableVNode(node, ownerID);
    if (value === undefined && idx === newNode.array.length - 1) {
      newNode.array.pop();
    } else {
      newNode.array[idx] = value;
    }
    return newNode;
  }

  function editableVNode(node, ownerID) {
    if (ownerID && node && ownerID === node.ownerID) {
      return node;
    }
    return new VNode(node ? node.array.slice() : [], ownerID);
  }

  function listNodeFor(list, rawIndex) {
    if (rawIndex >= getTailOffset(list._capacity)) {
      return list._tail;
    }
    if (rawIndex < 1 << list._level + SHIFT) {
      var node = list._root;
      var level = list._level;
      while (node && level > 0) {
        node = node.array[rawIndex >>> level & MASK];
        level -= SHIFT;
      }
      return node;
    }
  }

  function setListBounds(list, begin, end) {
    // Sanitize begin & end using this shorthand for ToInt32(argument)
    // http://www.ecma-international.org/ecma-262/6.0/#sec-toint32
    if (begin !== undefined) {
      begin = begin | 0;
    }
    if (end !== undefined) {
      end = end | 0;
    }
    var owner = list.__ownerID || new OwnerID();
    var oldOrigin = list._origin;
    var oldCapacity = list._capacity;
    var newOrigin = oldOrigin + begin;
    var newCapacity = end === undefined ? oldCapacity : end < 0 ? oldCapacity + end : oldOrigin + end;
    if (newOrigin === oldOrigin && newCapacity === oldCapacity) {
      return list;
    }

    // If it's going to end after it starts, it's empty.
    if (newOrigin >= newCapacity) {
      return list.clear();
    }

    var newLevel = list._level;
    var newRoot = list._root;

    // New origin might need creating a higher root.
    var offsetShift = 0;
    while (newOrigin + offsetShift < 0) {
      newRoot = new VNode(newRoot && newRoot.array.length ? [undefined, newRoot] : [], owner);
      newLevel += SHIFT;
      offsetShift += 1 << newLevel;
    }
    if (offsetShift) {
      newOrigin += offsetShift;
      oldOrigin += offsetShift;
      newCapacity += offsetShift;
      oldCapacity += offsetShift;
    }

    var oldTailOffset = getTailOffset(oldCapacity);
    var newTailOffset = getTailOffset(newCapacity);

    // New size might need creating a higher root.
    while (newTailOffset >= 1 << newLevel + SHIFT) {
      newRoot = new VNode(newRoot && newRoot.array.length ? [newRoot] : [], owner);
      newLevel += SHIFT;
    }

    // Locate or create the new tail.
    var oldTail = list._tail;
    var newTail = newTailOffset < oldTailOffset ? listNodeFor(list, newCapacity - 1) : newTailOffset > oldTailOffset ? new VNode([], owner) : oldTail;

    // Merge Tail into tree.
    if (oldTail && newTailOffset > oldTailOffset && newOrigin < oldCapacity && oldTail.array.length) {
      newRoot = editableVNode(newRoot, owner);
      var node = newRoot;
      for (var level = newLevel; level > SHIFT; level -= SHIFT) {
        var idx = oldTailOffset >>> level & MASK;
        node = node.array[idx] = editableVNode(node.array[idx], owner);
      }
      node.array[oldTailOffset >>> SHIFT & MASK] = oldTail;
    }

    // If the size has been reduced, there's a chance the tail needs to be trimmed.
    if (newCapacity < oldCapacity) {
      newTail = newTail && newTail.removeAfter(owner, 0, newCapacity);
    }

    // If the new origin is within the tail, then we do not need a root.
    if (newOrigin >= newTailOffset) {
      newOrigin -= newTailOffset;
      newCapacity -= newTailOffset;
      newLevel = SHIFT;
      newRoot = null;
      newTail = newTail && newTail.removeBefore(owner, 0, newOrigin);

      // Otherwise, if the root has been trimmed, garbage collect.
    } else if (newOrigin > oldOrigin || newTailOffset < oldTailOffset) {
      offsetShift = 0;

      // Identify the new top root node of the subtree of the old root.
      while (newRoot) {
        var beginIndex = newOrigin >>> newLevel & MASK;
        if (beginIndex !== newTailOffset >>> newLevel & MASK) {
          break;
        }
        if (beginIndex) {
          offsetShift += (1 << newLevel) * beginIndex;
        }
        newLevel -= SHIFT;
        newRoot = newRoot.array[beginIndex];
      }

      // Trim the new sides of the new root.
      if (newRoot && newOrigin > oldOrigin) {
        newRoot = newRoot.removeBefore(owner, newLevel, newOrigin - offsetShift);
      }
      if (newRoot && newTailOffset < oldTailOffset) {
        newRoot = newRoot.removeAfter(owner, newLevel, newTailOffset - offsetShift);
      }
      if (offsetShift) {
        newOrigin -= offsetShift;
        newCapacity -= offsetShift;
      }
    }

    if (list.__ownerID) {
      list.size = newCapacity - newOrigin;
      list._origin = newOrigin;
      list._capacity = newCapacity;
      list._level = newLevel;
      list._root = newRoot;
      list._tail = newTail;
      list.__hash = undefined;
      list.__altered = true;
      return list;
    }
    return makeList(newOrigin, newCapacity, newLevel, newRoot, newTail);
  }

  function mergeIntoListWith(list, merger, iterables) {
    var iters = [];
    var maxSize = 0;
    for (var ii = 0; ii < iterables.length; ii++) {
      var value = iterables[ii];
      var iter = IndexedIterable(value);
      if (iter.size > maxSize) {
        maxSize = iter.size;
      }
      if (!isIterable(value)) {
        iter = iter.map(function (v) {
          return fromJS(v);
        });
      }
      iters.push(iter);
    }
    if (maxSize > list.size) {
      list = list.setSize(maxSize);
    }
    return mergeIntoCollectionWith(list, merger, iters);
  }

  function getTailOffset(size) {
    return size < SIZE ? 0 : size - 1 >>> SHIFT << SHIFT;
  }

  createClass(OrderedMap, Map);

  // @pragma Construction

  function OrderedMap(value) {
    return value === null || value === undefined ? emptyOrderedMap() : isOrderedMap(value) ? value : emptyOrderedMap().withMutations(function (map) {
      var iter = KeyedIterable(value);
      assertNotInfinite(iter.size);
      iter.forEach(function (v, k) {
        return map.set(k, v);
      });
    });
  }

  OrderedMap.of = function () /*...values*/{
    return this(arguments);
  };

  OrderedMap.prototype.toString = function () {
    return this.__toString('OrderedMap {', '}');
  };

  // @pragma Access

  OrderedMap.prototype.get = function (k, notSetValue) {
    var index = this._map.get(k);
    return index !== undefined ? this._list.get(index)[1] : notSetValue;
  };

  // @pragma Modification

  OrderedMap.prototype.clear = function () {
    if (this.size === 0) {
      return this;
    }
    if (this.__ownerID) {
      this.size = 0;
      this._map.clear();
      this._list.clear();
      return this;
    }
    return emptyOrderedMap();
  };

  OrderedMap.prototype.set = function (k, v) {
    return updateOrderedMap(this, k, v);
  };

  OrderedMap.prototype.remove = function (k) {
    return updateOrderedMap(this, k, NOT_SET);
  };

  OrderedMap.prototype.wasAltered = function () {
    return this._map.wasAltered() || this._list.wasAltered();
  };

  OrderedMap.prototype.__iterate = function (fn, reverse) {
    var this$0 = this;
    return this._list.__iterate(function (entry) {
      return entry && fn(entry[1], entry[0], this$0);
    }, reverse);
  };

  OrderedMap.prototype.__iterator = function (type, reverse) {
    return this._list.fromEntrySeq().__iterator(type, reverse);
  };

  OrderedMap.prototype.__ensureOwner = function (ownerID) {
    if (ownerID === this.__ownerID) {
      return this;
    }
    var newMap = this._map.__ensureOwner(ownerID);
    var newList = this._list.__ensureOwner(ownerID);
    if (!ownerID) {
      this.__ownerID = ownerID;
      this._map = newMap;
      this._list = newList;
      return this;
    }
    return makeOrderedMap(newMap, newList, ownerID, this.__hash);
  };

  function isOrderedMap(maybeOrderedMap) {
    return isMap(maybeOrderedMap) && isOrdered(maybeOrderedMap);
  }

  OrderedMap.isOrderedMap = isOrderedMap;

  OrderedMap.prototype[IS_ORDERED_SENTINEL] = true;
  OrderedMap.prototype[DELETE] = OrderedMap.prototype.remove;

  function makeOrderedMap(map, list, ownerID, hash) {
    var omap = Object.create(OrderedMap.prototype);
    omap.size = map ? map.size : 0;
    omap._map = map;
    omap._list = list;
    omap.__ownerID = ownerID;
    omap.__hash = hash;
    return omap;
  }

  var EMPTY_ORDERED_MAP;
  function emptyOrderedMap() {
    return EMPTY_ORDERED_MAP || (EMPTY_ORDERED_MAP = makeOrderedMap(emptyMap(), emptyList()));
  }

  function updateOrderedMap(omap, k, v) {
    var map = omap._map;
    var list = omap._list;
    var i = map.get(k);
    var has = i !== undefined;
    var newMap;
    var newList;
    if (v === NOT_SET) {
      // removed
      if (!has) {
        return omap;
      }
      if (list.size >= SIZE && list.size >= map.size * 2) {
        newList = list.filter(function (entry, idx) {
          return entry !== undefined && i !== idx;
        });
        newMap = newList.toKeyedSeq().map(function (entry) {
          return entry[0];
        }).flip().toMap();
        if (omap.__ownerID) {
          newMap.__ownerID = newList.__ownerID = omap.__ownerID;
        }
      } else {
        newMap = map.remove(k);
        newList = i === list.size - 1 ? list.pop() : list.set(i, undefined);
      }
    } else {
      if (has) {
        if (v === list.get(i)[1]) {
          return omap;
        }
        newMap = map;
        newList = list.set(i, [k, v]);
      } else {
        newMap = map.set(k, list.size);
        newList = list.set(list.size, [k, v]);
      }
    }
    if (omap.__ownerID) {
      omap.size = newMap.size;
      omap._map = newMap;
      omap._list = newList;
      omap.__hash = undefined;
      return omap;
    }
    return makeOrderedMap(newMap, newList);
  }

  createClass(ToKeyedSequence, KeyedSeq);
  function ToKeyedSequence(indexed, useKeys) {
    this._iter = indexed;
    this._useKeys = useKeys;
    this.size = indexed.size;
  }

  ToKeyedSequence.prototype.get = function (key, notSetValue) {
    return this._iter.get(key, notSetValue);
  };

  ToKeyedSequence.prototype.has = function (key) {
    return this._iter.has(key);
  };

  ToKeyedSequence.prototype.valueSeq = function () {
    return this._iter.valueSeq();
  };

  ToKeyedSequence.prototype.reverse = function () {
    var this$0 = this;
    var reversedSequence = reverseFactory(this, true);
    if (!this._useKeys) {
      reversedSequence.valueSeq = function () {
        return this$0._iter.toSeq().reverse();
      };
    }
    return reversedSequence;
  };

  ToKeyedSequence.prototype.map = function (mapper, context) {
    var this$0 = this;
    var mappedSequence = mapFactory(this, mapper, context);
    if (!this._useKeys) {
      mappedSequence.valueSeq = function () {
        return this$0._iter.toSeq().map(mapper, context);
      };
    }
    return mappedSequence;
  };

  ToKeyedSequence.prototype.__iterate = function (fn, reverse) {
    var this$0 = this;
    var ii;
    return this._iter.__iterate(this._useKeys ? function (v, k) {
      return fn(v, k, this$0);
    } : (ii = reverse ? resolveSize(this) : 0, function (v) {
      return fn(v, reverse ? --ii : ii++, this$0);
    }), reverse);
  };

  ToKeyedSequence.prototype.__iterator = function (type, reverse) {
    if (this._useKeys) {
      return this._iter.__iterator(type, reverse);
    }
    var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);
    var ii = reverse ? resolveSize(this) : 0;
    return new Iterator(function () {
      var step = iterator.next();
      return step.done ? step : iteratorValue(type, reverse ? --ii : ii++, step.value, step);
    });
  };

  ToKeyedSequence.prototype[IS_ORDERED_SENTINEL] = true;

  createClass(ToIndexedSequence, IndexedSeq);
  function ToIndexedSequence(iter) {
    this._iter = iter;
    this.size = iter.size;
  }

  ToIndexedSequence.prototype.includes = function (value) {
    return this._iter.includes(value);
  };

  ToIndexedSequence.prototype.__iterate = function (fn, reverse) {
    var this$0 = this;
    var iterations = 0;
    return this._iter.__iterate(function (v) {
      return fn(v, iterations++, this$0);
    }, reverse);
  };

  ToIndexedSequence.prototype.__iterator = function (type, reverse) {
    var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);
    var iterations = 0;
    return new Iterator(function () {
      var step = iterator.next();
      return step.done ? step : iteratorValue(type, iterations++, step.value, step);
    });
  };

  createClass(ToSetSequence, SetSeq);
  function ToSetSequence(iter) {
    this._iter = iter;
    this.size = iter.size;
  }

  ToSetSequence.prototype.has = function (key) {
    return this._iter.includes(key);
  };

  ToSetSequence.prototype.__iterate = function (fn, reverse) {
    var this$0 = this;
    return this._iter.__iterate(function (v) {
      return fn(v, v, this$0);
    }, reverse);
  };

  ToSetSequence.prototype.__iterator = function (type, reverse) {
    var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);
    return new Iterator(function () {
      var step = iterator.next();
      return step.done ? step : iteratorValue(type, step.value, step.value, step);
    });
  };

  createClass(FromEntriesSequence, KeyedSeq);
  function FromEntriesSequence(entries) {
    this._iter = entries;
    this.size = entries.size;
  }

  FromEntriesSequence.prototype.entrySeq = function () {
    return this._iter.toSeq();
  };

  FromEntriesSequence.prototype.__iterate = function (fn, reverse) {
    var this$0 = this;
    return this._iter.__iterate(function (entry) {
      // Check if entry exists first so array access doesn't throw for holes
      // in the parent iteration.
      if (entry) {
        validateEntry(entry);
        var indexedIterable = isIterable(entry);
        return fn(indexedIterable ? entry.get(1) : entry[1], indexedIterable ? entry.get(0) : entry[0], this$0);
      }
    }, reverse);
  };

  FromEntriesSequence.prototype.__iterator = function (type, reverse) {
    var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);
    return new Iterator(function () {
      while (true) {
        var step = iterator.next();
        if (step.done) {
          return step;
        }
        var entry = step.value;
        // Check if entry exists first so array access doesn't throw for holes
        // in the parent iteration.
        if (entry) {
          validateEntry(entry);
          var indexedIterable = isIterable(entry);
          return iteratorValue(type, indexedIterable ? entry.get(0) : entry[0], indexedIterable ? entry.get(1) : entry[1], step);
        }
      }
    });
  };

  ToIndexedSequence.prototype.cacheResult = ToKeyedSequence.prototype.cacheResult = ToSetSequence.prototype.cacheResult = FromEntriesSequence.prototype.cacheResult = cacheResultThrough;

  function flipFactory(iterable) {
    var flipSequence = makeSequence(iterable);
    flipSequence._iter = iterable;
    flipSequence.size = iterable.size;
    flipSequence.flip = function () {
      return iterable;
    };
    flipSequence.reverse = function () {
      var reversedSequence = iterable.reverse.apply(this); // super.reverse()
      reversedSequence.flip = function () {
        return iterable.reverse();
      };
      return reversedSequence;
    };
    flipSequence.has = function (key) {
      return iterable.includes(key);
    };
    flipSequence.includes = function (key) {
      return iterable.has(key);
    };
    flipSequence.cacheResult = cacheResultThrough;
    flipSequence.__iterateUncached = function (fn, reverse) {
      var this$0 = this;
      return iterable.__iterate(function (v, k) {
        return fn(k, v, this$0) !== false;
      }, reverse);
    };
    flipSequence.__iteratorUncached = function (type, reverse) {
      if (type === ITERATE_ENTRIES) {
        var iterator = iterable.__iterator(type, reverse);
        return new Iterator(function () {
          var step = iterator.next();
          if (!step.done) {
            var k = step.value[0];
            step.value[0] = step.value[1];
            step.value[1] = k;
          }
          return step;
        });
      }
      return iterable.__iterator(type === ITERATE_VALUES ? ITERATE_KEYS : ITERATE_VALUES, reverse);
    };
    return flipSequence;
  }

  function mapFactory(iterable, mapper, context) {
    var mappedSequence = makeSequence(iterable);
    mappedSequence.size = iterable.size;
    mappedSequence.has = function (key) {
      return iterable.has(key);
    };
    mappedSequence.get = function (key, notSetValue) {
      var v = iterable.get(key, NOT_SET);
      return v === NOT_SET ? notSetValue : mapper.call(context, v, key, iterable);
    };
    mappedSequence.__iterateUncached = function (fn, reverse) {
      var this$0 = this;
      return iterable.__iterate(function (v, k, c) {
        return fn(mapper.call(context, v, k, c), k, this$0) !== false;
      }, reverse);
    };
    mappedSequence.__iteratorUncached = function (type, reverse) {
      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);
      return new Iterator(function () {
        var step = iterator.next();
        if (step.done) {
          return step;
        }
        var entry = step.value;
        var key = entry[0];
        return iteratorValue(type, key, mapper.call(context, entry[1], key, iterable), step);
      });
    };
    return mappedSequence;
  }

  function reverseFactory(iterable, useKeys) {
    var reversedSequence = makeSequence(iterable);
    reversedSequence._iter = iterable;
    reversedSequence.size = iterable.size;
    reversedSequence.reverse = function () {
      return iterable;
    };
    if (iterable.flip) {
      reversedSequence.flip = function () {
        var flipSequence = flipFactory(iterable);
        flipSequence.reverse = function () {
          return iterable.flip();
        };
        return flipSequence;
      };
    }
    reversedSequence.get = function (key, notSetValue) {
      return iterable.get(useKeys ? key : -1 - key, notSetValue);
    };
    reversedSequence.has = function (key) {
      return iterable.has(useKeys ? key : -1 - key);
    };
    reversedSequence.includes = function (value) {
      return iterable.includes(value);
    };
    reversedSequence.cacheResult = cacheResultThrough;
    reversedSequence.__iterate = function (fn, reverse) {
      var this$0 = this;
      return iterable.__iterate(function (v, k) {
        return fn(v, k, this$0);
      }, !reverse);
    };
    reversedSequence.__iterator = function (type, reverse) {
      return iterable.__iterator(type, !reverse);
    };
    return reversedSequence;
  }

  function filterFactory(iterable, predicate, context, useKeys) {
    var filterSequence = makeSequence(iterable);
    if (useKeys) {
      filterSequence.has = function (key) {
        var v = iterable.get(key, NOT_SET);
        return v !== NOT_SET && !!predicate.call(context, v, key, iterable);
      };
      filterSequence.get = function (key, notSetValue) {
        var v = iterable.get(key, NOT_SET);
        return v !== NOT_SET && predicate.call(context, v, key, iterable) ? v : notSetValue;
      };
    }
    filterSequence.__iterateUncached = function (fn, reverse) {
      var this$0 = this;
      var iterations = 0;
      iterable.__iterate(function (v, k, c) {
        if (predicate.call(context, v, k, c)) {
          iterations++;
          return fn(v, useKeys ? k : iterations - 1, this$0);
        }
      }, reverse);
      return iterations;
    };
    filterSequence.__iteratorUncached = function (type, reverse) {
      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);
      var iterations = 0;
      return new Iterator(function () {
        while (true) {
          var step = iterator.next();
          if (step.done) {
            return step;
          }
          var entry = step.value;
          var key = entry[0];
          var value = entry[1];
          if (predicate.call(context, value, key, iterable)) {
            return iteratorValue(type, useKeys ? key : iterations++, value, step);
          }
        }
      });
    };
    return filterSequence;
  }

  function countByFactory(iterable, grouper, context) {
    var groups = Map().asMutable();
    iterable.__iterate(function (v, k) {
      groups.update(grouper.call(context, v, k, iterable), 0, function (a) {
        return a + 1;
      });
    });
    return groups.asImmutable();
  }

  function groupByFactory(iterable, grouper, context) {
    var isKeyedIter = isKeyed(iterable);
    var groups = (isOrdered(iterable) ? OrderedMap() : Map()).asMutable();
    iterable.__iterate(function (v, k) {
      groups.update(grouper.call(context, v, k, iterable), function (a) {
        return a = a || [], a.push(isKeyedIter ? [k, v] : v), a;
      });
    });
    var coerce = iterableClass(iterable);
    return groups.map(function (arr) {
      return reify(iterable, coerce(arr));
    });
  }

  function sliceFactory(iterable, begin, end, useKeys) {
    var originalSize = iterable.size;

    // Sanitize begin & end using this shorthand for ToInt32(argument)
    // http://www.ecma-international.org/ecma-262/6.0/#sec-toint32
    if (begin !== undefined) {
      begin = begin | 0;
    }
    if (end !== undefined) {
      if (end === Infinity) {
        end = originalSize;
      } else {
        end = end | 0;
      }
    }

    if (wholeSlice(begin, end, originalSize)) {
      return iterable;
    }

    var resolvedBegin = resolveBegin(begin, originalSize);
    var resolvedEnd = resolveEnd(end, originalSize);

    // begin or end will be NaN if they were provided as negative numbers and
    // this iterable's size is unknown. In that case, cache first so there is
    // a known size and these do not resolve to NaN.
    if (resolvedBegin !== resolvedBegin || resolvedEnd !== resolvedEnd) {
      return sliceFactory(iterable.toSeq().cacheResult(), begin, end, useKeys);
    }

    // Note: resolvedEnd is undefined when the original sequence's length is
    // unknown and this slice did not supply an end and should contain all
    // elements after resolvedBegin.
    // In that case, resolvedSize will be NaN and sliceSize will remain undefined.
    var resolvedSize = resolvedEnd - resolvedBegin;
    var sliceSize;
    if (resolvedSize === resolvedSize) {
      sliceSize = resolvedSize < 0 ? 0 : resolvedSize;
    }

    var sliceSeq = makeSequence(iterable);

    // If iterable.size is undefined, the size of the realized sliceSeq is
    // unknown at this point unless the number of items to slice is 0
    sliceSeq.size = sliceSize === 0 ? sliceSize : iterable.size && sliceSize || undefined;

    if (!useKeys && isSeq(iterable) && sliceSize >= 0) {
      sliceSeq.get = function (index, notSetValue) {
        index = wrapIndex(this, index);
        return index >= 0 && index < sliceSize ? iterable.get(index + resolvedBegin, notSetValue) : notSetValue;
      };
    }

    sliceSeq.__iterateUncached = function (fn, reverse) {
      var this$0 = this;
      if (sliceSize === 0) {
        return 0;
      }
      if (reverse) {
        return this.cacheResult().__iterate(fn, reverse);
      }
      var skipped = 0;
      var isSkipping = true;
      var iterations = 0;
      iterable.__iterate(function (v, k) {
        if (!(isSkipping && (isSkipping = skipped++ < resolvedBegin))) {
          iterations++;
          return fn(v, useKeys ? k : iterations - 1, this$0) !== false && iterations !== sliceSize;
        }
      });
      return iterations;
    };

    sliceSeq.__iteratorUncached = function (type, reverse) {
      if (sliceSize !== 0 && reverse) {
        return this.cacheResult().__iterator(type, reverse);
      }
      // Don't bother instantiating parent iterator if taking 0.
      var iterator = sliceSize !== 0 && iterable.__iterator(type, reverse);
      var skipped = 0;
      var iterations = 0;
      return new Iterator(function () {
        while (skipped++ < resolvedBegin) {
          iterator.next();
        }
        if (++iterations > sliceSize) {
          return iteratorDone();
        }
        var step = iterator.next();
        if (useKeys || type === ITERATE_VALUES) {
          return step;
        } else if (type === ITERATE_KEYS) {
          return iteratorValue(type, iterations - 1, undefined, step);
        } else {
          return iteratorValue(type, iterations - 1, step.value[1], step);
        }
      });
    };

    return sliceSeq;
  }

  function takeWhileFactory(iterable, predicate, context) {
    var takeSequence = makeSequence(iterable);
    takeSequence.__iterateUncached = function (fn, reverse) {
      var this$0 = this;
      if (reverse) {
        return this.cacheResult().__iterate(fn, reverse);
      }
      var iterations = 0;
      iterable.__iterate(function (v, k, c) {
        return predicate.call(context, v, k, c) && ++iterations && fn(v, k, this$0);
      });
      return iterations;
    };
    takeSequence.__iteratorUncached = function (type, reverse) {
      var this$0 = this;
      if (reverse) {
        return this.cacheResult().__iterator(type, reverse);
      }
      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);
      var iterating = true;
      return new Iterator(function () {
        if (!iterating) {
          return iteratorDone();
        }
        var step = iterator.next();
        if (step.done) {
          return step;
        }
        var entry = step.value;
        var k = entry[0];
        var v = entry[1];
        if (!predicate.call(context, v, k, this$0)) {
          iterating = false;
          return iteratorDone();
        }
        return type === ITERATE_ENTRIES ? step : iteratorValue(type, k, v, step);
      });
    };
    return takeSequence;
  }

  function skipWhileFactory(iterable, predicate, context, useKeys) {
    var skipSequence = makeSequence(iterable);
    skipSequence.__iterateUncached = function (fn, reverse) {
      var this$0 = this;
      if (reverse) {
        return this.cacheResult().__iterate(fn, reverse);
      }
      var isSkipping = true;
      var iterations = 0;
      iterable.__iterate(function (v, k, c) {
        if (!(isSkipping && (isSkipping = predicate.call(context, v, k, c)))) {
          iterations++;
          return fn(v, useKeys ? k : iterations - 1, this$0);
        }
      });
      return iterations;
    };
    skipSequence.__iteratorUncached = function (type, reverse) {
      var this$0 = this;
      if (reverse) {
        return this.cacheResult().__iterator(type, reverse);
      }
      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);
      var skipping = true;
      var iterations = 0;
      return new Iterator(function () {
        var step, k, v;
        do {
          step = iterator.next();
          if (step.done) {
            if (useKeys || type === ITERATE_VALUES) {
              return step;
            } else if (type === ITERATE_KEYS) {
              return iteratorValue(type, iterations++, undefined, step);
            } else {
              return iteratorValue(type, iterations++, step.value[1], step);
            }
          }
          var entry = step.value;
          k = entry[0];
          v = entry[1];
          skipping && (skipping = predicate.call(context, v, k, this$0));
        } while (skipping);
        return type === ITERATE_ENTRIES ? step : iteratorValue(type, k, v, step);
      });
    };
    return skipSequence;
  }

  function concatFactory(iterable, values) {
    var isKeyedIterable = isKeyed(iterable);
    var iters = [iterable].concat(values).map(function (v) {
      if (!isIterable(v)) {
        v = isKeyedIterable ? keyedSeqFromValue(v) : indexedSeqFromValue(Array.isArray(v) ? v : [v]);
      } else if (isKeyedIterable) {
        v = KeyedIterable(v);
      }
      return v;
    }).filter(function (v) {
      return v.size !== 0;
    });

    if (iters.length === 0) {
      return iterable;
    }

    if (iters.length === 1) {
      var singleton = iters[0];
      if (singleton === iterable || isKeyedIterable && isKeyed(singleton) || isIndexed(iterable) && isIndexed(singleton)) {
        return singleton;
      }
    }

    var concatSeq = new ArraySeq(iters);
    if (isKeyedIterable) {
      concatSeq = concatSeq.toKeyedSeq();
    } else if (!isIndexed(iterable)) {
      concatSeq = concatSeq.toSetSeq();
    }
    concatSeq = concatSeq.flatten(true);
    concatSeq.size = iters.reduce(function (sum, seq) {
      if (sum !== undefined) {
        var size = seq.size;
        if (size !== undefined) {
          return sum + size;
        }
      }
    }, 0);
    return concatSeq;
  }

  function flattenFactory(iterable, depth, useKeys) {
    var flatSequence = makeSequence(iterable);
    flatSequence.__iterateUncached = function (fn, reverse) {
      var iterations = 0;
      var stopped = false;
      function flatDeep(iter, currentDepth) {
        var this$0 = this;
        iter.__iterate(function (v, k) {
          if ((!depth || currentDepth < depth) && isIterable(v)) {
            flatDeep(v, currentDepth + 1);
          } else if (fn(v, useKeys ? k : iterations++, this$0) === false) {
            stopped = true;
          }
          return !stopped;
        }, reverse);
      }
      flatDeep(iterable, 0);
      return iterations;
    };
    flatSequence.__iteratorUncached = function (type, reverse) {
      var iterator = iterable.__iterator(type, reverse);
      var stack = [];
      var iterations = 0;
      return new Iterator(function () {
        while (iterator) {
          var step = iterator.next();
          if (step.done !== false) {
            iterator = stack.pop();
            continue;
          }
          var v = step.value;
          if (type === ITERATE_ENTRIES) {
            v = v[1];
          }
          if ((!depth || stack.length < depth) && isIterable(v)) {
            stack.push(iterator);
            iterator = v.__iterator(type, reverse);
          } else {
            return useKeys ? step : iteratorValue(type, iterations++, v, step);
          }
        }
        return iteratorDone();
      });
    };
    return flatSequence;
  }

  function flatMapFactory(iterable, mapper, context) {
    var coerce = iterableClass(iterable);
    return iterable.toSeq().map(function (v, k) {
      return coerce(mapper.call(context, v, k, iterable));
    }).flatten(true);
  }

  function interposeFactory(iterable, separator) {
    var interposedSequence = makeSequence(iterable);
    interposedSequence.size = iterable.size && iterable.size * 2 - 1;
    interposedSequence.__iterateUncached = function (fn, reverse) {
      var this$0 = this;
      var iterations = 0;
      iterable.__iterate(function (v, k) {
        return (!iterations || fn(separator, iterations++, this$0) !== false) && fn(v, iterations++, this$0) !== false;
      }, reverse);
      return iterations;
    };
    interposedSequence.__iteratorUncached = function (type, reverse) {
      var iterator = iterable.__iterator(ITERATE_VALUES, reverse);
      var iterations = 0;
      var step;
      return new Iterator(function () {
        if (!step || iterations % 2) {
          step = iterator.next();
          if (step.done) {
            return step;
          }
        }
        return iterations % 2 ? iteratorValue(type, iterations++, separator) : iteratorValue(type, iterations++, step.value, step);
      });
    };
    return interposedSequence;
  }

  function sortFactory(iterable, comparator, mapper) {
    if (!comparator) {
      comparator = defaultComparator;
    }
    var isKeyedIterable = isKeyed(iterable);
    var index = 0;
    var entries = iterable.toSeq().map(function (v, k) {
      return [k, v, index++, mapper ? mapper(v, k, iterable) : v];
    }).toArray();
    entries.sort(function (a, b) {
      return comparator(a[3], b[3]) || a[2] - b[2];
    }).forEach(isKeyedIterable ? function (v, i) {
      entries[i].length = 2;
    } : function (v, i) {
      entries[i] = v[1];
    });
    return isKeyedIterable ? KeyedSeq(entries) : isIndexed(iterable) ? IndexedSeq(entries) : SetSeq(entries);
  }

  function maxFactory(iterable, comparator, mapper) {
    if (!comparator) {
      comparator = defaultComparator;
    }
    if (mapper) {
      var entry = iterable.toSeq().map(function (v, k) {
        return [v, mapper(v, k, iterable)];
      }).reduce(function (a, b) {
        return maxCompare(comparator, a[1], b[1]) ? b : a;
      });
      return entry && entry[0];
    } else {
      return iterable.reduce(function (a, b) {
        return maxCompare(comparator, a, b) ? b : a;
      });
    }
  }

  function maxCompare(comparator, a, b) {
    var comp = comparator(b, a);
    // b is considered the new max if the comparator declares them equal, but
    // they are not equal and b is in fact a nullish value.
    return comp === 0 && b !== a && (b === undefined || b === null || b !== b) || comp > 0;
  }

  function zipWithFactory(keyIter, zipper, iters) {
    var zipSequence = makeSequence(keyIter);
    zipSequence.size = new ArraySeq(iters).map(function (i) {
      return i.size;
    }).min();
    // Note: this a generic base implementation of __iterate in terms of
    // __iterator which may be more generically useful in the future.
    zipSequence.__iterate = function (fn, reverse) {
      /* generic:
      var iterator = this.__iterator(ITERATE_ENTRIES, reverse);
      var step;
      var iterations = 0;
      while (!(step = iterator.next()).done) {
        iterations++;
        if (fn(step.value[1], step.value[0], this) === false) {
          break;
        }
      }
      return iterations;
      */
      // indexed:
      var iterator = this.__iterator(ITERATE_VALUES, reverse);
      var step;
      var iterations = 0;
      while (!(step = iterator.next()).done) {
        if (fn(step.value, iterations++, this) === false) {
          break;
        }
      }
      return iterations;
    };
    zipSequence.__iteratorUncached = function (type, reverse) {
      var iterators = iters.map(function (i) {
        return i = Iterable(i), getIterator(reverse ? i.reverse() : i);
      });
      var iterations = 0;
      var isDone = false;
      return new Iterator(function () {
        var steps;
        if (!isDone) {
          steps = iterators.map(function (i) {
            return i.next();
          });
          isDone = steps.some(function (s) {
            return s.done;
          });
        }
        if (isDone) {
          return iteratorDone();
        }
        return iteratorValue(type, iterations++, zipper.apply(null, steps.map(function (s) {
          return s.value;
        })));
      });
    };
    return zipSequence;
  }

  // #pragma Helper Functions

  function reify(iter, seq) {
    return isSeq(iter) ? seq : iter.constructor(seq);
  }

  function validateEntry(entry) {
    if (entry !== Object(entry)) {
      throw new TypeError('Expected [K, V] tuple: ' + entry);
    }
  }

  function resolveSize(iter) {
    assertNotInfinite(iter.size);
    return ensureSize(iter);
  }

  function iterableClass(iterable) {
    return isKeyed(iterable) ? KeyedIterable : isIndexed(iterable) ? IndexedIterable : SetIterable;
  }

  function makeSequence(iterable) {
    return Object.create((isKeyed(iterable) ? KeyedSeq : isIndexed(iterable) ? IndexedSeq : SetSeq).prototype);
  }

  function cacheResultThrough() {
    if (this._iter.cacheResult) {
      this._iter.cacheResult();
      this.size = this._iter.size;
      return this;
    } else {
      return Seq.prototype.cacheResult.call(this);
    }
  }

  function defaultComparator(a, b) {
    return a > b ? 1 : a < b ? -1 : 0;
  }

  function forceIterator(keyPath) {
    var iter = getIterator(keyPath);
    if (!iter) {
      // Array might not be iterable in this environment, so we need a fallback
      // to our wrapped type.
      if (!isArrayLike(keyPath)) {
        throw new TypeError('Expected iterable or array-like: ' + keyPath);
      }
      iter = getIterator(Iterable(keyPath));
    }
    return iter;
  }

  createClass(Record, KeyedCollection);

  function Record(defaultValues, name) {
    var hasInitialized;

    var RecordType = function Record(values) {
      if (values instanceof RecordType) {
        return values;
      }
      if (!(this instanceof RecordType)) {
        return new RecordType(values);
      }
      if (!hasInitialized) {
        hasInitialized = true;
        var keys = Object.keys(defaultValues);
        setProps(RecordTypePrototype, keys);
        RecordTypePrototype.size = keys.length;
        RecordTypePrototype._name = name;
        RecordTypePrototype._keys = keys;
        RecordTypePrototype._defaultValues = defaultValues;
      }
      this._map = Map(values);
    };

    var RecordTypePrototype = RecordType.prototype = Object.create(RecordPrototype);
    RecordTypePrototype.constructor = RecordType;

    return RecordType;
  }

  Record.prototype.toString = function () {
    return this.__toString(recordName(this) + ' {', '}');
  };

  // @pragma Access

  Record.prototype.has = function (k) {
    return this._defaultValues.hasOwnProperty(k);
  };

  Record.prototype.get = function (k, notSetValue) {
    if (!this.has(k)) {
      return notSetValue;
    }
    var defaultVal = this._defaultValues[k];
    return this._map ? this._map.get(k, defaultVal) : defaultVal;
  };

  // @pragma Modification

  Record.prototype.clear = function () {
    if (this.__ownerID) {
      this._map && this._map.clear();
      return this;
    }
    var RecordType = this.constructor;
    return RecordType._empty || (RecordType._empty = makeRecord(this, emptyMap()));
  };

  Record.prototype.set = function (k, v) {
    if (!this.has(k)) {
      throw new Error('Cannot set unknown key "' + k + '" on ' + recordName(this));
    }
    if (this._map && !this._map.has(k)) {
      var defaultVal = this._defaultValues[k];
      if (v === defaultVal) {
        return this;
      }
    }
    var newMap = this._map && this._map.set(k, v);
    if (this.__ownerID || newMap === this._map) {
      return this;
    }
    return makeRecord(this, newMap);
  };

  Record.prototype.remove = function (k) {
    if (!this.has(k)) {
      return this;
    }
    var newMap = this._map && this._map.remove(k);
    if (this.__ownerID || newMap === this._map) {
      return this;
    }
    return makeRecord(this, newMap);
  };

  Record.prototype.wasAltered = function () {
    return this._map.wasAltered();
  };

  Record.prototype.__iterator = function (type, reverse) {
    var this$0 = this;
    return KeyedIterable(this._defaultValues).map(function (_, k) {
      return this$0.get(k);
    }).__iterator(type, reverse);
  };

  Record.prototype.__iterate = function (fn, reverse) {
    var this$0 = this;
    return KeyedIterable(this._defaultValues).map(function (_, k) {
      return this$0.get(k);
    }).__iterate(fn, reverse);
  };

  Record.prototype.__ensureOwner = function (ownerID) {
    if (ownerID === this.__ownerID) {
      return this;
    }
    var newMap = this._map && this._map.__ensureOwner(ownerID);
    if (!ownerID) {
      this.__ownerID = ownerID;
      this._map = newMap;
      return this;
    }
    return makeRecord(this, newMap, ownerID);
  };

  var RecordPrototype = Record.prototype;
  RecordPrototype[DELETE] = RecordPrototype.remove;
  RecordPrototype.deleteIn = RecordPrototype.removeIn = MapPrototype.removeIn;
  RecordPrototype.merge = MapPrototype.merge;
  RecordPrototype.mergeWith = MapPrototype.mergeWith;
  RecordPrototype.mergeIn = MapPrototype.mergeIn;
  RecordPrototype.mergeDeep = MapPrototype.mergeDeep;
  RecordPrototype.mergeDeepWith = MapPrototype.mergeDeepWith;
  RecordPrototype.mergeDeepIn = MapPrototype.mergeDeepIn;
  RecordPrototype.setIn = MapPrototype.setIn;
  RecordPrototype.update = MapPrototype.update;
  RecordPrototype.updateIn = MapPrototype.updateIn;
  RecordPrototype.withMutations = MapPrototype.withMutations;
  RecordPrototype.asMutable = MapPrototype.asMutable;
  RecordPrototype.asImmutable = MapPrototype.asImmutable;

  function makeRecord(likeRecord, map, ownerID) {
    var record = Object.create(Object.getPrototypeOf(likeRecord));
    record._map = map;
    record.__ownerID = ownerID;
    return record;
  }

  function recordName(record) {
    return record._name || record.constructor.name || 'Record';
  }

  function setProps(prototype, names) {
    try {
      names.forEach(setProp.bind(undefined, prototype));
    } catch (error) {
      // Object.defineProperty failed. Probably IE8.
    }
  }

  function setProp(prototype, name) {
    Object.defineProperty(prototype, name, {
      get: function get() {
        return this.get(name);
      },
      set: function set(value) {
        invariant(this.__ownerID, 'Cannot set on an immutable record.');
        this.set(name, value);
      }
    });
  }

  createClass(Set, SetCollection);

  // @pragma Construction

  function Set(value) {
    return value === null || value === undefined ? emptySet() : isSet(value) && !isOrdered(value) ? value : emptySet().withMutations(function (set) {
      var iter = SetIterable(value);
      assertNotInfinite(iter.size);
      iter.forEach(function (v) {
        return set.add(v);
      });
    });
  }

  Set.of = function () /*...values*/{
    return this(arguments);
  };

  Set.fromKeys = function (value) {
    return this(KeyedIterable(value).keySeq());
  };

  Set.prototype.toString = function () {
    return this.__toString('Set {', '}');
  };

  // @pragma Access

  Set.prototype.has = function (value) {
    return this._map.has(value);
  };

  // @pragma Modification

  Set.prototype.add = function (value) {
    return updateSet(this, this._map.set(value, true));
  };

  Set.prototype.remove = function (value) {
    return updateSet(this, this._map.remove(value));
  };

  Set.prototype.clear = function () {
    return updateSet(this, this._map.clear());
  };

  // @pragma Composition

  Set.prototype.union = function () {
    var iters = SLICE$0.call(arguments, 0);
    iters = iters.filter(function (x) {
      return x.size !== 0;
    });
    if (iters.length === 0) {
      return this;
    }
    if (this.size === 0 && !this.__ownerID && iters.length === 1) {
      return this.constructor(iters[0]);
    }
    return this.withMutations(function (set) {
      for (var ii = 0; ii < iters.length; ii++) {
        SetIterable(iters[ii]).forEach(function (value) {
          return set.add(value);
        });
      }
    });
  };

  Set.prototype.intersect = function () {
    var iters = SLICE$0.call(arguments, 0);
    if (iters.length === 0) {
      return this;
    }
    iters = iters.map(function (iter) {
      return SetIterable(iter);
    });
    var originalSet = this;
    return this.withMutations(function (set) {
      originalSet.forEach(function (value) {
        if (!iters.every(function (iter) {
          return iter.includes(value);
        })) {
          set.remove(value);
        }
      });
    });
  };

  Set.prototype.subtract = function () {
    var iters = SLICE$0.call(arguments, 0);
    if (iters.length === 0) {
      return this;
    }
    iters = iters.map(function (iter) {
      return SetIterable(iter);
    });
    var originalSet = this;
    return this.withMutations(function (set) {
      originalSet.forEach(function (value) {
        if (iters.some(function (iter) {
          return iter.includes(value);
        })) {
          set.remove(value);
        }
      });
    });
  };

  Set.prototype.merge = function () {
    return this.union.apply(this, arguments);
  };

  Set.prototype.mergeWith = function (merger) {
    var iters = SLICE$0.call(arguments, 1);
    return this.union.apply(this, iters);
  };

  Set.prototype.sort = function (comparator) {
    // Late binding
    return OrderedSet(sortFactory(this, comparator));
  };

  Set.prototype.sortBy = function (mapper, comparator) {
    // Late binding
    return OrderedSet(sortFactory(this, comparator, mapper));
  };

  Set.prototype.wasAltered = function () {
    return this._map.wasAltered();
  };

  Set.prototype.__iterate = function (fn, reverse) {
    var this$0 = this;
    return this._map.__iterate(function (_, k) {
      return fn(k, k, this$0);
    }, reverse);
  };

  Set.prototype.__iterator = function (type, reverse) {
    return this._map.map(function (_, k) {
      return k;
    }).__iterator(type, reverse);
  };

  Set.prototype.__ensureOwner = function (ownerID) {
    if (ownerID === this.__ownerID) {
      return this;
    }
    var newMap = this._map.__ensureOwner(ownerID);
    if (!ownerID) {
      this.__ownerID = ownerID;
      this._map = newMap;
      return this;
    }
    return this.__make(newMap, ownerID);
  };

  function isSet(maybeSet) {
    return !!(maybeSet && maybeSet[IS_SET_SENTINEL]);
  }

  Set.isSet = isSet;

  var IS_SET_SENTINEL = '@@__IMMUTABLE_SET__@@';

  var SetPrototype = Set.prototype;
  SetPrototype[IS_SET_SENTINEL] = true;
  SetPrototype[DELETE] = SetPrototype.remove;
  SetPrototype.mergeDeep = SetPrototype.merge;
  SetPrototype.mergeDeepWith = SetPrototype.mergeWith;
  SetPrototype.withMutations = MapPrototype.withMutations;
  SetPrototype.asMutable = MapPrototype.asMutable;
  SetPrototype.asImmutable = MapPrototype.asImmutable;

  SetPrototype.__empty = emptySet;
  SetPrototype.__make = makeSet;

  function updateSet(set, newMap) {
    if (set.__ownerID) {
      set.size = newMap.size;
      set._map = newMap;
      return set;
    }
    return newMap === set._map ? set : newMap.size === 0 ? set.__empty() : set.__make(newMap);
  }

  function makeSet(map, ownerID) {
    var set = Object.create(SetPrototype);
    set.size = map ? map.size : 0;
    set._map = map;
    set.__ownerID = ownerID;
    return set;
  }

  var EMPTY_SET;
  function emptySet() {
    return EMPTY_SET || (EMPTY_SET = makeSet(emptyMap()));
  }

  createClass(OrderedSet, Set);

  // @pragma Construction

  function OrderedSet(value) {
    return value === null || value === undefined ? emptyOrderedSet() : isOrderedSet(value) ? value : emptyOrderedSet().withMutations(function (set) {
      var iter = SetIterable(value);
      assertNotInfinite(iter.size);
      iter.forEach(function (v) {
        return set.add(v);
      });
    });
  }

  OrderedSet.of = function () /*...values*/{
    return this(arguments);
  };

  OrderedSet.fromKeys = function (value) {
    return this(KeyedIterable(value).keySeq());
  };

  OrderedSet.prototype.toString = function () {
    return this.__toString('OrderedSet {', '}');
  };

  function isOrderedSet(maybeOrderedSet) {
    return isSet(maybeOrderedSet) && isOrdered(maybeOrderedSet);
  }

  OrderedSet.isOrderedSet = isOrderedSet;

  var OrderedSetPrototype = OrderedSet.prototype;
  OrderedSetPrototype[IS_ORDERED_SENTINEL] = true;

  OrderedSetPrototype.__empty = emptyOrderedSet;
  OrderedSetPrototype.__make = makeOrderedSet;

  function makeOrderedSet(map, ownerID) {
    var set = Object.create(OrderedSetPrototype);
    set.size = map ? map.size : 0;
    set._map = map;
    set.__ownerID = ownerID;
    return set;
  }

  var EMPTY_ORDERED_SET;
  function emptyOrderedSet() {
    return EMPTY_ORDERED_SET || (EMPTY_ORDERED_SET = makeOrderedSet(emptyOrderedMap()));
  }

  createClass(Stack, IndexedCollection);

  // @pragma Construction

  function Stack(value) {
    return value === null || value === undefined ? emptyStack() : isStack(value) ? value : emptyStack().unshiftAll(value);
  }

  Stack.of = function () /*...values*/{
    return this(arguments);
  };

  Stack.prototype.toString = function () {
    return this.__toString('Stack [', ']');
  };

  // @pragma Access

  Stack.prototype.get = function (index, notSetValue) {
    var head = this._head;
    index = wrapIndex(this, index);
    while (head && index--) {
      head = head.next;
    }
    return head ? head.value : notSetValue;
  };

  Stack.prototype.peek = function () {
    return this._head && this._head.value;
  };

  // @pragma Modification

  Stack.prototype.push = function () /*...values*/{
    if (arguments.length === 0) {
      return this;
    }
    var newSize = this.size + arguments.length;
    var head = this._head;
    for (var ii = arguments.length - 1; ii >= 0; ii--) {
      head = {
        value: arguments[ii],
        next: head
      };
    }
    if (this.__ownerID) {
      this.size = newSize;
      this._head = head;
      this.__hash = undefined;
      this.__altered = true;
      return this;
    }
    return makeStack(newSize, head);
  };

  Stack.prototype.pushAll = function (iter) {
    iter = IndexedIterable(iter);
    if (iter.size === 0) {
      return this;
    }
    assertNotInfinite(iter.size);
    var newSize = this.size;
    var head = this._head;
    iter.reverse().forEach(function (value) {
      newSize++;
      head = {
        value: value,
        next: head
      };
    });
    if (this.__ownerID) {
      this.size = newSize;
      this._head = head;
      this.__hash = undefined;
      this.__altered = true;
      return this;
    }
    return makeStack(newSize, head);
  };

  Stack.prototype.pop = function () {
    return this.slice(1);
  };

  Stack.prototype.unshift = function () /*...values*/{
    return this.push.apply(this, arguments);
  };

  Stack.prototype.unshiftAll = function (iter) {
    return this.pushAll(iter);
  };

  Stack.prototype.shift = function () {
    return this.pop.apply(this, arguments);
  };

  Stack.prototype.clear = function () {
    if (this.size === 0) {
      return this;
    }
    if (this.__ownerID) {
      this.size = 0;
      this._head = undefined;
      this.__hash = undefined;
      this.__altered = true;
      return this;
    }
    return emptyStack();
  };

  Stack.prototype.slice = function (begin, end) {
    if (wholeSlice(begin, end, this.size)) {
      return this;
    }
    var resolvedBegin = resolveBegin(begin, this.size);
    var resolvedEnd = resolveEnd(end, this.size);
    if (resolvedEnd !== this.size) {
      // super.slice(begin, end);
      return IndexedCollection.prototype.slice.call(this, begin, end);
    }
    var newSize = this.size - resolvedBegin;
    var head = this._head;
    while (resolvedBegin--) {
      head = head.next;
    }
    if (this.__ownerID) {
      this.size = newSize;
      this._head = head;
      this.__hash = undefined;
      this.__altered = true;
      return this;
    }
    return makeStack(newSize, head);
  };

  // @pragma Mutability

  Stack.prototype.__ensureOwner = function (ownerID) {
    if (ownerID === this.__ownerID) {
      return this;
    }
    if (!ownerID) {
      this.__ownerID = ownerID;
      this.__altered = false;
      return this;
    }
    return makeStack(this.size, this._head, ownerID, this.__hash);
  };

  // @pragma Iteration

  Stack.prototype.__iterate = function (fn, reverse) {
    if (reverse) {
      return this.reverse().__iterate(fn);
    }
    var iterations = 0;
    var node = this._head;
    while (node) {
      if (fn(node.value, iterations++, this) === false) {
        break;
      }
      node = node.next;
    }
    return iterations;
  };

  Stack.prototype.__iterator = function (type, reverse) {
    if (reverse) {
      return this.reverse().__iterator(type);
    }
    var iterations = 0;
    var node = this._head;
    return new Iterator(function () {
      if (node) {
        var value = node.value;
        node = node.next;
        return iteratorValue(type, iterations++, value);
      }
      return iteratorDone();
    });
  };

  function isStack(maybeStack) {
    return !!(maybeStack && maybeStack[IS_STACK_SENTINEL]);
  }

  Stack.isStack = isStack;

  var IS_STACK_SENTINEL = '@@__IMMUTABLE_STACK__@@';

  var StackPrototype = Stack.prototype;
  StackPrototype[IS_STACK_SENTINEL] = true;
  StackPrototype.withMutations = MapPrototype.withMutations;
  StackPrototype.asMutable = MapPrototype.asMutable;
  StackPrototype.asImmutable = MapPrototype.asImmutable;
  StackPrototype.wasAltered = MapPrototype.wasAltered;

  function makeStack(size, head, ownerID, hash) {
    var map = Object.create(StackPrototype);
    map.size = size;
    map._head = head;
    map.__ownerID = ownerID;
    map.__hash = hash;
    map.__altered = false;
    return map;
  }

  var EMPTY_STACK;
  function emptyStack() {
    return EMPTY_STACK || (EMPTY_STACK = makeStack(0));
  }

  /**
   * Contributes additional methods to a constructor
   */
  function mixin(ctor, methods) {
    var keyCopier = function keyCopier(key) {
      ctor.prototype[key] = methods[key];
    };
    Object.keys(methods).forEach(keyCopier);
    Object.getOwnPropertySymbols && Object.getOwnPropertySymbols(methods).forEach(keyCopier);
    return ctor;
  }

  Iterable.Iterator = Iterator;

  mixin(Iterable, {

    // ### Conversion to other types

    toArray: function toArray() {
      assertNotInfinite(this.size);
      var array = new Array(this.size || 0);
      this.valueSeq().__iterate(function (v, i) {
        array[i] = v;
      });
      return array;
    },

    toIndexedSeq: function toIndexedSeq() {
      return new ToIndexedSequence(this);
    },

    toJS: function toJS() {
      return this.toSeq().map(function (value) {
        return value && typeof value.toJS === 'function' ? value.toJS() : value;
      }).__toJS();
    },

    toJSON: function toJSON() {
      return this.toSeq().map(function (value) {
        return value && typeof value.toJSON === 'function' ? value.toJSON() : value;
      }).__toJS();
    },

    toKeyedSeq: function toKeyedSeq() {
      return new ToKeyedSequence(this, true);
    },

    toMap: function toMap() {
      // Use Late Binding here to solve the circular dependency.
      return Map(this.toKeyedSeq());
    },

    toObject: function toObject() {
      assertNotInfinite(this.size);
      var object = {};
      this.__iterate(function (v, k) {
        object[k] = v;
      });
      return object;
    },

    toOrderedMap: function toOrderedMap() {
      // Use Late Binding here to solve the circular dependency.
      return OrderedMap(this.toKeyedSeq());
    },

    toOrderedSet: function toOrderedSet() {
      // Use Late Binding here to solve the circular dependency.
      return OrderedSet(isKeyed(this) ? this.valueSeq() : this);
    },

    toSet: function toSet() {
      // Use Late Binding here to solve the circular dependency.
      return Set(isKeyed(this) ? this.valueSeq() : this);
    },

    toSetSeq: function toSetSeq() {
      return new ToSetSequence(this);
    },

    toSeq: function toSeq() {
      return isIndexed(this) ? this.toIndexedSeq() : isKeyed(this) ? this.toKeyedSeq() : this.toSetSeq();
    },

    toStack: function toStack() {
      // Use Late Binding here to solve the circular dependency.
      return Stack(isKeyed(this) ? this.valueSeq() : this);
    },

    toList: function toList() {
      // Use Late Binding here to solve the circular dependency.
      return List(isKeyed(this) ? this.valueSeq() : this);
    },

    // ### Common JavaScript methods and properties

    toString: function toString() {
      return '[Iterable]';
    },

    __toString: function __toString(head, tail) {
      if (this.size === 0) {
        return head + tail;
      }
      return head + ' ' + this.toSeq().map(this.__toStringMapper).join(', ') + ' ' + tail;
    },

    // ### ES6 Collection methods (ES6 Array and Map)

    concat: function concat() {
      var values = SLICE$0.call(arguments, 0);
      return reify(this, concatFactory(this, values));
    },

    includes: function includes(searchValue) {
      return this.some(function (value) {
        return is(value, searchValue);
      });
    },

    entries: function entries() {
      return this.__iterator(ITERATE_ENTRIES);
    },

    every: function every(predicate, context) {
      assertNotInfinite(this.size);
      var returnValue = true;
      this.__iterate(function (v, k, c) {
        if (!predicate.call(context, v, k, c)) {
          returnValue = false;
          return false;
        }
      });
      return returnValue;
    },

    filter: function filter(predicate, context) {
      return reify(this, filterFactory(this, predicate, context, true));
    },

    find: function find(predicate, context, notSetValue) {
      var entry = this.findEntry(predicate, context);
      return entry ? entry[1] : notSetValue;
    },

    forEach: function forEach(sideEffect, context) {
      assertNotInfinite(this.size);
      return this.__iterate(context ? sideEffect.bind(context) : sideEffect);
    },

    join: function join(separator) {
      assertNotInfinite(this.size);
      separator = separator !== undefined ? '' + separator : ',';
      var joined = '';
      var isFirst = true;
      this.__iterate(function (v) {
        isFirst ? isFirst = false : joined += separator;
        joined += v !== null && v !== undefined ? v.toString() : '';
      });
      return joined;
    },

    keys: function keys() {
      return this.__iterator(ITERATE_KEYS);
    },

    map: function map(mapper, context) {
      return reify(this, mapFactory(this, mapper, context));
    },

    reduce: function reduce(reducer, initialReduction, context) {
      assertNotInfinite(this.size);
      var reduction;
      var useFirst;
      if (arguments.length < 2) {
        useFirst = true;
      } else {
        reduction = initialReduction;
      }
      this.__iterate(function (v, k, c) {
        if (useFirst) {
          useFirst = false;
          reduction = v;
        } else {
          reduction = reducer.call(context, reduction, v, k, c);
        }
      });
      return reduction;
    },

    reduceRight: function reduceRight(reducer, initialReduction, context) {
      var reversed = this.toKeyedSeq().reverse();
      return reversed.reduce.apply(reversed, arguments);
    },

    reverse: function reverse() {
      return reify(this, reverseFactory(this, true));
    },

    slice: function slice(begin, end) {
      return reify(this, sliceFactory(this, begin, end, true));
    },

    some: function some(predicate, context) {
      return !this.every(not(predicate), context);
    },

    sort: function sort(comparator) {
      return reify(this, sortFactory(this, comparator));
    },

    values: function values() {
      return this.__iterator(ITERATE_VALUES);
    },

    // ### More sequential methods

    butLast: function butLast() {
      return this.slice(0, -1);
    },

    isEmpty: function isEmpty() {
      return this.size !== undefined ? this.size === 0 : !this.some(function () {
        return true;
      });
    },

    count: function count(predicate, context) {
      return ensureSize(predicate ? this.toSeq().filter(predicate, context) : this);
    },

    countBy: function countBy(grouper, context) {
      return countByFactory(this, grouper, context);
    },

    equals: function equals(other) {
      return deepEqual(this, other);
    },

    entrySeq: function entrySeq() {
      var iterable = this;
      if (iterable._cache) {
        // We cache as an entries array, so we can just return the cache!
        return new ArraySeq(iterable._cache);
      }
      var entriesSequence = iterable.toSeq().map(entryMapper).toIndexedSeq();
      entriesSequence.fromEntrySeq = function () {
        return iterable.toSeq();
      };
      return entriesSequence;
    },

    filterNot: function filterNot(predicate, context) {
      return this.filter(not(predicate), context);
    },

    findEntry: function findEntry(predicate, context, notSetValue) {
      var found = notSetValue;
      this.__iterate(function (v, k, c) {
        if (predicate.call(context, v, k, c)) {
          found = [k, v];
          return false;
        }
      });
      return found;
    },

    findKey: function findKey(predicate, context) {
      var entry = this.findEntry(predicate, context);
      return entry && entry[0];
    },

    findLast: function findLast(predicate, context, notSetValue) {
      return this.toKeyedSeq().reverse().find(predicate, context, notSetValue);
    },

    findLastEntry: function findLastEntry(predicate, context, notSetValue) {
      return this.toKeyedSeq().reverse().findEntry(predicate, context, notSetValue);
    },

    findLastKey: function findLastKey(predicate, context) {
      return this.toKeyedSeq().reverse().findKey(predicate, context);
    },

    first: function first() {
      return this.find(returnTrue);
    },

    flatMap: function flatMap(mapper, context) {
      return reify(this, flatMapFactory(this, mapper, context));
    },

    flatten: function flatten(depth) {
      return reify(this, flattenFactory(this, depth, true));
    },

    fromEntrySeq: function fromEntrySeq() {
      return new FromEntriesSequence(this);
    },

    get: function get(searchKey, notSetValue) {
      return this.find(function (_, key) {
        return is(key, searchKey);
      }, undefined, notSetValue);
    },

    getIn: function getIn(searchKeyPath, notSetValue) {
      var nested = this;
      // Note: in an ES6 environment, we would prefer:
      // for (var key of searchKeyPath) {
      var iter = forceIterator(searchKeyPath);
      var step;
      while (!(step = iter.next()).done) {
        var key = step.value;
        nested = nested && nested.get ? nested.get(key, NOT_SET) : NOT_SET;
        if (nested === NOT_SET) {
          return notSetValue;
        }
      }
      return nested;
    },

    groupBy: function groupBy(grouper, context) {
      return groupByFactory(this, grouper, context);
    },

    has: function has(searchKey) {
      return this.get(searchKey, NOT_SET) !== NOT_SET;
    },

    hasIn: function hasIn(searchKeyPath) {
      return this.getIn(searchKeyPath, NOT_SET) !== NOT_SET;
    },

    isSubset: function isSubset(iter) {
      iter = typeof iter.includes === 'function' ? iter : Iterable(iter);
      return this.every(function (value) {
        return iter.includes(value);
      });
    },

    isSuperset: function isSuperset(iter) {
      iter = typeof iter.isSubset === 'function' ? iter : Iterable(iter);
      return iter.isSubset(this);
    },

    keyOf: function keyOf(searchValue) {
      return this.findKey(function (value) {
        return is(value, searchValue);
      });
    },

    keySeq: function keySeq() {
      return this.toSeq().map(keyMapper).toIndexedSeq();
    },

    last: function last() {
      return this.toSeq().reverse().first();
    },

    lastKeyOf: function lastKeyOf(searchValue) {
      return this.toKeyedSeq().reverse().keyOf(searchValue);
    },

    max: function max(comparator) {
      return maxFactory(this, comparator);
    },

    maxBy: function maxBy(mapper, comparator) {
      return maxFactory(this, comparator, mapper);
    },

    min: function min(comparator) {
      return maxFactory(this, comparator ? neg(comparator) : defaultNegComparator);
    },

    minBy: function minBy(mapper, comparator) {
      return maxFactory(this, comparator ? neg(comparator) : defaultNegComparator, mapper);
    },

    rest: function rest() {
      return this.slice(1);
    },

    skip: function skip(amount) {
      return this.slice(Math.max(0, amount));
    },

    skipLast: function skipLast(amount) {
      return reify(this, this.toSeq().reverse().skip(amount).reverse());
    },

    skipWhile: function skipWhile(predicate, context) {
      return reify(this, skipWhileFactory(this, predicate, context, true));
    },

    skipUntil: function skipUntil(predicate, context) {
      return this.skipWhile(not(predicate), context);
    },

    sortBy: function sortBy(mapper, comparator) {
      return reify(this, sortFactory(this, comparator, mapper));
    },

    take: function take(amount) {
      return this.slice(0, Math.max(0, amount));
    },

    takeLast: function takeLast(amount) {
      return reify(this, this.toSeq().reverse().take(amount).reverse());
    },

    takeWhile: function takeWhile(predicate, context) {
      return reify(this, takeWhileFactory(this, predicate, context));
    },

    takeUntil: function takeUntil(predicate, context) {
      return this.takeWhile(not(predicate), context);
    },

    valueSeq: function valueSeq() {
      return this.toIndexedSeq();
    },

    // ### Hashable Object

    hashCode: function hashCode() {
      return this.__hash || (this.__hash = hashIterable(this));
    }

    // ### Internal

    // abstract __iterate(fn, reverse)

    // abstract __iterator(type, reverse)
  });

  // var IS_ITERABLE_SENTINEL = '@@__IMMUTABLE_ITERABLE__@@';
  // var IS_KEYED_SENTINEL = '@@__IMMUTABLE_KEYED__@@';
  // var IS_INDEXED_SENTINEL = '@@__IMMUTABLE_INDEXED__@@';
  // var IS_ORDERED_SENTINEL = '@@__IMMUTABLE_ORDERED__@@';

  var IterablePrototype = Iterable.prototype;
  IterablePrototype[IS_ITERABLE_SENTINEL] = true;
  IterablePrototype[ITERATOR_SYMBOL] = IterablePrototype.values;
  IterablePrototype.__toJS = IterablePrototype.toArray;
  IterablePrototype.__toStringMapper = quoteString;
  IterablePrototype.inspect = IterablePrototype.toSource = function () {
    return this.toString();
  };
  IterablePrototype.chain = IterablePrototype.flatMap;
  IterablePrototype.contains = IterablePrototype.includes;

  mixin(KeyedIterable, {

    // ### More sequential methods

    flip: function flip() {
      return reify(this, flipFactory(this));
    },

    mapEntries: function mapEntries(mapper, context) {
      var this$0 = this;
      var iterations = 0;
      return reify(this, this.toSeq().map(function (v, k) {
        return mapper.call(context, [k, v], iterations++, this$0);
      }).fromEntrySeq());
    },

    mapKeys: function mapKeys(mapper, context) {
      var this$0 = this;
      return reify(this, this.toSeq().flip().map(function (k, v) {
        return mapper.call(context, k, v, this$0);
      }).flip());
    }

  });

  var KeyedIterablePrototype = KeyedIterable.prototype;
  KeyedIterablePrototype[IS_KEYED_SENTINEL] = true;
  KeyedIterablePrototype[ITERATOR_SYMBOL] = IterablePrototype.entries;
  KeyedIterablePrototype.__toJS = IterablePrototype.toObject;
  KeyedIterablePrototype.__toStringMapper = function (v, k) {
    return JSON.stringify(k) + ': ' + quoteString(v);
  };

  mixin(IndexedIterable, {

    // ### Conversion to other types

    toKeyedSeq: function toKeyedSeq() {
      return new ToKeyedSequence(this, false);
    },

    // ### ES6 Collection methods (ES6 Array and Map)

    filter: function filter(predicate, context) {
      return reify(this, filterFactory(this, predicate, context, false));
    },

    findIndex: function findIndex(predicate, context) {
      var entry = this.findEntry(predicate, context);
      return entry ? entry[0] : -1;
    },

    indexOf: function indexOf(searchValue) {
      var key = this.keyOf(searchValue);
      return key === undefined ? -1 : key;
    },

    lastIndexOf: function lastIndexOf(searchValue) {
      var key = this.lastKeyOf(searchValue);
      return key === undefined ? -1 : key;
    },

    reverse: function reverse() {
      return reify(this, reverseFactory(this, false));
    },

    slice: function slice(begin, end) {
      return reify(this, sliceFactory(this, begin, end, false));
    },

    splice: function splice(index, removeNum /*, ...values*/) {
      var numArgs = arguments.length;
      removeNum = Math.max(removeNum | 0, 0);
      if (numArgs === 0 || numArgs === 2 && !removeNum) {
        return this;
      }
      // If index is negative, it should resolve relative to the size of the
      // collection. However size may be expensive to compute if not cached, so
      // only call count() if the number is in fact negative.
      index = resolveBegin(index, index < 0 ? this.count() : this.size);
      var spliced = this.slice(0, index);
      return reify(this, numArgs === 1 ? spliced : spliced.concat(arrCopy(arguments, 2), this.slice(index + removeNum)));
    },

    // ### More collection methods

    findLastIndex: function findLastIndex(predicate, context) {
      var entry = this.findLastEntry(predicate, context);
      return entry ? entry[0] : -1;
    },

    first: function first() {
      return this.get(0);
    },

    flatten: function flatten(depth) {
      return reify(this, flattenFactory(this, depth, false));
    },

    get: function get(index, notSetValue) {
      index = wrapIndex(this, index);
      return index < 0 || this.size === Infinity || this.size !== undefined && index > this.size ? notSetValue : this.find(function (_, key) {
        return key === index;
      }, undefined, notSetValue);
    },

    has: function has(index) {
      index = wrapIndex(this, index);
      return index >= 0 && (this.size !== undefined ? this.size === Infinity || index < this.size : this.indexOf(index) !== -1);
    },

    interpose: function interpose(separator) {
      return reify(this, interposeFactory(this, separator));
    },

    interleave: function interleave() /*...iterables*/{
      var iterables = [this].concat(arrCopy(arguments));
      var zipped = zipWithFactory(this.toSeq(), IndexedSeq.of, iterables);
      var interleaved = zipped.flatten(true);
      if (zipped.size) {
        interleaved.size = zipped.size * iterables.length;
      }
      return reify(this, interleaved);
    },

    keySeq: function keySeq() {
      return Range(0, this.size);
    },

    last: function last() {
      return this.get(-1);
    },

    skipWhile: function skipWhile(predicate, context) {
      return reify(this, skipWhileFactory(this, predicate, context, false));
    },

    zip: function zip() /*, ...iterables */{
      var iterables = [this].concat(arrCopy(arguments));
      return reify(this, zipWithFactory(this, defaultZipper, iterables));
    },

    zipWith: function zipWith(zipper /*, ...iterables */) {
      var iterables = arrCopy(arguments);
      iterables[0] = this;
      return reify(this, zipWithFactory(this, zipper, iterables));
    }

  });

  IndexedIterable.prototype[IS_INDEXED_SENTINEL] = true;
  IndexedIterable.prototype[IS_ORDERED_SENTINEL] = true;

  mixin(SetIterable, {

    // ### ES6 Collection methods (ES6 Array and Map)

    get: function get(value, notSetValue) {
      return this.has(value) ? value : notSetValue;
    },

    includes: function includes(value) {
      return this.has(value);
    },

    // ### More sequential methods

    keySeq: function keySeq() {
      return this.valueSeq();
    }

  });

  SetIterable.prototype.has = IterablePrototype.includes;
  SetIterable.prototype.contains = SetIterable.prototype.includes;

  // Mixin subclasses

  mixin(KeyedSeq, KeyedIterable.prototype);
  mixin(IndexedSeq, IndexedIterable.prototype);
  mixin(SetSeq, SetIterable.prototype);

  mixin(KeyedCollection, KeyedIterable.prototype);
  mixin(IndexedCollection, IndexedIterable.prototype);
  mixin(SetCollection, SetIterable.prototype);

  // #pragma Helper functions

  function keyMapper(v, k) {
    return k;
  }

  function entryMapper(v, k) {
    return [k, v];
  }

  function not(predicate) {
    return function () {
      return !predicate.apply(this, arguments);
    };
  }

  function neg(predicate) {
    return function () {
      return -predicate.apply(this, arguments);
    };
  }

  function quoteString(value) {
    return typeof value === 'string' ? JSON.stringify(value) : String(value);
  }

  function defaultZipper() {
    return arrCopy(arguments);
  }

  function defaultNegComparator(a, b) {
    return a < b ? 1 : a > b ? -1 : 0;
  }

  function hashIterable(iterable) {
    if (iterable.size === Infinity) {
      return 0;
    }
    var ordered = isOrdered(iterable);
    var keyed = isKeyed(iterable);
    var h = ordered ? 1 : 0;
    var size = iterable.__iterate(keyed ? ordered ? function (v, k) {
      h = 31 * h + hashMerge(hash(v), hash(k)) | 0;
    } : function (v, k) {
      h = h + hashMerge(hash(v), hash(k)) | 0;
    } : ordered ? function (v) {
      h = 31 * h + hash(v) | 0;
    } : function (v) {
      h = h + hash(v) | 0;
    });
    return murmurHashOfSize(size, h);
  }

  function murmurHashOfSize(size, h) {
    h = imul(h, 0xCC9E2D51);
    h = imul(h << 15 | h >>> -15, 0x1B873593);
    h = imul(h << 13 | h >>> -13, 5);
    h = (h + 0xE6546B64 | 0) ^ size;
    h = imul(h ^ h >>> 16, 0x85EBCA6B);
    h = imul(h ^ h >>> 13, 0xC2B2AE35);
    h = smi(h ^ h >>> 16);
    return h;
  }

  function hashMerge(a, b) {
    return a ^ b + 0x9E3779B9 + (a << 6) + (a >> 2) | 0; // int
  }

  var Immutable = {

    Iterable: Iterable,

    Seq: Seq,
    Collection: Collection,
    Map: Map,
    OrderedMap: OrderedMap,
    List: List,
    Stack: Stack,
    Set: Set,
    OrderedSet: OrderedSet,

    Record: Record,
    Range: Range,
    Repeat: Repeat,

    is: is,
    fromJS: fromJS

  };

  return Immutable;
});

/***/ }),
/* 166 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */



var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

if (process.env.NODE_ENV !== 'production') {
  var invariant = __webpack_require__(2);
  var warning = __webpack_require__(3);
  var ReactPropTypesSecret = __webpack_require__(85);
  var loggedTypeFailures = {};
}

/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?Function} getStack Returns the component stack.
 * @private
 */
function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
  if (process.env.NODE_ENV !== 'production') {
    for (var typeSpecName in typeSpecs) {
      if (typeSpecs.hasOwnProperty(typeSpecName)) {
        var error;
        // Prop type validation may throw. In case they do, we don't want to
        // fail the render phase where it didn't fail before. So we log it.
        // After these have been cleaned up, we'll let them throw.
        try {
          // This is intentionally an invariant that gets caught. It's the same
          // behavior as without this statement except with a better message.
          invariant(typeof typeSpecs[typeSpecName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', componentName || 'React class', location, typeSpecName);
          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
        } catch (ex) {
          error = ex;
        }
        warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error === 'undefined' ? 'undefined' : _typeof(error));
        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
          // Only monitor this failure once because there tends to be a lot of the
          // same error.
          loggedTypeFailures[error.message] = true;

          var stack = getStack ? getStack() : '';

          warning(false, 'Failed %s type: %s%s', location, error.message, stack != null ? stack : '');
        }
      }
    }
  }
}

module.exports = checkPropTypes;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 167 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */



var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var emptyFunction = __webpack_require__(17);
var invariant = __webpack_require__(2);
var warning = __webpack_require__(3);

var ReactPropTypesSecret = __webpack_require__(85);
var checkPropTypes = __webpack_require__(166);

module.exports = function (isValidElement, throwOnDirectAccess) {
  /* global Symbol */
  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

  /**
   * Returns the iterator method function contained on the iterable object.
   *
   * Be sure to invoke the function with the iterable as context:
   *
   *     var iteratorFn = getIteratorFn(myIterable);
   *     if (iteratorFn) {
   *       var iterator = iteratorFn.call(myIterable);
   *       ...
   *     }
   *
   * @param {?object} maybeIterable
   * @return {?function}
   */
  function getIteratorFn(maybeIterable) {
    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
    if (typeof iteratorFn === 'function') {
      return iteratorFn;
    }
  }

  /**
   * Collection of methods that allow declaration and validation of props that are
   * supplied to React components. Example usage:
   *
   *   var Props = require('ReactPropTypes');
   *   var MyArticle = React.createClass({
   *     propTypes: {
   *       // An optional string prop named "description".
   *       description: Props.string,
   *
   *       // A required enum prop named "category".
   *       category: Props.oneOf(['News','Photos']).isRequired,
   *
   *       // A prop named "dialog" that requires an instance of Dialog.
   *       dialog: Props.instanceOf(Dialog).isRequired
   *     },
   *     render: function() { ... }
   *   });
   *
   * A more formal specification of how these methods are used:
   *
   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
   *   decl := ReactPropTypes.{type}(.isRequired)?
   *
   * Each and every declaration produces a function with the same signature. This
   * allows the creation of custom validation functions. For example:
   *
   *  var MyLink = React.createClass({
   *    propTypes: {
   *      // An optional string or URI prop named "href".
   *      href: function(props, propName, componentName) {
   *        var propValue = props[propName];
   *        if (propValue != null && typeof propValue !== 'string' &&
   *            !(propValue instanceof URI)) {
   *          return new Error(
   *            'Expected a string or an URI for ' + propName + ' in ' +
   *            componentName
   *          );
   *        }
   *      }
   *    },
   *    render: function() {...}
   *  });
   *
   * @internal
   */

  var ANONYMOUS = '<<anonymous>>';

  // Important!
  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
  var ReactPropTypes = {
    array: createPrimitiveTypeChecker('array'),
    bool: createPrimitiveTypeChecker('boolean'),
    func: createPrimitiveTypeChecker('function'),
    number: createPrimitiveTypeChecker('number'),
    object: createPrimitiveTypeChecker('object'),
    string: createPrimitiveTypeChecker('string'),
    symbol: createPrimitiveTypeChecker('symbol'),

    any: createAnyTypeChecker(),
    arrayOf: createArrayOfTypeChecker,
    element: createElementTypeChecker(),
    instanceOf: createInstanceTypeChecker,
    node: createNodeChecker(),
    objectOf: createObjectOfTypeChecker,
    oneOf: createEnumTypeChecker,
    oneOfType: createUnionTypeChecker,
    shape: createShapeTypeChecker
  };

  /**
   * inlined Object.is polyfill to avoid requiring consumers ship their own
   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
   */
  /*eslint-disable no-self-compare*/
  function is(x, y) {
    // SameValue algorithm
    if (x === y) {
      // Steps 1-5, 7-10
      // Steps 6.b-6.e: +0 != -0
      return x !== 0 || 1 / x === 1 / y;
    } else {
      // Step 6.a: NaN == NaN
      return x !== x && y !== y;
    }
  }
  /*eslint-enable no-self-compare*/

  /**
   * We use an Error-like object for backward compatibility as people may call
   * PropTypes directly and inspect their output. However, we don't use real
   * Errors anymore. We don't inspect their stack anyway, and creating them
   * is prohibitively expensive if they are created too often, such as what
   * happens in oneOfType() for any type before the one that matched.
   */
  function PropTypeError(message) {
    this.message = message;
    this.stack = '';
  }
  // Make `instanceof Error` still work for returned errors.
  PropTypeError.prototype = Error.prototype;

  function createChainableTypeChecker(validate) {
    if (process.env.NODE_ENV !== 'production') {
      var manualPropTypeCallCache = {};
      var manualPropTypeWarningCount = 0;
    }
    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
      componentName = componentName || ANONYMOUS;
      propFullName = propFullName || propName;

      if (secret !== ReactPropTypesSecret) {
        if (throwOnDirectAccess) {
          // New behavior only for users of `prop-types` package
          invariant(false, 'Calling PropTypes validators directly is not supported by the `prop-types` package. ' + 'Use `PropTypes.checkPropTypes()` to call them. ' + 'Read more at http://fb.me/use-check-prop-types');
        } else if (process.env.NODE_ENV !== 'production' && typeof console !== 'undefined') {
          // Old behavior for people using React.PropTypes
          var cacheKey = componentName + ':' + propName;
          if (!manualPropTypeCallCache[cacheKey] &&
          // Avoid spamming the console because they are often not actionable except for lib authors
          manualPropTypeWarningCount < 3) {
            warning(false, 'You are manually calling a React.PropTypes validation ' + 'function for the `%s` prop on `%s`. This is deprecated ' + 'and will throw in the standalone `prop-types` package. ' + 'You may be seeing this warning due to a third-party PropTypes ' + 'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.', propFullName, componentName);
            manualPropTypeCallCache[cacheKey] = true;
            manualPropTypeWarningCount++;
          }
        }
      }
      if (props[propName] == null) {
        if (isRequired) {
          if (props[propName] === null) {
            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
          }
          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
        }
        return null;
      } else {
        return validate(props, propName, componentName, location, propFullName);
      }
    }

    var chainedCheckType = checkType.bind(null, false);
    chainedCheckType.isRequired = checkType.bind(null, true);

    return chainedCheckType;
  }

  function createPrimitiveTypeChecker(expectedType) {
    function validate(props, propName, componentName, location, propFullName, secret) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== expectedType) {
        // `propValue` being instance of, say, date/regexp, pass the 'object'
        // check, but we can offer a more precise error message here rather than
        // 'of type `object`'.
        var preciseType = getPreciseType(propValue);

        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createAnyTypeChecker() {
    return createChainableTypeChecker(emptyFunction.thatReturnsNull);
  }

  function createArrayOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
      }
      var propValue = props[propName];
      if (!Array.isArray(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
      }
      for (var i = 0; i < propValue.length; i++) {
        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
        if (error instanceof Error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createElementTypeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      if (!isValidElement(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createInstanceTypeChecker(expectedClass) {
    function validate(props, propName, componentName, location, propFullName) {
      if (!(props[propName] instanceof expectedClass)) {
        var expectedClassName = expectedClass.name || ANONYMOUS;
        var actualClassName = getClassName(props[propName]);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createEnumTypeChecker(expectedValues) {
    if (!Array.isArray(expectedValues)) {
      process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOf, expected an instance of array.') : void 0;
      return emptyFunction.thatReturnsNull;
    }

    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      for (var i = 0; i < expectedValues.length; i++) {
        if (is(propValue, expectedValues[i])) {
          return null;
        }
      }

      var valuesString = JSON.stringify(expectedValues);
      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
    }
    return createChainableTypeChecker(validate);
  }

  function createObjectOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
      }
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
      }
      for (var key in propValue) {
        if (propValue.hasOwnProperty(key)) {
          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
          if (error instanceof Error) {
            return error;
          }
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createUnionTypeChecker(arrayOfTypeCheckers) {
    if (!Array.isArray(arrayOfTypeCheckers)) {
      process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
      return emptyFunction.thatReturnsNull;
    }

    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
      var checker = arrayOfTypeCheckers[i];
      if (typeof checker !== 'function') {
        warning(false, 'Invalid argument supplid to oneOfType. Expected an array of check functions, but ' + 'received %s at index %s.', getPostfixForTypeWarning(checker), i);
        return emptyFunction.thatReturnsNull;
      }
    }

    function validate(props, propName, componentName, location, propFullName) {
      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
        var checker = arrayOfTypeCheckers[i];
        if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {
          return null;
        }
      }

      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
    }
    return createChainableTypeChecker(validate);
  }

  function createNodeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      if (!isNode(props[propName])) {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createShapeTypeChecker(shapeTypes) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
      }
      for (var key in shapeTypes) {
        var checker = shapeTypes[key];
        if (!checker) {
          continue;
        }
        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
        if (error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function isNode(propValue) {
    switch (typeof propValue === 'undefined' ? 'undefined' : _typeof(propValue)) {
      case 'number':
      case 'string':
      case 'undefined':
        return true;
      case 'boolean':
        return !propValue;
      case 'object':
        if (Array.isArray(propValue)) {
          return propValue.every(isNode);
        }
        if (propValue === null || isValidElement(propValue)) {
          return true;
        }

        var iteratorFn = getIteratorFn(propValue);
        if (iteratorFn) {
          var iterator = iteratorFn.call(propValue);
          var step;
          if (iteratorFn !== propValue.entries) {
            while (!(step = iterator.next()).done) {
              if (!isNode(step.value)) {
                return false;
              }
            }
          } else {
            // Iterator will provide entry [k,v] tuples rather than values.
            while (!(step = iterator.next()).done) {
              var entry = step.value;
              if (entry) {
                if (!isNode(entry[1])) {
                  return false;
                }
              }
            }
          }
        } else {
          return false;
        }

        return true;
      default:
        return false;
    }
  }

  function isSymbol(propType, propValue) {
    // Native Symbol.
    if (propType === 'symbol') {
      return true;
    }

    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
    if (propValue['@@toStringTag'] === 'Symbol') {
      return true;
    }

    // Fallback for non-spec compliant Symbols which are polyfilled.
    if (typeof Symbol === 'function' && propValue instanceof Symbol) {
      return true;
    }

    return false;
  }

  // Equivalent of `typeof` but with special handling for array and regexp.
  function getPropType(propValue) {
    var propType = typeof propValue === 'undefined' ? 'undefined' : _typeof(propValue);
    if (Array.isArray(propValue)) {
      return 'array';
    }
    if (propValue instanceof RegExp) {
      // Old webkits (at least until Android 4.0) return 'function' rather than
      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
      // passes PropTypes.object.
      return 'object';
    }
    if (isSymbol(propType, propValue)) {
      return 'symbol';
    }
    return propType;
  }

  // This handles more types than `getPropType`. Only used for error messages.
  // See `createPrimitiveTypeChecker`.
  function getPreciseType(propValue) {
    if (typeof propValue === 'undefined' || propValue === null) {
      return '' + propValue;
    }
    var propType = getPropType(propValue);
    if (propType === 'object') {
      if (propValue instanceof Date) {
        return 'date';
      } else if (propValue instanceof RegExp) {
        return 'regexp';
      }
    }
    return propType;
  }

  // Returns a string that is postfixed to a warning about an invalid type.
  // For example, "undefined" or "of type array"
  function getPostfixForTypeWarning(value) {
    var type = getPreciseType(value);
    switch (type) {
      case 'array':
      case 'object':
        return 'an ' + type;
      case 'boolean':
      case 'date':
      case 'regexp':
        return 'a ' + type;
      default:
        return type;
    }
  }

  // Returns class name of the object, if any.
  function getClassName(propValue) {
    if (!propValue.constructor || !propValue.constructor.name) {
      return ANONYMOUS;
    }
    return propValue.constructor.name;
  }

  ReactPropTypes.checkPropTypes = checkPropTypes;
  ReactPropTypes.PropTypes = ReactPropTypes;

  return ReactPropTypes;
};
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 168 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ARIADOMPropertyConfig = {
  Properties: {
    // Global States and Properties
    'aria-current': 0, // state
    'aria-details': 0,
    'aria-disabled': 0, // state
    'aria-hidden': 0, // state
    'aria-invalid': 0, // state
    'aria-keyshortcuts': 0,
    'aria-label': 0,
    'aria-roledescription': 0,
    // Widget Attributes
    'aria-autocomplete': 0,
    'aria-checked': 0,
    'aria-expanded': 0,
    'aria-haspopup': 0,
    'aria-level': 0,
    'aria-modal': 0,
    'aria-multiline': 0,
    'aria-multiselectable': 0,
    'aria-orientation': 0,
    'aria-placeholder': 0,
    'aria-pressed': 0,
    'aria-readonly': 0,
    'aria-required': 0,
    'aria-selected': 0,
    'aria-sort': 0,
    'aria-valuemax': 0,
    'aria-valuemin': 0,
    'aria-valuenow': 0,
    'aria-valuetext': 0,
    // Live Region Attributes
    'aria-atomic': 0,
    'aria-busy': 0,
    'aria-live': 0,
    'aria-relevant': 0,
    // Drag-and-Drop Attributes
    'aria-dropeffect': 0,
    'aria-grabbed': 0,
    // Relationship Attributes
    'aria-activedescendant': 0,
    'aria-colcount': 0,
    'aria-colindex': 0,
    'aria-colspan': 0,
    'aria-controls': 0,
    'aria-describedby': 0,
    'aria-errormessage': 0,
    'aria-flowto': 0,
    'aria-labelledby': 0,
    'aria-owns': 0,
    'aria-posinset': 0,
    'aria-rowcount': 0,
    'aria-rowindex': 0,
    'aria-rowspan': 0,
    'aria-setsize': 0
  },
  DOMAttributeNames: {},
  DOMPropertyNames: {}
};

module.exports = ARIADOMPropertyConfig;

/***/ }),
/* 169 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ReactDOMComponentTree = __webpack_require__(7);

var focusNode = __webpack_require__(82);

var AutoFocusUtils = {
  focusDOMComponent: function focusDOMComponent() {
    focusNode(ReactDOMComponentTree.getNodeFromInstance(this));
  }
};

module.exports = AutoFocusUtils;

/***/ }),
/* 170 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var EventPropagators = __webpack_require__(37);
var ExecutionEnvironment = __webpack_require__(9);
var FallbackCompositionState = __webpack_require__(176);
var SyntheticCompositionEvent = __webpack_require__(219);
var SyntheticInputEvent = __webpack_require__(222);

var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
var START_KEYCODE = 229;

var canUseCompositionEvent = ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;

var documentMode = null;
if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {
  documentMode = document.documentMode;
}

// Webkit offers a very useful `textInput` event that can be used to
// directly represent `beforeInput`. The IE `textinput` event is not as
// useful, so we don't use it.
var canUseTextInputEvent = ExecutionEnvironment.canUseDOM && 'TextEvent' in window && !documentMode && !isPresto();

// In IE9+, we have access to composition events, but the data supplied
// by the native compositionend event may be incorrect. Japanese ideographic
// spaces, for instance (\u3000) are not recorded correctly.
var useFallbackCompositionData = ExecutionEnvironment.canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);

/**
 * Opera <= 12 includes TextEvent in window, but does not fire
 * text input events. Rely on keypress instead.
 */
function isPresto() {
  var opera = window.opera;
  return (typeof opera === 'undefined' ? 'undefined' : _typeof(opera)) === 'object' && typeof opera.version === 'function' && parseInt(opera.version(), 10) <= 12;
}

var SPACEBAR_CODE = 32;
var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

// Events and their corresponding property names.
var eventTypes = {
  beforeInput: {
    phasedRegistrationNames: {
      bubbled: 'onBeforeInput',
      captured: 'onBeforeInputCapture'
    },
    dependencies: ['topCompositionEnd', 'topKeyPress', 'topTextInput', 'topPaste']
  },
  compositionEnd: {
    phasedRegistrationNames: {
      bubbled: 'onCompositionEnd',
      captured: 'onCompositionEndCapture'
    },
    dependencies: ['topBlur', 'topCompositionEnd', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
  },
  compositionStart: {
    phasedRegistrationNames: {
      bubbled: 'onCompositionStart',
      captured: 'onCompositionStartCapture'
    },
    dependencies: ['topBlur', 'topCompositionStart', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
  },
  compositionUpdate: {
    phasedRegistrationNames: {
      bubbled: 'onCompositionUpdate',
      captured: 'onCompositionUpdateCapture'
    },
    dependencies: ['topBlur', 'topCompositionUpdate', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
  }
};

// Track whether we've ever handled a keypress on the space key.
var hasSpaceKeypress = false;

/**
 * Return whether a native keypress event is assumed to be a command.
 * This is required because Firefox fires `keypress` events for key commands
 * (cut, copy, select-all, etc.) even though no character is inserted.
 */
function isKeypressCommand(nativeEvent) {
  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
  // ctrlKey && altKey is equivalent to AltGr, and is not a command.
  !(nativeEvent.ctrlKey && nativeEvent.altKey);
}

/**
 * Translate native top level events into event types.
 *
 * @param {string} topLevelType
 * @return {object}
 */
function getCompositionEventType(topLevelType) {
  switch (topLevelType) {
    case 'topCompositionStart':
      return eventTypes.compositionStart;
    case 'topCompositionEnd':
      return eventTypes.compositionEnd;
    case 'topCompositionUpdate':
      return eventTypes.compositionUpdate;
  }
}

/**
 * Does our fallback best-guess model think this event signifies that
 * composition has begun?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */
function isFallbackCompositionStart(topLevelType, nativeEvent) {
  return topLevelType === 'topKeyDown' && nativeEvent.keyCode === START_KEYCODE;
}

/**
 * Does our fallback mode think that this event is the end of composition?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */
function isFallbackCompositionEnd(topLevelType, nativeEvent) {
  switch (topLevelType) {
    case 'topKeyUp':
      // Command keys insert or clear IME input.
      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
    case 'topKeyDown':
      // Expect IME keyCode on each keydown. If we get any other
      // code we must have exited earlier.
      return nativeEvent.keyCode !== START_KEYCODE;
    case 'topKeyPress':
    case 'topMouseDown':
    case 'topBlur':
      // Events are not possible without cancelling IME.
      return true;
    default:
      return false;
  }
}

/**
 * Google Input Tools provides composition data via a CustomEvent,
 * with the `data` property populated in the `detail` object. If this
 * is available on the event object, use it. If not, this is a plain
 * composition event and we have nothing special to extract.
 *
 * @param {object} nativeEvent
 * @return {?string}
 */
function getDataFromCustomEvent(nativeEvent) {
  var detail = nativeEvent.detail;
  if ((typeof detail === 'undefined' ? 'undefined' : _typeof(detail)) === 'object' && 'data' in detail) {
    return detail.data;
  }
  return null;
}

// Track the current IME composition fallback object, if any.
var currentComposition = null;

/**
 * @return {?object} A SyntheticCompositionEvent.
 */
function extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
  var eventType;
  var fallbackData;

  if (canUseCompositionEvent) {
    eventType = getCompositionEventType(topLevelType);
  } else if (!currentComposition) {
    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
      eventType = eventTypes.compositionStart;
    }
  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
    eventType = eventTypes.compositionEnd;
  }

  if (!eventType) {
    return null;
  }

  if (useFallbackCompositionData) {
    // The current composition is stored statically and must not be
    // overwritten while composition continues.
    if (!currentComposition && eventType === eventTypes.compositionStart) {
      currentComposition = FallbackCompositionState.getPooled(nativeEventTarget);
    } else if (eventType === eventTypes.compositionEnd) {
      if (currentComposition) {
        fallbackData = currentComposition.getData();
      }
    }
  }

  var event = SyntheticCompositionEvent.getPooled(eventType, targetInst, nativeEvent, nativeEventTarget);

  if (fallbackData) {
    // Inject data generated from fallback path into the synthetic event.
    // This matches the property of native CompositionEventInterface.
    event.data = fallbackData;
  } else {
    var customData = getDataFromCustomEvent(nativeEvent);
    if (customData !== null) {
      event.data = customData;
    }
  }

  EventPropagators.accumulateTwoPhaseDispatches(event);
  return event;
}

/**
 * @param {string} topLevelType Record from `EventConstants`.
 * @param {object} nativeEvent Native browser event.
 * @return {?string} The string corresponding to this `beforeInput` event.
 */
function getNativeBeforeInputChars(topLevelType, nativeEvent) {
  switch (topLevelType) {
    case 'topCompositionEnd':
      return getDataFromCustomEvent(nativeEvent);
    case 'topKeyPress':
      /**
       * If native `textInput` events are available, our goal is to make
       * use of them. However, there is a special case: the spacebar key.
       * In Webkit, preventing default on a spacebar `textInput` event
       * cancels character insertion, but it *also* causes the browser
       * to fall back to its default spacebar behavior of scrolling the
       * page.
       *
       * Tracking at:
       * https://code.google.com/p/chromium/issues/detail?id=355103
       *
       * To avoid this issue, use the keypress event as if no `textInput`
       * event is available.
       */
      var which = nativeEvent.which;
      if (which !== SPACEBAR_CODE) {
        return null;
      }

      hasSpaceKeypress = true;
      return SPACEBAR_CHAR;

    case 'topTextInput':
      // Record the characters to be added to the DOM.
      var chars = nativeEvent.data;

      // If it's a spacebar character, assume that we have already handled
      // it at the keypress level and bail immediately. Android Chrome
      // doesn't give us keycodes, so we need to blacklist it.
      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
        return null;
      }

      return chars;

    default:
      // For other native event types, do nothing.
      return null;
  }
}

/**
 * For browsers that do not provide the `textInput` event, extract the
 * appropriate string to use for SyntheticInputEvent.
 *
 * @param {string} topLevelType Record from `EventConstants`.
 * @param {object} nativeEvent Native browser event.
 * @return {?string} The fallback string for this `beforeInput` event.
 */
function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
  // If we are currently composing (IME) and using a fallback to do so,
  // try to extract the composed characters from the fallback object.
  // If composition event is available, we extract a string only at
  // compositionevent, otherwise extract it at fallback events.
  if (currentComposition) {
    if (topLevelType === 'topCompositionEnd' || !canUseCompositionEvent && isFallbackCompositionEnd(topLevelType, nativeEvent)) {
      var chars = currentComposition.getData();
      FallbackCompositionState.release(currentComposition);
      currentComposition = null;
      return chars;
    }
    return null;
  }

  switch (topLevelType) {
    case 'topPaste':
      // If a paste event occurs after a keypress, throw out the input
      // chars. Paste events should not lead to BeforeInput events.
      return null;
    case 'topKeyPress':
      /**
       * As of v27, Firefox may fire keypress events even when no character
       * will be inserted. A few possibilities:
       *
       * - `which` is `0`. Arrow keys, Esc key, etc.
       *
       * - `which` is the pressed key code, but no char is available.
       *   Ex: 'AltGr + d` in Polish. There is no modified character for
       *   this key combination and no character is inserted into the
       *   document, but FF fires the keypress for char code `100` anyway.
       *   No `input` event will occur.
       *
       * - `which` is the pressed key code, but a command combination is
       *   being used. Ex: `Cmd+C`. No character is inserted, and no
       *   `input` event will occur.
       */
      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {
        return String.fromCharCode(nativeEvent.which);
      }
      return null;
    case 'topCompositionEnd':
      return useFallbackCompositionData ? null : nativeEvent.data;
    default:
      return null;
  }
}

/**
 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
 * `textInput` or fallback behavior.
 *
 * @return {?object} A SyntheticInputEvent.
 */
function extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
  var chars;

  if (canUseTextInputEvent) {
    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
  } else {
    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
  }

  // If no characters are being inserted, no BeforeInput event should
  // be fired.
  if (!chars) {
    return null;
  }

  var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, targetInst, nativeEvent, nativeEventTarget);

  event.data = chars;
  EventPropagators.accumulateTwoPhaseDispatches(event);
  return event;
}

/**
 * Create an `onBeforeInput` event to match
 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
 *
 * This event plugin is based on the native `textInput` event
 * available in Chrome, Safari, Opera, and IE. This event fires after
 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
 *
 * `beforeInput` is spec'd but not implemented in any browsers, and
 * the `input` event does not provide any useful information about what has
 * actually been added, contrary to the spec. Thus, `textInput` is the best
 * available event to identify the characters that have actually been inserted
 * into the target node.
 *
 * This plugin is also responsible for emitting `composition` events, thus
 * allowing us to share composition fallback code for both `beforeInput` and
 * `composition` event types.
 */
var BeforeInputEventPlugin = {
  eventTypes: eventTypes,

  extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    return [extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget), extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget)];
  }
};

module.exports = BeforeInputEventPlugin;

/***/ }),
/* 171 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var CSSProperty = __webpack_require__(86);
var ExecutionEnvironment = __webpack_require__(9);
var ReactInstrumentation = __webpack_require__(15);

var camelizeStyleName = __webpack_require__(152);
var dangerousStyleValue = __webpack_require__(229);
var hyphenateStyleName = __webpack_require__(159);
var memoizeStringOnly = __webpack_require__(162);
var warning = __webpack_require__(3);

var processStyleName = memoizeStringOnly(function (styleName) {
  return hyphenateStyleName(styleName);
});

var hasShorthandPropertyBug = false;
var styleFloatAccessor = 'cssFloat';
if (ExecutionEnvironment.canUseDOM) {
  var tempStyle = document.createElement('div').style;
  try {
    // IE8 throws "Invalid argument." if resetting shorthand style properties.
    tempStyle.font = '';
  } catch (e) {
    hasShorthandPropertyBug = true;
  }
  // IE8 only supports accessing cssFloat (standard) as styleFloat
  if (document.documentElement.style.cssFloat === undefined) {
    styleFloatAccessor = 'styleFloat';
  }
}

if (process.env.NODE_ENV !== 'production') {
  // 'msTransform' is correct, but the other prefixes should be capitalized
  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;

  // style values shouldn't contain a semicolon
  var badStyleValueWithSemicolonPattern = /;\s*$/;

  var warnedStyleNames = {};
  var warnedStyleValues = {};
  var warnedForNaNValue = false;

  var warnHyphenatedStyleName = function warnHyphenatedStyleName(name, owner) {
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
      return;
    }

    warnedStyleNames[name] = true;
    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported style property %s. Did you mean %s?%s', name, camelizeStyleName(name), checkRenderMessage(owner)) : void 0;
  };

  var warnBadVendoredStyleName = function warnBadVendoredStyleName(name, owner) {
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
      return;
    }

    warnedStyleNames[name] = true;
    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported vendor-prefixed style property %s. Did you mean %s?%s', name, name.charAt(0).toUpperCase() + name.slice(1), checkRenderMessage(owner)) : void 0;
  };

  var warnStyleValueWithSemicolon = function warnStyleValueWithSemicolon(name, value, owner) {
    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
      return;
    }

    warnedStyleValues[value] = true;
    process.env.NODE_ENV !== 'production' ? warning(false, "Style property values shouldn't contain a semicolon.%s " + 'Try "%s: %s" instead.', checkRenderMessage(owner), name, value.replace(badStyleValueWithSemicolonPattern, '')) : void 0;
  };

  var warnStyleValueIsNaN = function warnStyleValueIsNaN(name, value, owner) {
    if (warnedForNaNValue) {
      return;
    }

    warnedForNaNValue = true;
    process.env.NODE_ENV !== 'production' ? warning(false, '`NaN` is an invalid value for the `%s` css style property.%s', name, checkRenderMessage(owner)) : void 0;
  };

  var checkRenderMessage = function checkRenderMessage(owner) {
    if (owner) {
      var name = owner.getName();
      if (name) {
        return ' Check the render method of `' + name + '`.';
      }
    }
    return '';
  };

  /**
   * @param {string} name
   * @param {*} value
   * @param {ReactDOMComponent} component
   */
  var warnValidStyle = function warnValidStyle(name, value, component) {
    var owner;
    if (component) {
      owner = component._currentElement._owner;
    }
    if (name.indexOf('-') > -1) {
      warnHyphenatedStyleName(name, owner);
    } else if (badVendoredStyleNamePattern.test(name)) {
      warnBadVendoredStyleName(name, owner);
    } else if (badStyleValueWithSemicolonPattern.test(value)) {
      warnStyleValueWithSemicolon(name, value, owner);
    }

    if (typeof value === 'number' && isNaN(value)) {
      warnStyleValueIsNaN(name, value, owner);
    }
  };
}

/**
 * Operations for dealing with CSS properties.
 */
var CSSPropertyOperations = {
  /**
   * Serializes a mapping of style properties for use as inline styles:
   *
   *   > createMarkupForStyles({width: '200px', height: 0})
   *   "width:200px;height:0;"
   *
   * Undefined values are ignored so that declarative programming is easier.
   * The result should be HTML-escaped before insertion into the DOM.
   *
   * @param {object} styles
   * @param {ReactDOMComponent} component
   * @return {?string}
   */
  createMarkupForStyles: function createMarkupForStyles(styles, component) {
    var serialized = '';
    for (var styleName in styles) {
      if (!styles.hasOwnProperty(styleName)) {
        continue;
      }
      var isCustomProperty = styleName.indexOf('--') === 0;
      var styleValue = styles[styleName];
      if (process.env.NODE_ENV !== 'production') {
        if (!isCustomProperty) {
          warnValidStyle(styleName, styleValue, component);
        }
      }
      if (styleValue != null) {
        serialized += processStyleName(styleName) + ':';
        serialized += dangerousStyleValue(styleName, styleValue, component, isCustomProperty) + ';';
      }
    }
    return serialized || null;
  },

  /**
   * Sets the value for multiple styles on a node.  If a value is specified as
   * '' (empty string), the corresponding style property will be unset.
   *
   * @param {DOMElement} node
   * @param {object} styles
   * @param {ReactDOMComponent} component
   */
  setValueForStyles: function setValueForStyles(node, styles, component) {
    if (process.env.NODE_ENV !== 'production') {
      ReactInstrumentation.debugTool.onHostOperation({
        instanceID: component._debugID,
        type: 'update styles',
        payload: styles
      });
    }

    var style = node.style;
    for (var styleName in styles) {
      if (!styles.hasOwnProperty(styleName)) {
        continue;
      }
      var isCustomProperty = styleName.indexOf('--') === 0;
      if (process.env.NODE_ENV !== 'production') {
        if (!isCustomProperty) {
          warnValidStyle(styleName, styles[styleName], component);
        }
      }
      var styleValue = dangerousStyleValue(styleName, styles[styleName], component, isCustomProperty);
      if (styleName === 'float' || styleName === 'cssFloat') {
        styleName = styleFloatAccessor;
      }
      if (isCustomProperty) {
        style.setProperty(styleName, styleValue);
      } else if (styleValue) {
        style[styleName] = styleValue;
      } else {
        var expansion = hasShorthandPropertyBug && CSSProperty.shorthandPropertyExpansions[styleName];
        if (expansion) {
          // Shorthand property that IE8 won't like unsetting, so unset each
          // component to placate it
          for (var individualStyleName in expansion) {
            style[individualStyleName] = '';
          }
        } else {
          style[styleName] = '';
        }
      }
    }
  }
};

module.exports = CSSPropertyOperations;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 172 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var EventPluginHub = __webpack_require__(36);
var EventPropagators = __webpack_require__(37);
var ExecutionEnvironment = __webpack_require__(9);
var ReactDOMComponentTree = __webpack_require__(7);
var ReactUpdates = __webpack_require__(19);
var SyntheticEvent = __webpack_require__(24);

var inputValueTracking = __webpack_require__(103);
var getEventTarget = __webpack_require__(70);
var isEventSupported = __webpack_require__(71);
var isTextInputElement = __webpack_require__(105);

var eventTypes = {
  change: {
    phasedRegistrationNames: {
      bubbled: 'onChange',
      captured: 'onChangeCapture'
    },
    dependencies: ['topBlur', 'topChange', 'topClick', 'topFocus', 'topInput', 'topKeyDown', 'topKeyUp', 'topSelectionChange']
  }
};

function createAndAccumulateChangeEvent(inst, nativeEvent, target) {
  var event = SyntheticEvent.getPooled(eventTypes.change, inst, nativeEvent, target);
  event.type = 'change';
  EventPropagators.accumulateTwoPhaseDispatches(event);
  return event;
}
/**
 * For IE shims
 */
var activeElement = null;
var activeElementInst = null;

/**
 * SECTION: handle `change` event
 */
function shouldUseChangeEvent(elem) {
  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
}

var doesChangeEventBubble = false;
if (ExecutionEnvironment.canUseDOM) {
  // See `handleChange` comment below
  doesChangeEventBubble = isEventSupported('change') && (!document.documentMode || document.documentMode > 8);
}

function manualDispatchChangeEvent(nativeEvent) {
  var event = createAndAccumulateChangeEvent(activeElementInst, nativeEvent, getEventTarget(nativeEvent));

  // If change and propertychange bubbled, we'd just bind to it like all the
  // other events and have it go through ReactBrowserEventEmitter. Since it
  // doesn't, we manually listen for the events and so we have to enqueue and
  // process the abstract event manually.
  //
  // Batching is necessary here in order to ensure that all event handlers run
  // before the next rerender (including event handlers attached to ancestor
  // elements instead of directly on the input). Without this, controlled
  // components don't work properly in conjunction with event bubbling because
  // the component is rerendered and the value reverted before all the event
  // handlers can run. See https://github.com/facebook/react/issues/708.
  ReactUpdates.batchedUpdates(runEventInBatch, event);
}

function runEventInBatch(event) {
  EventPluginHub.enqueueEvents(event);
  EventPluginHub.processEventQueue(false);
}

function startWatchingForChangeEventIE8(target, targetInst) {
  activeElement = target;
  activeElementInst = targetInst;
  activeElement.attachEvent('onchange', manualDispatchChangeEvent);
}

function stopWatchingForChangeEventIE8() {
  if (!activeElement) {
    return;
  }
  activeElement.detachEvent('onchange', manualDispatchChangeEvent);
  activeElement = null;
  activeElementInst = null;
}

function getInstIfValueChanged(targetInst, nativeEvent) {
  var updated = inputValueTracking.updateValueIfChanged(targetInst);
  var simulated = nativeEvent.simulated === true && ChangeEventPlugin._allowSimulatedPassThrough;

  if (updated || simulated) {
    return targetInst;
  }
}

function getTargetInstForChangeEvent(topLevelType, targetInst) {
  if (topLevelType === 'topChange') {
    return targetInst;
  }
}

function handleEventsForChangeEventIE8(topLevelType, target, targetInst) {
  if (topLevelType === 'topFocus') {
    // stopWatching() should be a noop here but we call it just in case we
    // missed a blur event somehow.
    stopWatchingForChangeEventIE8();
    startWatchingForChangeEventIE8(target, targetInst);
  } else if (topLevelType === 'topBlur') {
    stopWatchingForChangeEventIE8();
  }
}

/**
 * SECTION: handle `input` event
 */
var isInputEventSupported = false;
if (ExecutionEnvironment.canUseDOM) {
  // IE9 claims to support the input event but fails to trigger it when
  // deleting text, so we ignore its input events.

  isInputEventSupported = isEventSupported('input') && (!('documentMode' in document) || document.documentMode > 9);
}

/**
 * (For IE <=9) Starts tracking propertychange events on the passed-in element
 * and override the value property so that we can distinguish user events from
 * value changes in JS.
 */
function startWatchingForValueChange(target, targetInst) {
  activeElement = target;
  activeElementInst = targetInst;
  activeElement.attachEvent('onpropertychange', handlePropertyChange);
}

/**
 * (For IE <=9) Removes the event listeners from the currently-tracked element,
 * if any exists.
 */
function stopWatchingForValueChange() {
  if (!activeElement) {
    return;
  }
  activeElement.detachEvent('onpropertychange', handlePropertyChange);

  activeElement = null;
  activeElementInst = null;
}

/**
 * (For IE <=9) Handles a propertychange event, sending a `change` event if
 * the value of the active element has changed.
 */
function handlePropertyChange(nativeEvent) {
  if (nativeEvent.propertyName !== 'value') {
    return;
  }
  if (getInstIfValueChanged(activeElementInst, nativeEvent)) {
    manualDispatchChangeEvent(nativeEvent);
  }
}

function handleEventsForInputEventPolyfill(topLevelType, target, targetInst) {
  if (topLevelType === 'topFocus') {
    // In IE8, we can capture almost all .value changes by adding a
    // propertychange handler and looking for events with propertyName
    // equal to 'value'
    // In IE9, propertychange fires for most input events but is buggy and
    // doesn't fire when text is deleted, but conveniently, selectionchange
    // appears to fire in all of the remaining cases so we catch those and
    // forward the event if the value has changed
    // In either case, we don't want to call the event handler if the value
    // is changed from JS so we redefine a setter for `.value` that updates
    // our activeElementValue variable, allowing us to ignore those changes
    //
    // stopWatching() should be a noop here but we call it just in case we
    // missed a blur event somehow.
    stopWatchingForValueChange();
    startWatchingForValueChange(target, targetInst);
  } else if (topLevelType === 'topBlur') {
    stopWatchingForValueChange();
  }
}

// For IE8 and IE9.
function getTargetInstForInputEventPolyfill(topLevelType, targetInst, nativeEvent) {
  if (topLevelType === 'topSelectionChange' || topLevelType === 'topKeyUp' || topLevelType === 'topKeyDown') {
    // On the selectionchange event, the target is just document which isn't
    // helpful for us so just check activeElement instead.
    //
    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
    // propertychange on the first input event after setting `value` from a
    // script and fires only keydown, keypress, keyup. Catching keyup usually
    // gets it and catching keydown lets us fire an event for the first
    // keystroke if user does a key repeat (it'll be a little delayed: right
    // before the second keystroke). Other input methods (e.g., paste) seem to
    // fire selectionchange normally.
    return getInstIfValueChanged(activeElementInst, nativeEvent);
  }
}

/**
 * SECTION: handle `click` event
 */
function shouldUseClickEvent(elem) {
  // Use the `click` event to detect changes to checkbox and radio inputs.
  // This approach works across all browsers, whereas `change` does not fire
  // until `blur` in IE8.
  var nodeName = elem.nodeName;
  return nodeName && nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
}

function getTargetInstForClickEvent(topLevelType, targetInst, nativeEvent) {
  if (topLevelType === 'topClick') {
    return getInstIfValueChanged(targetInst, nativeEvent);
  }
}

function getTargetInstForInputOrChangeEvent(topLevelType, targetInst, nativeEvent) {
  if (topLevelType === 'topInput' || topLevelType === 'topChange') {
    return getInstIfValueChanged(targetInst, nativeEvent);
  }
}

function handleControlledInputBlur(inst, node) {
  // TODO: In IE, inst is occasionally null. Why?
  if (inst == null) {
    return;
  }

  // Fiber and ReactDOM keep wrapper state in separate places
  var state = inst._wrapperState || node._wrapperState;

  if (!state || !state.controlled || node.type !== 'number') {
    return;
  }

  // If controlled, assign the value attribute to the current value on blur
  var value = '' + node.value;
  if (node.getAttribute('value') !== value) {
    node.setAttribute('value', value);
  }
}

/**
 * This plugin creates an `onChange` event that normalizes change events
 * across form elements. This event fires at a time when it's possible to
 * change the element's value without seeing a flicker.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - select
 */
var ChangeEventPlugin = {
  eventTypes: eventTypes,

  _allowSimulatedPassThrough: true,
  _isInputEventSupported: isInputEventSupported,

  extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    var targetNode = targetInst ? ReactDOMComponentTree.getNodeFromInstance(targetInst) : window;

    var getTargetInstFunc, handleEventFunc;
    if (shouldUseChangeEvent(targetNode)) {
      if (doesChangeEventBubble) {
        getTargetInstFunc = getTargetInstForChangeEvent;
      } else {
        handleEventFunc = handleEventsForChangeEventIE8;
      }
    } else if (isTextInputElement(targetNode)) {
      if (isInputEventSupported) {
        getTargetInstFunc = getTargetInstForInputOrChangeEvent;
      } else {
        getTargetInstFunc = getTargetInstForInputEventPolyfill;
        handleEventFunc = handleEventsForInputEventPolyfill;
      }
    } else if (shouldUseClickEvent(targetNode)) {
      getTargetInstFunc = getTargetInstForClickEvent;
    }

    if (getTargetInstFunc) {
      var inst = getTargetInstFunc(topLevelType, targetInst, nativeEvent);
      if (inst) {
        var event = createAndAccumulateChangeEvent(inst, nativeEvent, nativeEventTarget);
        return event;
      }
    }

    if (handleEventFunc) {
      handleEventFunc(topLevelType, targetNode, targetInst);
    }

    // When blurring, set the value attribute for number inputs
    if (topLevelType === 'topBlur') {
      handleControlledInputBlur(targetInst, targetNode);
    }
  }
};

module.exports = ChangeEventPlugin;

/***/ }),
/* 173 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(4);

var DOMLazyTree = __webpack_require__(30);
var ExecutionEnvironment = __webpack_require__(9);

var createNodesFromMarkup = __webpack_require__(155);
var emptyFunction = __webpack_require__(17);
var invariant = __webpack_require__(2);

var Danger = {
  /**
   * Replaces a node with a string of markup at its current position within its
   * parent. The markup must render into a single root node.
   *
   * @param {DOMElement} oldChild Child node to replace.
   * @param {string} markup Markup to render in place of the child node.
   * @internal
   */
  dangerouslyReplaceNodeWithMarkup: function dangerouslyReplaceNodeWithMarkup(oldChild, markup) {
    !ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a worker thread. Make sure `window` and `document` are available globally before requiring React when unit testing or use ReactDOMServer.renderToString() for server rendering.') : _prodInvariant('56') : void 0;
    !markup ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : _prodInvariant('57') : void 0;
    !(oldChild.nodeName !== 'HTML') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the <html> node. This is because browser quirks make this unreliable and/or slow. If you want to render to the root you must use server rendering. See ReactDOMServer.renderToString().') : _prodInvariant('58') : void 0;

    if (typeof markup === 'string') {
      var newChild = createNodesFromMarkup(markup, emptyFunction)[0];
      oldChild.parentNode.replaceChild(newChild, oldChild);
    } else {
      DOMLazyTree.replaceChildWithTree(oldChild, markup);
    }
  }
};

module.exports = Danger;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 174 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



/**
 * Module that is injectable into `EventPluginHub`, that specifies a
 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
 * plugins, without having to package every one of them. This is better than
 * having plugins be ordered in the same order that they are injected because
 * that ordering would be influenced by the packaging order.
 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
 */

var DefaultEventPluginOrder = ['ResponderEventPlugin', 'SimpleEventPlugin', 'TapEventPlugin', 'EnterLeaveEventPlugin', 'ChangeEventPlugin', 'SelectEventPlugin', 'BeforeInputEventPlugin'];

module.exports = DefaultEventPluginOrder;

/***/ }),
/* 175 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var EventPropagators = __webpack_require__(37);
var ReactDOMComponentTree = __webpack_require__(7);
var SyntheticMouseEvent = __webpack_require__(45);

var eventTypes = {
  mouseEnter: {
    registrationName: 'onMouseEnter',
    dependencies: ['topMouseOut', 'topMouseOver']
  },
  mouseLeave: {
    registrationName: 'onMouseLeave',
    dependencies: ['topMouseOut', 'topMouseOver']
  }
};

var EnterLeaveEventPlugin = {
  eventTypes: eventTypes,

  /**
   * For almost every interaction we care about, there will be both a top-level
   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
   * we do not extract duplicate events. However, moving the mouse into the
   * browser from outside will not fire a `mouseout` event. In this case, we use
   * the `mouseover` top-level event.
   */
  extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    if (topLevelType === 'topMouseOver' && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
      return null;
    }
    if (topLevelType !== 'topMouseOut' && topLevelType !== 'topMouseOver') {
      // Must not be a mouse in or mouse out - ignoring.
      return null;
    }

    var win;
    if (nativeEventTarget.window === nativeEventTarget) {
      // `nativeEventTarget` is probably a window object.
      win = nativeEventTarget;
    } else {
      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
      var doc = nativeEventTarget.ownerDocument;
      if (doc) {
        win = doc.defaultView || doc.parentWindow;
      } else {
        win = window;
      }
    }

    var from;
    var to;
    if (topLevelType === 'topMouseOut') {
      from = targetInst;
      var related = nativeEvent.relatedTarget || nativeEvent.toElement;
      to = related ? ReactDOMComponentTree.getClosestInstanceFromNode(related) : null;
    } else {
      // Moving to a node from outside the window.
      from = null;
      to = targetInst;
    }

    if (from === to) {
      // Nothing pertains to our managed components.
      return null;
    }

    var fromNode = from == null ? win : ReactDOMComponentTree.getNodeFromInstance(from);
    var toNode = to == null ? win : ReactDOMComponentTree.getNodeFromInstance(to);

    var leave = SyntheticMouseEvent.getPooled(eventTypes.mouseLeave, from, nativeEvent, nativeEventTarget);
    leave.type = 'mouseleave';
    leave.target = fromNode;
    leave.relatedTarget = toNode;

    var enter = SyntheticMouseEvent.getPooled(eventTypes.mouseEnter, to, nativeEvent, nativeEventTarget);
    enter.type = 'mouseenter';
    enter.target = toNode;
    enter.relatedTarget = fromNode;

    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, from, to);

    return [leave, enter];
  }
};

module.exports = EnterLeaveEventPlugin;

/***/ }),
/* 176 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(6);

var PooledClass = __webpack_require__(28);

var getTextContentAccessor = __webpack_require__(102);

/**
 * This helper class stores information about text content of a target node,
 * allowing comparison of content before and after a given event.
 *
 * Identify the node where selection currently begins, then observe
 * both its text content and its current position in the DOM. Since the
 * browser may natively replace the target node during composition, we can
 * use its position to find its replacement.
 *
 * @param {DOMEventTarget} root
 */
function FallbackCompositionState(root) {
  this._root = root;
  this._startText = this.getText();
  this._fallbackText = null;
}

_assign(FallbackCompositionState.prototype, {
  destructor: function destructor() {
    this._root = null;
    this._startText = null;
    this._fallbackText = null;
  },

  /**
   * Get current text of input.
   *
   * @return {string}
   */
  getText: function getText() {
    if ('value' in this._root) {
      return this._root.value;
    }
    return this._root[getTextContentAccessor()];
  },

  /**
   * Determine the differing substring between the initially stored
   * text content and the current content.
   *
   * @return {string}
   */
  getData: function getData() {
    if (this._fallbackText) {
      return this._fallbackText;
    }

    var start;
    var startValue = this._startText;
    var startLength = startValue.length;
    var end;
    var endValue = this.getText();
    var endLength = endValue.length;

    for (start = 0; start < startLength; start++) {
      if (startValue[start] !== endValue[start]) {
        break;
      }
    }

    var minEnd = startLength - start;
    for (end = 1; end <= minEnd; end++) {
      if (startValue[startLength - end] !== endValue[endLength - end]) {
        break;
      }
    }

    var sliceTail = end > 1 ? 1 - end : undefined;
    this._fallbackText = endValue.slice(start, sliceTail);
    return this._fallbackText;
  }
});

PooledClass.addPoolingTo(FallbackCompositionState);

module.exports = FallbackCompositionState;

/***/ }),
/* 177 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var DOMProperty = __webpack_require__(27);

var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;
var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;
var HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;
var HAS_POSITIVE_NUMERIC_VALUE = DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;
var HAS_OVERLOADED_BOOLEAN_VALUE = DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;

var HTMLDOMPropertyConfig = {
  isCustomAttribute: RegExp.prototype.test.bind(new RegExp('^(data|aria)-[' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$')),
  Properties: {
    /**
     * Standard Properties
     */
    accept: 0,
    acceptCharset: 0,
    accessKey: 0,
    action: 0,
    allowFullScreen: HAS_BOOLEAN_VALUE,
    allowTransparency: 0,
    alt: 0,
    // specifies target context for links with `preload` type
    as: 0,
    async: HAS_BOOLEAN_VALUE,
    autoComplete: 0,
    // autoFocus is polyfilled/normalized by AutoFocusUtils
    // autoFocus: HAS_BOOLEAN_VALUE,
    autoPlay: HAS_BOOLEAN_VALUE,
    capture: HAS_BOOLEAN_VALUE,
    cellPadding: 0,
    cellSpacing: 0,
    charSet: 0,
    challenge: 0,
    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    cite: 0,
    classID: 0,
    className: 0,
    cols: HAS_POSITIVE_NUMERIC_VALUE,
    colSpan: 0,
    content: 0,
    contentEditable: 0,
    contextMenu: 0,
    controls: HAS_BOOLEAN_VALUE,
    coords: 0,
    crossOrigin: 0,
    data: 0, // For `<object />` acts as `src`.
    dateTime: 0,
    'default': HAS_BOOLEAN_VALUE,
    defer: HAS_BOOLEAN_VALUE,
    dir: 0,
    disabled: HAS_BOOLEAN_VALUE,
    download: HAS_OVERLOADED_BOOLEAN_VALUE,
    draggable: 0,
    encType: 0,
    form: 0,
    formAction: 0,
    formEncType: 0,
    formMethod: 0,
    formNoValidate: HAS_BOOLEAN_VALUE,
    formTarget: 0,
    frameBorder: 0,
    headers: 0,
    height: 0,
    hidden: HAS_BOOLEAN_VALUE,
    high: 0,
    href: 0,
    hrefLang: 0,
    htmlFor: 0,
    httpEquiv: 0,
    icon: 0,
    id: 0,
    inputMode: 0,
    integrity: 0,
    is: 0,
    keyParams: 0,
    keyType: 0,
    kind: 0,
    label: 0,
    lang: 0,
    list: 0,
    loop: HAS_BOOLEAN_VALUE,
    low: 0,
    manifest: 0,
    marginHeight: 0,
    marginWidth: 0,
    max: 0,
    maxLength: 0,
    media: 0,
    mediaGroup: 0,
    method: 0,
    min: 0,
    minLength: 0,
    // Caution; `option.selected` is not updated if `select.multiple` is
    // disabled with `removeAttribute`.
    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    name: 0,
    nonce: 0,
    noValidate: HAS_BOOLEAN_VALUE,
    open: HAS_BOOLEAN_VALUE,
    optimum: 0,
    pattern: 0,
    placeholder: 0,
    playsInline: HAS_BOOLEAN_VALUE,
    poster: 0,
    preload: 0,
    profile: 0,
    radioGroup: 0,
    readOnly: HAS_BOOLEAN_VALUE,
    referrerPolicy: 0,
    rel: 0,
    required: HAS_BOOLEAN_VALUE,
    reversed: HAS_BOOLEAN_VALUE,
    role: 0,
    rows: HAS_POSITIVE_NUMERIC_VALUE,
    rowSpan: HAS_NUMERIC_VALUE,
    sandbox: 0,
    scope: 0,
    scoped: HAS_BOOLEAN_VALUE,
    scrolling: 0,
    seamless: HAS_BOOLEAN_VALUE,
    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    shape: 0,
    size: HAS_POSITIVE_NUMERIC_VALUE,
    sizes: 0,
    span: HAS_POSITIVE_NUMERIC_VALUE,
    spellCheck: 0,
    src: 0,
    srcDoc: 0,
    srcLang: 0,
    srcSet: 0,
    start: HAS_NUMERIC_VALUE,
    step: 0,
    style: 0,
    summary: 0,
    tabIndex: 0,
    target: 0,
    title: 0,
    // Setting .type throws on non-<input> tags
    type: 0,
    useMap: 0,
    value: 0,
    width: 0,
    wmode: 0,
    wrap: 0,

    /**
     * RDFa Properties
     */
    about: 0,
    datatype: 0,
    inlist: 0,
    prefix: 0,
    // property is also supported for OpenGraph in meta tags.
    property: 0,
    resource: 0,
    'typeof': 0,
    vocab: 0,

    /**
     * Non-standard Properties
     */
    // autoCapitalize and autoCorrect are supported in Mobile Safari for
    // keyboard hints.
    autoCapitalize: 0,
    autoCorrect: 0,
    // autoSave allows WebKit/Blink to persist values of input fields on page reloads
    autoSave: 0,
    // color is for Safari mask-icon link
    color: 0,
    // itemProp, itemScope, itemType are for
    // Microdata support. See http://schema.org/docs/gs.html
    itemProp: 0,
    itemScope: HAS_BOOLEAN_VALUE,
    itemType: 0,
    // itemID and itemRef are for Microdata support as well but
    // only specified in the WHATWG spec document. See
    // https://html.spec.whatwg.org/multipage/microdata.html#microdata-dom-api
    itemID: 0,
    itemRef: 0,
    // results show looking glass icon and recent searches on input
    // search fields in WebKit/Blink
    results: 0,
    // IE-only attribute that specifies security restrictions on an iframe
    // as an alternative to the sandbox attribute on IE<10
    security: 0,
    // IE-only attribute that controls focus behavior
    unselectable: 0
  },
  DOMAttributeNames: {
    acceptCharset: 'accept-charset',
    className: 'class',
    htmlFor: 'for',
    httpEquiv: 'http-equiv'
  },
  DOMPropertyNames: {},
  DOMMutationMethods: {
    value: function value(node, _value) {
      if (_value == null) {
        return node.removeAttribute('value');
      }

      // Number inputs get special treatment due to some edge cases in
      // Chrome. Let everything else assign the value attribute as normal.
      // https://github.com/facebook/react/issues/7253#issuecomment-236074326
      if (node.type !== 'number' || node.hasAttribute('value') === false) {
        node.setAttribute('value', '' + _value);
      } else if (node.validity && !node.validity.badInput && node.ownerDocument.activeElement !== node) {
        // Don't assign an attribute if validation reports bad
        // input. Chrome will clear the value. Additionally, don't
        // operate on inputs that have focus, otherwise Chrome might
        // strip off trailing decimal places and cause the user's
        // cursor position to jump to the beginning of the input.
        //
        // In ReactDOMInput, we have an onBlur event that will trigger
        // this function again when focus is lost.
        node.setAttribute('value', '' + _value);
      }
    }
  }
};

module.exports = HTMLDOMPropertyConfig;

/***/ }),
/* 178 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ReactReconciler = __webpack_require__(31);

var instantiateReactComponent = __webpack_require__(104);
var KeyEscapeUtils = __webpack_require__(62);
var shouldUpdateReactComponent = __webpack_require__(72);
var traverseAllChildren = __webpack_require__(107);
var warning = __webpack_require__(3);

var ReactComponentTreeHook;

if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
  // Temporary hack.
  // Inline requires don't work well with Jest:
  // https://github.com/facebook/react/issues/7240
  // Remove the inline requires when we don't need them anymore:
  // https://github.com/facebook/react/pull/7178
  ReactComponentTreeHook = __webpack_require__(12);
}

function instantiateChild(childInstances, child, name, selfDebugID) {
  // We found a component instance.
  var keyUnique = childInstances[name] === undefined;
  if (process.env.NODE_ENV !== 'production') {
    if (!ReactComponentTreeHook) {
      ReactComponentTreeHook = __webpack_require__(12);
    }
    if (!keyUnique) {
      process.env.NODE_ENV !== 'production' ? warning(false, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.%s', KeyEscapeUtils.unescape(name), ReactComponentTreeHook.getStackAddendumByID(selfDebugID)) : void 0;
    }
  }
  if (child != null && keyUnique) {
    childInstances[name] = instantiateReactComponent(child, true);
  }
}

/**
 * ReactChildReconciler provides helpers for initializing or updating a set of
 * children. Its output is suitable for passing it onto ReactMultiChild which
 * does diffed reordering and insertion.
 */
var ReactChildReconciler = {
  /**
   * Generates a "mount image" for each of the supplied children. In the case
   * of `ReactDOMComponent`, a mount image is a string of markup.
   *
   * @param {?object} nestedChildNodes Nested child maps.
   * @return {?object} A set of child instances.
   * @internal
   */
  instantiateChildren: function instantiateChildren(nestedChildNodes, transaction, context, selfDebugID) // 0 in production and for roots
  {
    if (nestedChildNodes == null) {
      return null;
    }
    var childInstances = {};

    if (process.env.NODE_ENV !== 'production') {
      traverseAllChildren(nestedChildNodes, function (childInsts, child, name) {
        return instantiateChild(childInsts, child, name, selfDebugID);
      }, childInstances);
    } else {
      traverseAllChildren(nestedChildNodes, instantiateChild, childInstances);
    }
    return childInstances;
  },

  /**
   * Updates the rendered children and returns a new set of children.
   *
   * @param {?object} prevChildren Previously initialized set of children.
   * @param {?object} nextChildren Flat child element maps.
   * @param {ReactReconcileTransaction} transaction
   * @param {object} context
   * @return {?object} A new set of child instances.
   * @internal
   */
  updateChildren: function updateChildren(prevChildren, nextChildren, mountImages, removedNodes, transaction, hostParent, hostContainerInfo, context, selfDebugID) // 0 in production and for roots
  {
    // We currently don't have a way to track moves here but if we use iterators
    // instead of for..in we can zip the iterators and check if an item has
    // moved.
    // TODO: If nothing has changed, return the prevChildren object so that we
    // can quickly bailout if nothing has changed.
    if (!nextChildren && !prevChildren) {
      return;
    }
    var name;
    var prevChild;
    for (name in nextChildren) {
      if (!nextChildren.hasOwnProperty(name)) {
        continue;
      }
      prevChild = prevChildren && prevChildren[name];
      var prevElement = prevChild && prevChild._currentElement;
      var nextElement = nextChildren[name];
      if (prevChild != null && shouldUpdateReactComponent(prevElement, nextElement)) {
        ReactReconciler.receiveComponent(prevChild, nextElement, transaction, context);
        nextChildren[name] = prevChild;
      } else {
        if (prevChild) {
          removedNodes[name] = ReactReconciler.getHostNode(prevChild);
          ReactReconciler.unmountComponent(prevChild, false);
        }
        // The child must be instantiated before it's mounted.
        var nextChildInstance = instantiateReactComponent(nextElement, true);
        nextChildren[name] = nextChildInstance;
        // Creating mount image now ensures refs are resolved in right order
        // (see https://github.com/facebook/react/pull/7101 for explanation).
        var nextChildMountImage = ReactReconciler.mountComponent(nextChildInstance, transaction, hostParent, hostContainerInfo, context, selfDebugID);
        mountImages.push(nextChildMountImage);
      }
    }
    // Unmount children that are no longer present.
    for (name in prevChildren) {
      if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {
        prevChild = prevChildren[name];
        removedNodes[name] = ReactReconciler.getHostNode(prevChild);
        ReactReconciler.unmountComponent(prevChild, false);
      }
    }
  },

  /**
   * Unmounts all rendered children. This should be used to clean up children
   * when this component is unmounted.
   *
   * @param {?object} renderedChildren Previously initialized set of children.
   * @internal
   */
  unmountChildren: function unmountChildren(renderedChildren, safely) {
    for (var name in renderedChildren) {
      if (renderedChildren.hasOwnProperty(name)) {
        var renderedChild = renderedChildren[name];
        ReactReconciler.unmountComponent(renderedChild, safely);
      }
    }
  }
};

module.exports = ReactChildReconciler;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 179 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var DOMChildrenOperations = __webpack_require__(59);
var ReactDOMIDOperations = __webpack_require__(186);

/**
 * Abstracts away all functionality of the reconciler that requires knowledge of
 * the browser context. TODO: These callers should be refactored to avoid the
 * need for this injection.
 */
var ReactComponentBrowserEnvironment = {
  processChildrenUpdates: ReactDOMIDOperations.dangerouslyProcessChildrenUpdates,

  replaceNodeWithMarkup: DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup
};

module.exports = ReactComponentBrowserEnvironment;

/***/ }),
/* 180 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _prodInvariant = __webpack_require__(4),
    _assign = __webpack_require__(6);

var React = __webpack_require__(32);
var ReactComponentEnvironment = __webpack_require__(64);
var ReactCurrentOwner = __webpack_require__(20);
var ReactErrorUtils = __webpack_require__(65);
var ReactInstanceMap = __webpack_require__(38);
var ReactInstrumentation = __webpack_require__(15);
var ReactNodeTypes = __webpack_require__(96);
var ReactReconciler = __webpack_require__(31);

if (process.env.NODE_ENV !== 'production') {
  var checkReactTypeSpec = __webpack_require__(228);
}

var emptyObject = __webpack_require__(42);
var invariant = __webpack_require__(2);
var shallowEqual = __webpack_require__(58);
var shouldUpdateReactComponent = __webpack_require__(72);
var warning = __webpack_require__(3);

var CompositeTypes = {
  ImpureClass: 0,
  PureClass: 1,
  StatelessFunctional: 2
};

function StatelessComponent(Component) {}
StatelessComponent.prototype.render = function () {
  var Component = ReactInstanceMap.get(this)._currentElement.type;
  var element = Component(this.props, this.context, this.updater);
  warnIfInvalidElement(Component, element);
  return element;
};

function warnIfInvalidElement(Component, element) {
  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(element === null || element === false || React.isValidElement(element), '%s(...): A valid React element (or null) must be returned. You may have ' + 'returned undefined, an array or some other invalid object.', Component.displayName || Component.name || 'Component') : void 0;
    process.env.NODE_ENV !== 'production' ? warning(!Component.childContextTypes, '%s(...): childContextTypes cannot be defined on a functional component.', Component.displayName || Component.name || 'Component') : void 0;
  }
}

function shouldConstruct(Component) {
  return !!(Component.prototype && Component.prototype.isReactComponent);
}

function isPureComponent(Component) {
  return !!(Component.prototype && Component.prototype.isPureReactComponent);
}

// Separated into a function to contain deoptimizations caused by try/finally.
function measureLifeCyclePerf(fn, debugID, timerType) {
  if (debugID === 0) {
    // Top-level wrappers (see ReactMount) and empty components (see
    // ReactDOMEmptyComponent) are invisible to hooks and devtools.
    // Both are implementation details that should go away in the future.
    return fn();
  }

  ReactInstrumentation.debugTool.onBeginLifeCycleTimer(debugID, timerType);
  try {
    return fn();
  } finally {
    ReactInstrumentation.debugTool.onEndLifeCycleTimer(debugID, timerType);
  }
}

/**
 * ------------------ The Life-Cycle of a Composite Component ------------------
 *
 * - constructor: Initialization of state. The instance is now retained.
 *   - componentWillMount
 *   - render
 *   - [children's constructors]
 *     - [children's componentWillMount and render]
 *     - [children's componentDidMount]
 *     - componentDidMount
 *
 *       Update Phases:
 *       - componentWillReceiveProps (only called if parent updated)
 *       - shouldComponentUpdate
 *         - componentWillUpdate
 *           - render
 *           - [children's constructors or receive props phases]
 *         - componentDidUpdate
 *
 *     - componentWillUnmount
 *     - [children's componentWillUnmount]
 *   - [children destroyed]
 * - (destroyed): The instance is now blank, released by React and ready for GC.
 *
 * -----------------------------------------------------------------------------
 */

/**
 * An incrementing ID assigned to each component when it is mounted. This is
 * used to enforce the order in which `ReactUpdates` updates dirty components.
 *
 * @private
 */
var nextMountID = 1;

/**
 * @lends {ReactCompositeComponent.prototype}
 */
var ReactCompositeComponent = {
  /**
   * Base constructor for all composite component.
   *
   * @param {ReactElement} element
   * @final
   * @internal
   */
  construct: function construct(element) {
    this._currentElement = element;
    this._rootNodeID = 0;
    this._compositeType = null;
    this._instance = null;
    this._hostParent = null;
    this._hostContainerInfo = null;

    // See ReactUpdateQueue
    this._updateBatchNumber = null;
    this._pendingElement = null;
    this._pendingStateQueue = null;
    this._pendingReplaceState = false;
    this._pendingForceUpdate = false;

    this._renderedNodeType = null;
    this._renderedComponent = null;
    this._context = null;
    this._mountOrder = 0;
    this._topLevelWrapper = null;

    // See ReactUpdates and ReactUpdateQueue.
    this._pendingCallbacks = null;

    // ComponentWillUnmount shall only be called once
    this._calledComponentWillUnmount = false;

    if (process.env.NODE_ENV !== 'production') {
      this._warnedAboutRefsInRender = false;
    }
  },

  /**
   * Initializes the component, renders markup, and registers event listeners.
   *
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {?object} hostParent
   * @param {?object} hostContainerInfo
   * @param {?object} context
   * @return {?string} Rendered markup to be inserted into the DOM.
   * @final
   * @internal
   */
  mountComponent: function mountComponent(transaction, hostParent, hostContainerInfo, context) {
    var _this = this;

    this._context = context;
    this._mountOrder = nextMountID++;
    this._hostParent = hostParent;
    this._hostContainerInfo = hostContainerInfo;

    var publicProps = this._currentElement.props;
    var publicContext = this._processContext(context);

    var Component = this._currentElement.type;

    var updateQueue = transaction.getUpdateQueue();

    // Initialize the public class
    var doConstruct = shouldConstruct(Component);
    var inst = this._constructComponent(doConstruct, publicProps, publicContext, updateQueue);
    var renderedElement;

    // Support functional components
    if (!doConstruct && (inst == null || inst.render == null)) {
      renderedElement = inst;
      warnIfInvalidElement(Component, renderedElement);
      !(inst === null || inst === false || React.isValidElement(inst)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s(...): A valid React element (or null) must be returned. You may have returned undefined, an array or some other invalid object.', Component.displayName || Component.name || 'Component') : _prodInvariant('105', Component.displayName || Component.name || 'Component') : void 0;
      inst = new StatelessComponent(Component);
      this._compositeType = CompositeTypes.StatelessFunctional;
    } else {
      if (isPureComponent(Component)) {
        this._compositeType = CompositeTypes.PureClass;
      } else {
        this._compositeType = CompositeTypes.ImpureClass;
      }
    }

    if (process.env.NODE_ENV !== 'production') {
      // This will throw later in _renderValidatedComponent, but add an early
      // warning now to help debugging
      if (inst.render == null) {
        process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', Component.displayName || Component.name || 'Component') : void 0;
      }

      var propsMutated = inst.props !== publicProps;
      var componentName = Component.displayName || Component.name || 'Component';

      process.env.NODE_ENV !== 'production' ? warning(inst.props === undefined || !propsMutated, '%s(...): When calling super() in `%s`, make sure to pass ' + "up the same props that your component's constructor was passed.", componentName, componentName) : void 0;
    }

    // These should be set up in the constructor, but as a convenience for
    // simpler class abstractions, we set them up after the fact.
    inst.props = publicProps;
    inst.context = publicContext;
    inst.refs = emptyObject;
    inst.updater = updateQueue;

    this._instance = inst;

    // Store a reference from the instance back to the internal representation
    ReactInstanceMap.set(inst, this);

    if (process.env.NODE_ENV !== 'production') {
      // Since plain JS classes are defined without any special initialization
      // logic, we can not catch common errors early. Therefore, we have to
      // catch them here, at initialization time, instead.
      process.env.NODE_ENV !== 'production' ? warning(!inst.getInitialState || inst.getInitialState.isReactClassApproved || inst.state, 'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', this.getName() || 'a component') : void 0;
      process.env.NODE_ENV !== 'production' ? warning(!inst.getDefaultProps || inst.getDefaultProps.isReactClassApproved, 'getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', this.getName() || 'a component') : void 0;
      process.env.NODE_ENV !== 'production' ? warning(!inst.propTypes, 'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', this.getName() || 'a component') : void 0;
      process.env.NODE_ENV !== 'production' ? warning(!inst.contextTypes, 'contextTypes was defined as an instance property on %s. Use a ' + 'static property to define contextTypes instead.', this.getName() || 'a component') : void 0;
      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentShouldUpdate !== 'function', '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', this.getName() || 'A component') : void 0;
      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentDidUnmount !== 'function', '%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', this.getName() || 'A component') : void 0;
      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentWillRecieveProps !== 'function', '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', this.getName() || 'A component') : void 0;
    }

    var initialState = inst.state;
    if (initialState === undefined) {
      inst.state = initialState = null;
    }
    !((typeof initialState === 'undefined' ? 'undefined' : _typeof(initialState)) === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.state: must be set to an object or null', this.getName() || 'ReactCompositeComponent') : _prodInvariant('106', this.getName() || 'ReactCompositeComponent') : void 0;

    this._pendingStateQueue = null;
    this._pendingReplaceState = false;
    this._pendingForceUpdate = false;

    var markup;
    if (inst.unstable_handleError) {
      markup = this.performInitialMountWithErrorHandling(renderedElement, hostParent, hostContainerInfo, transaction, context);
    } else {
      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
    }

    if (inst.componentDidMount) {
      if (process.env.NODE_ENV !== 'production') {
        transaction.getReactMountReady().enqueue(function () {
          measureLifeCyclePerf(function () {
            return inst.componentDidMount();
          }, _this._debugID, 'componentDidMount');
        });
      } else {
        transaction.getReactMountReady().enqueue(inst.componentDidMount, inst);
      }
    }

    return markup;
  },

  _constructComponent: function _constructComponent(doConstruct, publicProps, publicContext, updateQueue) {
    if (process.env.NODE_ENV !== 'production') {
      ReactCurrentOwner.current = this;
      try {
        return this._constructComponentWithoutOwner(doConstruct, publicProps, publicContext, updateQueue);
      } finally {
        ReactCurrentOwner.current = null;
      }
    } else {
      return this._constructComponentWithoutOwner(doConstruct, publicProps, publicContext, updateQueue);
    }
  },

  _constructComponentWithoutOwner: function _constructComponentWithoutOwner(doConstruct, publicProps, publicContext, updateQueue) {
    var Component = this._currentElement.type;

    if (doConstruct) {
      if (process.env.NODE_ENV !== 'production') {
        return measureLifeCyclePerf(function () {
          return new Component(publicProps, publicContext, updateQueue);
        }, this._debugID, 'ctor');
      } else {
        return new Component(publicProps, publicContext, updateQueue);
      }
    }

    // This can still be an instance in case of factory components
    // but we'll count this as time spent rendering as the more common case.
    if (process.env.NODE_ENV !== 'production') {
      return measureLifeCyclePerf(function () {
        return Component(publicProps, publicContext, updateQueue);
      }, this._debugID, 'render');
    } else {
      return Component(publicProps, publicContext, updateQueue);
    }
  },

  performInitialMountWithErrorHandling: function performInitialMountWithErrorHandling(renderedElement, hostParent, hostContainerInfo, transaction, context) {
    var markup;
    var checkpoint = transaction.checkpoint();
    try {
      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
    } catch (e) {
      // Roll back to checkpoint, handle error (which may add items to the transaction), and take a new checkpoint
      transaction.rollback(checkpoint);
      this._instance.unstable_handleError(e);
      if (this._pendingStateQueue) {
        this._instance.state = this._processPendingState(this._instance.props, this._instance.context);
      }
      checkpoint = transaction.checkpoint();

      this._renderedComponent.unmountComponent(true);
      transaction.rollback(checkpoint);

      // Try again - we've informed the component about the error, so they can render an error message this time.
      // If this throws again, the error will bubble up (and can be caught by a higher error boundary).
      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
    }
    return markup;
  },

  performInitialMount: function performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context) {
    var inst = this._instance;

    var debugID = 0;
    if (process.env.NODE_ENV !== 'production') {
      debugID = this._debugID;
    }

    if (inst.componentWillMount) {
      if (process.env.NODE_ENV !== 'production') {
        measureLifeCyclePerf(function () {
          return inst.componentWillMount();
        }, debugID, 'componentWillMount');
      } else {
        inst.componentWillMount();
      }
      // When mounting, calls to `setState` by `componentWillMount` will set
      // `this._pendingStateQueue` without triggering a re-render.
      if (this._pendingStateQueue) {
        inst.state = this._processPendingState(inst.props, inst.context);
      }
    }

    // If not a stateless component, we now render
    if (renderedElement === undefined) {
      renderedElement = this._renderValidatedComponent();
    }

    var nodeType = ReactNodeTypes.getType(renderedElement);
    this._renderedNodeType = nodeType;
    var child = this._instantiateReactComponent(renderedElement, nodeType !== ReactNodeTypes.EMPTY /* shouldHaveDebugID */
    );
    this._renderedComponent = child;

    var markup = ReactReconciler.mountComponent(child, transaction, hostParent, hostContainerInfo, this._processChildContext(context), debugID);

    if (process.env.NODE_ENV !== 'production') {
      if (debugID !== 0) {
        var childDebugIDs = child._debugID !== 0 ? [child._debugID] : [];
        ReactInstrumentation.debugTool.onSetChildren(debugID, childDebugIDs);
      }
    }

    return markup;
  },

  getHostNode: function getHostNode() {
    return ReactReconciler.getHostNode(this._renderedComponent);
  },

  /**
   * Releases any resources allocated by `mountComponent`.
   *
   * @final
   * @internal
   */
  unmountComponent: function unmountComponent(safely) {
    if (!this._renderedComponent) {
      return;
    }

    var inst = this._instance;

    if (inst.componentWillUnmount && !inst._calledComponentWillUnmount) {
      inst._calledComponentWillUnmount = true;

      if (safely) {
        var name = this.getName() + '.componentWillUnmount()';
        ReactErrorUtils.invokeGuardedCallback(name, inst.componentWillUnmount.bind(inst));
      } else {
        if (process.env.NODE_ENV !== 'production') {
          measureLifeCyclePerf(function () {
            return inst.componentWillUnmount();
          }, this._debugID, 'componentWillUnmount');
        } else {
          inst.componentWillUnmount();
        }
      }
    }

    if (this._renderedComponent) {
      ReactReconciler.unmountComponent(this._renderedComponent, safely);
      this._renderedNodeType = null;
      this._renderedComponent = null;
      this._instance = null;
    }

    // Reset pending fields
    // Even if this component is scheduled for another update in ReactUpdates,
    // it would still be ignored because these fields are reset.
    this._pendingStateQueue = null;
    this._pendingReplaceState = false;
    this._pendingForceUpdate = false;
    this._pendingCallbacks = null;
    this._pendingElement = null;

    // These fields do not really need to be reset since this object is no
    // longer accessible.
    this._context = null;
    this._rootNodeID = 0;
    this._topLevelWrapper = null;

    // Delete the reference from the instance to this internal representation
    // which allow the internals to be properly cleaned up even if the user
    // leaks a reference to the public instance.
    ReactInstanceMap.remove(inst);

    // Some existing components rely on inst.props even after they've been
    // destroyed (in event handlers).
    // TODO: inst.props = null;
    // TODO: inst.state = null;
    // TODO: inst.context = null;
  },

  /**
   * Filters the context object to only contain keys specified in
   * `contextTypes`
   *
   * @param {object} context
   * @return {?object}
   * @private
   */
  _maskContext: function _maskContext(context) {
    var Component = this._currentElement.type;
    var contextTypes = Component.contextTypes;
    if (!contextTypes) {
      return emptyObject;
    }
    var maskedContext = {};
    for (var contextName in contextTypes) {
      maskedContext[contextName] = context[contextName];
    }
    return maskedContext;
  },

  /**
   * Filters the context object to only contain keys specified in
   * `contextTypes`, and asserts that they are valid.
   *
   * @param {object} context
   * @return {?object}
   * @private
   */
  _processContext: function _processContext(context) {
    var maskedContext = this._maskContext(context);
    if (process.env.NODE_ENV !== 'production') {
      var Component = this._currentElement.type;
      if (Component.contextTypes) {
        this._checkContextTypes(Component.contextTypes, maskedContext, 'context');
      }
    }
    return maskedContext;
  },

  /**
   * @param {object} currentContext
   * @return {object}
   * @private
   */
  _processChildContext: function _processChildContext(currentContext) {
    var Component = this._currentElement.type;
    var inst = this._instance;
    var childContext;

    if (inst.getChildContext) {
      if (process.env.NODE_ENV !== 'production') {
        ReactInstrumentation.debugTool.onBeginProcessingChildContext();
        try {
          childContext = inst.getChildContext();
        } finally {
          ReactInstrumentation.debugTool.onEndProcessingChildContext();
        }
      } else {
        childContext = inst.getChildContext();
      }
    }

    if (childContext) {
      !(_typeof(Component.childContextTypes) === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().', this.getName() || 'ReactCompositeComponent') : _prodInvariant('107', this.getName() || 'ReactCompositeComponent') : void 0;
      if (process.env.NODE_ENV !== 'production') {
        this._checkContextTypes(Component.childContextTypes, childContext, 'child context');
      }
      for (var name in childContext) {
        !(name in Component.childContextTypes) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', this.getName() || 'ReactCompositeComponent', name) : _prodInvariant('108', this.getName() || 'ReactCompositeComponent', name) : void 0;
      }
      return _assign({}, currentContext, childContext);
    }
    return currentContext;
  },

  /**
   * Assert that the context types are valid
   *
   * @param {object} typeSpecs Map of context field to a ReactPropType
   * @param {object} values Runtime values that need to be type-checked
   * @param {string} location e.g. "prop", "context", "child context"
   * @private
   */
  _checkContextTypes: function _checkContextTypes(typeSpecs, values, location) {
    if (process.env.NODE_ENV !== 'production') {
      checkReactTypeSpec(typeSpecs, values, location, this.getName(), null, this._debugID);
    }
  },

  receiveComponent: function receiveComponent(nextElement, transaction, nextContext) {
    var prevElement = this._currentElement;
    var prevContext = this._context;

    this._pendingElement = null;

    this.updateComponent(transaction, prevElement, nextElement, prevContext, nextContext);
  },

  /**
   * If any of `_pendingElement`, `_pendingStateQueue`, or `_pendingForceUpdate`
   * is set, update the component.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  performUpdateIfNecessary: function performUpdateIfNecessary(transaction) {
    if (this._pendingElement != null) {
      ReactReconciler.receiveComponent(this, this._pendingElement, transaction, this._context);
    } else if (this._pendingStateQueue !== null || this._pendingForceUpdate) {
      this.updateComponent(transaction, this._currentElement, this._currentElement, this._context, this._context);
    } else {
      this._updateBatchNumber = null;
    }
  },

  /**
   * Perform an update to a mounted component. The componentWillReceiveProps and
   * shouldComponentUpdate methods are called, then (assuming the update isn't
   * skipped) the remaining update lifecycle methods are called and the DOM
   * representation is updated.
   *
   * By default, this implements React's rendering and reconciliation algorithm.
   * Sophisticated clients may wish to override this.
   *
   * @param {ReactReconcileTransaction} transaction
   * @param {ReactElement} prevParentElement
   * @param {ReactElement} nextParentElement
   * @internal
   * @overridable
   */
  updateComponent: function updateComponent(transaction, prevParentElement, nextParentElement, prevUnmaskedContext, nextUnmaskedContext) {
    var inst = this._instance;
    !(inst != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Attempted to update component `%s` that has already been unmounted (or failed to mount).', this.getName() || 'ReactCompositeComponent') : _prodInvariant('136', this.getName() || 'ReactCompositeComponent') : void 0;

    var willReceive = false;
    var nextContext;

    // Determine if the context has changed or not
    if (this._context === nextUnmaskedContext) {
      nextContext = inst.context;
    } else {
      nextContext = this._processContext(nextUnmaskedContext);
      willReceive = true;
    }

    var prevProps = prevParentElement.props;
    var nextProps = nextParentElement.props;

    // Not a simple state update but a props update
    if (prevParentElement !== nextParentElement) {
      willReceive = true;
    }

    // An update here will schedule an update but immediately set
    // _pendingStateQueue which will ensure that any state updates gets
    // immediately reconciled instead of waiting for the next batch.
    if (willReceive && inst.componentWillReceiveProps) {
      if (process.env.NODE_ENV !== 'production') {
        measureLifeCyclePerf(function () {
          return inst.componentWillReceiveProps(nextProps, nextContext);
        }, this._debugID, 'componentWillReceiveProps');
      } else {
        inst.componentWillReceiveProps(nextProps, nextContext);
      }
    }

    var nextState = this._processPendingState(nextProps, nextContext);
    var shouldUpdate = true;

    if (!this._pendingForceUpdate) {
      if (inst.shouldComponentUpdate) {
        if (process.env.NODE_ENV !== 'production') {
          shouldUpdate = measureLifeCyclePerf(function () {
            return inst.shouldComponentUpdate(nextProps, nextState, nextContext);
          }, this._debugID, 'shouldComponentUpdate');
        } else {
          shouldUpdate = inst.shouldComponentUpdate(nextProps, nextState, nextContext);
        }
      } else {
        if (this._compositeType === CompositeTypes.PureClass) {
          shouldUpdate = !shallowEqual(prevProps, nextProps) || !shallowEqual(inst.state, nextState);
        }
      }
    }

    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(shouldUpdate !== undefined, '%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', this.getName() || 'ReactCompositeComponent') : void 0;
    }

    this._updateBatchNumber = null;
    if (shouldUpdate) {
      this._pendingForceUpdate = false;
      // Will set `this.props`, `this.state` and `this.context`.
      this._performComponentUpdate(nextParentElement, nextProps, nextState, nextContext, transaction, nextUnmaskedContext);
    } else {
      // If it's determined that a component should not update, we still want
      // to set props and state but we shortcut the rest of the update.
      this._currentElement = nextParentElement;
      this._context = nextUnmaskedContext;
      inst.props = nextProps;
      inst.state = nextState;
      inst.context = nextContext;
    }
  },

  _processPendingState: function _processPendingState(props, context) {
    var inst = this._instance;
    var queue = this._pendingStateQueue;
    var replace = this._pendingReplaceState;
    this._pendingReplaceState = false;
    this._pendingStateQueue = null;

    if (!queue) {
      return inst.state;
    }

    if (replace && queue.length === 1) {
      return queue[0];
    }

    var nextState = _assign({}, replace ? queue[0] : inst.state);
    for (var i = replace ? 1 : 0; i < queue.length; i++) {
      var partial = queue[i];
      _assign(nextState, typeof partial === 'function' ? partial.call(inst, nextState, props, context) : partial);
    }

    return nextState;
  },

  /**
   * Merges new props and state, notifies delegate methods of update and
   * performs update.
   *
   * @param {ReactElement} nextElement Next element
   * @param {object} nextProps Next public object to set as properties.
   * @param {?object} nextState Next object to set as state.
   * @param {?object} nextContext Next public object to set as context.
   * @param {ReactReconcileTransaction} transaction
   * @param {?object} unmaskedContext
   * @private
   */
  _performComponentUpdate: function _performComponentUpdate(nextElement, nextProps, nextState, nextContext, transaction, unmaskedContext) {
    var _this2 = this;

    var inst = this._instance;

    var hasComponentDidUpdate = Boolean(inst.componentDidUpdate);
    var prevProps;
    var prevState;
    var prevContext;
    if (hasComponentDidUpdate) {
      prevProps = inst.props;
      prevState = inst.state;
      prevContext = inst.context;
    }

    if (inst.componentWillUpdate) {
      if (process.env.NODE_ENV !== 'production') {
        measureLifeCyclePerf(function () {
          return inst.componentWillUpdate(nextProps, nextState, nextContext);
        }, this._debugID, 'componentWillUpdate');
      } else {
        inst.componentWillUpdate(nextProps, nextState, nextContext);
      }
    }

    this._currentElement = nextElement;
    this._context = unmaskedContext;
    inst.props = nextProps;
    inst.state = nextState;
    inst.context = nextContext;

    this._updateRenderedComponent(transaction, unmaskedContext);

    if (hasComponentDidUpdate) {
      if (process.env.NODE_ENV !== 'production') {
        transaction.getReactMountReady().enqueue(function () {
          measureLifeCyclePerf(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), _this2._debugID, 'componentDidUpdate');
        });
      } else {
        transaction.getReactMountReady().enqueue(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), inst);
      }
    }
  },

  /**
   * Call the component's `render` method and update the DOM accordingly.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  _updateRenderedComponent: function _updateRenderedComponent(transaction, context) {
    var prevComponentInstance = this._renderedComponent;
    var prevRenderedElement = prevComponentInstance._currentElement;
    var nextRenderedElement = this._renderValidatedComponent();

    var debugID = 0;
    if (process.env.NODE_ENV !== 'production') {
      debugID = this._debugID;
    }

    if (shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) {
      ReactReconciler.receiveComponent(prevComponentInstance, nextRenderedElement, transaction, this._processChildContext(context));
    } else {
      var oldHostNode = ReactReconciler.getHostNode(prevComponentInstance);
      ReactReconciler.unmountComponent(prevComponentInstance, false);

      var nodeType = ReactNodeTypes.getType(nextRenderedElement);
      this._renderedNodeType = nodeType;
      var child = this._instantiateReactComponent(nextRenderedElement, nodeType !== ReactNodeTypes.EMPTY /* shouldHaveDebugID */
      );
      this._renderedComponent = child;

      var nextMarkup = ReactReconciler.mountComponent(child, transaction, this._hostParent, this._hostContainerInfo, this._processChildContext(context), debugID);

      if (process.env.NODE_ENV !== 'production') {
        if (debugID !== 0) {
          var childDebugIDs = child._debugID !== 0 ? [child._debugID] : [];
          ReactInstrumentation.debugTool.onSetChildren(debugID, childDebugIDs);
        }
      }

      this._replaceNodeWithMarkup(oldHostNode, nextMarkup, prevComponentInstance);
    }
  },

  /**
   * Overridden in shallow rendering.
   *
   * @protected
   */
  _replaceNodeWithMarkup: function _replaceNodeWithMarkup(oldHostNode, nextMarkup, prevInstance) {
    ReactComponentEnvironment.replaceNodeWithMarkup(oldHostNode, nextMarkup, prevInstance);
  },

  /**
   * @protected
   */
  _renderValidatedComponentWithoutOwnerOrContext: function _renderValidatedComponentWithoutOwnerOrContext() {
    var inst = this._instance;
    var renderedElement;

    if (process.env.NODE_ENV !== 'production') {
      renderedElement = measureLifeCyclePerf(function () {
        return inst.render();
      }, this._debugID, 'render');
    } else {
      renderedElement = inst.render();
    }

    if (process.env.NODE_ENV !== 'production') {
      // We allow auto-mocks to proceed as if they're returning null.
      if (renderedElement === undefined && inst.render._isMockFunction) {
        // This is probably bad practice. Consider warning here and
        // deprecating this convenience.
        renderedElement = null;
      }
    }

    return renderedElement;
  },

  /**
   * @private
   */
  _renderValidatedComponent: function _renderValidatedComponent() {
    var renderedElement;
    if (process.env.NODE_ENV !== 'production' || this._compositeType !== CompositeTypes.StatelessFunctional) {
      ReactCurrentOwner.current = this;
      try {
        renderedElement = this._renderValidatedComponentWithoutOwnerOrContext();
      } finally {
        ReactCurrentOwner.current = null;
      }
    } else {
      renderedElement = this._renderValidatedComponentWithoutOwnerOrContext();
    }
    !(
    // TODO: An `isValidNode` function would probably be more appropriate
    renderedElement === null || renderedElement === false || React.isValidElement(renderedElement)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.render(): A valid React element (or null) must be returned. You may have returned undefined, an array or some other invalid object.', this.getName() || 'ReactCompositeComponent') : _prodInvariant('109', this.getName() || 'ReactCompositeComponent') : void 0;

    return renderedElement;
  },

  /**
   * Lazily allocates the refs object and stores `component` as `ref`.
   *
   * @param {string} ref Reference name.
   * @param {component} component Component to store as `ref`.
   * @final
   * @private
   */
  attachRef: function attachRef(ref, component) {
    var inst = this.getPublicInstance();
    !(inst != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Stateless function components cannot have refs.') : _prodInvariant('110') : void 0;
    var publicComponentInstance = component.getPublicInstance();
    if (process.env.NODE_ENV !== 'production') {
      var componentName = component && component.getName ? component.getName() : 'a component';
      process.env.NODE_ENV !== 'production' ? warning(publicComponentInstance != null || component._compositeType !== CompositeTypes.StatelessFunctional, 'Stateless function components cannot be given refs ' + '(See ref "%s" in %s created by %s). ' + 'Attempts to access this ref will fail.', ref, componentName, this.getName()) : void 0;
    }
    var refs = inst.refs === emptyObject ? inst.refs = {} : inst.refs;
    refs[ref] = publicComponentInstance;
  },

  /**
   * Detaches a reference name.
   *
   * @param {string} ref Name to dereference.
   * @final
   * @private
   */
  detachRef: function detachRef(ref) {
    var refs = this.getPublicInstance().refs;
    delete refs[ref];
  },

  /**
   * Get a text description of the component that can be used to identify it
   * in error messages.
   * @return {string} The name or null.
   * @internal
   */
  getName: function getName() {
    var type = this._currentElement.type;
    var constructor = this._instance && this._instance.constructor;
    return type.displayName || constructor && constructor.displayName || type.name || constructor && constructor.name || null;
  },

  /**
   * Get the publicly accessible representation of this component - i.e. what
   * is exposed by refs and returned by render. Can be null for stateless
   * components.
   *
   * @return {ReactComponent} the public component instance.
   * @internal
   */
  getPublicInstance: function getPublicInstance() {
    var inst = this._instance;
    if (this._compositeType === CompositeTypes.StatelessFunctional) {
      return null;
    }
    return inst;
  },

  // Stub
  _instantiateReactComponent: null
};

module.exports = ReactCompositeComponent;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 181 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

/* globals __REACT_DEVTOOLS_GLOBAL_HOOK__*/



var ReactDOMComponentTree = __webpack_require__(7);
var ReactDefaultInjection = __webpack_require__(198);
var ReactMount = __webpack_require__(95);
var ReactReconciler = __webpack_require__(31);
var ReactUpdates = __webpack_require__(19);
var ReactVersion = __webpack_require__(213);

var findDOMNode = __webpack_require__(230);
var getHostComponentFromComposite = __webpack_require__(101);
var renderSubtreeIntoContainer = __webpack_require__(237);
var warning = __webpack_require__(3);

ReactDefaultInjection.inject();

var ReactDOM = {
  findDOMNode: findDOMNode,
  render: ReactMount.render,
  unmountComponentAtNode: ReactMount.unmountComponentAtNode,
  version: ReactVersion,

  /* eslint-disable camelcase */
  unstable_batchedUpdates: ReactUpdates.batchedUpdates,
  unstable_renderSubtreeIntoContainer: renderSubtreeIntoContainer
  /* eslint-enable camelcase */
};

// Inject the runtime into a devtools global hook regardless of browser.
// Allows for debugging when the hook is injected on the page.
if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {
  __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
    ComponentTree: {
      getClosestInstanceFromNode: ReactDOMComponentTree.getClosestInstanceFromNode,
      getNodeFromInstance: function getNodeFromInstance(inst) {
        // inst is an internal instance (but could be a composite)
        if (inst._renderedComponent) {
          inst = getHostComponentFromComposite(inst);
        }
        if (inst) {
          return ReactDOMComponentTree.getNodeFromInstance(inst);
        } else {
          return null;
        }
      }
    },
    Mount: ReactMount,
    Reconciler: ReactReconciler
  });
}

if (process.env.NODE_ENV !== 'production') {
  var ExecutionEnvironment = __webpack_require__(9);
  if (ExecutionEnvironment.canUseDOM && window.top === window.self) {
    // First check if devtools is not installed
    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
      // If we're in Chrome or Firefox, provide a download link if not installed.
      if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
        // Firefox does not have the issue with devtools loaded over file://
        var showFileUrlMessage = window.location.protocol.indexOf('http') === -1 && navigator.userAgent.indexOf('Firefox') === -1;
        console.debug('Download the React DevTools ' + (showFileUrlMessage ? 'and use an HTTP server (instead of a file: URL) ' : '') + 'for a better development experience: ' + 'https://fb.me/react-devtools');
      }
    }

    var testFunc = function testFn() {};
    process.env.NODE_ENV !== 'production' ? warning((testFunc.name || testFunc.toString()).indexOf('testFn') !== -1, "It looks like you're using a minified copy of the development build " + 'of React. When deploying React apps to production, make sure to use ' + 'the production build which skips development warnings and is faster. ' + 'See https://fb.me/react-minification for more details.') : void 0;

    // If we're in IE8, check to see if we are in compatibility mode and provide
    // information on preventing compatibility mode
    var ieCompatibilityMode = document.documentMode && document.documentMode < 8;

    process.env.NODE_ENV !== 'production' ? warning(!ieCompatibilityMode, 'Internet Explorer is running in compatibility mode; please add the ' + 'following tag to your HTML to prevent this from happening: ' + '<meta http-equiv="X-UA-Compatible" content="IE=edge" />') : void 0;

    var expectedFeatures = [
    // shims
    Array.isArray, Array.prototype.every, Array.prototype.forEach, Array.prototype.indexOf, Array.prototype.map, Date.now, Function.prototype.bind, Object.keys, String.prototype.trim];

    for (var i = 0; i < expectedFeatures.length; i++) {
      if (!expectedFeatures[i]) {
        process.env.NODE_ENV !== 'production' ? warning(false, 'One or more ES5 shims expected by React are not available: ' + 'https://fb.me/react-warning-polyfills') : void 0;
        break;
      }
    }
  }
}

if (process.env.NODE_ENV !== 'production') {
  var ReactInstrumentation = __webpack_require__(15);
  var ReactDOMUnknownPropertyHook = __webpack_require__(195);
  var ReactDOMNullInputValuePropHook = __webpack_require__(189);
  var ReactDOMInvalidARIAHook = __webpack_require__(188);

  ReactInstrumentation.debugTool.addHook(ReactDOMUnknownPropertyHook);
  ReactInstrumentation.debugTool.addHook(ReactDOMNullInputValuePropHook);
  ReactInstrumentation.debugTool.addHook(ReactDOMInvalidARIAHook);
}

module.exports = ReactDOM;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 182 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

/* global hasOwnProperty:true */



var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _prodInvariant = __webpack_require__(4),
    _assign = __webpack_require__(6);

var AutoFocusUtils = __webpack_require__(169);
var CSSPropertyOperations = __webpack_require__(171);
var DOMLazyTree = __webpack_require__(30);
var DOMNamespaces = __webpack_require__(60);
var DOMProperty = __webpack_require__(27);
var DOMPropertyOperations = __webpack_require__(88);
var EventPluginHub = __webpack_require__(36);
var EventPluginRegistry = __webpack_require__(43);
var ReactBrowserEventEmitter = __webpack_require__(44);
var ReactDOMComponentFlags = __webpack_require__(89);
var ReactDOMComponentTree = __webpack_require__(7);
var ReactDOMInput = __webpack_require__(187);
var ReactDOMOption = __webpack_require__(190);
var ReactDOMSelect = __webpack_require__(90);
var ReactDOMTextarea = __webpack_require__(193);
var ReactInstrumentation = __webpack_require__(15);
var ReactMultiChild = __webpack_require__(206);
var ReactServerRenderingTransaction = __webpack_require__(211);

var emptyFunction = __webpack_require__(17);
var escapeTextContentForBrowser = __webpack_require__(47);
var invariant = __webpack_require__(2);
var isEventSupported = __webpack_require__(71);
var shallowEqual = __webpack_require__(58);
var inputValueTracking = __webpack_require__(103);
var validateDOMNesting = __webpack_require__(73);
var warning = __webpack_require__(3);

var Flags = ReactDOMComponentFlags;
var deleteListener = EventPluginHub.deleteListener;
var getNode = ReactDOMComponentTree.getNodeFromInstance;
var listenTo = ReactBrowserEventEmitter.listenTo;
var registrationNameModules = EventPluginRegistry.registrationNameModules;

// For quickly matching children type, to test if can be treated as content.
var CONTENT_TYPES = { string: true, number: true };

var STYLE = 'style';
var HTML = '__html';
var RESERVED_PROPS = {
  children: null,
  dangerouslySetInnerHTML: null,
  suppressContentEditableWarning: null
};

// Node type for document fragments (Node.DOCUMENT_FRAGMENT_NODE).
var DOC_FRAGMENT_TYPE = 11;

function getDeclarationErrorAddendum(internalInstance) {
  if (internalInstance) {
    var owner = internalInstance._currentElement._owner || null;
    if (owner) {
      var name = owner.getName();
      if (name) {
        return ' This DOM node was rendered by `' + name + '`.';
      }
    }
  }
  return '';
}

function friendlyStringify(obj) {
  if ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object') {
    if (Array.isArray(obj)) {
      return '[' + obj.map(friendlyStringify).join(', ') + ']';
    } else {
      var pairs = [];
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var keyEscaped = /^[a-z$_][\w$_]*$/i.test(key) ? key : JSON.stringify(key);
          pairs.push(keyEscaped + ': ' + friendlyStringify(obj[key]));
        }
      }
      return '{' + pairs.join(', ') + '}';
    }
  } else if (typeof obj === 'string') {
    return JSON.stringify(obj);
  } else if (typeof obj === 'function') {
    return '[function object]';
  }
  // Differs from JSON.stringify in that undefined because undefined and that
  // inf and nan don't become null
  return String(obj);
}

var styleMutationWarning = {};

function checkAndWarnForMutatedStyle(style1, style2, component) {
  if (style1 == null || style2 == null) {
    return;
  }
  if (shallowEqual(style1, style2)) {
    return;
  }

  var componentName = component._tag;
  var owner = component._currentElement._owner;
  var ownerName;
  if (owner) {
    ownerName = owner.getName();
  }

  var hash = ownerName + '|' + componentName;

  if (styleMutationWarning.hasOwnProperty(hash)) {
    return;
  }

  styleMutationWarning[hash] = true;

  process.env.NODE_ENV !== 'production' ? warning(false, '`%s` was passed a style object that has previously been mutated. ' + 'Mutating `style` is deprecated. Consider cloning it beforehand. Check ' + 'the `render` %s. Previous style: %s. Mutated style: %s.', componentName, owner ? 'of `' + ownerName + '`' : 'using <' + componentName + '>', friendlyStringify(style1), friendlyStringify(style2)) : void 0;
}

/**
 * @param {object} component
 * @param {?object} props
 */
function assertValidProps(component, props) {
  if (!props) {
    return;
  }
  // Note the use of `==` which checks for null or undefined.
  if (voidElementTags[component._tag]) {
    !(props.children == null && props.dangerouslySetInnerHTML == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.%s', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : _prodInvariant('137', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : void 0;
  }
  if (props.dangerouslySetInnerHTML != null) {
    !(props.children == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Can only set one of `children` or `props.dangerouslySetInnerHTML`.') : _prodInvariant('60') : void 0;
    !(_typeof(props.dangerouslySetInnerHTML) === 'object' && HTML in props.dangerouslySetInnerHTML) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://fb.me/react-invariant-dangerously-set-inner-html for more information.') : _prodInvariant('61') : void 0;
  }
  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(props.innerHTML == null, 'Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.') : void 0;
    process.env.NODE_ENV !== 'production' ? warning(props.suppressContentEditableWarning || !props.contentEditable || props.children == null, 'A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.') : void 0;
    process.env.NODE_ENV !== 'production' ? warning(props.onFocusIn == null && props.onFocusOut == null, 'React uses onFocus and onBlur instead of onFocusIn and onFocusOut. ' + 'All React events are normalized to bubble, so onFocusIn and onFocusOut ' + 'are not needed/supported by React.') : void 0;
  }
  !(props.style == null || _typeof(props.style) === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + \'em\'}} when using JSX.%s', getDeclarationErrorAddendum(component)) : _prodInvariant('62', getDeclarationErrorAddendum(component)) : void 0;
}

function enqueuePutListener(inst, registrationName, listener, transaction) {
  if (transaction instanceof ReactServerRenderingTransaction) {
    return;
  }
  if (process.env.NODE_ENV !== 'production') {
    // IE8 has no API for event capturing and the `onScroll` event doesn't
    // bubble.
    process.env.NODE_ENV !== 'production' ? warning(registrationName !== 'onScroll' || isEventSupported('scroll', true), "This browser doesn't support the `onScroll` event") : void 0;
  }
  var containerInfo = inst._hostContainerInfo;
  var isDocumentFragment = containerInfo._node && containerInfo._node.nodeType === DOC_FRAGMENT_TYPE;
  var doc = isDocumentFragment ? containerInfo._node : containerInfo._ownerDocument;
  listenTo(registrationName, doc);
  transaction.getReactMountReady().enqueue(putListener, {
    inst: inst,
    registrationName: registrationName,
    listener: listener
  });
}

function putListener() {
  var listenerToPut = this;
  EventPluginHub.putListener(listenerToPut.inst, listenerToPut.registrationName, listenerToPut.listener);
}

function inputPostMount() {
  var inst = this;
  ReactDOMInput.postMountWrapper(inst);
}

function textareaPostMount() {
  var inst = this;
  ReactDOMTextarea.postMountWrapper(inst);
}

function optionPostMount() {
  var inst = this;
  ReactDOMOption.postMountWrapper(inst);
}

var setAndValidateContentChildDev = emptyFunction;
if (process.env.NODE_ENV !== 'production') {
  setAndValidateContentChildDev = function setAndValidateContentChildDev(content) {
    var hasExistingContent = this._contentDebugID != null;
    var debugID = this._debugID;
    // This ID represents the inlined child that has no backing instance:
    var contentDebugID = -debugID;

    if (content == null) {
      if (hasExistingContent) {
        ReactInstrumentation.debugTool.onUnmountComponent(this._contentDebugID);
      }
      this._contentDebugID = null;
      return;
    }

    validateDOMNesting(null, String(content), this, this._ancestorInfo);
    this._contentDebugID = contentDebugID;
    if (hasExistingContent) {
      ReactInstrumentation.debugTool.onBeforeUpdateComponent(contentDebugID, content);
      ReactInstrumentation.debugTool.onUpdateComponent(contentDebugID);
    } else {
      ReactInstrumentation.debugTool.onBeforeMountComponent(contentDebugID, content, debugID);
      ReactInstrumentation.debugTool.onMountComponent(contentDebugID);
      ReactInstrumentation.debugTool.onSetChildren(debugID, [contentDebugID]);
    }
  };
}

// There are so many media events, it makes sense to just
// maintain a list rather than create a `trapBubbledEvent` for each
var mediaEvents = {
  topAbort: 'abort',
  topCanPlay: 'canplay',
  topCanPlayThrough: 'canplaythrough',
  topDurationChange: 'durationchange',
  topEmptied: 'emptied',
  topEncrypted: 'encrypted',
  topEnded: 'ended',
  topError: 'error',
  topLoadedData: 'loadeddata',
  topLoadedMetadata: 'loadedmetadata',
  topLoadStart: 'loadstart',
  topPause: 'pause',
  topPlay: 'play',
  topPlaying: 'playing',
  topProgress: 'progress',
  topRateChange: 'ratechange',
  topSeeked: 'seeked',
  topSeeking: 'seeking',
  topStalled: 'stalled',
  topSuspend: 'suspend',
  topTimeUpdate: 'timeupdate',
  topVolumeChange: 'volumechange',
  topWaiting: 'waiting'
};

function trackInputValue() {
  inputValueTracking.track(this);
}

function trapBubbledEventsLocal() {
  var inst = this;
  // If a component renders to null or if another component fatals and causes
  // the state of the tree to be corrupted, `node` here can be null.
  !inst._rootNodeID ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Must be mounted to trap events') : _prodInvariant('63') : void 0;
  var node = getNode(inst);
  !node ? process.env.NODE_ENV !== 'production' ? invariant(false, 'trapBubbledEvent(...): Requires node to be rendered.') : _prodInvariant('64') : void 0;

  switch (inst._tag) {
    case 'iframe':
    case 'object':
      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topLoad', 'load', node)];
      break;
    case 'video':
    case 'audio':
      inst._wrapperState.listeners = [];
      // Create listener for each media event
      for (var event in mediaEvents) {
        if (mediaEvents.hasOwnProperty(event)) {
          inst._wrapperState.listeners.push(ReactBrowserEventEmitter.trapBubbledEvent(event, mediaEvents[event], node));
        }
      }
      break;
    case 'source':
      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topError', 'error', node)];
      break;
    case 'img':
      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topError', 'error', node), ReactBrowserEventEmitter.trapBubbledEvent('topLoad', 'load', node)];
      break;
    case 'form':
      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topReset', 'reset', node), ReactBrowserEventEmitter.trapBubbledEvent('topSubmit', 'submit', node)];
      break;
    case 'input':
    case 'select':
    case 'textarea':
      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topInvalid', 'invalid', node)];
      break;
  }
}

function postUpdateSelectWrapper() {
  ReactDOMSelect.postUpdateWrapper(this);
}

// For HTML, certain tags should omit their close tag. We keep a whitelist for
// those special-case tags.

var omittedCloseTags = {
  area: true,
  base: true,
  br: true,
  col: true,
  embed: true,
  hr: true,
  img: true,
  input: true,
  keygen: true,
  link: true,
  meta: true,
  param: true,
  source: true,
  track: true,
  wbr: true
  // NOTE: menuitem's close tag should be omitted, but that causes problems.
};

var newlineEatingTags = {
  listing: true,
  pre: true,
  textarea: true
};

// For HTML, certain tags cannot have children. This has the same purpose as
// `omittedCloseTags` except that `menuitem` should still have its closing tag.

var voidElementTags = _assign({
  menuitem: true
}, omittedCloseTags);

// We accept any tag to be rendered but since this gets injected into arbitrary
// HTML, we want to make sure that it's a safe tag.
// http://www.w3.org/TR/REC-xml/#NT-Name

var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/; // Simplified subset
var validatedTagCache = {};
var hasOwnProperty = {}.hasOwnProperty;

function validateDangerousTag(tag) {
  if (!hasOwnProperty.call(validatedTagCache, tag)) {
    !VALID_TAG_REGEX.test(tag) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Invalid tag: %s', tag) : _prodInvariant('65', tag) : void 0;
    validatedTagCache[tag] = true;
  }
}

function isCustomComponent(tagName, props) {
  return tagName.indexOf('-') >= 0 || props.is != null;
}

var globalIdCounter = 1;

/**
 * Creates a new React class that is idempotent and capable of containing other
 * React components. It accepts event listeners and DOM properties that are
 * valid according to `DOMProperty`.
 *
 *  - Event listeners: `onClick`, `onMouseDown`, etc.
 *  - DOM properties: `className`, `name`, `title`, etc.
 *
 * The `style` property functions differently from the DOM API. It accepts an
 * object mapping of style properties to values.
 *
 * @constructor ReactDOMComponent
 * @extends ReactMultiChild
 */
function ReactDOMComponent(element) {
  var tag = element.type;
  validateDangerousTag(tag);
  this._currentElement = element;
  this._tag = tag.toLowerCase();
  this._namespaceURI = null;
  this._renderedChildren = null;
  this._previousStyle = null;
  this._previousStyleCopy = null;
  this._hostNode = null;
  this._hostParent = null;
  this._rootNodeID = 0;
  this._domID = 0;
  this._hostContainerInfo = null;
  this._wrapperState = null;
  this._topLevelWrapper = null;
  this._flags = 0;
  if (process.env.NODE_ENV !== 'production') {
    this._ancestorInfo = null;
    setAndValidateContentChildDev.call(this, null);
  }
}

ReactDOMComponent.displayName = 'ReactDOMComponent';

ReactDOMComponent.Mixin = {
  /**
   * Generates root tag markup then recurses. This method has side effects and
   * is not idempotent.
   *
   * @internal
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {?ReactDOMComponent} the parent component instance
   * @param {?object} info about the host container
   * @param {object} context
   * @return {string} The computed markup.
   */
  mountComponent: function mountComponent(transaction, hostParent, hostContainerInfo, context) {
    this._rootNodeID = globalIdCounter++;
    this._domID = hostContainerInfo._idCounter++;
    this._hostParent = hostParent;
    this._hostContainerInfo = hostContainerInfo;

    var props = this._currentElement.props;

    switch (this._tag) {
      case 'audio':
      case 'form':
      case 'iframe':
      case 'img':
      case 'link':
      case 'object':
      case 'source':
      case 'video':
        this._wrapperState = {
          listeners: null
        };
        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
        break;
      case 'input':
        ReactDOMInput.mountWrapper(this, props, hostParent);
        props = ReactDOMInput.getHostProps(this, props);
        transaction.getReactMountReady().enqueue(trackInputValue, this);
        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
        break;
      case 'option':
        ReactDOMOption.mountWrapper(this, props, hostParent);
        props = ReactDOMOption.getHostProps(this, props);
        break;
      case 'select':
        ReactDOMSelect.mountWrapper(this, props, hostParent);
        props = ReactDOMSelect.getHostProps(this, props);
        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
        break;
      case 'textarea':
        ReactDOMTextarea.mountWrapper(this, props, hostParent);
        props = ReactDOMTextarea.getHostProps(this, props);
        transaction.getReactMountReady().enqueue(trackInputValue, this);
        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
        break;
    }

    assertValidProps(this, props);

    // We create tags in the namespace of their parent container, except HTML
    // tags get no namespace.
    var namespaceURI;
    var parentTag;
    if (hostParent != null) {
      namespaceURI = hostParent._namespaceURI;
      parentTag = hostParent._tag;
    } else if (hostContainerInfo._tag) {
      namespaceURI = hostContainerInfo._namespaceURI;
      parentTag = hostContainerInfo._tag;
    }
    if (namespaceURI == null || namespaceURI === DOMNamespaces.svg && parentTag === 'foreignobject') {
      namespaceURI = DOMNamespaces.html;
    }
    if (namespaceURI === DOMNamespaces.html) {
      if (this._tag === 'svg') {
        namespaceURI = DOMNamespaces.svg;
      } else if (this._tag === 'math') {
        namespaceURI = DOMNamespaces.mathml;
      }
    }
    this._namespaceURI = namespaceURI;

    if (process.env.NODE_ENV !== 'production') {
      var parentInfo;
      if (hostParent != null) {
        parentInfo = hostParent._ancestorInfo;
      } else if (hostContainerInfo._tag) {
        parentInfo = hostContainerInfo._ancestorInfo;
      }
      if (parentInfo) {
        // parentInfo should always be present except for the top-level
        // component when server rendering
        validateDOMNesting(this._tag, null, this, parentInfo);
      }
      this._ancestorInfo = validateDOMNesting.updatedAncestorInfo(parentInfo, this._tag, this);
    }

    var mountImage;
    if (transaction.useCreateElement) {
      var ownerDocument = hostContainerInfo._ownerDocument;
      var el;
      if (namespaceURI === DOMNamespaces.html) {
        if (this._tag === 'script') {
          // Create the script via .innerHTML so its "parser-inserted" flag is
          // set to true and it does not execute
          var div = ownerDocument.createElement('div');
          var type = this._currentElement.type;
          div.innerHTML = '<' + type + '></' + type + '>';
          el = div.removeChild(div.firstChild);
        } else if (props.is) {
          el = ownerDocument.createElement(this._currentElement.type, props.is);
        } else {
          // Separate else branch instead of using `props.is || undefined` above becuase of a Firefox bug.
          // See discussion in https://github.com/facebook/react/pull/6896
          // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240
          el = ownerDocument.createElement(this._currentElement.type);
        }
      } else {
        el = ownerDocument.createElementNS(namespaceURI, this._currentElement.type);
      }
      ReactDOMComponentTree.precacheNode(this, el);
      this._flags |= Flags.hasCachedChildNodes;
      if (!this._hostParent) {
        DOMPropertyOperations.setAttributeForRoot(el);
      }
      this._updateDOMProperties(null, props, transaction);
      var lazyTree = DOMLazyTree(el);
      this._createInitialChildren(transaction, props, context, lazyTree);
      mountImage = lazyTree;
    } else {
      var tagOpen = this._createOpenTagMarkupAndPutListeners(transaction, props);
      var tagContent = this._createContentMarkup(transaction, props, context);
      if (!tagContent && omittedCloseTags[this._tag]) {
        mountImage = tagOpen + '/>';
      } else {
        mountImage = tagOpen + '>' + tagContent + '</' + this._currentElement.type + '>';
      }
    }

    switch (this._tag) {
      case 'input':
        transaction.getReactMountReady().enqueue(inputPostMount, this);
        if (props.autoFocus) {
          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
        }
        break;
      case 'textarea':
        transaction.getReactMountReady().enqueue(textareaPostMount, this);
        if (props.autoFocus) {
          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
        }
        break;
      case 'select':
        if (props.autoFocus) {
          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
        }
        break;
      case 'button':
        if (props.autoFocus) {
          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
        }
        break;
      case 'option':
        transaction.getReactMountReady().enqueue(optionPostMount, this);
        break;
    }

    return mountImage;
  },

  /**
   * Creates markup for the open tag and all attributes.
   *
   * This method has side effects because events get registered.
   *
   * Iterating over object properties is faster than iterating over arrays.
   * @see http://jsperf.com/obj-vs-arr-iteration
   *
   * @private
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {object} props
   * @return {string} Markup of opening tag.
   */
  _createOpenTagMarkupAndPutListeners: function _createOpenTagMarkupAndPutListeners(transaction, props) {
    var ret = '<' + this._currentElement.type;

    for (var propKey in props) {
      if (!props.hasOwnProperty(propKey)) {
        continue;
      }
      var propValue = props[propKey];
      if (propValue == null) {
        continue;
      }
      if (registrationNameModules.hasOwnProperty(propKey)) {
        if (propValue) {
          enqueuePutListener(this, propKey, propValue, transaction);
        }
      } else {
        if (propKey === STYLE) {
          if (propValue) {
            if (process.env.NODE_ENV !== 'production') {
              // See `_updateDOMProperties`. style block
              this._previousStyle = propValue;
            }
            propValue = this._previousStyleCopy = _assign({}, props.style);
          }
          propValue = CSSPropertyOperations.createMarkupForStyles(propValue, this);
        }
        var markup = null;
        if (this._tag != null && isCustomComponent(this._tag, props)) {
          if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
            markup = DOMPropertyOperations.createMarkupForCustomAttribute(propKey, propValue);
          }
        } else {
          markup = DOMPropertyOperations.createMarkupForProperty(propKey, propValue);
        }
        if (markup) {
          ret += ' ' + markup;
        }
      }
    }

    // For static pages, no need to put React ID and checksum. Saves lots of
    // bytes.
    if (transaction.renderToStaticMarkup) {
      return ret;
    }

    if (!this._hostParent) {
      ret += ' ' + DOMPropertyOperations.createMarkupForRoot();
    }
    ret += ' ' + DOMPropertyOperations.createMarkupForID(this._domID);
    return ret;
  },

  /**
   * Creates markup for the content between the tags.
   *
   * @private
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {object} props
   * @param {object} context
   * @return {string} Content markup.
   */
  _createContentMarkup: function _createContentMarkup(transaction, props, context) {
    var ret = '';

    // Intentional use of != to avoid catching zero/false.
    var innerHTML = props.dangerouslySetInnerHTML;
    if (innerHTML != null) {
      if (innerHTML.__html != null) {
        ret = innerHTML.__html;
      }
    } else {
      var contentToUse = CONTENT_TYPES[_typeof(props.children)] ? props.children : null;
      var childrenToUse = contentToUse != null ? null : props.children;
      if (contentToUse != null) {
        // TODO: Validate that text is allowed as a child of this node
        ret = escapeTextContentForBrowser(contentToUse);
        if (process.env.NODE_ENV !== 'production') {
          setAndValidateContentChildDev.call(this, contentToUse);
        }
      } else if (childrenToUse != null) {
        var mountImages = this.mountChildren(childrenToUse, transaction, context);
        ret = mountImages.join('');
      }
    }
    if (newlineEatingTags[this._tag] && ret.charAt(0) === '\n') {
      // text/html ignores the first character in these tags if it's a newline
      // Prefer to break application/xml over text/html (for now) by adding
      // a newline specifically to get eaten by the parser. (Alternately for
      // textareas, replacing "^\n" with "\r\n" doesn't get eaten, and the first
      // \r is normalized out by HTMLTextAreaElement#value.)
      // See: <http://www.w3.org/TR/html-polyglot/#newlines-in-textarea-and-pre>
      // See: <http://www.w3.org/TR/html5/syntax.html#element-restrictions>
      // See: <http://www.w3.org/TR/html5/syntax.html#newlines>
      // See: Parsing of "textarea" "listing" and "pre" elements
      //  from <http://www.w3.org/TR/html5/syntax.html#parsing-main-inbody>
      return '\n' + ret;
    } else {
      return ret;
    }
  },

  _createInitialChildren: function _createInitialChildren(transaction, props, context, lazyTree) {
    // Intentional use of != to avoid catching zero/false.
    var innerHTML = props.dangerouslySetInnerHTML;
    if (innerHTML != null) {
      if (innerHTML.__html != null) {
        DOMLazyTree.queueHTML(lazyTree, innerHTML.__html);
      }
    } else {
      var contentToUse = CONTENT_TYPES[_typeof(props.children)] ? props.children : null;
      var childrenToUse = contentToUse != null ? null : props.children;
      // TODO: Validate that text is allowed as a child of this node
      if (contentToUse != null) {
        // Avoid setting textContent when the text is empty. In IE11 setting
        // textContent on a text area will cause the placeholder to not
        // show within the textarea until it has been focused and blurred again.
        // https://github.com/facebook/react/issues/6731#issuecomment-254874553
        if (contentToUse !== '') {
          if (process.env.NODE_ENV !== 'production') {
            setAndValidateContentChildDev.call(this, contentToUse);
          }
          DOMLazyTree.queueText(lazyTree, contentToUse);
        }
      } else if (childrenToUse != null) {
        var mountImages = this.mountChildren(childrenToUse, transaction, context);
        for (var i = 0; i < mountImages.length; i++) {
          DOMLazyTree.queueChild(lazyTree, mountImages[i]);
        }
      }
    }
  },

  /**
   * Receives a next element and updates the component.
   *
   * @internal
   * @param {ReactElement} nextElement
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {object} context
   */
  receiveComponent: function receiveComponent(nextElement, transaction, context) {
    var prevElement = this._currentElement;
    this._currentElement = nextElement;
    this.updateComponent(transaction, prevElement, nextElement, context);
  },

  /**
   * Updates a DOM component after it has already been allocated and
   * attached to the DOM. Reconciles the root DOM node, then recurses.
   *
   * @param {ReactReconcileTransaction} transaction
   * @param {ReactElement} prevElement
   * @param {ReactElement} nextElement
   * @internal
   * @overridable
   */
  updateComponent: function updateComponent(transaction, prevElement, nextElement, context) {
    var lastProps = prevElement.props;
    var nextProps = this._currentElement.props;

    switch (this._tag) {
      case 'input':
        lastProps = ReactDOMInput.getHostProps(this, lastProps);
        nextProps = ReactDOMInput.getHostProps(this, nextProps);
        break;
      case 'option':
        lastProps = ReactDOMOption.getHostProps(this, lastProps);
        nextProps = ReactDOMOption.getHostProps(this, nextProps);
        break;
      case 'select':
        lastProps = ReactDOMSelect.getHostProps(this, lastProps);
        nextProps = ReactDOMSelect.getHostProps(this, nextProps);
        break;
      case 'textarea':
        lastProps = ReactDOMTextarea.getHostProps(this, lastProps);
        nextProps = ReactDOMTextarea.getHostProps(this, nextProps);
        break;
    }

    assertValidProps(this, nextProps);
    this._updateDOMProperties(lastProps, nextProps, transaction);
    this._updateDOMChildren(lastProps, nextProps, transaction, context);

    switch (this._tag) {
      case 'input':
        // Update the wrapper around inputs *after* updating props. This has to
        // happen after `_updateDOMProperties`. Otherwise HTML5 input validations
        // raise warnings and prevent the new value from being assigned.
        ReactDOMInput.updateWrapper(this);
        break;
      case 'textarea':
        ReactDOMTextarea.updateWrapper(this);
        break;
      case 'select':
        // <select> value update needs to occur after <option> children
        // reconciliation
        transaction.getReactMountReady().enqueue(postUpdateSelectWrapper, this);
        break;
    }
  },

  /**
   * Reconciles the properties by detecting differences in property values and
   * updating the DOM as necessary. This function is probably the single most
   * critical path for performance optimization.
   *
   * TODO: Benchmark whether checking for changed values in memory actually
   *       improves performance (especially statically positioned elements).
   * TODO: Benchmark the effects of putting this at the top since 99% of props
   *       do not change for a given reconciliation.
   * TODO: Benchmark areas that can be improved with caching.
   *
   * @private
   * @param {object} lastProps
   * @param {object} nextProps
   * @param {?DOMElement} node
   */
  _updateDOMProperties: function _updateDOMProperties(lastProps, nextProps, transaction) {
    var propKey;
    var styleName;
    var styleUpdates;
    for (propKey in lastProps) {
      if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
        continue;
      }
      if (propKey === STYLE) {
        var lastStyle = this._previousStyleCopy;
        for (styleName in lastStyle) {
          if (lastStyle.hasOwnProperty(styleName)) {
            styleUpdates = styleUpdates || {};
            styleUpdates[styleName] = '';
          }
        }
        this._previousStyleCopy = null;
      } else if (registrationNameModules.hasOwnProperty(propKey)) {
        if (lastProps[propKey]) {
          // Only call deleteListener if there was a listener previously or
          // else willDeleteListener gets called when there wasn't actually a
          // listener (e.g., onClick={null})
          deleteListener(this, propKey);
        }
      } else if (isCustomComponent(this._tag, lastProps)) {
        if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
          DOMPropertyOperations.deleteValueForAttribute(getNode(this), propKey);
        }
      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
        DOMPropertyOperations.deleteValueForProperty(getNode(this), propKey);
      }
    }
    for (propKey in nextProps) {
      var nextProp = nextProps[propKey];
      var lastProp = propKey === STYLE ? this._previousStyleCopy : lastProps != null ? lastProps[propKey] : undefined;
      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
        continue;
      }
      if (propKey === STYLE) {
        if (nextProp) {
          if (process.env.NODE_ENV !== 'production') {
            checkAndWarnForMutatedStyle(this._previousStyleCopy, this._previousStyle, this);
            this._previousStyle = nextProp;
          }
          nextProp = this._previousStyleCopy = _assign({}, nextProp);
        } else {
          this._previousStyleCopy = null;
        }
        if (lastProp) {
          // Unset styles on `lastProp` but not on `nextProp`.
          for (styleName in lastProp) {
            if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
              styleUpdates = styleUpdates || {};
              styleUpdates[styleName] = '';
            }
          }
          // Update styles that changed since `lastProp`.
          for (styleName in nextProp) {
            if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
              styleUpdates = styleUpdates || {};
              styleUpdates[styleName] = nextProp[styleName];
            }
          }
        } else {
          // Relies on `updateStylesByID` not mutating `styleUpdates`.
          styleUpdates = nextProp;
        }
      } else if (registrationNameModules.hasOwnProperty(propKey)) {
        if (nextProp) {
          enqueuePutListener(this, propKey, nextProp, transaction);
        } else if (lastProp) {
          deleteListener(this, propKey);
        }
      } else if (isCustomComponent(this._tag, nextProps)) {
        if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
          DOMPropertyOperations.setValueForAttribute(getNode(this), propKey, nextProp);
        }
      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
        var node = getNode(this);
        // If we're updating to null or undefined, we should remove the property
        // from the DOM node instead of inadvertently setting to a string. This
        // brings us in line with the same behavior we have on initial render.
        if (nextProp != null) {
          DOMPropertyOperations.setValueForProperty(node, propKey, nextProp);
        } else {
          DOMPropertyOperations.deleteValueForProperty(node, propKey);
        }
      }
    }
    if (styleUpdates) {
      CSSPropertyOperations.setValueForStyles(getNode(this), styleUpdates, this);
    }
  },

  /**
   * Reconciles the children with the various properties that affect the
   * children content.
   *
   * @param {object} lastProps
   * @param {object} nextProps
   * @param {ReactReconcileTransaction} transaction
   * @param {object} context
   */
  _updateDOMChildren: function _updateDOMChildren(lastProps, nextProps, transaction, context) {
    var lastContent = CONTENT_TYPES[_typeof(lastProps.children)] ? lastProps.children : null;
    var nextContent = CONTENT_TYPES[_typeof(nextProps.children)] ? nextProps.children : null;

    var lastHtml = lastProps.dangerouslySetInnerHTML && lastProps.dangerouslySetInnerHTML.__html;
    var nextHtml = nextProps.dangerouslySetInnerHTML && nextProps.dangerouslySetInnerHTML.__html;

    // Note the use of `!=` which checks for null or undefined.
    var lastChildren = lastContent != null ? null : lastProps.children;
    var nextChildren = nextContent != null ? null : nextProps.children;

    // If we're switching from children to content/html or vice versa, remove
    // the old content
    var lastHasContentOrHtml = lastContent != null || lastHtml != null;
    var nextHasContentOrHtml = nextContent != null || nextHtml != null;
    if (lastChildren != null && nextChildren == null) {
      this.updateChildren(null, transaction, context);
    } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {
      this.updateTextContent('');
      if (process.env.NODE_ENV !== 'production') {
        ReactInstrumentation.debugTool.onSetChildren(this._debugID, []);
      }
    }

    if (nextContent != null) {
      if (lastContent !== nextContent) {
        this.updateTextContent('' + nextContent);
        if (process.env.NODE_ENV !== 'production') {
          setAndValidateContentChildDev.call(this, nextContent);
        }
      }
    } else if (nextHtml != null) {
      if (lastHtml !== nextHtml) {
        this.updateMarkup('' + nextHtml);
      }
      if (process.env.NODE_ENV !== 'production') {
        ReactInstrumentation.debugTool.onSetChildren(this._debugID, []);
      }
    } else if (nextChildren != null) {
      if (process.env.NODE_ENV !== 'production') {
        setAndValidateContentChildDev.call(this, null);
      }

      this.updateChildren(nextChildren, transaction, context);
    }
  },

  getHostNode: function getHostNode() {
    return getNode(this);
  },

  /**
   * Destroys all event registrations for this instance. Does not remove from
   * the DOM. That must be done by the parent.
   *
   * @internal
   */
  unmountComponent: function unmountComponent(safely) {
    switch (this._tag) {
      case 'audio':
      case 'form':
      case 'iframe':
      case 'img':
      case 'link':
      case 'object':
      case 'source':
      case 'video':
        var listeners = this._wrapperState.listeners;
        if (listeners) {
          for (var i = 0; i < listeners.length; i++) {
            listeners[i].remove();
          }
        }
        break;
      case 'input':
      case 'textarea':
        inputValueTracking.stopTracking(this);
        break;
      case 'html':
      case 'head':
      case 'body':
        /**
         * Components like <html> <head> and <body> can't be removed or added
         * easily in a cross-browser way, however it's valuable to be able to
         * take advantage of React's reconciliation for styling and <title>
         * management. So we just document it and throw in dangerous cases.
         */
         true ? process.env.NODE_ENV !== 'production' ? invariant(false, '<%s> tried to unmount. Because of cross-browser quirks it is impossible to unmount some top-level components (eg <html>, <head>, and <body>) reliably and efficiently. To fix this, have a single top-level component that never unmounts render these elements.', this._tag) : _prodInvariant('66', this._tag) : void 0;
        break;
    }

    this.unmountChildren(safely);
    ReactDOMComponentTree.uncacheNode(this);
    EventPluginHub.deleteAllListeners(this);
    this._rootNodeID = 0;
    this._domID = 0;
    this._wrapperState = null;

    if (process.env.NODE_ENV !== 'production') {
      setAndValidateContentChildDev.call(this, null);
    }
  },

  getPublicInstance: function getPublicInstance() {
    return getNode(this);
  }
};

_assign(ReactDOMComponent.prototype, ReactDOMComponent.Mixin, ReactMultiChild.Mixin);

module.exports = ReactDOMComponent;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 183 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var validateDOMNesting = __webpack_require__(73);

var DOC_NODE_TYPE = 9;

function ReactDOMContainerInfo(topLevelWrapper, node) {
  var info = {
    _topLevelWrapper: topLevelWrapper,
    _idCounter: 1,
    _ownerDocument: node ? node.nodeType === DOC_NODE_TYPE ? node : node.ownerDocument : null,
    _node: node,
    _tag: node ? node.nodeName.toLowerCase() : null,
    _namespaceURI: node ? node.namespaceURI : null
  };
  if (process.env.NODE_ENV !== 'production') {
    info._ancestorInfo = node ? validateDOMNesting.updatedAncestorInfo(null, info._tag, null) : null;
  }
  return info;
}

module.exports = ReactDOMContainerInfo;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 184 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(6);

var DOMLazyTree = __webpack_require__(30);
var ReactDOMComponentTree = __webpack_require__(7);

var ReactDOMEmptyComponent = function ReactDOMEmptyComponent(instantiate) {
  // ReactCompositeComponent uses this:
  this._currentElement = null;
  // ReactDOMComponentTree uses these:
  this._hostNode = null;
  this._hostParent = null;
  this._hostContainerInfo = null;
  this._domID = 0;
};
_assign(ReactDOMEmptyComponent.prototype, {
  mountComponent: function mountComponent(transaction, hostParent, hostContainerInfo, context) {
    var domID = hostContainerInfo._idCounter++;
    this._domID = domID;
    this._hostParent = hostParent;
    this._hostContainerInfo = hostContainerInfo;

    var nodeValue = ' react-empty: ' + this._domID + ' ';
    if (transaction.useCreateElement) {
      var ownerDocument = hostContainerInfo._ownerDocument;
      var node = ownerDocument.createComment(nodeValue);
      ReactDOMComponentTree.precacheNode(this, node);
      return DOMLazyTree(node);
    } else {
      if (transaction.renderToStaticMarkup) {
        // Normally we'd insert a comment node, but since this is a situation
        // where React won't take over (static pages), we can simply return
        // nothing.
        return '';
      }
      return '<!--' + nodeValue + '-->';
    }
  },
  receiveComponent: function receiveComponent() {},
  getHostNode: function getHostNode() {
    return ReactDOMComponentTree.getNodeFromInstance(this);
  },
  unmountComponent: function unmountComponent() {
    ReactDOMComponentTree.uncacheNode(this);
  }
});

module.exports = ReactDOMEmptyComponent;

/***/ }),
/* 185 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ReactDOMFeatureFlags = {
  useCreateElement: true,
  useFiber: false
};

module.exports = ReactDOMFeatureFlags;

/***/ }),
/* 186 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var DOMChildrenOperations = __webpack_require__(59);
var ReactDOMComponentTree = __webpack_require__(7);

/**
 * Operations used to process updates to DOM nodes.
 */
var ReactDOMIDOperations = {
  /**
   * Updates a component's children by processing a series of updates.
   *
   * @param {array<object>} updates List of update configurations.
   * @internal
   */
  dangerouslyProcessChildrenUpdates: function dangerouslyProcessChildrenUpdates(parentInst, updates) {
    var node = ReactDOMComponentTree.getNodeFromInstance(parentInst);
    DOMChildrenOperations.processUpdates(node, updates);
  }
};

module.exports = ReactDOMIDOperations;

/***/ }),
/* 187 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(4),
    _assign = __webpack_require__(6);

var DOMPropertyOperations = __webpack_require__(88);
var LinkedValueUtils = __webpack_require__(63);
var ReactDOMComponentTree = __webpack_require__(7);
var ReactUpdates = __webpack_require__(19);

var invariant = __webpack_require__(2);
var warning = __webpack_require__(3);

var didWarnValueLink = false;
var didWarnCheckedLink = false;
var didWarnValueDefaultValue = false;
var didWarnCheckedDefaultChecked = false;
var didWarnControlledToUncontrolled = false;
var didWarnUncontrolledToControlled = false;

function forceUpdateIfMounted() {
  if (this._rootNodeID) {
    // DOM component is still mounted; update
    ReactDOMInput.updateWrapper(this);
  }
}

function isControlled(props) {
  var usesChecked = props.type === 'checkbox' || props.type === 'radio';
  return usesChecked ? props.checked != null : props.value != null;
}

/**
 * Implements an <input> host component that allows setting these optional
 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
 *
 * If `checked` or `value` are not supplied (or null/undefined), user actions
 * that affect the checked state or value will trigger updates to the element.
 *
 * If they are supplied (and not null/undefined), the rendered element will not
 * trigger updates to the element. Instead, the props must change in order for
 * the rendered element to be updated.
 *
 * The rendered element will be initialized as unchecked (or `defaultChecked`)
 * with an empty value (or `defaultValue`).
 *
 * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
 */
var ReactDOMInput = {
  getHostProps: function getHostProps(inst, props) {
    var value = LinkedValueUtils.getValue(props);
    var checked = LinkedValueUtils.getChecked(props);

    var hostProps = _assign({
      // Make sure we set .type before any other properties (setting .value
      // before .type means .value is lost in IE11 and below)
      type: undefined,
      // Make sure we set .step before .value (setting .value before .step
      // means .value is rounded on mount, based upon step precision)
      step: undefined,
      // Make sure we set .min & .max before .value (to ensure proper order
      // in corner cases such as min or max deriving from value, e.g. Issue #7170)
      min: undefined,
      max: undefined
    }, props, {
      defaultChecked: undefined,
      defaultValue: undefined,
      value: value != null ? value : inst._wrapperState.initialValue,
      checked: checked != null ? checked : inst._wrapperState.initialChecked,
      onChange: inst._wrapperState.onChange
    });

    return hostProps;
  },

  mountWrapper: function mountWrapper(inst, props) {
    if (process.env.NODE_ENV !== 'production') {
      LinkedValueUtils.checkPropTypes('input', props, inst._currentElement._owner);

      var owner = inst._currentElement._owner;

      if (props.valueLink !== undefined && !didWarnValueLink) {
        process.env.NODE_ENV !== 'production' ? warning(false, '`valueLink` prop on `input` is deprecated; set `value` and `onChange` instead.') : void 0;
        didWarnValueLink = true;
      }
      if (props.checkedLink !== undefined && !didWarnCheckedLink) {
        process.env.NODE_ENV !== 'production' ? warning(false, '`checkedLink` prop on `input` is deprecated; set `value` and `onChange` instead.') : void 0;
        didWarnCheckedLink = true;
      }
      if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {
        process.env.NODE_ENV !== 'production' ? warning(false, '%s contains an input of type %s with both checked and defaultChecked props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the checked prop, or the defaultChecked prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
        didWarnCheckedDefaultChecked = true;
      }
      if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
        process.env.NODE_ENV !== 'production' ? warning(false, '%s contains an input of type %s with both value and defaultValue props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
        didWarnValueDefaultValue = true;
      }
    }

    var defaultValue = props.defaultValue;
    inst._wrapperState = {
      initialChecked: props.checked != null ? props.checked : props.defaultChecked,
      initialValue: props.value != null ? props.value : defaultValue,
      listeners: null,
      onChange: _handleChange.bind(inst),
      controlled: isControlled(props)
    };
  },

  updateWrapper: function updateWrapper(inst) {
    var props = inst._currentElement.props;

    if (process.env.NODE_ENV !== 'production') {
      var controlled = isControlled(props);
      var owner = inst._currentElement._owner;

      if (!inst._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
        process.env.NODE_ENV !== 'production' ? warning(false, '%s is changing an uncontrolled input of type %s to be controlled. ' + 'Input elements should not switch from uncontrolled to controlled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
        didWarnUncontrolledToControlled = true;
      }
      if (inst._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
        process.env.NODE_ENV !== 'production' ? warning(false, '%s is changing a controlled input of type %s to be uncontrolled. ' + 'Input elements should not switch from controlled to uncontrolled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
        didWarnControlledToUncontrolled = true;
      }
    }

    // TODO: Shouldn't this be getChecked(props)?
    var checked = props.checked;
    if (checked != null) {
      DOMPropertyOperations.setValueForProperty(ReactDOMComponentTree.getNodeFromInstance(inst), 'checked', checked || false);
    }

    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
    var value = LinkedValueUtils.getValue(props);
    if (value != null) {
      if (value === 0 && node.value === '') {
        node.value = '0';
        // Note: IE9 reports a number inputs as 'text', so check props instead.
      } else if (props.type === 'number') {
        // Simulate `input.valueAsNumber`. IE9 does not support it
        var valueAsNumber = parseFloat(node.value, 10) || 0;

        if (
        // eslint-disable-next-line
        value != valueAsNumber ||
        // eslint-disable-next-line
        value == valueAsNumber && node.value != value) {
          // Cast `value` to a string to ensure the value is set correctly. While
          // browsers typically do this as necessary, jsdom doesn't.
          node.value = '' + value;
        }
      } else if (node.value !== '' + value) {
        // Cast `value` to a string to ensure the value is set correctly. While
        // browsers typically do this as necessary, jsdom doesn't.
        node.value = '' + value;
      }
    } else {
      if (props.value == null && props.defaultValue != null) {
        // In Chrome, assigning defaultValue to certain input types triggers input validation.
        // For number inputs, the display value loses trailing decimal points. For email inputs,
        // Chrome raises "The specified value <x> is not a valid email address".
        //
        // Here we check to see if the defaultValue has actually changed, avoiding these problems
        // when the user is inputting text
        //
        // https://github.com/facebook/react/issues/7253
        if (node.defaultValue !== '' + props.defaultValue) {
          node.defaultValue = '' + props.defaultValue;
        }
      }
      if (props.checked == null && props.defaultChecked != null) {
        node.defaultChecked = !!props.defaultChecked;
      }
    }
  },

  postMountWrapper: function postMountWrapper(inst) {
    var props = inst._currentElement.props;

    // This is in postMount because we need access to the DOM node, which is not
    // available until after the component has mounted.
    var node = ReactDOMComponentTree.getNodeFromInstance(inst);

    // Detach value from defaultValue. We won't do anything if we're working on
    // submit or reset inputs as those values & defaultValues are linked. They
    // are not resetable nodes so this operation doesn't matter and actually
    // removes browser-default values (eg "Submit Query") when no value is
    // provided.

    switch (props.type) {
      case 'submit':
      case 'reset':
        break;
      case 'color':
      case 'date':
      case 'datetime':
      case 'datetime-local':
      case 'month':
      case 'time':
      case 'week':
        // This fixes the no-show issue on iOS Safari and Android Chrome:
        // https://github.com/facebook/react/issues/7233
        node.value = '';
        node.value = node.defaultValue;
        break;
      default:
        node.value = node.value;
        break;
    }

    // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug
    // this is needed to work around a chrome bug where setting defaultChecked
    // will sometimes influence the value of checked (even after detachment).
    // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416
    // We need to temporarily unset name to avoid disrupting radio button groups.
    var name = node.name;
    if (name !== '') {
      node.name = '';
    }
    node.defaultChecked = !node.defaultChecked;
    node.defaultChecked = !node.defaultChecked;
    if (name !== '') {
      node.name = name;
    }
  }
};

function _handleChange(event) {
  var props = this._currentElement.props;

  var returnValue = LinkedValueUtils.executeOnChange(props, event);

  // Here we use asap to wait until all updates have propagated, which
  // is important when using controlled components within layers:
  // https://github.com/facebook/react/issues/1698
  ReactUpdates.asap(forceUpdateIfMounted, this);

  var name = props.name;
  if (props.type === 'radio' && name != null) {
    var rootNode = ReactDOMComponentTree.getNodeFromInstance(this);
    var queryRoot = rootNode;

    while (queryRoot.parentNode) {
      queryRoot = queryRoot.parentNode;
    }

    // If `rootNode.form` was non-null, then we could try `form.elements`,
    // but that sometimes behaves strangely in IE8. We could also try using
    // `form.getElementsByName`, but that will only return direct children
    // and won't include inputs that use the HTML5 `form=` attribute. Since
    // the input might not even be in a form, let's just use the global
    // `querySelectorAll` to ensure we don't miss anything.
    var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');

    for (var i = 0; i < group.length; i++) {
      var otherNode = group[i];
      if (otherNode === rootNode || otherNode.form !== rootNode.form) {
        continue;
      }
      // This will throw if radio buttons rendered by different copies of React
      // and the same name are rendered into the same form (same as #1939).
      // That's probably okay; we don't support it just as we don't support
      // mixing React radio buttons with non-React ones.
      var otherInstance = ReactDOMComponentTree.getInstanceFromNode(otherNode);
      !otherInstance ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.') : _prodInvariant('90') : void 0;
      // If this is a controlled radio button group, forcing the input that
      // was previously checked to update will cause it to be come re-checked
      // as appropriate.
      ReactUpdates.asap(forceUpdateIfMounted, otherInstance);
    }
  }

  return returnValue;
}

module.exports = ReactDOMInput;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 188 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var DOMProperty = __webpack_require__(27);
var ReactComponentTreeHook = __webpack_require__(12);

var warning = __webpack_require__(3);

var warnedProperties = {};
var rARIA = new RegExp('^(aria)-[' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$');

function validateProperty(tagName, name, debugID) {
  if (warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
    return true;
  }

  if (rARIA.test(name)) {
    var lowerCasedName = name.toLowerCase();
    var standardName = DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ? DOMProperty.getPossibleStandardName[lowerCasedName] : null;

    // If this is an aria-* attribute, but is not listed in the known DOM
    // DOM properties, then it is an invalid aria-* attribute.
    if (standardName == null) {
      warnedProperties[name] = true;
      return false;
    }
    // aria-* attributes should be lowercase; suggest the lowercase version.
    if (name !== standardName) {
      process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown ARIA attribute %s. Did you mean %s?%s', name, standardName, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
      warnedProperties[name] = true;
      return true;
    }
  }

  return true;
}

function warnInvalidARIAProps(debugID, element) {
  var invalidProps = [];

  for (var key in element.props) {
    var isValid = validateProperty(element.type, key, debugID);
    if (!isValid) {
      invalidProps.push(key);
    }
  }

  var unknownPropString = invalidProps.map(function (prop) {
    return '`' + prop + '`';
  }).join(', ');

  if (invalidProps.length === 1) {
    process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid aria prop %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
  } else if (invalidProps.length > 1) {
    process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid aria props %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
  }
}

function handleElement(debugID, element) {
  if (element == null || typeof element.type !== 'string') {
    return;
  }
  if (element.type.indexOf('-') >= 0 || element.props.is) {
    return;
  }

  warnInvalidARIAProps(debugID, element);
}

var ReactDOMInvalidARIAHook = {
  onBeforeMountComponent: function onBeforeMountComponent(debugID, element) {
    if (process.env.NODE_ENV !== 'production') {
      handleElement(debugID, element);
    }
  },
  onBeforeUpdateComponent: function onBeforeUpdateComponent(debugID, element) {
    if (process.env.NODE_ENV !== 'production') {
      handleElement(debugID, element);
    }
  }
};

module.exports = ReactDOMInvalidARIAHook;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 189 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ReactComponentTreeHook = __webpack_require__(12);

var warning = __webpack_require__(3);

var didWarnValueNull = false;

function handleElement(debugID, element) {
  if (element == null) {
    return;
  }
  if (element.type !== 'input' && element.type !== 'textarea' && element.type !== 'select') {
    return;
  }
  if (element.props != null && element.props.value === null && !didWarnValueNull) {
    process.env.NODE_ENV !== 'production' ? warning(false, '`value` prop on `%s` should not be null. ' + 'Consider using the empty string to clear the component or `undefined` ' + 'for uncontrolled components.%s', element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;

    didWarnValueNull = true;
  }
}

var ReactDOMNullInputValuePropHook = {
  onBeforeMountComponent: function onBeforeMountComponent(debugID, element) {
    handleElement(debugID, element);
  },
  onBeforeUpdateComponent: function onBeforeUpdateComponent(debugID, element) {
    handleElement(debugID, element);
  }
};

module.exports = ReactDOMNullInputValuePropHook;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 190 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(6);

var React = __webpack_require__(32);
var ReactDOMComponentTree = __webpack_require__(7);
var ReactDOMSelect = __webpack_require__(90);

var warning = __webpack_require__(3);
var didWarnInvalidOptionChildren = false;

function flattenChildren(children) {
  var content = '';

  // Flatten children and warn if they aren't strings or numbers;
  // invalid types are ignored.
  React.Children.forEach(children, function (child) {
    if (child == null) {
      return;
    }
    if (typeof child === 'string' || typeof child === 'number') {
      content += child;
    } else if (!didWarnInvalidOptionChildren) {
      didWarnInvalidOptionChildren = true;
      process.env.NODE_ENV !== 'production' ? warning(false, 'Only strings and numbers are supported as <option> children.') : void 0;
    }
  });

  return content;
}

/**
 * Implements an <option> host component that warns when `selected` is set.
 */
var ReactDOMOption = {
  mountWrapper: function mountWrapper(inst, props, hostParent) {
    // TODO (yungsters): Remove support for `selected` in <option>.
    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(props.selected == null, 'Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.') : void 0;
    }

    // Look up whether this option is 'selected'
    var selectValue = null;
    if (hostParent != null) {
      var selectParent = hostParent;

      if (selectParent._tag === 'optgroup') {
        selectParent = selectParent._hostParent;
      }

      if (selectParent != null && selectParent._tag === 'select') {
        selectValue = ReactDOMSelect.getSelectValueContext(selectParent);
      }
    }

    // If the value is null (e.g., no specified value or after initial mount)
    // or missing (e.g., for <datalist>), we don't change props.selected
    var selected = null;
    if (selectValue != null) {
      var value;
      if (props.value != null) {
        value = props.value + '';
      } else {
        value = flattenChildren(props.children);
      }
      selected = false;
      if (Array.isArray(selectValue)) {
        // multiple
        for (var i = 0; i < selectValue.length; i++) {
          if ('' + selectValue[i] === value) {
            selected = true;
            break;
          }
        }
      } else {
        selected = '' + selectValue === value;
      }
    }

    inst._wrapperState = { selected: selected };
  },

  postMountWrapper: function postMountWrapper(inst) {
    // value="" should make a value attribute (#6219)
    var props = inst._currentElement.props;
    if (props.value != null) {
      var node = ReactDOMComponentTree.getNodeFromInstance(inst);
      node.setAttribute('value', props.value);
    }
  },

  getHostProps: function getHostProps(inst, props) {
    var hostProps = _assign({ selected: undefined, children: undefined }, props);

    // Read state only from initial mount because <select> updates value
    // manually; we need the initial state only for server rendering
    if (inst._wrapperState.selected != null) {
      hostProps.selected = inst._wrapperState.selected;
    }

    var content = flattenChildren(props.children);

    if (content) {
      hostProps.children = content;
    }

    return hostProps;
  }
};

module.exports = ReactDOMOption;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 191 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ExecutionEnvironment = __webpack_require__(9);

var getNodeForCharacterOffset = __webpack_require__(234);
var getTextContentAccessor = __webpack_require__(102);

/**
 * While `isCollapsed` is available on the Selection object and `collapsed`
 * is available on the Range object, IE11 sometimes gets them wrong.
 * If the anchor/focus nodes and offsets are the same, the range is collapsed.
 */
function isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {
  return anchorNode === focusNode && anchorOffset === focusOffset;
}

/**
 * Get the appropriate anchor and focus node/offset pairs for IE.
 *
 * The catch here is that IE's selection API doesn't provide information
 * about whether the selection is forward or backward, so we have to
 * behave as though it's always forward.
 *
 * IE text differs from modern selection in that it behaves as though
 * block elements end with a new line. This means character offsets will
 * differ between the two APIs.
 *
 * @param {DOMElement} node
 * @return {object}
 */
function getIEOffsets(node) {
  var selection = document.selection;
  var selectedRange = selection.createRange();
  var selectedLength = selectedRange.text.length;

  // Duplicate selection so we can move range without breaking user selection.
  var fromStart = selectedRange.duplicate();
  fromStart.moveToElementText(node);
  fromStart.setEndPoint('EndToStart', selectedRange);

  var startOffset = fromStart.text.length;
  var endOffset = startOffset + selectedLength;

  return {
    start: startOffset,
    end: endOffset
  };
}

/**
 * @param {DOMElement} node
 * @return {?object}
 */
function getModernOffsets(node) {
  var selection = window.getSelection && window.getSelection();

  if (!selection || selection.rangeCount === 0) {
    return null;
  }

  var anchorNode = selection.anchorNode;
  var anchorOffset = selection.anchorOffset;
  var focusNode = selection.focusNode;
  var focusOffset = selection.focusOffset;

  var currentRange = selection.getRangeAt(0);

  // In Firefox, range.startContainer and range.endContainer can be "anonymous
  // divs", e.g. the up/down buttons on an <input type="number">. Anonymous
  // divs do not seem to expose properties, triggering a "Permission denied
  // error" if any of its properties are accessed. The only seemingly possible
  // way to avoid erroring is to access a property that typically works for
  // non-anonymous divs and catch any error that may otherwise arise. See
  // https://bugzilla.mozilla.org/show_bug.cgi?id=208427
  try {
    /* eslint-disable no-unused-expressions */
    currentRange.startContainer.nodeType;
    currentRange.endContainer.nodeType;
    /* eslint-enable no-unused-expressions */
  } catch (e) {
    return null;
  }

  // If the node and offset values are the same, the selection is collapsed.
  // `Selection.isCollapsed` is available natively, but IE sometimes gets
  // this value wrong.
  var isSelectionCollapsed = isCollapsed(selection.anchorNode, selection.anchorOffset, selection.focusNode, selection.focusOffset);

  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;

  var tempRange = currentRange.cloneRange();
  tempRange.selectNodeContents(node);
  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);

  var isTempRangeCollapsed = isCollapsed(tempRange.startContainer, tempRange.startOffset, tempRange.endContainer, tempRange.endOffset);

  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;
  var end = start + rangeLength;

  // Detect whether the selection is backward.
  var detectionRange = document.createRange();
  detectionRange.setStart(anchorNode, anchorOffset);
  detectionRange.setEnd(focusNode, focusOffset);
  var isBackward = detectionRange.collapsed;

  return {
    start: isBackward ? end : start,
    end: isBackward ? start : end
  };
}

/**
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */
function setIEOffsets(node, offsets) {
  var range = document.selection.createRange().duplicate();
  var start, end;

  if (offsets.end === undefined) {
    start = offsets.start;
    end = start;
  } else if (offsets.start > offsets.end) {
    start = offsets.end;
    end = offsets.start;
  } else {
    start = offsets.start;
    end = offsets.end;
  }

  range.moveToElementText(node);
  range.moveStart('character', start);
  range.setEndPoint('EndToStart', range);
  range.moveEnd('character', end - start);
  range.select();
}

/**
 * In modern non-IE browsers, we can support both forward and backward
 * selections.
 *
 * Note: IE10+ supports the Selection object, but it does not support
 * the `extend` method, which means that even in modern IE, it's not possible
 * to programmatically create a backward selection. Thus, for all IE
 * versions, we use the old IE API to create our selections.
 *
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */
function setModernOffsets(node, offsets) {
  if (!window.getSelection) {
    return;
  }

  var selection = window.getSelection();
  var length = node[getTextContentAccessor()].length;
  var start = Math.min(offsets.start, length);
  var end = offsets.end === undefined ? start : Math.min(offsets.end, length);

  // IE 11 uses modern selection, but doesn't support the extend method.
  // Flip backward selections, so we can set with a single range.
  if (!selection.extend && start > end) {
    var temp = end;
    end = start;
    start = temp;
  }

  var startMarker = getNodeForCharacterOffset(node, start);
  var endMarker = getNodeForCharacterOffset(node, end);

  if (startMarker && endMarker) {
    var range = document.createRange();
    range.setStart(startMarker.node, startMarker.offset);
    selection.removeAllRanges();

    if (start > end) {
      selection.addRange(range);
      selection.extend(endMarker.node, endMarker.offset);
    } else {
      range.setEnd(endMarker.node, endMarker.offset);
      selection.addRange(range);
    }
  }
}

var useIEOffsets = ExecutionEnvironment.canUseDOM && 'selection' in document && !('getSelection' in window);

var ReactDOMSelection = {
  /**
   * @param {DOMElement} node
   */
  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,

  /**
   * @param {DOMElement|DOMTextNode} node
   * @param {object} offsets
   */
  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets
};

module.exports = ReactDOMSelection;

/***/ }),
/* 192 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(4),
    _assign = __webpack_require__(6);

var DOMChildrenOperations = __webpack_require__(59);
var DOMLazyTree = __webpack_require__(30);
var ReactDOMComponentTree = __webpack_require__(7);

var escapeTextContentForBrowser = __webpack_require__(47);
var invariant = __webpack_require__(2);
var validateDOMNesting = __webpack_require__(73);

/**
 * Text nodes violate a couple assumptions that React makes about components:
 *
 *  - When mounting text into the DOM, adjacent text nodes are merged.
 *  - Text nodes cannot be assigned a React root ID.
 *
 * This component is used to wrap strings between comment nodes so that they
 * can undergo the same reconciliation that is applied to elements.
 *
 * TODO: Investigate representing React components in the DOM with text nodes.
 *
 * @class ReactDOMTextComponent
 * @extends ReactComponent
 * @internal
 */
var ReactDOMTextComponent = function ReactDOMTextComponent(text) {
  // TODO: This is really a ReactText (ReactNode), not a ReactElement
  this._currentElement = text;
  this._stringText = '' + text;
  // ReactDOMComponentTree uses these:
  this._hostNode = null;
  this._hostParent = null;

  // Properties
  this._domID = 0;
  this._mountIndex = 0;
  this._closingComment = null;
  this._commentNodes = null;
};

_assign(ReactDOMTextComponent.prototype, {
  /**
   * Creates the markup for this text node. This node is not intended to have
   * any features besides containing text content.
   *
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @return {string} Markup for this text node.
   * @internal
   */
  mountComponent: function mountComponent(transaction, hostParent, hostContainerInfo, context) {
    if (process.env.NODE_ENV !== 'production') {
      var parentInfo;
      if (hostParent != null) {
        parentInfo = hostParent._ancestorInfo;
      } else if (hostContainerInfo != null) {
        parentInfo = hostContainerInfo._ancestorInfo;
      }
      if (parentInfo) {
        // parentInfo should always be present except for the top-level
        // component when server rendering
        validateDOMNesting(null, this._stringText, this, parentInfo);
      }
    }

    var domID = hostContainerInfo._idCounter++;
    var openingValue = ' react-text: ' + domID + ' ';
    var closingValue = ' /react-text ';
    this._domID = domID;
    this._hostParent = hostParent;
    if (transaction.useCreateElement) {
      var ownerDocument = hostContainerInfo._ownerDocument;
      var openingComment = ownerDocument.createComment(openingValue);
      var closingComment = ownerDocument.createComment(closingValue);
      var lazyTree = DOMLazyTree(ownerDocument.createDocumentFragment());
      DOMLazyTree.queueChild(lazyTree, DOMLazyTree(openingComment));
      if (this._stringText) {
        DOMLazyTree.queueChild(lazyTree, DOMLazyTree(ownerDocument.createTextNode(this._stringText)));
      }
      DOMLazyTree.queueChild(lazyTree, DOMLazyTree(closingComment));
      ReactDOMComponentTree.precacheNode(this, openingComment);
      this._closingComment = closingComment;
      return lazyTree;
    } else {
      var escapedText = escapeTextContentForBrowser(this._stringText);

      if (transaction.renderToStaticMarkup) {
        // Normally we'd wrap this between comment nodes for the reasons stated
        // above, but since this is a situation where React won't take over
        // (static pages), we can simply return the text as it is.
        return escapedText;
      }

      return '<!--' + openingValue + '-->' + escapedText + '<!--' + closingValue + '-->';
    }
  },

  /**
   * Updates this component by updating the text content.
   *
   * @param {ReactText} nextText The next text content
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  receiveComponent: function receiveComponent(nextText, transaction) {
    if (nextText !== this._currentElement) {
      this._currentElement = nextText;
      var nextStringText = '' + nextText;
      if (nextStringText !== this._stringText) {
        // TODO: Save this as pending props and use performUpdateIfNecessary
        // and/or updateComponent to do the actual update for consistency with
        // other component types?
        this._stringText = nextStringText;
        var commentNodes = this.getHostNode();
        DOMChildrenOperations.replaceDelimitedText(commentNodes[0], commentNodes[1], nextStringText);
      }
    }
  },

  getHostNode: function getHostNode() {
    var hostNode = this._commentNodes;
    if (hostNode) {
      return hostNode;
    }
    if (!this._closingComment) {
      var openingComment = ReactDOMComponentTree.getNodeFromInstance(this);
      var node = openingComment.nextSibling;
      while (true) {
        !(node != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Missing closing comment for text component %s', this._domID) : _prodInvariant('67', this._domID) : void 0;
        if (node.nodeType === 8 && node.nodeValue === ' /react-text ') {
          this._closingComment = node;
          break;
        }
        node = node.nextSibling;
      }
    }
    hostNode = [this._hostNode, this._closingComment];
    this._commentNodes = hostNode;
    return hostNode;
  },

  unmountComponent: function unmountComponent() {
    this._closingComment = null;
    this._commentNodes = null;
    ReactDOMComponentTree.uncacheNode(this);
  }
});

module.exports = ReactDOMTextComponent;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 193 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(4),
    _assign = __webpack_require__(6);

var LinkedValueUtils = __webpack_require__(63);
var ReactDOMComponentTree = __webpack_require__(7);
var ReactUpdates = __webpack_require__(19);

var invariant = __webpack_require__(2);
var warning = __webpack_require__(3);

var didWarnValueLink = false;
var didWarnValDefaultVal = false;

function forceUpdateIfMounted() {
  if (this._rootNodeID) {
    // DOM component is still mounted; update
    ReactDOMTextarea.updateWrapper(this);
  }
}

/**
 * Implements a <textarea> host component that allows setting `value`, and
 * `defaultValue`. This differs from the traditional DOM API because value is
 * usually set as PCDATA children.
 *
 * If `value` is not supplied (or null/undefined), user actions that affect the
 * value will trigger updates to the element.
 *
 * If `value` is supplied (and not null/undefined), the rendered element will
 * not trigger updates to the element. Instead, the `value` prop must change in
 * order for the rendered element to be updated.
 *
 * The rendered element will be initialized with an empty value, the prop
 * `defaultValue` if specified, or the children content (deprecated).
 */
var ReactDOMTextarea = {
  getHostProps: function getHostProps(inst, props) {
    !(props.dangerouslySetInnerHTML == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`dangerouslySetInnerHTML` does not make sense on <textarea>.') : _prodInvariant('91') : void 0;

    // Always set children to the same thing. In IE9, the selection range will
    // get reset if `textContent` is mutated.  We could add a check in setTextContent
    // to only set the value if/when the value differs from the node value (which would
    // completely solve this IE9 bug), but Sebastian+Ben seemed to like this solution.
    // The value can be a boolean or object so that's why it's forced to be a string.
    var hostProps = _assign({}, props, {
      value: undefined,
      defaultValue: undefined,
      children: '' + inst._wrapperState.initialValue,
      onChange: inst._wrapperState.onChange
    });

    return hostProps;
  },

  mountWrapper: function mountWrapper(inst, props) {
    if (process.env.NODE_ENV !== 'production') {
      LinkedValueUtils.checkPropTypes('textarea', props, inst._currentElement._owner);
      if (props.valueLink !== undefined && !didWarnValueLink) {
        process.env.NODE_ENV !== 'production' ? warning(false, '`valueLink` prop on `textarea` is deprecated; set `value` and `onChange` instead.') : void 0;
        didWarnValueLink = true;
      }
      if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {
        process.env.NODE_ENV !== 'production' ? warning(false, 'Textarea elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled textarea ' + 'and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components') : void 0;
        didWarnValDefaultVal = true;
      }
    }

    var value = LinkedValueUtils.getValue(props);
    var initialValue = value;

    // Only bother fetching default value if we're going to use it
    if (value == null) {
      var defaultValue = props.defaultValue;
      // TODO (yungsters): Remove support for children content in <textarea>.
      var children = props.children;
      if (children != null) {
        if (process.env.NODE_ENV !== 'production') {
          process.env.NODE_ENV !== 'production' ? warning(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.') : void 0;
        }
        !(defaultValue == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'If you supply `defaultValue` on a <textarea>, do not pass children.') : _prodInvariant('92') : void 0;
        if (Array.isArray(children)) {
          !(children.length <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, '<textarea> can only have at most one child.') : _prodInvariant('93') : void 0;
          children = children[0];
        }

        defaultValue = '' + children;
      }
      if (defaultValue == null) {
        defaultValue = '';
      }
      initialValue = defaultValue;
    }

    inst._wrapperState = {
      initialValue: '' + initialValue,
      listeners: null,
      onChange: _handleChange.bind(inst)
    };
  },

  updateWrapper: function updateWrapper(inst) {
    var props = inst._currentElement.props;

    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
    var value = LinkedValueUtils.getValue(props);
    if (value != null) {
      // Cast `value` to a string to ensure the value is set correctly. While
      // browsers typically do this as necessary, jsdom doesn't.
      var newValue = '' + value;

      // To avoid side effects (such as losing text selection), only set value if changed
      if (newValue !== node.value) {
        node.value = newValue;
      }
      if (props.defaultValue == null) {
        node.defaultValue = newValue;
      }
    }
    if (props.defaultValue != null) {
      node.defaultValue = props.defaultValue;
    }
  },

  postMountWrapper: function postMountWrapper(inst) {
    // This is in postMount because we need access to the DOM node, which is not
    // available until after the component has mounted.
    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
    var textContent = node.textContent;

    // Only set node.value if textContent is equal to the expected
    // initial value. In IE10/IE11 there is a bug where the placeholder attribute
    // will populate textContent as well.
    // https://developer.microsoft.com/microsoft-edge/platform/issues/101525/
    if (textContent === inst._wrapperState.initialValue) {
      node.value = textContent;
    }
  }
};

function _handleChange(event) {
  var props = this._currentElement.props;
  var returnValue = LinkedValueUtils.executeOnChange(props, event);
  ReactUpdates.asap(forceUpdateIfMounted, this);
  return returnValue;
}

module.exports = ReactDOMTextarea;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 194 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(4);

var invariant = __webpack_require__(2);

/**
 * Return the lowest common ancestor of A and B, or null if they are in
 * different trees.
 */
function getLowestCommonAncestor(instA, instB) {
  !('_hostNode' in instA) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;
  !('_hostNode' in instB) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;

  var depthA = 0;
  for (var tempA = instA; tempA; tempA = tempA._hostParent) {
    depthA++;
  }
  var depthB = 0;
  for (var tempB = instB; tempB; tempB = tempB._hostParent) {
    depthB++;
  }

  // If A is deeper, crawl up.
  while (depthA - depthB > 0) {
    instA = instA._hostParent;
    depthA--;
  }

  // If B is deeper, crawl up.
  while (depthB - depthA > 0) {
    instB = instB._hostParent;
    depthB--;
  }

  // Walk in lockstep until we find a match.
  var depth = depthA;
  while (depth--) {
    if (instA === instB) {
      return instA;
    }
    instA = instA._hostParent;
    instB = instB._hostParent;
  }
  return null;
}

/**
 * Return if A is an ancestor of B.
 */
function isAncestor(instA, instB) {
  !('_hostNode' in instA) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'isAncestor: Invalid argument.') : _prodInvariant('35') : void 0;
  !('_hostNode' in instB) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'isAncestor: Invalid argument.') : _prodInvariant('35') : void 0;

  while (instB) {
    if (instB === instA) {
      return true;
    }
    instB = instB._hostParent;
  }
  return false;
}

/**
 * Return the parent instance of the passed-in instance.
 */
function getParentInstance(inst) {
  !('_hostNode' in inst) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getParentInstance: Invalid argument.') : _prodInvariant('36') : void 0;

  return inst._hostParent;
}

/**
 * Simulates the traversal of a two-phase, capture/bubble event dispatch.
 */
function traverseTwoPhase(inst, fn, arg) {
  var path = [];
  while (inst) {
    path.push(inst);
    inst = inst._hostParent;
  }
  var i;
  for (i = path.length; i-- > 0;) {
    fn(path[i], 'captured', arg);
  }
  for (i = 0; i < path.length; i++) {
    fn(path[i], 'bubbled', arg);
  }
}

/**
 * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
 * should would receive a `mouseEnter` or `mouseLeave` event.
 *
 * Does not invoke the callback on the nearest common ancestor because nothing
 * "entered" or "left" that element.
 */
function traverseEnterLeave(from, to, fn, argFrom, argTo) {
  var common = from && to ? getLowestCommonAncestor(from, to) : null;
  var pathFrom = [];
  while (from && from !== common) {
    pathFrom.push(from);
    from = from._hostParent;
  }
  var pathTo = [];
  while (to && to !== common) {
    pathTo.push(to);
    to = to._hostParent;
  }
  var i;
  for (i = 0; i < pathFrom.length; i++) {
    fn(pathFrom[i], 'bubbled', argFrom);
  }
  for (i = pathTo.length; i-- > 0;) {
    fn(pathTo[i], 'captured', argTo);
  }
}

module.exports = {
  isAncestor: isAncestor,
  getLowestCommonAncestor: getLowestCommonAncestor,
  getParentInstance: getParentInstance,
  traverseTwoPhase: traverseTwoPhase,
  traverseEnterLeave: traverseEnterLeave
};
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 195 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var DOMProperty = __webpack_require__(27);
var EventPluginRegistry = __webpack_require__(43);
var ReactComponentTreeHook = __webpack_require__(12);

var warning = __webpack_require__(3);

if (process.env.NODE_ENV !== 'production') {
  var reactProps = {
    children: true,
    dangerouslySetInnerHTML: true,
    key: true,
    ref: true,

    autoFocus: true,
    defaultValue: true,
    valueLink: true,
    defaultChecked: true,
    checkedLink: true,
    innerHTML: true,
    suppressContentEditableWarning: true,
    onFocusIn: true,
    onFocusOut: true
  };
  var warnedProperties = {};

  var validateProperty = function validateProperty(tagName, name, debugID) {
    if (DOMProperty.properties.hasOwnProperty(name) || DOMProperty.isCustomAttribute(name)) {
      return true;
    }
    if (reactProps.hasOwnProperty(name) && reactProps[name] || warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
      return true;
    }
    if (EventPluginRegistry.registrationNameModules.hasOwnProperty(name)) {
      return true;
    }
    warnedProperties[name] = true;
    var lowerCasedName = name.toLowerCase();

    // data-* attributes should be lowercase; suggest the lowercase version
    var standardName = DOMProperty.isCustomAttribute(lowerCasedName) ? lowerCasedName : DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ? DOMProperty.getPossibleStandardName[lowerCasedName] : null;

    var registrationName = EventPluginRegistry.possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? EventPluginRegistry.possibleRegistrationNames[lowerCasedName] : null;

    if (standardName != null) {
      process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown DOM property %s. Did you mean %s?%s', name, standardName, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
      return true;
    } else if (registrationName != null) {
      process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown event handler property %s. Did you mean `%s`?%s', name, registrationName, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
      return true;
    } else {
      // We were unable to guess which prop the user intended.
      // It is likely that the user was just blindly spreading/forwarding props
      // Components should be careful to only render valid props/attributes.
      // Warning will be invoked in warnUnknownProperties to allow grouping.
      return false;
    }
  };
}

var warnUnknownProperties = function warnUnknownProperties(debugID, element) {
  var unknownProps = [];
  for (var key in element.props) {
    var isValid = validateProperty(element.type, key, debugID);
    if (!isValid) {
      unknownProps.push(key);
    }
  }

  var unknownPropString = unknownProps.map(function (prop) {
    return '`' + prop + '`';
  }).join(', ');

  if (unknownProps.length === 1) {
    process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown prop %s on <%s> tag. Remove this prop from the element. ' + 'For details, see https://fb.me/react-unknown-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
  } else if (unknownProps.length > 1) {
    process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown props %s on <%s> tag. Remove these props from the element. ' + 'For details, see https://fb.me/react-unknown-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
  }
};

function handleElement(debugID, element) {
  if (element == null || typeof element.type !== 'string') {
    return;
  }
  if (element.type.indexOf('-') >= 0 || element.props.is) {
    return;
  }
  warnUnknownProperties(debugID, element);
}

var ReactDOMUnknownPropertyHook = {
  onBeforeMountComponent: function onBeforeMountComponent(debugID, element) {
    handleElement(debugID, element);
  },
  onBeforeUpdateComponent: function onBeforeUpdateComponent(debugID, element) {
    handleElement(debugID, element);
  }
};

module.exports = ReactDOMUnknownPropertyHook;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 196 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var ReactInvalidSetStateWarningHook = __webpack_require__(204);
var ReactHostOperationHistoryHook = __webpack_require__(202);
var ReactComponentTreeHook = __webpack_require__(12);
var ExecutionEnvironment = __webpack_require__(9);

var performanceNow = __webpack_require__(164);
var warning = __webpack_require__(3);

var hooks = [];
var didHookThrowForEvent = {};

function callHook(event, fn, context, arg1, arg2, arg3, arg4, arg5) {
  try {
    fn.call(context, arg1, arg2, arg3, arg4, arg5);
  } catch (e) {
    process.env.NODE_ENV !== 'production' ? warning(didHookThrowForEvent[event], 'Exception thrown by hook while handling %s: %s', event, e + '\n' + e.stack) : void 0;
    didHookThrowForEvent[event] = true;
  }
}

function emitEvent(event, arg1, arg2, arg3, arg4, arg5) {
  for (var i = 0; i < hooks.length; i++) {
    var hook = hooks[i];
    var fn = hook[event];
    if (fn) {
      callHook(event, fn, hook, arg1, arg2, arg3, arg4, arg5);
    }
  }
}

var _isProfiling = false;
var flushHistory = [];
var lifeCycleTimerStack = [];
var currentFlushNesting = 0;
var currentFlushMeasurements = [];
var currentFlushStartTime = 0;
var currentTimerDebugID = null;
var currentTimerStartTime = 0;
var currentTimerNestedFlushDuration = 0;
var currentTimerType = null;

var lifeCycleTimerHasWarned = false;

function clearHistory() {
  ReactComponentTreeHook.purgeUnmountedComponents();
  ReactHostOperationHistoryHook.clearHistory();
}

function getTreeSnapshot(registeredIDs) {
  return registeredIDs.reduce(function (tree, id) {
    var ownerID = ReactComponentTreeHook.getOwnerID(id);
    var parentID = ReactComponentTreeHook.getParentID(id);
    tree[id] = {
      displayName: ReactComponentTreeHook.getDisplayName(id),
      text: ReactComponentTreeHook.getText(id),
      updateCount: ReactComponentTreeHook.getUpdateCount(id),
      childIDs: ReactComponentTreeHook.getChildIDs(id),
      // Text nodes don't have owners but this is close enough.
      ownerID: ownerID || parentID && ReactComponentTreeHook.getOwnerID(parentID) || 0,
      parentID: parentID
    };
    return tree;
  }, {});
}

function resetMeasurements() {
  var previousStartTime = currentFlushStartTime;
  var previousMeasurements = currentFlushMeasurements;
  var previousOperations = ReactHostOperationHistoryHook.getHistory();

  if (currentFlushNesting === 0) {
    currentFlushStartTime = 0;
    currentFlushMeasurements = [];
    clearHistory();
    return;
  }

  if (previousMeasurements.length || previousOperations.length) {
    var registeredIDs = ReactComponentTreeHook.getRegisteredIDs();
    flushHistory.push({
      duration: performanceNow() - previousStartTime,
      measurements: previousMeasurements || [],
      operations: previousOperations || [],
      treeSnapshot: getTreeSnapshot(registeredIDs)
    });
  }

  clearHistory();
  currentFlushStartTime = performanceNow();
  currentFlushMeasurements = [];
}

function checkDebugID(debugID) {
  var allowRoot = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

  if (allowRoot && debugID === 0) {
    return;
  }
  if (!debugID) {
    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDebugTool: debugID may not be empty.') : void 0;
  }
}

function beginLifeCycleTimer(debugID, timerType) {
  if (currentFlushNesting === 0) {
    return;
  }
  if (currentTimerType && !lifeCycleTimerHasWarned) {
    process.env.NODE_ENV !== 'production' ? warning(false, 'There is an internal error in the React performance measurement code. ' + 'Did not expect %s timer to start while %s timer is still in ' + 'progress for %s instance.', timerType, currentTimerType || 'no', debugID === currentTimerDebugID ? 'the same' : 'another') : void 0;
    lifeCycleTimerHasWarned = true;
  }
  currentTimerStartTime = performanceNow();
  currentTimerNestedFlushDuration = 0;
  currentTimerDebugID = debugID;
  currentTimerType = timerType;
}

function endLifeCycleTimer(debugID, timerType) {
  if (currentFlushNesting === 0) {
    return;
  }
  if (currentTimerType !== timerType && !lifeCycleTimerHasWarned) {
    process.env.NODE_ENV !== 'production' ? warning(false, 'There is an internal error in the React performance measurement code. ' + 'We did not expect %s timer to stop while %s timer is still in ' + 'progress for %s instance. Please report this as a bug in React.', timerType, currentTimerType || 'no', debugID === currentTimerDebugID ? 'the same' : 'another') : void 0;
    lifeCycleTimerHasWarned = true;
  }
  if (_isProfiling) {
    currentFlushMeasurements.push({
      timerType: timerType,
      instanceID: debugID,
      duration: performanceNow() - currentTimerStartTime - currentTimerNestedFlushDuration
    });
  }
  currentTimerStartTime = 0;
  currentTimerNestedFlushDuration = 0;
  currentTimerDebugID = null;
  currentTimerType = null;
}

function pauseCurrentLifeCycleTimer() {
  var currentTimer = {
    startTime: currentTimerStartTime,
    nestedFlushStartTime: performanceNow(),
    debugID: currentTimerDebugID,
    timerType: currentTimerType
  };
  lifeCycleTimerStack.push(currentTimer);
  currentTimerStartTime = 0;
  currentTimerNestedFlushDuration = 0;
  currentTimerDebugID = null;
  currentTimerType = null;
}

function resumeCurrentLifeCycleTimer() {
  var _lifeCycleTimerStack$ = lifeCycleTimerStack.pop(),
      startTime = _lifeCycleTimerStack$.startTime,
      nestedFlushStartTime = _lifeCycleTimerStack$.nestedFlushStartTime,
      debugID = _lifeCycleTimerStack$.debugID,
      timerType = _lifeCycleTimerStack$.timerType;

  var nestedFlushDuration = performanceNow() - nestedFlushStartTime;
  currentTimerStartTime = startTime;
  currentTimerNestedFlushDuration += nestedFlushDuration;
  currentTimerDebugID = debugID;
  currentTimerType = timerType;
}

var lastMarkTimeStamp = 0;
var canUsePerformanceMeasure = typeof performance !== 'undefined' && typeof performance.mark === 'function' && typeof performance.clearMarks === 'function' && typeof performance.measure === 'function' && typeof performance.clearMeasures === 'function';

function shouldMark(debugID) {
  if (!_isProfiling || !canUsePerformanceMeasure) {
    return false;
  }
  var element = ReactComponentTreeHook.getElement(debugID);
  if (element == null || (typeof element === 'undefined' ? 'undefined' : _typeof(element)) !== 'object') {
    return false;
  }
  var isHostElement = typeof element.type === 'string';
  if (isHostElement) {
    return false;
  }
  return true;
}

function markBegin(debugID, markType) {
  if (!shouldMark(debugID)) {
    return;
  }

  var markName = debugID + '::' + markType;
  lastMarkTimeStamp = performanceNow();
  performance.mark(markName);
}

function markEnd(debugID, markType) {
  if (!shouldMark(debugID)) {
    return;
  }

  var markName = debugID + '::' + markType;
  var displayName = ReactComponentTreeHook.getDisplayName(debugID) || 'Unknown';

  // Chrome has an issue of dropping markers recorded too fast:
  // https://bugs.chromium.org/p/chromium/issues/detail?id=640652
  // To work around this, we will not report very small measurements.
  // I determined the magic number by tweaking it back and forth.
  // 0.05ms was enough to prevent the issue, but I set it to 0.1ms to be safe.
  // When the bug is fixed, we can `measure()` unconditionally if we want to.
  var timeStamp = performanceNow();
  if (timeStamp - lastMarkTimeStamp > 0.1) {
    var measurementName = displayName + ' [' + markType + ']';
    performance.measure(measurementName, markName);
  }

  performance.clearMarks(markName);
  if (measurementName) {
    performance.clearMeasures(measurementName);
  }
}

var ReactDebugTool = {
  addHook: function addHook(hook) {
    hooks.push(hook);
  },
  removeHook: function removeHook(hook) {
    for (var i = 0; i < hooks.length; i++) {
      if (hooks[i] === hook) {
        hooks.splice(i, 1);
        i--;
      }
    }
  },
  isProfiling: function isProfiling() {
    return _isProfiling;
  },
  beginProfiling: function beginProfiling() {
    if (_isProfiling) {
      return;
    }

    _isProfiling = true;
    flushHistory.length = 0;
    resetMeasurements();
    ReactDebugTool.addHook(ReactHostOperationHistoryHook);
  },
  endProfiling: function endProfiling() {
    if (!_isProfiling) {
      return;
    }

    _isProfiling = false;
    resetMeasurements();
    ReactDebugTool.removeHook(ReactHostOperationHistoryHook);
  },
  getFlushHistory: function getFlushHistory() {
    return flushHistory;
  },
  onBeginFlush: function onBeginFlush() {
    currentFlushNesting++;
    resetMeasurements();
    pauseCurrentLifeCycleTimer();
    emitEvent('onBeginFlush');
  },
  onEndFlush: function onEndFlush() {
    resetMeasurements();
    currentFlushNesting--;
    resumeCurrentLifeCycleTimer();
    emitEvent('onEndFlush');
  },
  onBeginLifeCycleTimer: function onBeginLifeCycleTimer(debugID, timerType) {
    checkDebugID(debugID);
    emitEvent('onBeginLifeCycleTimer', debugID, timerType);
    markBegin(debugID, timerType);
    beginLifeCycleTimer(debugID, timerType);
  },
  onEndLifeCycleTimer: function onEndLifeCycleTimer(debugID, timerType) {
    checkDebugID(debugID);
    endLifeCycleTimer(debugID, timerType);
    markEnd(debugID, timerType);
    emitEvent('onEndLifeCycleTimer', debugID, timerType);
  },
  onBeginProcessingChildContext: function onBeginProcessingChildContext() {
    emitEvent('onBeginProcessingChildContext');
  },
  onEndProcessingChildContext: function onEndProcessingChildContext() {
    emitEvent('onEndProcessingChildContext');
  },
  onHostOperation: function onHostOperation(operation) {
    checkDebugID(operation.instanceID);
    emitEvent('onHostOperation', operation);
  },
  onSetState: function onSetState() {
    emitEvent('onSetState');
  },
  onSetChildren: function onSetChildren(debugID, childDebugIDs) {
    checkDebugID(debugID);
    childDebugIDs.forEach(checkDebugID);
    emitEvent('onSetChildren', debugID, childDebugIDs);
  },
  onBeforeMountComponent: function onBeforeMountComponent(debugID, element, parentDebugID) {
    checkDebugID(debugID);
    checkDebugID(parentDebugID, true);
    emitEvent('onBeforeMountComponent', debugID, element, parentDebugID);
    markBegin(debugID, 'mount');
  },
  onMountComponent: function onMountComponent(debugID) {
    checkDebugID(debugID);
    markEnd(debugID, 'mount');
    emitEvent('onMountComponent', debugID);
  },
  onBeforeUpdateComponent: function onBeforeUpdateComponent(debugID, element) {
    checkDebugID(debugID);
    emitEvent('onBeforeUpdateComponent', debugID, element);
    markBegin(debugID, 'update');
  },
  onUpdateComponent: function onUpdateComponent(debugID) {
    checkDebugID(debugID);
    markEnd(debugID, 'update');
    emitEvent('onUpdateComponent', debugID);
  },
  onBeforeUnmountComponent: function onBeforeUnmountComponent(debugID) {
    checkDebugID(debugID);
    emitEvent('onBeforeUnmountComponent', debugID);
    markBegin(debugID, 'unmount');
  },
  onUnmountComponent: function onUnmountComponent(debugID) {
    checkDebugID(debugID);
    markEnd(debugID, 'unmount');
    emitEvent('onUnmountComponent', debugID);
  },
  onTestEvent: function onTestEvent() {
    emitEvent('onTestEvent');
  }
};

// TODO remove these when RN/www gets updated
ReactDebugTool.addDevtool = ReactDebugTool.addHook;
ReactDebugTool.removeDevtool = ReactDebugTool.removeHook;

ReactDebugTool.addHook(ReactInvalidSetStateWarningHook);
ReactDebugTool.addHook(ReactComponentTreeHook);
var url = ExecutionEnvironment.canUseDOM && window.location.href || '';
if (/[?&]react_perf\b/.test(url)) {
  ReactDebugTool.beginProfiling();
}

module.exports = ReactDebugTool;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 197 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(6);

var ReactUpdates = __webpack_require__(19);
var Transaction = __webpack_require__(46);

var emptyFunction = __webpack_require__(17);

var RESET_BATCHED_UPDATES = {
  initialize: emptyFunction,
  close: function close() {
    ReactDefaultBatchingStrategy.isBatchingUpdates = false;
  }
};

var FLUSH_BATCHED_UPDATES = {
  initialize: emptyFunction,
  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)
};

var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];

function ReactDefaultBatchingStrategyTransaction() {
  this.reinitializeTransaction();
}

_assign(ReactDefaultBatchingStrategyTransaction.prototype, Transaction, {
  getTransactionWrappers: function getTransactionWrappers() {
    return TRANSACTION_WRAPPERS;
  }
});

var transaction = new ReactDefaultBatchingStrategyTransaction();

var ReactDefaultBatchingStrategy = {
  isBatchingUpdates: false,

  /**
   * Call the provided function in a context within which calls to `setState`
   * and friends are batched such that components aren't updated unnecessarily.
   */
  batchedUpdates: function batchedUpdates(callback, a, b, c, d, e) {
    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;

    ReactDefaultBatchingStrategy.isBatchingUpdates = true;

    // The code is written this way to avoid extra allocations
    if (alreadyBatchingUpdates) {
      return callback(a, b, c, d, e);
    } else {
      return transaction.perform(callback, null, a, b, c, d, e);
    }
  }
};

module.exports = ReactDefaultBatchingStrategy;

/***/ }),
/* 198 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ARIADOMPropertyConfig = __webpack_require__(168);
var BeforeInputEventPlugin = __webpack_require__(170);
var ChangeEventPlugin = __webpack_require__(172);
var DefaultEventPluginOrder = __webpack_require__(174);
var EnterLeaveEventPlugin = __webpack_require__(175);
var HTMLDOMPropertyConfig = __webpack_require__(177);
var ReactComponentBrowserEnvironment = __webpack_require__(179);
var ReactDOMComponent = __webpack_require__(182);
var ReactDOMComponentTree = __webpack_require__(7);
var ReactDOMEmptyComponent = __webpack_require__(184);
var ReactDOMTreeTraversal = __webpack_require__(194);
var ReactDOMTextComponent = __webpack_require__(192);
var ReactDefaultBatchingStrategy = __webpack_require__(197);
var ReactEventListener = __webpack_require__(201);
var ReactInjection = __webpack_require__(203);
var ReactReconcileTransaction = __webpack_require__(209);
var SVGDOMPropertyConfig = __webpack_require__(214);
var SelectEventPlugin = __webpack_require__(215);
var SimpleEventPlugin = __webpack_require__(216);

var alreadyInjected = false;

function inject() {
  if (alreadyInjected) {
    // TODO: This is currently true because these injections are shared between
    // the client and the server package. They should be built independently
    // and not share any injection state. Then this problem will be solved.
    return;
  }
  alreadyInjected = true;

  ReactInjection.EventEmitter.injectReactEventListener(ReactEventListener);

  /**
   * Inject modules for resolving DOM hierarchy and plugin ordering.
   */
  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);
  ReactInjection.EventPluginUtils.injectComponentTree(ReactDOMComponentTree);
  ReactInjection.EventPluginUtils.injectTreeTraversal(ReactDOMTreeTraversal);

  /**
   * Some important event plugins included by default (without having to require
   * them).
   */
  ReactInjection.EventPluginHub.injectEventPluginsByName({
    SimpleEventPlugin: SimpleEventPlugin,
    EnterLeaveEventPlugin: EnterLeaveEventPlugin,
    ChangeEventPlugin: ChangeEventPlugin,
    SelectEventPlugin: SelectEventPlugin,
    BeforeInputEventPlugin: BeforeInputEventPlugin
  });

  ReactInjection.HostComponent.injectGenericComponentClass(ReactDOMComponent);

  ReactInjection.HostComponent.injectTextComponentClass(ReactDOMTextComponent);

  ReactInjection.DOMProperty.injectDOMPropertyConfig(ARIADOMPropertyConfig);
  ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
  ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);

  ReactInjection.EmptyComponent.injectEmptyComponentFactory(function (instantiate) {
    return new ReactDOMEmptyComponent(instantiate);
  });

  ReactInjection.Updates.injectReconcileTransaction(ReactReconcileTransaction);
  ReactInjection.Updates.injectBatchingStrategy(ReactDefaultBatchingStrategy);

  ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);
}

module.exports = {
  inject: inject
};

/***/ }),
/* 199 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



// The Symbol used to tag the ReactElement type. If there is no native Symbol
// nor polyfill, then a plain number is used for performance.

var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;

module.exports = REACT_ELEMENT_TYPE;

/***/ }),
/* 200 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var EventPluginHub = __webpack_require__(36);

function runEventQueueInBatch(events) {
  EventPluginHub.enqueueEvents(events);
  EventPluginHub.processEventQueue(false);
}

var ReactEventEmitterMixin = {
  /**
   * Streams a fired top-level event to `EventPluginHub` where plugins have the
   * opportunity to create `ReactEvent`s to be dispatched.
   */
  handleTopLevel: function handleTopLevel(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    var events = EventPluginHub.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
    runEventQueueInBatch(events);
  }
};

module.exports = ReactEventEmitterMixin;

/***/ }),
/* 201 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(6);

var EventListener = __webpack_require__(81);
var ExecutionEnvironment = __webpack_require__(9);
var PooledClass = __webpack_require__(28);
var ReactDOMComponentTree = __webpack_require__(7);
var ReactUpdates = __webpack_require__(19);

var getEventTarget = __webpack_require__(70);
var getUnboundedScrollPosition = __webpack_require__(157);

/**
 * Find the deepest React component completely containing the root of the
 * passed-in instance (for use when entire React trees are nested within each
 * other). If React trees are not nested, returns null.
 */
function findParent(inst) {
  // TODO: It may be a good idea to cache this to prevent unnecessary DOM
  // traversal, but caching is difficult to do correctly without using a
  // mutation observer to listen for all DOM changes.
  while (inst._hostParent) {
    inst = inst._hostParent;
  }
  var rootNode = ReactDOMComponentTree.getNodeFromInstance(inst);
  var container = rootNode.parentNode;
  return ReactDOMComponentTree.getClosestInstanceFromNode(container);
}

// Used to store ancestor hierarchy in top level callback
function TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {
  this.topLevelType = topLevelType;
  this.nativeEvent = nativeEvent;
  this.ancestors = [];
}
_assign(TopLevelCallbackBookKeeping.prototype, {
  destructor: function destructor() {
    this.topLevelType = null;
    this.nativeEvent = null;
    this.ancestors.length = 0;
  }
});
PooledClass.addPoolingTo(TopLevelCallbackBookKeeping, PooledClass.twoArgumentPooler);

function handleTopLevelImpl(bookKeeping) {
  var nativeEventTarget = getEventTarget(bookKeeping.nativeEvent);
  var targetInst = ReactDOMComponentTree.getClosestInstanceFromNode(nativeEventTarget);

  // Loop through the hierarchy, in case there's any nested components.
  // It's important that we build the array of ancestors before calling any
  // event handlers, because event handlers can modify the DOM, leading to
  // inconsistencies with ReactMount's node cache. See #1105.
  var ancestor = targetInst;
  do {
    bookKeeping.ancestors.push(ancestor);
    ancestor = ancestor && findParent(ancestor);
  } while (ancestor);

  for (var i = 0; i < bookKeeping.ancestors.length; i++) {
    targetInst = bookKeeping.ancestors[i];
    ReactEventListener._handleTopLevel(bookKeeping.topLevelType, targetInst, bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
  }
}

function scrollValueMonitor(cb) {
  var scrollPosition = getUnboundedScrollPosition(window);
  cb(scrollPosition);
}

var ReactEventListener = {
  _enabled: true,
  _handleTopLevel: null,

  WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,

  setHandleTopLevel: function setHandleTopLevel(handleTopLevel) {
    ReactEventListener._handleTopLevel = handleTopLevel;
  },

  setEnabled: function setEnabled(enabled) {
    ReactEventListener._enabled = !!enabled;
  },

  isEnabled: function isEnabled() {
    return ReactEventListener._enabled;
  },

  /**
   * Traps top-level events by using event bubbling.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {string} handlerBaseName Event name (e.g. "click").
   * @param {object} element Element on which to attach listener.
   * @return {?object} An object with a remove function which will forcefully
   *                  remove the listener.
   * @internal
   */
  trapBubbledEvent: function trapBubbledEvent(topLevelType, handlerBaseName, element) {
    if (!element) {
      return null;
    }
    return EventListener.listen(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
  },

  /**
   * Traps a top-level event by using event capturing.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {string} handlerBaseName Event name (e.g. "click").
   * @param {object} element Element on which to attach listener.
   * @return {?object} An object with a remove function which will forcefully
   *                  remove the listener.
   * @internal
   */
  trapCapturedEvent: function trapCapturedEvent(topLevelType, handlerBaseName, element) {
    if (!element) {
      return null;
    }
    return EventListener.capture(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
  },

  monitorScrollValue: function monitorScrollValue(refresh) {
    var callback = scrollValueMonitor.bind(null, refresh);
    EventListener.listen(window, 'scroll', callback);
  },

  dispatchEvent: function dispatchEvent(topLevelType, nativeEvent) {
    if (!ReactEventListener._enabled) {
      return;
    }

    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(topLevelType, nativeEvent);
    try {
      // Event queue being processed in the same cycle allows
      // `preventDefault`.
      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);
    } finally {
      TopLevelCallbackBookKeeping.release(bookKeeping);
    }
  }
};

module.exports = ReactEventListener;

/***/ }),
/* 202 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var history = [];

var ReactHostOperationHistoryHook = {
  onHostOperation: function onHostOperation(operation) {
    history.push(operation);
  },
  clearHistory: function clearHistory() {
    if (ReactHostOperationHistoryHook._preventClearing) {
      // Should only be used for tests.
      return;
    }

    history = [];
  },
  getHistory: function getHistory() {
    return history;
  }
};

module.exports = ReactHostOperationHistoryHook;

/***/ }),
/* 203 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var DOMProperty = __webpack_require__(27);
var EventPluginHub = __webpack_require__(36);
var EventPluginUtils = __webpack_require__(61);
var ReactComponentEnvironment = __webpack_require__(64);
var ReactEmptyComponent = __webpack_require__(91);
var ReactBrowserEventEmitter = __webpack_require__(44);
var ReactHostComponent = __webpack_require__(93);
var ReactUpdates = __webpack_require__(19);

var ReactInjection = {
  Component: ReactComponentEnvironment.injection,
  DOMProperty: DOMProperty.injection,
  EmptyComponent: ReactEmptyComponent.injection,
  EventPluginHub: EventPluginHub.injection,
  EventPluginUtils: EventPluginUtils.injection,
  EventEmitter: ReactBrowserEventEmitter.injection,
  HostComponent: ReactHostComponent.injection,
  Updates: ReactUpdates.injection
};

module.exports = ReactInjection;

/***/ }),
/* 204 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var warning = __webpack_require__(3);

if (process.env.NODE_ENV !== 'production') {
  var processingChildContext = false;

  var warnInvalidSetState = function warnInvalidSetState() {
    process.env.NODE_ENV !== 'production' ? warning(!processingChildContext, 'setState(...): Cannot call setState() inside getChildContext()') : void 0;
  };
}

var ReactInvalidSetStateWarningHook = {
  onBeginProcessingChildContext: function onBeginProcessingChildContext() {
    processingChildContext = true;
  },
  onEndProcessingChildContext: function onEndProcessingChildContext() {
    processingChildContext = false;
  },
  onSetState: function onSetState() {
    warnInvalidSetState();
  }
};

module.exports = ReactInvalidSetStateWarningHook;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 205 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var adler32 = __webpack_require__(227);

var TAG_END = /\/?>/;
var COMMENT_START = /^<\!\-\-/;

var ReactMarkupChecksum = {
  CHECKSUM_ATTR_NAME: 'data-react-checksum',

  /**
   * @param {string} markup Markup string
   * @return {string} Markup string with checksum attribute attached
   */
  addChecksumToMarkup: function addChecksumToMarkup(markup) {
    var checksum = adler32(markup);

    // Add checksum (handle both parent tags, comments and self-closing tags)
    if (COMMENT_START.test(markup)) {
      return markup;
    } else {
      return markup.replace(TAG_END, ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '"$&');
    }
  },

  /**
   * @param {string} markup to use
   * @param {DOMElement} element root React element
   * @returns {boolean} whether or not the markup is the same
   */
  canReuseMarkup: function canReuseMarkup(markup, element) {
    var existingChecksum = element.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
    var markupChecksum = adler32(markup);
    return markupChecksum === existingChecksum;
  }
};

module.exports = ReactMarkupChecksum;

/***/ }),
/* 206 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(4);

var ReactComponentEnvironment = __webpack_require__(64);
var ReactInstanceMap = __webpack_require__(38);
var ReactInstrumentation = __webpack_require__(15);

var ReactCurrentOwner = __webpack_require__(20);
var ReactReconciler = __webpack_require__(31);
var ReactChildReconciler = __webpack_require__(178);

var emptyFunction = __webpack_require__(17);
var flattenChildren = __webpack_require__(231);
var invariant = __webpack_require__(2);

/**
 * Make an update for markup to be rendered and inserted at a supplied index.
 *
 * @param {string} markup Markup that renders into an element.
 * @param {number} toIndex Destination index.
 * @private
 */
function makeInsertMarkup(markup, afterNode, toIndex) {
  // NOTE: Null values reduce hidden classes.
  return {
    type: 'INSERT_MARKUP',
    content: markup,
    fromIndex: null,
    fromNode: null,
    toIndex: toIndex,
    afterNode: afterNode
  };
}

/**
 * Make an update for moving an existing element to another index.
 *
 * @param {number} fromIndex Source index of the existing element.
 * @param {number} toIndex Destination index of the element.
 * @private
 */
function makeMove(child, afterNode, toIndex) {
  // NOTE: Null values reduce hidden classes.
  return {
    type: 'MOVE_EXISTING',
    content: null,
    fromIndex: child._mountIndex,
    fromNode: ReactReconciler.getHostNode(child),
    toIndex: toIndex,
    afterNode: afterNode
  };
}

/**
 * Make an update for removing an element at an index.
 *
 * @param {number} fromIndex Index of the element to remove.
 * @private
 */
function makeRemove(child, node) {
  // NOTE: Null values reduce hidden classes.
  return {
    type: 'REMOVE_NODE',
    content: null,
    fromIndex: child._mountIndex,
    fromNode: node,
    toIndex: null,
    afterNode: null
  };
}

/**
 * Make an update for setting the markup of a node.
 *
 * @param {string} markup Markup that renders into an element.
 * @private
 */
function makeSetMarkup(markup) {
  // NOTE: Null values reduce hidden classes.
  return {
    type: 'SET_MARKUP',
    content: markup,
    fromIndex: null,
    fromNode: null,
    toIndex: null,
    afterNode: null
  };
}

/**
 * Make an update for setting the text content.
 *
 * @param {string} textContent Text content to set.
 * @private
 */
function makeTextContent(textContent) {
  // NOTE: Null values reduce hidden classes.
  return {
    type: 'TEXT_CONTENT',
    content: textContent,
    fromIndex: null,
    fromNode: null,
    toIndex: null,
    afterNode: null
  };
}

/**
 * Push an update, if any, onto the queue. Creates a new queue if none is
 * passed and always returns the queue. Mutative.
 */
function enqueue(queue, update) {
  if (update) {
    queue = queue || [];
    queue.push(update);
  }
  return queue;
}

/**
 * Processes any enqueued updates.
 *
 * @private
 */
function processQueue(inst, updateQueue) {
  ReactComponentEnvironment.processChildrenUpdates(inst, updateQueue);
}

var setChildrenForInstrumentation = emptyFunction;
if (process.env.NODE_ENV !== 'production') {
  var getDebugID = function getDebugID(inst) {
    if (!inst._debugID) {
      // Check for ART-like instances. TODO: This is silly/gross.
      var internal;
      if (internal = ReactInstanceMap.get(inst)) {
        inst = internal;
      }
    }
    return inst._debugID;
  };
  setChildrenForInstrumentation = function setChildrenForInstrumentation(children) {
    var debugID = getDebugID(this);
    // TODO: React Native empty components are also multichild.
    // This means they still get into this method but don't have _debugID.
    if (debugID !== 0) {
      ReactInstrumentation.debugTool.onSetChildren(debugID, children ? Object.keys(children).map(function (key) {
        return children[key]._debugID;
      }) : []);
    }
  };
}

/**
 * ReactMultiChild are capable of reconciling multiple children.
 *
 * @class ReactMultiChild
 * @internal
 */
var ReactMultiChild = {
  /**
   * Provides common functionality for components that must reconcile multiple
   * children. This is used by `ReactDOMComponent` to mount, update, and
   * unmount child components.
   *
   * @lends {ReactMultiChild.prototype}
   */
  Mixin: {
    _reconcilerInstantiateChildren: function _reconcilerInstantiateChildren(nestedChildren, transaction, context) {
      if (process.env.NODE_ENV !== 'production') {
        var selfDebugID = getDebugID(this);
        if (this._currentElement) {
          try {
            ReactCurrentOwner.current = this._currentElement._owner;
            return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context, selfDebugID);
          } finally {
            ReactCurrentOwner.current = null;
          }
        }
      }
      return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);
    },

    _reconcilerUpdateChildren: function _reconcilerUpdateChildren(prevChildren, nextNestedChildrenElements, mountImages, removedNodes, transaction, context) {
      var nextChildren;
      var selfDebugID = 0;
      if (process.env.NODE_ENV !== 'production') {
        selfDebugID = getDebugID(this);
        if (this._currentElement) {
          try {
            ReactCurrentOwner.current = this._currentElement._owner;
            nextChildren = flattenChildren(nextNestedChildrenElements, selfDebugID);
          } finally {
            ReactCurrentOwner.current = null;
          }
          ReactChildReconciler.updateChildren(prevChildren, nextChildren, mountImages, removedNodes, transaction, this, this._hostContainerInfo, context, selfDebugID);
          return nextChildren;
        }
      }
      nextChildren = flattenChildren(nextNestedChildrenElements, selfDebugID);
      ReactChildReconciler.updateChildren(prevChildren, nextChildren, mountImages, removedNodes, transaction, this, this._hostContainerInfo, context, selfDebugID);
      return nextChildren;
    },

    /**
     * Generates a "mount image" for each of the supplied children. In the case
     * of `ReactDOMComponent`, a mount image is a string of markup.
     *
     * @param {?object} nestedChildren Nested child maps.
     * @return {array} An array of mounted representations.
     * @internal
     */
    mountChildren: function mountChildren(nestedChildren, transaction, context) {
      var children = this._reconcilerInstantiateChildren(nestedChildren, transaction, context);
      this._renderedChildren = children;

      var mountImages = [];
      var index = 0;
      for (var name in children) {
        if (children.hasOwnProperty(name)) {
          var child = children[name];
          var selfDebugID = 0;
          if (process.env.NODE_ENV !== 'production') {
            selfDebugID = getDebugID(this);
          }
          var mountImage = ReactReconciler.mountComponent(child, transaction, this, this._hostContainerInfo, context, selfDebugID);
          child._mountIndex = index++;
          mountImages.push(mountImage);
        }
      }

      if (process.env.NODE_ENV !== 'production') {
        setChildrenForInstrumentation.call(this, children);
      }

      return mountImages;
    },

    /**
     * Replaces any rendered children with a text content string.
     *
     * @param {string} nextContent String of content.
     * @internal
     */
    updateTextContent: function updateTextContent(nextContent) {
      var prevChildren = this._renderedChildren;
      // Remove any rendered children.
      ReactChildReconciler.unmountChildren(prevChildren, false);
      for (var name in prevChildren) {
        if (prevChildren.hasOwnProperty(name)) {
           true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'updateTextContent called on non-empty component.') : _prodInvariant('118') : void 0;
        }
      }
      // Set new text content.
      var updates = [makeTextContent(nextContent)];
      processQueue(this, updates);
    },

    /**
     * Replaces any rendered children with a markup string.
     *
     * @param {string} nextMarkup String of markup.
     * @internal
     */
    updateMarkup: function updateMarkup(nextMarkup) {
      var prevChildren = this._renderedChildren;
      // Remove any rendered children.
      ReactChildReconciler.unmountChildren(prevChildren, false);
      for (var name in prevChildren) {
        if (prevChildren.hasOwnProperty(name)) {
           true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'updateTextContent called on non-empty component.') : _prodInvariant('118') : void 0;
        }
      }
      var updates = [makeSetMarkup(nextMarkup)];
      processQueue(this, updates);
    },

    /**
     * Updates the rendered children with new children.
     *
     * @param {?object} nextNestedChildrenElements Nested child element maps.
     * @param {ReactReconcileTransaction} transaction
     * @internal
     */
    updateChildren: function updateChildren(nextNestedChildrenElements, transaction, context) {
      // Hook used by React ART
      this._updateChildren(nextNestedChildrenElements, transaction, context);
    },

    /**
     * @param {?object} nextNestedChildrenElements Nested child element maps.
     * @param {ReactReconcileTransaction} transaction
     * @final
     * @protected
     */
    _updateChildren: function _updateChildren(nextNestedChildrenElements, transaction, context) {
      var prevChildren = this._renderedChildren;
      var removedNodes = {};
      var mountImages = [];
      var nextChildren = this._reconcilerUpdateChildren(prevChildren, nextNestedChildrenElements, mountImages, removedNodes, transaction, context);
      if (!nextChildren && !prevChildren) {
        return;
      }
      var updates = null;
      var name;
      // `nextIndex` will increment for each child in `nextChildren`, but
      // `lastIndex` will be the last index visited in `prevChildren`.
      var nextIndex = 0;
      var lastIndex = 0;
      // `nextMountIndex` will increment for each newly mounted child.
      var nextMountIndex = 0;
      var lastPlacedNode = null;
      for (name in nextChildren) {
        if (!nextChildren.hasOwnProperty(name)) {
          continue;
        }
        var prevChild = prevChildren && prevChildren[name];
        var nextChild = nextChildren[name];
        if (prevChild === nextChild) {
          updates = enqueue(updates, this.moveChild(prevChild, lastPlacedNode, nextIndex, lastIndex));
          lastIndex = Math.max(prevChild._mountIndex, lastIndex);
          prevChild._mountIndex = nextIndex;
        } else {
          if (prevChild) {
            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.
            lastIndex = Math.max(prevChild._mountIndex, lastIndex);
            // The `removedNodes` loop below will actually remove the child.
          }
          // The child must be instantiated before it's mounted.
          updates = enqueue(updates, this._mountChildAtIndex(nextChild, mountImages[nextMountIndex], lastPlacedNode, nextIndex, transaction, context));
          nextMountIndex++;
        }
        nextIndex++;
        lastPlacedNode = ReactReconciler.getHostNode(nextChild);
      }
      // Remove children that are no longer present.
      for (name in removedNodes) {
        if (removedNodes.hasOwnProperty(name)) {
          updates = enqueue(updates, this._unmountChild(prevChildren[name], removedNodes[name]));
        }
      }
      if (updates) {
        processQueue(this, updates);
      }
      this._renderedChildren = nextChildren;

      if (process.env.NODE_ENV !== 'production') {
        setChildrenForInstrumentation.call(this, nextChildren);
      }
    },

    /**
     * Unmounts all rendered children. This should be used to clean up children
     * when this component is unmounted. It does not actually perform any
     * backend operations.
     *
     * @internal
     */
    unmountChildren: function unmountChildren(safely) {
      var renderedChildren = this._renderedChildren;
      ReactChildReconciler.unmountChildren(renderedChildren, safely);
      this._renderedChildren = null;
    },

    /**
     * Moves a child component to the supplied index.
     *
     * @param {ReactComponent} child Component to move.
     * @param {number} toIndex Destination index of the element.
     * @param {number} lastIndex Last index visited of the siblings of `child`.
     * @protected
     */
    moveChild: function moveChild(child, afterNode, toIndex, lastIndex) {
      // If the index of `child` is less than `lastIndex`, then it needs to
      // be moved. Otherwise, we do not need to move it because a child will be
      // inserted or moved before `child`.
      if (child._mountIndex < lastIndex) {
        return makeMove(child, afterNode, toIndex);
      }
    },

    /**
     * Creates a child component.
     *
     * @param {ReactComponent} child Component to create.
     * @param {string} mountImage Markup to insert.
     * @protected
     */
    createChild: function createChild(child, afterNode, mountImage) {
      return makeInsertMarkup(mountImage, afterNode, child._mountIndex);
    },

    /**
     * Removes a child component.
     *
     * @param {ReactComponent} child Child to remove.
     * @protected
     */
    removeChild: function removeChild(child, node) {
      return makeRemove(child, node);
    },

    /**
     * Mounts a child with the supplied name.
     *
     * NOTE: This is part of `updateChildren` and is here for readability.
     *
     * @param {ReactComponent} child Component to mount.
     * @param {string} name Name of the child.
     * @param {number} index Index at which to insert the child.
     * @param {ReactReconcileTransaction} transaction
     * @private
     */
    _mountChildAtIndex: function _mountChildAtIndex(child, mountImage, afterNode, index, transaction, context) {
      child._mountIndex = index;
      return this.createChild(child, afterNode, mountImage);
    },

    /**
     * Unmounts a rendered child.
     *
     * NOTE: This is part of `updateChildren` and is here for readability.
     *
     * @param {ReactComponent} child Component to unmount.
     * @private
     */
    _unmountChild: function _unmountChild(child, node) {
      var update = this.removeChild(child, node);
      child._mountIndex = null;
      return update;
    }
  }
};

module.exports = ReactMultiChild;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 207 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var _prodInvariant = __webpack_require__(4);

var invariant = __webpack_require__(2);

/**
 * @param {?object} object
 * @return {boolean} True if `object` is a valid owner.
 * @final
 */
function isValidOwner(object) {
  return !!(object && typeof object.attachRef === 'function' && typeof object.detachRef === 'function');
}

/**
 * ReactOwners are capable of storing references to owned components.
 *
 * All components are capable of //being// referenced by owner components, but
 * only ReactOwner components are capable of //referencing// owned components.
 * The named reference is known as a "ref".
 *
 * Refs are available when mounted and updated during reconciliation.
 *
 *   var MyComponent = React.createClass({
 *     render: function() {
 *       return (
 *         <div onClick={this.handleClick}>
 *           <CustomComponent ref="custom" />
 *         </div>
 *       );
 *     },
 *     handleClick: function() {
 *       this.refs.custom.handleClick();
 *     },
 *     componentDidMount: function() {
 *       this.refs.custom.initialize();
 *     }
 *   });
 *
 * Refs should rarely be used. When refs are used, they should only be done to
 * control data that is not handled by React's data flow.
 *
 * @class ReactOwner
 */
var ReactOwner = {
  /**
   * Adds a component by ref to an owner component.
   *
   * @param {ReactComponent} component Component to reference.
   * @param {string} ref Name by which to refer to the component.
   * @param {ReactOwner} owner Component on which to record the ref.
   * @final
   * @internal
   */
  addComponentAsRefTo: function addComponentAsRefTo(component, ref, owner) {
    !isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'addComponentAsRefTo(...): Only a ReactOwner can have refs. You might be adding a ref to a component that was not created inside a component\'s `render` method, or you have multiple copies of React loaded (details: https://fb.me/react-refs-must-have-owner).') : _prodInvariant('119') : void 0;
    owner.attachRef(ref, component);
  },

  /**
   * Removes a component by ref from an owner component.
   *
   * @param {ReactComponent} component Component to dereference.
   * @param {string} ref Name of the ref to remove.
   * @param {ReactOwner} owner Component on which the ref is recorded.
   * @final
   * @internal
   */
  removeComponentAsRefFrom: function removeComponentAsRefFrom(component, ref, owner) {
    !isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. You might be removing a ref to a component that was not created inside a component\'s `render` method, or you have multiple copies of React loaded (details: https://fb.me/react-refs-must-have-owner).') : _prodInvariant('120') : void 0;
    var ownerPublicInstance = owner.getPublicInstance();
    // Check that `component`'s owner is still alive and that `component` is still the current ref
    // because we do not want to detach the ref if another component stole it.
    if (ownerPublicInstance && ownerPublicInstance.refs[ref] === component.getPublicInstance()) {
      owner.detachRef(ref);
    }
  }
};

module.exports = ReactOwner;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 208 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var ReactPropTypeLocationNames = {};

if (process.env.NODE_ENV !== 'production') {
  ReactPropTypeLocationNames = {
    prop: 'prop',
    context: 'context',
    childContext: 'child context'
  };
}

module.exports = ReactPropTypeLocationNames;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 209 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(6);

var CallbackQueue = __webpack_require__(87);
var PooledClass = __webpack_require__(28);
var ReactBrowserEventEmitter = __webpack_require__(44);
var ReactInputSelection = __webpack_require__(94);
var ReactInstrumentation = __webpack_require__(15);
var Transaction = __webpack_require__(46);
var ReactUpdateQueue = __webpack_require__(66);

/**
 * Ensures that, when possible, the selection range (currently selected text
 * input) is not disturbed by performing the transaction.
 */
var SELECTION_RESTORATION = {
  /**
   * @return {Selection} Selection information.
   */
  initialize: ReactInputSelection.getSelectionInformation,
  /**
   * @param {Selection} sel Selection information returned from `initialize`.
   */
  close: ReactInputSelection.restoreSelection
};

/**
 * Suppresses events (blur/focus) that could be inadvertently dispatched due to
 * high level DOM manipulations (like temporarily removing a text input from the
 * DOM).
 */
var EVENT_SUPPRESSION = {
  /**
   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before
   * the reconciliation.
   */
  initialize: function initialize() {
    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();
    ReactBrowserEventEmitter.setEnabled(false);
    return currentlyEnabled;
  },

  /**
   * @param {boolean} previouslyEnabled Enabled status of
   *   `ReactBrowserEventEmitter` before the reconciliation occurred. `close`
   *   restores the previous value.
   */
  close: function close(previouslyEnabled) {
    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);
  }
};

/**
 * Provides a queue for collecting `componentDidMount` and
 * `componentDidUpdate` callbacks during the transaction.
 */
var ON_DOM_READY_QUEUEING = {
  /**
   * Initializes the internal `onDOMReady` queue.
   */
  initialize: function initialize() {
    this.reactMountReady.reset();
  },

  /**
   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.
   */
  close: function close() {
    this.reactMountReady.notifyAll();
  }
};

/**
 * Executed within the scope of the `Transaction` instance. Consider these as
 * being member methods, but with an implied ordering while being isolated from
 * each other.
 */
var TRANSACTION_WRAPPERS = [SELECTION_RESTORATION, EVENT_SUPPRESSION, ON_DOM_READY_QUEUEING];

if (process.env.NODE_ENV !== 'production') {
  TRANSACTION_WRAPPERS.push({
    initialize: ReactInstrumentation.debugTool.onBeginFlush,
    close: ReactInstrumentation.debugTool.onEndFlush
  });
}

/**
 * Currently:
 * - The order that these are listed in the transaction is critical:
 * - Suppresses events.
 * - Restores selection range.
 *
 * Future:
 * - Restore document/overflow scroll positions that were unintentionally
 *   modified via DOM insertions above the top viewport boundary.
 * - Implement/integrate with customized constraint based layout system and keep
 *   track of which dimensions must be remeasured.
 *
 * @class ReactReconcileTransaction
 */
function ReactReconcileTransaction(useCreateElement) {
  this.reinitializeTransaction();
  // Only server-side rendering really needs this option (see
  // `ReactServerRendering`), but server-side uses
  // `ReactServerRenderingTransaction` instead. This option is here so that it's
  // accessible and defaults to false when `ReactDOMComponent` and
  // `ReactDOMTextComponent` checks it in `mountComponent`.`
  this.renderToStaticMarkup = false;
  this.reactMountReady = CallbackQueue.getPooled(null);
  this.useCreateElement = useCreateElement;
}

var Mixin = {
  /**
   * @see Transaction
   * @abstract
   * @final
   * @return {array<object>} List of operation wrap procedures.
   *   TODO: convert to array<TransactionWrapper>
   */
  getTransactionWrappers: function getTransactionWrappers() {
    return TRANSACTION_WRAPPERS;
  },

  /**
   * @return {object} The queue to collect `onDOMReady` callbacks with.
   */
  getReactMountReady: function getReactMountReady() {
    return this.reactMountReady;
  },

  /**
   * @return {object} The queue to collect React async events.
   */
  getUpdateQueue: function getUpdateQueue() {
    return ReactUpdateQueue;
  },

  /**
   * Save current transaction state -- if the return value from this method is
   * passed to `rollback`, the transaction will be reset to that state.
   */
  checkpoint: function checkpoint() {
    // reactMountReady is the our only stateful wrapper
    return this.reactMountReady.checkpoint();
  },

  rollback: function rollback(checkpoint) {
    this.reactMountReady.rollback(checkpoint);
  },

  /**
   * `PooledClass` looks for this, and will invoke this before allowing this
   * instance to be reused.
   */
  destructor: function destructor() {
    CallbackQueue.release(this.reactMountReady);
    this.reactMountReady = null;
  }
};

_assign(ReactReconcileTransaction.prototype, Transaction, Mixin);

PooledClass.addPoolingTo(ReactReconcileTransaction);

module.exports = ReactReconcileTransaction;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 210 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var ReactOwner = __webpack_require__(207);

var ReactRef = {};

function attachRef(ref, component, owner) {
  if (typeof ref === 'function') {
    ref(component.getPublicInstance());
  } else {
    // Legacy ref
    ReactOwner.addComponentAsRefTo(component, ref, owner);
  }
}

function detachRef(ref, component, owner) {
  if (typeof ref === 'function') {
    ref(null);
  } else {
    // Legacy ref
    ReactOwner.removeComponentAsRefFrom(component, ref, owner);
  }
}

ReactRef.attachRefs = function (instance, element) {
  if (element === null || (typeof element === 'undefined' ? 'undefined' : _typeof(element)) !== 'object') {
    return;
  }
  var ref = element.ref;
  if (ref != null) {
    attachRef(ref, instance, element._owner);
  }
};

ReactRef.shouldUpdateRefs = function (prevElement, nextElement) {
  // If either the owner or a `ref` has changed, make sure the newest owner
  // has stored a reference to `this`, and the previous owner (if different)
  // has forgotten the reference to `this`. We use the element instead
  // of the public this.props because the post processing cannot determine
  // a ref. The ref conceptually lives on the element.

  // TODO: Should this even be possible? The owner cannot change because
  // it's forbidden by shouldUpdateReactComponent. The ref can change
  // if you swap the keys of but not the refs. Reconsider where this check
  // is made. It probably belongs where the key checking and
  // instantiateReactComponent is done.

  var prevRef = null;
  var prevOwner = null;
  if (prevElement !== null && (typeof prevElement === 'undefined' ? 'undefined' : _typeof(prevElement)) === 'object') {
    prevRef = prevElement.ref;
    prevOwner = prevElement._owner;
  }

  var nextRef = null;
  var nextOwner = null;
  if (nextElement !== null && (typeof nextElement === 'undefined' ? 'undefined' : _typeof(nextElement)) === 'object') {
    nextRef = nextElement.ref;
    nextOwner = nextElement._owner;
  }

  return prevRef !== nextRef ||
  // If owner changes but we have an unchanged function ref, don't update refs
  typeof nextRef === 'string' && nextOwner !== prevOwner;
};

ReactRef.detachRefs = function (instance, element) {
  if (element === null || (typeof element === 'undefined' ? 'undefined' : _typeof(element)) !== 'object') {
    return;
  }
  var ref = element.ref;
  if (ref != null) {
    detachRef(ref, instance, element._owner);
  }
};

module.exports = ReactRef;

/***/ }),
/* 211 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(6);

var PooledClass = __webpack_require__(28);
var Transaction = __webpack_require__(46);
var ReactInstrumentation = __webpack_require__(15);
var ReactServerUpdateQueue = __webpack_require__(212);

/**
 * Executed within the scope of the `Transaction` instance. Consider these as
 * being member methods, but with an implied ordering while being isolated from
 * each other.
 */
var TRANSACTION_WRAPPERS = [];

if (process.env.NODE_ENV !== 'production') {
  TRANSACTION_WRAPPERS.push({
    initialize: ReactInstrumentation.debugTool.onBeginFlush,
    close: ReactInstrumentation.debugTool.onEndFlush
  });
}

var noopCallbackQueue = {
  enqueue: function enqueue() {}
};

/**
 * @class ReactServerRenderingTransaction
 * @param {boolean} renderToStaticMarkup
 */
function ReactServerRenderingTransaction(renderToStaticMarkup) {
  this.reinitializeTransaction();
  this.renderToStaticMarkup = renderToStaticMarkup;
  this.useCreateElement = false;
  this.updateQueue = new ReactServerUpdateQueue(this);
}

var Mixin = {
  /**
   * @see Transaction
   * @abstract
   * @final
   * @return {array} Empty list of operation wrap procedures.
   */
  getTransactionWrappers: function getTransactionWrappers() {
    return TRANSACTION_WRAPPERS;
  },

  /**
   * @return {object} The queue to collect `onDOMReady` callbacks with.
   */
  getReactMountReady: function getReactMountReady() {
    return noopCallbackQueue;
  },

  /**
   * @return {object} The queue to collect React async events.
   */
  getUpdateQueue: function getUpdateQueue() {
    return this.updateQueue;
  },

  /**
   * `PooledClass` looks for this, and will invoke this before allowing this
   * instance to be reused.
   */
  destructor: function destructor() {},

  checkpoint: function checkpoint() {},

  rollback: function rollback() {}
};

_assign(ReactServerRenderingTransaction.prototype, Transaction, Mixin);

PooledClass.addPoolingTo(ReactServerRenderingTransaction);

module.exports = ReactServerRenderingTransaction;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 212 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

var ReactUpdateQueue = __webpack_require__(66);

var warning = __webpack_require__(3);

function warnNoop(publicInstance, callerName) {
  if (process.env.NODE_ENV !== 'production') {
    var constructor = publicInstance.constructor;
    process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounting component. ' + 'This usually means you called %s() outside componentWillMount() on the server. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, constructor && (constructor.displayName || constructor.name) || 'ReactClass') : void 0;
  }
}

/**
 * This is the update queue used for server rendering.
 * It delegates to ReactUpdateQueue while server rendering is in progress and
 * switches to ReactNoopUpdateQueue after the transaction has completed.
 * @class ReactServerUpdateQueue
 * @param {Transaction} transaction
 */

var ReactServerUpdateQueue = function () {
  function ReactServerUpdateQueue(transaction) {
    _classCallCheck(this, ReactServerUpdateQueue);

    this.transaction = transaction;
  }

  /**
   * Checks whether or not this composite component is mounted.
   * @param {ReactClass} publicInstance The instance we want to test.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */

  ReactServerUpdateQueue.prototype.isMounted = function isMounted(publicInstance) {
    return false;
  };

  /**
   * Enqueue a callback that will be executed after all the pending updates
   * have processed.
   *
   * @param {ReactClass} publicInstance The instance to use as `this` context.
   * @param {?function} callback Called after state is updated.
   * @internal
   */

  ReactServerUpdateQueue.prototype.enqueueCallback = function enqueueCallback(publicInstance, callback, callerName) {
    if (this.transaction.isInTransaction()) {
      ReactUpdateQueue.enqueueCallback(publicInstance, callback, callerName);
    }
  };

  /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldComponentUpdate`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @internal
   */

  ReactServerUpdateQueue.prototype.enqueueForceUpdate = function enqueueForceUpdate(publicInstance) {
    if (this.transaction.isInTransaction()) {
      ReactUpdateQueue.enqueueForceUpdate(publicInstance);
    } else {
      warnNoop(publicInstance, 'forceUpdate');
    }
  };

  /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object|function} completeState Next state.
   * @internal
   */

  ReactServerUpdateQueue.prototype.enqueueReplaceState = function enqueueReplaceState(publicInstance, completeState) {
    if (this.transaction.isInTransaction()) {
      ReactUpdateQueue.enqueueReplaceState(publicInstance, completeState);
    } else {
      warnNoop(publicInstance, 'replaceState');
    }
  };

  /**
   * Sets a subset of the state. This only exists because _pendingState is
   * internal. This provides a merging strategy that is not available to deep
   * properties which is confusing. TODO: Expose pendingState or don't use it
   * during the merge.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object|function} partialState Next partial state to be merged with state.
   * @internal
   */

  ReactServerUpdateQueue.prototype.enqueueSetState = function enqueueSetState(publicInstance, partialState) {
    if (this.transaction.isInTransaction()) {
      ReactUpdateQueue.enqueueSetState(publicInstance, partialState);
    } else {
      warnNoop(publicInstance, 'setState');
    }
  };

  return ReactServerUpdateQueue;
}();

module.exports = ReactServerUpdateQueue;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 213 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



module.exports = '15.6.1';

/***/ }),
/* 214 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var NS = {
  xlink: 'http://www.w3.org/1999/xlink',
  xml: 'http://www.w3.org/XML/1998/namespace'
};

// We use attributes for everything SVG so let's avoid some duplication and run
// code instead.
// The following are all specified in the HTML config already so we exclude here.
// - class (as className)
// - color
// - height
// - id
// - lang
// - max
// - media
// - method
// - min
// - name
// - style
// - target
// - type
// - width
var ATTRS = {
  accentHeight: 'accent-height',
  accumulate: 0,
  additive: 0,
  alignmentBaseline: 'alignment-baseline',
  allowReorder: 'allowReorder',
  alphabetic: 0,
  amplitude: 0,
  arabicForm: 'arabic-form',
  ascent: 0,
  attributeName: 'attributeName',
  attributeType: 'attributeType',
  autoReverse: 'autoReverse',
  azimuth: 0,
  baseFrequency: 'baseFrequency',
  baseProfile: 'baseProfile',
  baselineShift: 'baseline-shift',
  bbox: 0,
  begin: 0,
  bias: 0,
  by: 0,
  calcMode: 'calcMode',
  capHeight: 'cap-height',
  clip: 0,
  clipPath: 'clip-path',
  clipRule: 'clip-rule',
  clipPathUnits: 'clipPathUnits',
  colorInterpolation: 'color-interpolation',
  colorInterpolationFilters: 'color-interpolation-filters',
  colorProfile: 'color-profile',
  colorRendering: 'color-rendering',
  contentScriptType: 'contentScriptType',
  contentStyleType: 'contentStyleType',
  cursor: 0,
  cx: 0,
  cy: 0,
  d: 0,
  decelerate: 0,
  descent: 0,
  diffuseConstant: 'diffuseConstant',
  direction: 0,
  display: 0,
  divisor: 0,
  dominantBaseline: 'dominant-baseline',
  dur: 0,
  dx: 0,
  dy: 0,
  edgeMode: 'edgeMode',
  elevation: 0,
  enableBackground: 'enable-background',
  end: 0,
  exponent: 0,
  externalResourcesRequired: 'externalResourcesRequired',
  fill: 0,
  fillOpacity: 'fill-opacity',
  fillRule: 'fill-rule',
  filter: 0,
  filterRes: 'filterRes',
  filterUnits: 'filterUnits',
  floodColor: 'flood-color',
  floodOpacity: 'flood-opacity',
  focusable: 0,
  fontFamily: 'font-family',
  fontSize: 'font-size',
  fontSizeAdjust: 'font-size-adjust',
  fontStretch: 'font-stretch',
  fontStyle: 'font-style',
  fontVariant: 'font-variant',
  fontWeight: 'font-weight',
  format: 0,
  from: 0,
  fx: 0,
  fy: 0,
  g1: 0,
  g2: 0,
  glyphName: 'glyph-name',
  glyphOrientationHorizontal: 'glyph-orientation-horizontal',
  glyphOrientationVertical: 'glyph-orientation-vertical',
  glyphRef: 'glyphRef',
  gradientTransform: 'gradientTransform',
  gradientUnits: 'gradientUnits',
  hanging: 0,
  horizAdvX: 'horiz-adv-x',
  horizOriginX: 'horiz-origin-x',
  ideographic: 0,
  imageRendering: 'image-rendering',
  'in': 0,
  in2: 0,
  intercept: 0,
  k: 0,
  k1: 0,
  k2: 0,
  k3: 0,
  k4: 0,
  kernelMatrix: 'kernelMatrix',
  kernelUnitLength: 'kernelUnitLength',
  kerning: 0,
  keyPoints: 'keyPoints',
  keySplines: 'keySplines',
  keyTimes: 'keyTimes',
  lengthAdjust: 'lengthAdjust',
  letterSpacing: 'letter-spacing',
  lightingColor: 'lighting-color',
  limitingConeAngle: 'limitingConeAngle',
  local: 0,
  markerEnd: 'marker-end',
  markerMid: 'marker-mid',
  markerStart: 'marker-start',
  markerHeight: 'markerHeight',
  markerUnits: 'markerUnits',
  markerWidth: 'markerWidth',
  mask: 0,
  maskContentUnits: 'maskContentUnits',
  maskUnits: 'maskUnits',
  mathematical: 0,
  mode: 0,
  numOctaves: 'numOctaves',
  offset: 0,
  opacity: 0,
  operator: 0,
  order: 0,
  orient: 0,
  orientation: 0,
  origin: 0,
  overflow: 0,
  overlinePosition: 'overline-position',
  overlineThickness: 'overline-thickness',
  paintOrder: 'paint-order',
  panose1: 'panose-1',
  pathLength: 'pathLength',
  patternContentUnits: 'patternContentUnits',
  patternTransform: 'patternTransform',
  patternUnits: 'patternUnits',
  pointerEvents: 'pointer-events',
  points: 0,
  pointsAtX: 'pointsAtX',
  pointsAtY: 'pointsAtY',
  pointsAtZ: 'pointsAtZ',
  preserveAlpha: 'preserveAlpha',
  preserveAspectRatio: 'preserveAspectRatio',
  primitiveUnits: 'primitiveUnits',
  r: 0,
  radius: 0,
  refX: 'refX',
  refY: 'refY',
  renderingIntent: 'rendering-intent',
  repeatCount: 'repeatCount',
  repeatDur: 'repeatDur',
  requiredExtensions: 'requiredExtensions',
  requiredFeatures: 'requiredFeatures',
  restart: 0,
  result: 0,
  rotate: 0,
  rx: 0,
  ry: 0,
  scale: 0,
  seed: 0,
  shapeRendering: 'shape-rendering',
  slope: 0,
  spacing: 0,
  specularConstant: 'specularConstant',
  specularExponent: 'specularExponent',
  speed: 0,
  spreadMethod: 'spreadMethod',
  startOffset: 'startOffset',
  stdDeviation: 'stdDeviation',
  stemh: 0,
  stemv: 0,
  stitchTiles: 'stitchTiles',
  stopColor: 'stop-color',
  stopOpacity: 'stop-opacity',
  strikethroughPosition: 'strikethrough-position',
  strikethroughThickness: 'strikethrough-thickness',
  string: 0,
  stroke: 0,
  strokeDasharray: 'stroke-dasharray',
  strokeDashoffset: 'stroke-dashoffset',
  strokeLinecap: 'stroke-linecap',
  strokeLinejoin: 'stroke-linejoin',
  strokeMiterlimit: 'stroke-miterlimit',
  strokeOpacity: 'stroke-opacity',
  strokeWidth: 'stroke-width',
  surfaceScale: 'surfaceScale',
  systemLanguage: 'systemLanguage',
  tableValues: 'tableValues',
  targetX: 'targetX',
  targetY: 'targetY',
  textAnchor: 'text-anchor',
  textDecoration: 'text-decoration',
  textRendering: 'text-rendering',
  textLength: 'textLength',
  to: 0,
  transform: 0,
  u1: 0,
  u2: 0,
  underlinePosition: 'underline-position',
  underlineThickness: 'underline-thickness',
  unicode: 0,
  unicodeBidi: 'unicode-bidi',
  unicodeRange: 'unicode-range',
  unitsPerEm: 'units-per-em',
  vAlphabetic: 'v-alphabetic',
  vHanging: 'v-hanging',
  vIdeographic: 'v-ideographic',
  vMathematical: 'v-mathematical',
  values: 0,
  vectorEffect: 'vector-effect',
  version: 0,
  vertAdvY: 'vert-adv-y',
  vertOriginX: 'vert-origin-x',
  vertOriginY: 'vert-origin-y',
  viewBox: 'viewBox',
  viewTarget: 'viewTarget',
  visibility: 0,
  widths: 0,
  wordSpacing: 'word-spacing',
  writingMode: 'writing-mode',
  x: 0,
  xHeight: 'x-height',
  x1: 0,
  x2: 0,
  xChannelSelector: 'xChannelSelector',
  xlinkActuate: 'xlink:actuate',
  xlinkArcrole: 'xlink:arcrole',
  xlinkHref: 'xlink:href',
  xlinkRole: 'xlink:role',
  xlinkShow: 'xlink:show',
  xlinkTitle: 'xlink:title',
  xlinkType: 'xlink:type',
  xmlBase: 'xml:base',
  xmlns: 0,
  xmlnsXlink: 'xmlns:xlink',
  xmlLang: 'xml:lang',
  xmlSpace: 'xml:space',
  y: 0,
  y1: 0,
  y2: 0,
  yChannelSelector: 'yChannelSelector',
  z: 0,
  zoomAndPan: 'zoomAndPan'
};

var SVGDOMPropertyConfig = {
  Properties: {},
  DOMAttributeNamespaces: {
    xlinkActuate: NS.xlink,
    xlinkArcrole: NS.xlink,
    xlinkHref: NS.xlink,
    xlinkRole: NS.xlink,
    xlinkShow: NS.xlink,
    xlinkTitle: NS.xlink,
    xlinkType: NS.xlink,
    xmlBase: NS.xml,
    xmlLang: NS.xml,
    xmlSpace: NS.xml
  },
  DOMAttributeNames: {}
};

Object.keys(ATTRS).forEach(function (key) {
  SVGDOMPropertyConfig.Properties[key] = 0;
  if (ATTRS[key]) {
    SVGDOMPropertyConfig.DOMAttributeNames[key] = ATTRS[key];
  }
});

module.exports = SVGDOMPropertyConfig;

/***/ }),
/* 215 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var EventPropagators = __webpack_require__(37);
var ExecutionEnvironment = __webpack_require__(9);
var ReactDOMComponentTree = __webpack_require__(7);
var ReactInputSelection = __webpack_require__(94);
var SyntheticEvent = __webpack_require__(24);

var getActiveElement = __webpack_require__(83);
var isTextInputElement = __webpack_require__(105);
var shallowEqual = __webpack_require__(58);

var skipSelectionChangeEvent = ExecutionEnvironment.canUseDOM && 'documentMode' in document && document.documentMode <= 11;

var eventTypes = {
  select: {
    phasedRegistrationNames: {
      bubbled: 'onSelect',
      captured: 'onSelectCapture'
    },
    dependencies: ['topBlur', 'topContextMenu', 'topFocus', 'topKeyDown', 'topKeyUp', 'topMouseDown', 'topMouseUp', 'topSelectionChange']
  }
};

var activeElement = null;
var activeElementInst = null;
var lastSelection = null;
var mouseDown = false;

// Track whether a listener exists for this plugin. If none exist, we do
// not extract events. See #3639.
var hasListener = false;

/**
 * Get an object which is a unique representation of the current selection.
 *
 * The return value will not be consistent across nodes or browsers, but
 * two identical selections on the same node will return identical objects.
 *
 * @param {DOMElement} node
 * @return {object}
 */
function getSelection(node) {
  if ('selectionStart' in node && ReactInputSelection.hasSelectionCapabilities(node)) {
    return {
      start: node.selectionStart,
      end: node.selectionEnd
    };
  } else if (window.getSelection) {
    var selection = window.getSelection();
    return {
      anchorNode: selection.anchorNode,
      anchorOffset: selection.anchorOffset,
      focusNode: selection.focusNode,
      focusOffset: selection.focusOffset
    };
  } else if (document.selection) {
    var range = document.selection.createRange();
    return {
      parentElement: range.parentElement(),
      text: range.text,
      top: range.boundingTop,
      left: range.boundingLeft
    };
  }
}

/**
 * Poll selection to see whether it's changed.
 *
 * @param {object} nativeEvent
 * @return {?SyntheticEvent}
 */
function constructSelectEvent(nativeEvent, nativeEventTarget) {
  // Ensure we have the right element, and that the user is not dragging a
  // selection (this matches native `select` event behavior). In HTML5, select
  // fires only on input and textarea thus if there's no focused element we
  // won't dispatch.
  if (mouseDown || activeElement == null || activeElement !== getActiveElement()) {
    return null;
  }

  // Only fire when selection has actually changed.
  var currentSelection = getSelection(activeElement);
  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
    lastSelection = currentSelection;

    var syntheticEvent = SyntheticEvent.getPooled(eventTypes.select, activeElementInst, nativeEvent, nativeEventTarget);

    syntheticEvent.type = 'select';
    syntheticEvent.target = activeElement;

    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);

    return syntheticEvent;
  }

  return null;
}

/**
 * This plugin creates an `onSelect` event that normalizes select events
 * across form elements.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - contentEditable
 *
 * This differs from native browser implementations in the following ways:
 * - Fires on contentEditable fields as well as inputs.
 * - Fires for collapsed selection.
 * - Fires after user input.
 */
var SelectEventPlugin = {
  eventTypes: eventTypes,

  extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    if (!hasListener) {
      return null;
    }

    var targetNode = targetInst ? ReactDOMComponentTree.getNodeFromInstance(targetInst) : window;

    switch (topLevelType) {
      // Track the input node that has focus.
      case 'topFocus':
        if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {
          activeElement = targetNode;
          activeElementInst = targetInst;
          lastSelection = null;
        }
        break;
      case 'topBlur':
        activeElement = null;
        activeElementInst = null;
        lastSelection = null;
        break;
      // Don't fire the event while the user is dragging. This matches the
      // semantics of the native select event.
      case 'topMouseDown':
        mouseDown = true;
        break;
      case 'topContextMenu':
      case 'topMouseUp':
        mouseDown = false;
        return constructSelectEvent(nativeEvent, nativeEventTarget);
      // Chrome and IE fire non-standard event when selection is changed (and
      // sometimes when it hasn't). IE's event fires out of order with respect
      // to key and input events on deletion, so we discard it.
      //
      // Firefox doesn't support selectionchange, so check selection status
      // after each key entry. The selection changes after keydown and before
      // keyup, but we check on keydown as well in the case of holding down a
      // key, when multiple keydown events are fired but only one keyup is.
      // This is also our approach for IE handling, for the reason above.
      case 'topSelectionChange':
        if (skipSelectionChangeEvent) {
          break;
        }
      // falls through
      case 'topKeyDown':
      case 'topKeyUp':
        return constructSelectEvent(nativeEvent, nativeEventTarget);
    }

    return null;
  },

  didPutListener: function didPutListener(inst, registrationName, listener) {
    if (registrationName === 'onSelect') {
      hasListener = true;
    }
  }
};

module.exports = SelectEventPlugin;

/***/ }),
/* 216 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var _prodInvariant = __webpack_require__(4);

var EventListener = __webpack_require__(81);
var EventPropagators = __webpack_require__(37);
var ReactDOMComponentTree = __webpack_require__(7);
var SyntheticAnimationEvent = __webpack_require__(217);
var SyntheticClipboardEvent = __webpack_require__(218);
var SyntheticEvent = __webpack_require__(24);
var SyntheticFocusEvent = __webpack_require__(221);
var SyntheticKeyboardEvent = __webpack_require__(223);
var SyntheticMouseEvent = __webpack_require__(45);
var SyntheticDragEvent = __webpack_require__(220);
var SyntheticTouchEvent = __webpack_require__(224);
var SyntheticTransitionEvent = __webpack_require__(225);
var SyntheticUIEvent = __webpack_require__(39);
var SyntheticWheelEvent = __webpack_require__(226);

var emptyFunction = __webpack_require__(17);
var getEventCharCode = __webpack_require__(68);
var invariant = __webpack_require__(2);

/**
 * Turns
 * ['abort', ...]
 * into
 * eventTypes = {
 *   'abort': {
 *     phasedRegistrationNames: {
 *       bubbled: 'onAbort',
 *       captured: 'onAbortCapture',
 *     },
 *     dependencies: ['topAbort'],
 *   },
 *   ...
 * };
 * topLevelEventsToDispatchConfig = {
 *   'topAbort': { sameConfig }
 * };
 */
var eventTypes = {};
var topLevelEventsToDispatchConfig = {};
['abort', 'animationEnd', 'animationIteration', 'animationStart', 'blur', 'canPlay', 'canPlayThrough', 'click', 'contextMenu', 'copy', 'cut', 'doubleClick', 'drag', 'dragEnd', 'dragEnter', 'dragExit', 'dragLeave', 'dragOver', 'dragStart', 'drop', 'durationChange', 'emptied', 'encrypted', 'ended', 'error', 'focus', 'input', 'invalid', 'keyDown', 'keyPress', 'keyUp', 'load', 'loadedData', 'loadedMetadata', 'loadStart', 'mouseDown', 'mouseMove', 'mouseOut', 'mouseOver', 'mouseUp', 'paste', 'pause', 'play', 'playing', 'progress', 'rateChange', 'reset', 'scroll', 'seeked', 'seeking', 'stalled', 'submit', 'suspend', 'timeUpdate', 'touchCancel', 'touchEnd', 'touchMove', 'touchStart', 'transitionEnd', 'volumeChange', 'waiting', 'wheel'].forEach(function (event) {
  var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
  var onEvent = 'on' + capitalizedEvent;
  var topEvent = 'top' + capitalizedEvent;

  var type = {
    phasedRegistrationNames: {
      bubbled: onEvent,
      captured: onEvent + 'Capture'
    },
    dependencies: [topEvent]
  };
  eventTypes[event] = type;
  topLevelEventsToDispatchConfig[topEvent] = type;
});

var onClickListeners = {};

function getDictionaryKey(inst) {
  // Prevents V8 performance issue:
  // https://github.com/facebook/react/pull/7232
  return '.' + inst._rootNodeID;
}

function isInteractive(tag) {
  return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
}

var SimpleEventPlugin = {
  eventTypes: eventTypes,

  extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
    if (!dispatchConfig) {
      return null;
    }
    var EventConstructor;
    switch (topLevelType) {
      case 'topAbort':
      case 'topCanPlay':
      case 'topCanPlayThrough':
      case 'topDurationChange':
      case 'topEmptied':
      case 'topEncrypted':
      case 'topEnded':
      case 'topError':
      case 'topInput':
      case 'topInvalid':
      case 'topLoad':
      case 'topLoadedData':
      case 'topLoadedMetadata':
      case 'topLoadStart':
      case 'topPause':
      case 'topPlay':
      case 'topPlaying':
      case 'topProgress':
      case 'topRateChange':
      case 'topReset':
      case 'topSeeked':
      case 'topSeeking':
      case 'topStalled':
      case 'topSubmit':
      case 'topSuspend':
      case 'topTimeUpdate':
      case 'topVolumeChange':
      case 'topWaiting':
        // HTML Events
        // @see http://www.w3.org/TR/html5/index.html#events-0
        EventConstructor = SyntheticEvent;
        break;
      case 'topKeyPress':
        // Firefox creates a keypress event for function keys too. This removes
        // the unwanted keypress events. Enter is however both printable and
        // non-printable. One would expect Tab to be as well (but it isn't).
        if (getEventCharCode(nativeEvent) === 0) {
          return null;
        }
      /* falls through */
      case 'topKeyDown':
      case 'topKeyUp':
        EventConstructor = SyntheticKeyboardEvent;
        break;
      case 'topBlur':
      case 'topFocus':
        EventConstructor = SyntheticFocusEvent;
        break;
      case 'topClick':
        // Firefox creates a click event on right mouse clicks. This removes the
        // unwanted click events.
        if (nativeEvent.button === 2) {
          return null;
        }
      /* falls through */
      case 'topDoubleClick':
      case 'topMouseDown':
      case 'topMouseMove':
      case 'topMouseUp':
      // TODO: Disabled elements should not respond to mouse events
      /* falls through */
      case 'topMouseOut':
      case 'topMouseOver':
      case 'topContextMenu':
        EventConstructor = SyntheticMouseEvent;
        break;
      case 'topDrag':
      case 'topDragEnd':
      case 'topDragEnter':
      case 'topDragExit':
      case 'topDragLeave':
      case 'topDragOver':
      case 'topDragStart':
      case 'topDrop':
        EventConstructor = SyntheticDragEvent;
        break;
      case 'topTouchCancel':
      case 'topTouchEnd':
      case 'topTouchMove':
      case 'topTouchStart':
        EventConstructor = SyntheticTouchEvent;
        break;
      case 'topAnimationEnd':
      case 'topAnimationIteration':
      case 'topAnimationStart':
        EventConstructor = SyntheticAnimationEvent;
        break;
      case 'topTransitionEnd':
        EventConstructor = SyntheticTransitionEvent;
        break;
      case 'topScroll':
        EventConstructor = SyntheticUIEvent;
        break;
      case 'topWheel':
        EventConstructor = SyntheticWheelEvent;
        break;
      case 'topCopy':
      case 'topCut':
      case 'topPaste':
        EventConstructor = SyntheticClipboardEvent;
        break;
    }
    !EventConstructor ? process.env.NODE_ENV !== 'production' ? invariant(false, 'SimpleEventPlugin: Unhandled event type, `%s`.', topLevelType) : _prodInvariant('86', topLevelType) : void 0;
    var event = EventConstructor.getPooled(dispatchConfig, targetInst, nativeEvent, nativeEventTarget);
    EventPropagators.accumulateTwoPhaseDispatches(event);
    return event;
  },

  didPutListener: function didPutListener(inst, registrationName, listener) {
    // Mobile Safari does not fire properly bubble click events on
    // non-interactive elements, which means delegated click listeners do not
    // fire. The workaround for this bug involves attaching an empty click
    // listener on the target node.
    // http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
    if (registrationName === 'onClick' && !isInteractive(inst._tag)) {
      var key = getDictionaryKey(inst);
      var node = ReactDOMComponentTree.getNodeFromInstance(inst);
      if (!onClickListeners[key]) {
        onClickListeners[key] = EventListener.listen(node, 'click', emptyFunction);
      }
    }
  },

  willDeleteListener: function willDeleteListener(inst, registrationName) {
    if (registrationName === 'onClick' && !isInteractive(inst._tag)) {
      var key = getDictionaryKey(inst);
      onClickListeners[key].remove();
      delete onClickListeners[key];
    }
  }
};

module.exports = SimpleEventPlugin;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 217 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var SyntheticEvent = __webpack_require__(24);

/**
 * @interface Event
 * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
 * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
 */
var AnimationEventInterface = {
  animationName: null,
  elapsedTime: null,
  pseudoElement: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticEvent}
 */
function SyntheticAnimationEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticAnimationEvent, AnimationEventInterface);

module.exports = SyntheticAnimationEvent;

/***/ }),
/* 218 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var SyntheticEvent = __webpack_require__(24);

/**
 * @interface Event
 * @see http://www.w3.org/TR/clipboard-apis/
 */
var ClipboardEventInterface = {
  clipboardData: function clipboardData(event) {
    return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);

module.exports = SyntheticClipboardEvent;

/***/ }),
/* 219 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var SyntheticEvent = __webpack_require__(24);

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
 */
var CompositionEventInterface = {
  data: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticCompositionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticCompositionEvent, CompositionEventInterface);

module.exports = SyntheticCompositionEvent;

/***/ }),
/* 220 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var SyntheticMouseEvent = __webpack_require__(45);

/**
 * @interface DragEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var DragEventInterface = {
  dataTransfer: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);

module.exports = SyntheticDragEvent;

/***/ }),
/* 221 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var SyntheticUIEvent = __webpack_require__(39);

/**
 * @interface FocusEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var FocusEventInterface = {
  relatedTarget: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);

module.exports = SyntheticFocusEvent;

/***/ }),
/* 222 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var SyntheticEvent = __webpack_require__(24);

/**
 * @interface Event
 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
 *      /#events-inputevents
 */
var InputEventInterface = {
  data: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticInputEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticInputEvent, InputEventInterface);

module.exports = SyntheticInputEvent;

/***/ }),
/* 223 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var SyntheticUIEvent = __webpack_require__(39);

var getEventCharCode = __webpack_require__(68);
var getEventKey = __webpack_require__(232);
var getEventModifierState = __webpack_require__(69);

/**
 * @interface KeyboardEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var KeyboardEventInterface = {
  key: getEventKey,
  location: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  repeat: null,
  locale: null,
  getModifierState: getEventModifierState,
  // Legacy Interface
  charCode: function charCode(event) {
    // `charCode` is the result of a KeyPress event and represents the value of
    // the actual printable character.

    // KeyPress is deprecated, but its replacement is not yet final and not
    // implemented in any major browser. Only KeyPress has charCode.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }
    return 0;
  },
  keyCode: function keyCode(event) {
    // `keyCode` is the result of a KeyDown/Up event and represents the value of
    // physical keyboard key.

    // The actual meaning of the value depends on the users' keyboard layout
    // which cannot be detected. Assuming that it is a US keyboard layout
    // provides a surprisingly accurate mapping for US and European users.
    // Due to this, it is left to the user to implement at this time.
    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }
    return 0;
  },
  which: function which(event) {
    // `which` is an alias for either `keyCode` or `charCode` depending on the
    // type of the event.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }
    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }
    return 0;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);

module.exports = SyntheticKeyboardEvent;

/***/ }),
/* 224 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var SyntheticUIEvent = __webpack_require__(39);

var getEventModifierState = __webpack_require__(69);

/**
 * @interface TouchEvent
 * @see http://www.w3.org/TR/touch-events/
 */
var TouchEventInterface = {
  touches: null,
  targetTouches: null,
  changedTouches: null,
  altKey: null,
  metaKey: null,
  ctrlKey: null,
  shiftKey: null,
  getModifierState: getEventModifierState
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);

module.exports = SyntheticTouchEvent;

/***/ }),
/* 225 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var SyntheticEvent = __webpack_require__(24);

/**
 * @interface Event
 * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
 * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
 */
var TransitionEventInterface = {
  propertyName: null,
  elapsedTime: null,
  pseudoElement: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticEvent}
 */
function SyntheticTransitionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticTransitionEvent, TransitionEventInterface);

module.exports = SyntheticTransitionEvent;

/***/ }),
/* 226 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var SyntheticMouseEvent = __webpack_require__(45);

/**
 * @interface WheelEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var WheelEventInterface = {
  deltaX: function deltaX(event) {
    return 'deltaX' in event ? event.deltaX : // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
    'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
  },
  deltaY: function deltaY(event) {
    return 'deltaY' in event ? event.deltaY : // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
    'wheelDeltaY' in event ? -event.wheelDeltaY : // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
    'wheelDelta' in event ? -event.wheelDelta : 0;
  },
  deltaZ: null,

  // Browsers without "deltaMode" is reporting in raw wheel delta where one
  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
  deltaMode: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticMouseEvent}
 */
function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);

module.exports = SyntheticWheelEvent;

/***/ }),
/* 227 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var MOD = 65521;

// adler32 is not cryptographically strong, and is only used to sanity check that
// markup generated on the server matches the markup generated on the client.
// This implementation (a modified version of the SheetJS version) has been optimized
// for our use case, at the expense of conforming to the adler32 specification
// for non-ascii inputs.
function adler32(data) {
  var a = 1;
  var b = 0;
  var i = 0;
  var l = data.length;
  var m = l & ~0x3;
  while (i < m) {
    var n = Math.min(i + 4096, m);
    for (; i < n; i += 4) {
      b += (a += data.charCodeAt(i)) + (a += data.charCodeAt(i + 1)) + (a += data.charCodeAt(i + 2)) + (a += data.charCodeAt(i + 3));
    }
    a %= MOD;
    b %= MOD;
  }
  for (; i < l; i++) {
    b += a += data.charCodeAt(i);
  }
  a %= MOD;
  b %= MOD;
  return a | b << 16;
}

module.exports = adler32;

/***/ }),
/* 228 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _prodInvariant = __webpack_require__(4);

var ReactPropTypeLocationNames = __webpack_require__(208);
var ReactPropTypesSecret = __webpack_require__(97);

var invariant = __webpack_require__(2);
var warning = __webpack_require__(3);

var ReactComponentTreeHook;

if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
  // Temporary hack.
  // Inline requires don't work well with Jest:
  // https://github.com/facebook/react/issues/7240
  // Remove the inline requires when we don't need them anymore:
  // https://github.com/facebook/react/pull/7178
  ReactComponentTreeHook = __webpack_require__(12);
}

var loggedTypeFailures = {};

/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?object} element The React element that is being type-checked
 * @param {?number} debugID The React component instance that is being type-checked
 * @private
 */
function checkReactTypeSpec(typeSpecs, values, location, componentName, element, debugID) {
  for (var typeSpecName in typeSpecs) {
    if (typeSpecs.hasOwnProperty(typeSpecName)) {
      var error;
      // Prop type validation may throw. In case they do, we don't want to
      // fail the render phase where it didn't fail before. So we log it.
      // After these have been cleaned up, we'll let them throw.
      try {
        // This is intentionally an invariant that gets caught. It's the same
        // behavior as without this statement except with a better message.
        !(typeof typeSpecs[typeSpecName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : _prodInvariant('84', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : void 0;
        error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
      } catch (ex) {
        error = ex;
      }
      process.env.NODE_ENV !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName, typeof error === 'undefined' ? 'undefined' : _typeof(error)) : void 0;
      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
        // Only monitor this failure once because there tends to be a lot of the
        // same error.
        loggedTypeFailures[error.message] = true;

        var componentStackInfo = '';

        if (process.env.NODE_ENV !== 'production') {
          if (!ReactComponentTreeHook) {
            ReactComponentTreeHook = __webpack_require__(12);
          }
          if (debugID !== null) {
            componentStackInfo = ReactComponentTreeHook.getStackAddendumByID(debugID);
          } else if (element !== null) {
            componentStackInfo = ReactComponentTreeHook.getCurrentStackAddendum(element);
          }
        }

        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed %s type: %s%s', location, error.message, componentStackInfo) : void 0;
      }
    }
  }
}

module.exports = checkReactTypeSpec;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 229 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var CSSProperty = __webpack_require__(86);
var warning = __webpack_require__(3);

var isUnitlessNumber = CSSProperty.isUnitlessNumber;
var styleWarnings = {};

/**
 * Convert a value into the proper css writable value. The style name `name`
 * should be logical (no hyphens), as specified
 * in `CSSProperty.isUnitlessNumber`.
 *
 * @param {string} name CSS property name such as `topMargin`.
 * @param {*} value CSS property value such as `10px`.
 * @param {ReactDOMComponent} component
 * @return {string} Normalized style value with dimensions applied.
 */
function dangerousStyleValue(name, value, component, isCustomProperty) {
  // Note that we've removed escapeTextForBrowser() calls here since the
  // whole string will be escaped when the attribute is injected into
  // the markup. If you provide unsafe user data here they can inject
  // arbitrary CSS which may be problematic (I couldn't repro this):
  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
  // This is not an XSS hole but instead a potential CSS injection issue
  // which has lead to a greater discussion about how we're going to
  // trust URLs moving forward. See #2115901

  var isEmpty = value == null || typeof value === 'boolean' || value === '';
  if (isEmpty) {
    return '';
  }

  var isNonNumeric = isNaN(value);
  if (isCustomProperty || isNonNumeric || value === 0 || isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {
    return '' + value; // cast to string
  }

  if (typeof value === 'string') {
    if (process.env.NODE_ENV !== 'production') {
      // Allow '0' to pass through without warning. 0 is already special and
      // doesn't require units, so we don't need to warn about it.
      if (component && value !== '0') {
        var owner = component._currentElement._owner;
        var ownerName = owner ? owner.getName() : null;
        if (ownerName && !styleWarnings[ownerName]) {
          styleWarnings[ownerName] = {};
        }
        var warned = false;
        if (ownerName) {
          var warnings = styleWarnings[ownerName];
          warned = warnings[name];
          if (!warned) {
            warnings[name] = true;
          }
        }
        if (!warned) {
          process.env.NODE_ENV !== 'production' ? warning(false, 'a `%s` tag (owner: `%s`) was passed a numeric string value ' + 'for CSS property `%s` (value: `%s`) which will be treated ' + 'as a unitless number in a future version of React.', component._currentElement.type, ownerName || 'unknown', name, value) : void 0;
        }
      }
    }
    value = value.trim();
  }
  return value + 'px';
}

module.exports = dangerousStyleValue;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 230 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(4);

var ReactCurrentOwner = __webpack_require__(20);
var ReactDOMComponentTree = __webpack_require__(7);
var ReactInstanceMap = __webpack_require__(38);

var getHostComponentFromComposite = __webpack_require__(101);
var invariant = __webpack_require__(2);
var warning = __webpack_require__(3);

/**
 * Returns the DOM node rendered by this element.
 *
 * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.finddomnode
 *
 * @param {ReactComponent|DOMElement} componentOrElement
 * @return {?DOMElement} The root node of this element.
 */
function findDOMNode(componentOrElement) {
  if (process.env.NODE_ENV !== 'production') {
    var owner = ReactCurrentOwner.current;
    if (owner !== null) {
      process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : void 0;
      owner._warnedAboutRefsInRender = true;
    }
  }
  if (componentOrElement == null) {
    return null;
  }
  if (componentOrElement.nodeType === 1) {
    return componentOrElement;
  }

  var inst = ReactInstanceMap.get(componentOrElement);
  if (inst) {
    inst = getHostComponentFromComposite(inst);
    return inst ? ReactDOMComponentTree.getNodeFromInstance(inst) : null;
  }

  if (typeof componentOrElement.render === 'function') {
     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'findDOMNode was called on an unmounted component.') : _prodInvariant('44') : void 0;
  } else {
     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element appears to be neither ReactComponent nor DOMNode (keys: %s)', Object.keys(componentOrElement)) : _prodInvariant('45', Object.keys(componentOrElement)) : void 0;
  }
}

module.exports = findDOMNode;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 231 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var KeyEscapeUtils = __webpack_require__(62);
var traverseAllChildren = __webpack_require__(107);
var warning = __webpack_require__(3);

var ReactComponentTreeHook;

if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
  // Temporary hack.
  // Inline requires don't work well with Jest:
  // https://github.com/facebook/react/issues/7240
  // Remove the inline requires when we don't need them anymore:
  // https://github.com/facebook/react/pull/7178
  ReactComponentTreeHook = __webpack_require__(12);
}

/**
 * @param {function} traverseContext Context passed through traversal.
 * @param {?ReactComponent} child React child component.
 * @param {!string} name String name of key path to child.
 * @param {number=} selfDebugID Optional debugID of the current internal instance.
 */
function flattenSingleChildIntoContext(traverseContext, child, name, selfDebugID) {
  // We found a component instance.
  if (traverseContext && (typeof traverseContext === 'undefined' ? 'undefined' : _typeof(traverseContext)) === 'object') {
    var result = traverseContext;
    var keyUnique = result[name] === undefined;
    if (process.env.NODE_ENV !== 'production') {
      if (!ReactComponentTreeHook) {
        ReactComponentTreeHook = __webpack_require__(12);
      }
      if (!keyUnique) {
        process.env.NODE_ENV !== 'production' ? warning(false, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.%s', KeyEscapeUtils.unescape(name), ReactComponentTreeHook.getStackAddendumByID(selfDebugID)) : void 0;
      }
    }
    if (keyUnique && child != null) {
      result[name] = child;
    }
  }
}

/**
 * Flattens children that are typically specified as `props.children`. Any null
 * children will not be included in the resulting object.
 * @return {!object} flattened children keyed by name.
 */
function flattenChildren(children, selfDebugID) {
  if (children == null) {
    return children;
  }
  var result = {};

  if (process.env.NODE_ENV !== 'production') {
    traverseAllChildren(children, function (traverseContext, child, name) {
      return flattenSingleChildIntoContext(traverseContext, child, name, selfDebugID);
    }, result);
  } else {
    traverseAllChildren(children, flattenSingleChildIntoContext, result);
  }
  return result;
}

module.exports = flattenChildren;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 232 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var getEventCharCode = __webpack_require__(68);

/**
 * Normalization of deprecated HTML5 `key` values
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */
var normalizeKey = {
  Esc: 'Escape',
  Spacebar: ' ',
  Left: 'ArrowLeft',
  Up: 'ArrowUp',
  Right: 'ArrowRight',
  Down: 'ArrowDown',
  Del: 'Delete',
  Win: 'OS',
  Menu: 'ContextMenu',
  Apps: 'ContextMenu',
  Scroll: 'ScrollLock',
  MozPrintableKey: 'Unidentified'
};

/**
 * Translation from legacy `keyCode` to HTML5 `key`
 * Only special keys supported, all others depend on keyboard layout or browser
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */
var translateToKey = {
  8: 'Backspace',
  9: 'Tab',
  12: 'Clear',
  13: 'Enter',
  16: 'Shift',
  17: 'Control',
  18: 'Alt',
  19: 'Pause',
  20: 'CapsLock',
  27: 'Escape',
  32: ' ',
  33: 'PageUp',
  34: 'PageDown',
  35: 'End',
  36: 'Home',
  37: 'ArrowLeft',
  38: 'ArrowUp',
  39: 'ArrowRight',
  40: 'ArrowDown',
  45: 'Insert',
  46: 'Delete',
  112: 'F1',
  113: 'F2',
  114: 'F3',
  115: 'F4',
  116: 'F5',
  117: 'F6',
  118: 'F7',
  119: 'F8',
  120: 'F9',
  121: 'F10',
  122: 'F11',
  123: 'F12',
  144: 'NumLock',
  145: 'ScrollLock',
  224: 'Meta'
};

/**
 * @param {object} nativeEvent Native browser event.
 * @return {string} Normalized `key` property.
 */
function getEventKey(nativeEvent) {
  if (nativeEvent.key) {
    // Normalize inconsistent values reported by browsers due to
    // implementations of a working draft specification.

    // FireFox implements `key` but returns `MozPrintableKey` for all
    // printable characters (normalized to `Unidentified`), ignore it.
    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
    if (key !== 'Unidentified') {
      return key;
    }
  }

  // Browser does not implement `key`, polyfill as much of it as we can.
  if (nativeEvent.type === 'keypress') {
    var charCode = getEventCharCode(nativeEvent);

    // The enter-key is technically both printable and non-printable and can
    // thus be captured by `keypress`, no other non-printable key should.
    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
  }
  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
    // While user keyboard layout determines the actual meaning of each
    // `keyCode` value, almost all function keys have a universal value.
    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
  }
  return '';
}

module.exports = getEventKey;

/***/ }),
/* 233 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



/* global Symbol */

var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

/**
 * Returns the iterator method function contained on the iterable object.
 *
 * Be sure to invoke the function with the iterable as context:
 *
 *     var iteratorFn = getIteratorFn(myIterable);
 *     if (iteratorFn) {
 *       var iterator = iteratorFn.call(myIterable);
 *       ...
 *     }
 *
 * @param {?object} maybeIterable
 * @return {?function}
 */
function getIteratorFn(maybeIterable) {
  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
  if (typeof iteratorFn === 'function') {
    return iteratorFn;
  }
}

module.exports = getIteratorFn;

/***/ }),
/* 234 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



/**
 * Given any node return the first leaf node without children.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {DOMElement|DOMTextNode}
 */

function getLeafNode(node) {
  while (node && node.firstChild) {
    node = node.firstChild;
  }
  return node;
}

/**
 * Get the next sibling within a container. This will walk up the
 * DOM if a node's siblings have been exhausted.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {?DOMElement|DOMTextNode}
 */
function getSiblingNode(node) {
  while (node) {
    if (node.nextSibling) {
      return node.nextSibling;
    }
    node = node.parentNode;
  }
}

/**
 * Get object describing the nodes which contain characters at offset.
 *
 * @param {DOMElement|DOMTextNode} root
 * @param {number} offset
 * @return {?object}
 */
function getNodeForCharacterOffset(root, offset) {
  var node = getLeafNode(root);
  var nodeStart = 0;
  var nodeEnd = 0;

  while (node) {
    if (node.nodeType === 3) {
      nodeEnd = nodeStart + node.textContent.length;

      if (nodeStart <= offset && nodeEnd >= offset) {
        return {
          node: node,
          offset: offset - nodeStart
        };
      }

      nodeStart = nodeEnd;
    }

    node = getLeafNode(getSiblingNode(node));
  }
}

module.exports = getNodeForCharacterOffset;

/***/ }),
/* 235 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ExecutionEnvironment = __webpack_require__(9);

/**
 * Generate a mapping of standard vendor prefixes using the defined style property and event name.
 *
 * @param {string} styleProp
 * @param {string} eventName
 * @returns {object}
 */
function makePrefixMap(styleProp, eventName) {
  var prefixes = {};

  prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
  prefixes['Webkit' + styleProp] = 'webkit' + eventName;
  prefixes['Moz' + styleProp] = 'moz' + eventName;
  prefixes['ms' + styleProp] = 'MS' + eventName;
  prefixes['O' + styleProp] = 'o' + eventName.toLowerCase();

  return prefixes;
}

/**
 * A list of event names to a configurable list of vendor prefixes.
 */
var vendorPrefixes = {
  animationend: makePrefixMap('Animation', 'AnimationEnd'),
  animationiteration: makePrefixMap('Animation', 'AnimationIteration'),
  animationstart: makePrefixMap('Animation', 'AnimationStart'),
  transitionend: makePrefixMap('Transition', 'TransitionEnd')
};

/**
 * Event names that have already been detected and prefixed (if applicable).
 */
var prefixedEventNames = {};

/**
 * Element to check for prefixes on.
 */
var style = {};

/**
 * Bootstrap if a DOM exists.
 */
if (ExecutionEnvironment.canUseDOM) {
  style = document.createElement('div').style;

  // On some platforms, in particular some releases of Android 4.x,
  // the un-prefixed "animation" and "transition" properties are defined on the
  // style object but the events that fire will still be prefixed, so we need
  // to check if the un-prefixed events are usable, and if not remove them from the map.
  if (!('AnimationEvent' in window)) {
    delete vendorPrefixes.animationend.animation;
    delete vendorPrefixes.animationiteration.animation;
    delete vendorPrefixes.animationstart.animation;
  }

  // Same as above
  if (!('TransitionEvent' in window)) {
    delete vendorPrefixes.transitionend.transition;
  }
}

/**
 * Attempts to determine the correct vendor prefixed event name.
 *
 * @param {string} eventName
 * @returns {string}
 */
function getVendorPrefixedEventName(eventName) {
  if (prefixedEventNames[eventName]) {
    return prefixedEventNames[eventName];
  } else if (!vendorPrefixes[eventName]) {
    return eventName;
  }

  var prefixMap = vendorPrefixes[eventName];

  for (var styleProp in prefixMap) {
    if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
      return prefixedEventNames[eventName] = prefixMap[styleProp];
    }
  }

  return '';
}

module.exports = getVendorPrefixedEventName;

/***/ }),
/* 236 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var escapeTextContentForBrowser = __webpack_require__(47);

/**
 * Escapes attribute value to prevent scripting attacks.
 *
 * @param {*} value Value to escape.
 * @return {string} An escaped string.
 */
function quoteAttributeValueForBrowser(value) {
  return '"' + escapeTextContentForBrowser(value) + '"';
}

module.exports = quoteAttributeValueForBrowser;

/***/ }),
/* 237 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ReactMount = __webpack_require__(95);

module.exports = ReactMount.renderSubtreeIntoContainer;

/***/ }),
/* 238 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



/**
 * Escape and wrap key so it is safe to use as a reactid
 *
 * @param {string} key to be escaped.
 * @return {string} the escaped key.
 */

function escape(key) {
  var escapeRegex = /[=:]/g;
  var escaperLookup = {
    '=': '=0',
    ':': '=2'
  };
  var escapedString = ('' + key).replace(escapeRegex, function (match) {
    return escaperLookup[match];
  });

  return '$' + escapedString;
}

/**
 * Unescape and unwrap key for human-readable display
 *
 * @param {string} key to unescape.
 * @return {string} the unescaped key.
 */
function unescape(key) {
  var unescapeRegex = /(=0|=2)/g;
  var unescaperLookup = {
    '=0': '=',
    '=2': ':'
  };
  var keySubstring = key[0] === '.' && key[1] === '$' ? key.substring(2) : key.substring(1);

  return ('' + keySubstring).replace(unescapeRegex, function (match) {
    return unescaperLookup[match];
  });
}

var KeyEscapeUtils = {
  escape: escape,
  unescape: unescape
};

module.exports = KeyEscapeUtils;

/***/ }),
/* 239 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var _prodInvariant = __webpack_require__(33);

var invariant = __webpack_require__(2);

/**
 * Static poolers. Several custom versions for each potential number of
 * arguments. A completely generic pooler is easy to implement, but would
 * require accessing the `arguments` object. In each of these, `this` refers to
 * the Class itself, not an instance. If any others are needed, simply add them
 * here, or in their own files.
 */
var oneArgumentPooler = function oneArgumentPooler(copyFieldsFrom) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, copyFieldsFrom);
    return instance;
  } else {
    return new Klass(copyFieldsFrom);
  }
};

var twoArgumentPooler = function twoArgumentPooler(a1, a2) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2);
    return instance;
  } else {
    return new Klass(a1, a2);
  }
};

var threeArgumentPooler = function threeArgumentPooler(a1, a2, a3) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3);
    return instance;
  } else {
    return new Klass(a1, a2, a3);
  }
};

var fourArgumentPooler = function fourArgumentPooler(a1, a2, a3, a4) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3, a4);
    return instance;
  } else {
    return new Klass(a1, a2, a3, a4);
  }
};

var standardReleaser = function standardReleaser(instance) {
  var Klass = this;
  !(instance instanceof Klass) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Trying to release an instance into a pool of a different type.') : _prodInvariant('25') : void 0;
  instance.destructor();
  if (Klass.instancePool.length < Klass.poolSize) {
    Klass.instancePool.push(instance);
  }
};

var DEFAULT_POOL_SIZE = 10;
var DEFAULT_POOLER = oneArgumentPooler;

/**
 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
 * itself (statically) not adding any prototypical fields. Any CopyConstructor
 * you give this may have a `poolSize` property, and will look for a
 * prototypical `destructor` on instances.
 *
 * @param {Function} CopyConstructor Constructor that can be used to reset.
 * @param {Function} pooler Customizable pooler.
 */
var addPoolingTo = function addPoolingTo(CopyConstructor, pooler) {
  // Casting as any so that flow ignores the actual implementation and trusts
  // it to match the type we declared
  var NewKlass = CopyConstructor;
  NewKlass.instancePool = [];
  NewKlass.getPooled = pooler || DEFAULT_POOLER;
  if (!NewKlass.poolSize) {
    NewKlass.poolSize = DEFAULT_POOL_SIZE;
  }
  NewKlass.release = standardReleaser;
  return NewKlass;
};

var PooledClass = {
  addPoolingTo: addPoolingTo,
  oneArgumentPooler: oneArgumentPooler,
  twoArgumentPooler: twoArgumentPooler,
  threeArgumentPooler: threeArgumentPooler,
  fourArgumentPooler: fourArgumentPooler
};

module.exports = PooledClass;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 240 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var PooledClass = __webpack_require__(239);
var ReactElement = __webpack_require__(29);

var emptyFunction = __webpack_require__(17);
var traverseAllChildren = __webpack_require__(250);

var twoArgumentPooler = PooledClass.twoArgumentPooler;
var fourArgumentPooler = PooledClass.fourArgumentPooler;

var userProvidedKeyEscapeRegex = /\/+/g;
function escapeUserProvidedKey(text) {
  return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');
}

/**
 * PooledClass representing the bookkeeping associated with performing a child
 * traversal. Allows avoiding binding callbacks.
 *
 * @constructor ForEachBookKeeping
 * @param {!function} forEachFunction Function to perform traversal with.
 * @param {?*} forEachContext Context to perform context with.
 */
function ForEachBookKeeping(forEachFunction, forEachContext) {
  this.func = forEachFunction;
  this.context = forEachContext;
  this.count = 0;
}
ForEachBookKeeping.prototype.destructor = function () {
  this.func = null;
  this.context = null;
  this.count = 0;
};
PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);

function forEachSingleChild(bookKeeping, child, name) {
  var func = bookKeeping.func,
      context = bookKeeping.context;

  func.call(context, child, bookKeeping.count++);
}

/**
 * Iterates through children that are typically specified as `props.children`.
 *
 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.foreach
 *
 * The provided forEachFunc(child, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} forEachFunc
 * @param {*} forEachContext Context for forEachContext.
 */
function forEachChildren(children, forEachFunc, forEachContext) {
  if (children == null) {
    return children;
  }
  var traverseContext = ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
  traverseAllChildren(children, forEachSingleChild, traverseContext);
  ForEachBookKeeping.release(traverseContext);
}

/**
 * PooledClass representing the bookkeeping associated with performing a child
 * mapping. Allows avoiding binding callbacks.
 *
 * @constructor MapBookKeeping
 * @param {!*} mapResult Object containing the ordered map of results.
 * @param {!function} mapFunction Function to perform mapping with.
 * @param {?*} mapContext Context to perform mapping with.
 */
function MapBookKeeping(mapResult, keyPrefix, mapFunction, mapContext) {
  this.result = mapResult;
  this.keyPrefix = keyPrefix;
  this.func = mapFunction;
  this.context = mapContext;
  this.count = 0;
}
MapBookKeeping.prototype.destructor = function () {
  this.result = null;
  this.keyPrefix = null;
  this.func = null;
  this.context = null;
  this.count = 0;
};
PooledClass.addPoolingTo(MapBookKeeping, fourArgumentPooler);

function mapSingleChildIntoContext(bookKeeping, child, childKey) {
  var result = bookKeeping.result,
      keyPrefix = bookKeeping.keyPrefix,
      func = bookKeeping.func,
      context = bookKeeping.context;

  var mappedChild = func.call(context, child, bookKeeping.count++);
  if (Array.isArray(mappedChild)) {
    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, emptyFunction.thatReturnsArgument);
  } else if (mappedChild != null) {
    if (ReactElement.isValidElement(mappedChild)) {
      mappedChild = ReactElement.cloneAndReplaceKey(mappedChild,
      // Keep both the (mapped) and old keys if they differ, just as
      // traverseAllChildren used to do for objects as children
      keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);
    }
    result.push(mappedChild);
  }
}

function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
  var escapedPrefix = '';
  if (prefix != null) {
    escapedPrefix = escapeUserProvidedKey(prefix) + '/';
  }
  var traverseContext = MapBookKeeping.getPooled(array, escapedPrefix, func, context);
  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
  MapBookKeeping.release(traverseContext);
}

/**
 * Maps children that are typically specified as `props.children`.
 *
 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.map
 *
 * The provided mapFunction(child, key, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} func The map function.
 * @param {*} context Context for mapFunction.
 * @return {object} Object containing the ordered map of results.
 */
function mapChildren(children, func, context) {
  if (children == null) {
    return children;
  }
  var result = [];
  mapIntoWithKeyPrefixInternal(children, result, null, func, context);
  return result;
}

function forEachSingleChildDummy(traverseContext, child, name) {
  return null;
}

/**
 * Count the number of children that are typically specified as
 * `props.children`.
 *
 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.count
 *
 * @param {?*} children Children tree container.
 * @return {number} The number of children.
 */
function countChildren(children, context) {
  return traverseAllChildren(children, forEachSingleChildDummy, null);
}

/**
 * Flatten a children object (typically specified as `props.children`) and
 * return an array with appropriately re-keyed children.
 *
 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.toarray
 */
function toArray(children) {
  var result = [];
  mapIntoWithKeyPrefixInternal(children, result, null, emptyFunction.thatReturnsArgument);
  return result;
}

var ReactChildren = {
  forEach: forEachChildren,
  map: mapChildren,
  mapIntoWithKeyPrefixInternal: mapIntoWithKeyPrefixInternal,
  count: countChildren,
  toArray: toArray
};

module.exports = ReactChildren;

/***/ }),
/* 241 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ReactElement = __webpack_require__(29);

/**
 * Create a factory that creates HTML tag elements.
 *
 * @private
 */
var createDOMFactory = ReactElement.createFactory;
if (process.env.NODE_ENV !== 'production') {
  var ReactElementValidator = __webpack_require__(110);
  createDOMFactory = ReactElementValidator.createFactory;
}

/**
 * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
 *
 * @public
 */
var ReactDOMFactories = {
  a: createDOMFactory('a'),
  abbr: createDOMFactory('abbr'),
  address: createDOMFactory('address'),
  area: createDOMFactory('area'),
  article: createDOMFactory('article'),
  aside: createDOMFactory('aside'),
  audio: createDOMFactory('audio'),
  b: createDOMFactory('b'),
  base: createDOMFactory('base'),
  bdi: createDOMFactory('bdi'),
  bdo: createDOMFactory('bdo'),
  big: createDOMFactory('big'),
  blockquote: createDOMFactory('blockquote'),
  body: createDOMFactory('body'),
  br: createDOMFactory('br'),
  button: createDOMFactory('button'),
  canvas: createDOMFactory('canvas'),
  caption: createDOMFactory('caption'),
  cite: createDOMFactory('cite'),
  code: createDOMFactory('code'),
  col: createDOMFactory('col'),
  colgroup: createDOMFactory('colgroup'),
  data: createDOMFactory('data'),
  datalist: createDOMFactory('datalist'),
  dd: createDOMFactory('dd'),
  del: createDOMFactory('del'),
  details: createDOMFactory('details'),
  dfn: createDOMFactory('dfn'),
  dialog: createDOMFactory('dialog'),
  div: createDOMFactory('div'),
  dl: createDOMFactory('dl'),
  dt: createDOMFactory('dt'),
  em: createDOMFactory('em'),
  embed: createDOMFactory('embed'),
  fieldset: createDOMFactory('fieldset'),
  figcaption: createDOMFactory('figcaption'),
  figure: createDOMFactory('figure'),
  footer: createDOMFactory('footer'),
  form: createDOMFactory('form'),
  h1: createDOMFactory('h1'),
  h2: createDOMFactory('h2'),
  h3: createDOMFactory('h3'),
  h4: createDOMFactory('h4'),
  h5: createDOMFactory('h5'),
  h6: createDOMFactory('h6'),
  head: createDOMFactory('head'),
  header: createDOMFactory('header'),
  hgroup: createDOMFactory('hgroup'),
  hr: createDOMFactory('hr'),
  html: createDOMFactory('html'),
  i: createDOMFactory('i'),
  iframe: createDOMFactory('iframe'),
  img: createDOMFactory('img'),
  input: createDOMFactory('input'),
  ins: createDOMFactory('ins'),
  kbd: createDOMFactory('kbd'),
  keygen: createDOMFactory('keygen'),
  label: createDOMFactory('label'),
  legend: createDOMFactory('legend'),
  li: createDOMFactory('li'),
  link: createDOMFactory('link'),
  main: createDOMFactory('main'),
  map: createDOMFactory('map'),
  mark: createDOMFactory('mark'),
  menu: createDOMFactory('menu'),
  menuitem: createDOMFactory('menuitem'),
  meta: createDOMFactory('meta'),
  meter: createDOMFactory('meter'),
  nav: createDOMFactory('nav'),
  noscript: createDOMFactory('noscript'),
  object: createDOMFactory('object'),
  ol: createDOMFactory('ol'),
  optgroup: createDOMFactory('optgroup'),
  option: createDOMFactory('option'),
  output: createDOMFactory('output'),
  p: createDOMFactory('p'),
  param: createDOMFactory('param'),
  picture: createDOMFactory('picture'),
  pre: createDOMFactory('pre'),
  progress: createDOMFactory('progress'),
  q: createDOMFactory('q'),
  rp: createDOMFactory('rp'),
  rt: createDOMFactory('rt'),
  ruby: createDOMFactory('ruby'),
  s: createDOMFactory('s'),
  samp: createDOMFactory('samp'),
  script: createDOMFactory('script'),
  section: createDOMFactory('section'),
  select: createDOMFactory('select'),
  small: createDOMFactory('small'),
  source: createDOMFactory('source'),
  span: createDOMFactory('span'),
  strong: createDOMFactory('strong'),
  style: createDOMFactory('style'),
  sub: createDOMFactory('sub'),
  summary: createDOMFactory('summary'),
  sup: createDOMFactory('sup'),
  table: createDOMFactory('table'),
  tbody: createDOMFactory('tbody'),
  td: createDOMFactory('td'),
  textarea: createDOMFactory('textarea'),
  tfoot: createDOMFactory('tfoot'),
  th: createDOMFactory('th'),
  thead: createDOMFactory('thead'),
  time: createDOMFactory('time'),
  title: createDOMFactory('title'),
  tr: createDOMFactory('tr'),
  track: createDOMFactory('track'),
  u: createDOMFactory('u'),
  ul: createDOMFactory('ul'),
  'var': createDOMFactory('var'),
  video: createDOMFactory('video'),
  wbr: createDOMFactory('wbr'),

  // SVG
  circle: createDOMFactory('circle'),
  clipPath: createDOMFactory('clipPath'),
  defs: createDOMFactory('defs'),
  ellipse: createDOMFactory('ellipse'),
  g: createDOMFactory('g'),
  image: createDOMFactory('image'),
  line: createDOMFactory('line'),
  linearGradient: createDOMFactory('linearGradient'),
  mask: createDOMFactory('mask'),
  path: createDOMFactory('path'),
  pattern: createDOMFactory('pattern'),
  polygon: createDOMFactory('polygon'),
  polyline: createDOMFactory('polyline'),
  radialGradient: createDOMFactory('radialGradient'),
  rect: createDOMFactory('rect'),
  stop: createDOMFactory('stop'),
  svg: createDOMFactory('svg'),
  text: createDOMFactory('text'),
  tspan: createDOMFactory('tspan')
};

module.exports = ReactDOMFactories;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 242 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var ReactPropTypeLocationNames = {};

if (process.env.NODE_ENV !== 'production') {
  ReactPropTypeLocationNames = {
    prop: 'prop',
    context: 'context',
    childContext: 'child context'
  };
}

module.exports = ReactPropTypeLocationNames;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 243 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _require = __webpack_require__(29),
    isValidElement = _require.isValidElement;

var factory = __webpack_require__(84);

module.exports = factory(isValidElement);

/***/ }),
/* 244 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

module.exports = ReactPropTypesSecret;

/***/ }),
/* 245 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



module.exports = '15.6.1';

/***/ }),
/* 246 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _prodInvariant = __webpack_require__(33);

var ReactPropTypeLocationNames = __webpack_require__(242);
var ReactPropTypesSecret = __webpack_require__(244);

var invariant = __webpack_require__(2);
var warning = __webpack_require__(3);

var ReactComponentTreeHook;

if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
  // Temporary hack.
  // Inline requires don't work well with Jest:
  // https://github.com/facebook/react/issues/7240
  // Remove the inline requires when we don't need them anymore:
  // https://github.com/facebook/react/pull/7178
  ReactComponentTreeHook = __webpack_require__(12);
}

var loggedTypeFailures = {};

/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?object} element The React element that is being type-checked
 * @param {?number} debugID The React component instance that is being type-checked
 * @private
 */
function checkReactTypeSpec(typeSpecs, values, location, componentName, element, debugID) {
  for (var typeSpecName in typeSpecs) {
    if (typeSpecs.hasOwnProperty(typeSpecName)) {
      var error;
      // Prop type validation may throw. In case they do, we don't want to
      // fail the render phase where it didn't fail before. So we log it.
      // After these have been cleaned up, we'll let them throw.
      try {
        // This is intentionally an invariant that gets caught. It's the same
        // behavior as without this statement except with a better message.
        !(typeof typeSpecs[typeSpecName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : _prodInvariant('84', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : void 0;
        error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
      } catch (ex) {
        error = ex;
      }
      process.env.NODE_ENV !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName, typeof error === 'undefined' ? 'undefined' : _typeof(error)) : void 0;
      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
        // Only monitor this failure once because there tends to be a lot of the
        // same error.
        loggedTypeFailures[error.message] = true;

        var componentStackInfo = '';

        if (process.env.NODE_ENV !== 'production') {
          if (!ReactComponentTreeHook) {
            ReactComponentTreeHook = __webpack_require__(12);
          }
          if (debugID !== null) {
            componentStackInfo = ReactComponentTreeHook.getStackAddendumByID(debugID);
          } else if (element !== null) {
            componentStackInfo = ReactComponentTreeHook.getCurrentStackAddendum(element);
          }
        }

        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed %s type: %s%s', location, error.message, componentStackInfo) : void 0;
      }
    }
  }
}

module.exports = checkReactTypeSpec;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 247 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _require = __webpack_require__(108),
    Component = _require.Component;

var _require2 = __webpack_require__(29),
    isValidElement = _require2.isValidElement;

var ReactNoopUpdateQueue = __webpack_require__(111);
var factory = __webpack_require__(150);

module.exports = factory(Component, isValidElement, ReactNoopUpdateQueue);

/***/ }),
/* 248 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var nextDebugID = 1;

function getNextDebugID() {
  return nextDebugID++;
}

module.exports = getNextDebugID;

/***/ }),
/* 249 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */


var _prodInvariant = __webpack_require__(33);

var ReactElement = __webpack_require__(29);

var invariant = __webpack_require__(2);

/**
 * Returns the first child in a collection of children and verifies that there
 * is only one child in the collection.
 *
 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.only
 *
 * The current implementation of this function assumes that a single child gets
 * passed without a wrapper, but the purpose of this helper function is to
 * abstract away the particular structure of children.
 *
 * @param {?object} children Child collection structure.
 * @return {ReactElement} The first and only `ReactElement` contained in the
 * structure.
 */
function onlyChild(children) {
  !ReactElement.isValidElement(children) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'React.Children.only expected to receive a single React element child.') : _prodInvariant('143') : void 0;
  return children;
}

module.exports = onlyChild;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 250 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _prodInvariant = __webpack_require__(33);

var ReactCurrentOwner = __webpack_require__(20);
var REACT_ELEMENT_TYPE = __webpack_require__(109);

var getIteratorFn = __webpack_require__(112);
var invariant = __webpack_require__(2);
var KeyEscapeUtils = __webpack_require__(238);
var warning = __webpack_require__(3);

var SEPARATOR = '.';
var SUBSEPARATOR = ':';

/**
 * This is inlined from ReactElement since this file is shared between
 * isomorphic and renderers. We could extract this to a
 *
 */

/**
 * TODO: Test that a single child and an array with one item have the same key
 * pattern.
 */

var didWarnAboutMaps = false;

/**
 * Generate a key string that identifies a component within a set.
 *
 * @param {*} component A component that could contain a manual key.
 * @param {number} index Index that is used if a manual key is not provided.
 * @return {string}
 */
function getComponentKey(component, index) {
  // Do some typechecking here since we call this blindly. We want to ensure
  // that we don't block potential future ES APIs.
  if (component && (typeof component === 'undefined' ? 'undefined' : _typeof(component)) === 'object' && component.key != null) {
    // Explicit key
    return KeyEscapeUtils.escape(component.key);
  }
  // Implicit key determined by the index in the set
  return index.toString(36);
}

/**
 * @param {?*} children Children tree container.
 * @param {!string} nameSoFar Name of the key path so far.
 * @param {!function} callback Callback to invoke with each child found.
 * @param {?*} traverseContext Used to pass information throughout the traversal
 * process.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
  var type = typeof children === 'undefined' ? 'undefined' : _typeof(children);

  if (type === 'undefined' || type === 'boolean') {
    // All of the above are perceived as null.
    children = null;
  }

  if (children === null || type === 'string' || type === 'number' ||
  // The following is inlined from ReactElement. This means we can optimize
  // some checks. React Fiber also inlines this logic for similar purposes.
  type === 'object' && children.$$typeof === REACT_ELEMENT_TYPE) {
    callback(traverseContext, children,
    // If it's the only child, treat the name as if it was wrapped in an array
    // so that it's consistent if the number of children grows.
    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
    return 1;
  }

  var child;
  var nextName;
  var subtreeCount = 0; // Count of children found in the current subtree.
  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      child = children[i];
      nextName = nextNamePrefix + getComponentKey(child, i);
      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
    }
  } else {
    var iteratorFn = getIteratorFn(children);
    if (iteratorFn) {
      var iterator = iteratorFn.call(children);
      var step;
      if (iteratorFn !== children.entries) {
        var ii = 0;
        while (!(step = iterator.next()).done) {
          child = step.value;
          nextName = nextNamePrefix + getComponentKey(child, ii++);
          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
        }
      } else {
        if (process.env.NODE_ENV !== 'production') {
          var mapsAsChildrenAddendum = '';
          if (ReactCurrentOwner.current) {
            var mapsAsChildrenOwnerName = ReactCurrentOwner.current.getName();
            if (mapsAsChildrenOwnerName) {
              mapsAsChildrenAddendum = ' Check the render method of `' + mapsAsChildrenOwnerName + '`.';
            }
          }
          process.env.NODE_ENV !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.%s', mapsAsChildrenAddendum) : void 0;
          didWarnAboutMaps = true;
        }
        // Iterator will provide entry [k,v] tuples rather than values.
        while (!(step = iterator.next()).done) {
          var entry = step.value;
          if (entry) {
            child = entry[1];
            nextName = nextNamePrefix + KeyEscapeUtils.escape(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
          }
        }
      }
    } else if (type === 'object') {
      var addendum = '';
      if (process.env.NODE_ENV !== 'production') {
        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
        if (children._isReactElement) {
          addendum = " It looks like you're using an element created by a different " + 'version of React. Make sure to use only one copy of React.';
        }
        if (ReactCurrentOwner.current) {
          var name = ReactCurrentOwner.current.getName();
          if (name) {
            addendum += ' Check the render method of `' + name + '`.';
          }
        }
      }
      var childrenString = String(children);
       true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : _prodInvariant('31', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : void 0;
    }
  }

  return subtreeCount;
}

/**
 * Traverses children that are typically specified as `props.children`, but
 * might also be specified through attributes:
 *
 * - `traverseAllChildren(this.props.children, ...)`
 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
 *
 * The `traverseContext` is an optional argument that is passed through the
 * entire traversal. It can be used to store accumulations or anything else that
 * the callback might find relevant.
 *
 * @param {?*} children Children tree object.
 * @param {!function} callback To invoke upon traversing each child.
 * @param {?*} traverseContext Context for traversal.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildren(children, callback, traverseContext) {
  if (children == null) {
    return 0;
  }

  return traverseAllChildrenImpl(children, '', callback, traverseContext);
}

module.exports = traverseAllChildren;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 251 */,
/* 252 */,
/* 253 */,
/* 254 */,
/* 255 */,
/* 256 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

/*/
 create by wangzy
 date:2016-05-17
 desc:excel数据导入组件
 */
var React = __webpack_require__(1);
var Modal = __webpack_require__(133);
var Button = __webpack_require__(10);
var Message = __webpack_require__(14);
var fileType = __webpack_require__(292);
var unit = __webpack_require__(5);
__webpack_require__(298);
var Import = React.createClass({
    displayName: "Import",

    propTypes: {
        name: React.PropTypes.string, //文件字段名称
        uploadurl: React.PropTypes.string.isRequired, //导入地址
        modelurl: React.PropTypes.string.isRequired, //模板下载地址
        failloadurl: React.PropTypes.string.isRequired, //导入失败下载地址
        importSuccess: React.PropTypes.func //上传成功事件
    },
    getDefaultProps: function getDefaultProps() {
        return {
            name: "",
            uploadurl: null,
            failloadurl: "javascript:void(0)"

        };
    },
    getInitialState: function getInitialState() {
        return {
            name: this.props.name,
            filename: "", //选择的文件名集合
            uploadDisabled: true, //是否允许导入
            choseDisabled: false, //是否允许选择文件
            giveupdisabled: true, //是否允许终止
            uploadurl: this.props.uploadurl,
            failloadurl: this.props.failloadurl,
            showfail: false,
            uploadInfo: []

        };
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {

        this.setState({
            name: nextProps.name,
            uploadurl: nextProps.uploadurl,
            failloadurl: nextProps.failloadurl
        });
    },
    componentDidUpdate: function componentDidUpdate() {},
    close: function close() {
        //关闭
        this.refs.modal.close();
    },
    open: function open() {
        //打开
        this.setState({
            uploadInfo: [], //更新提示
            choseDisabled: false, //可以再选择
            uploadDisabled: true, //不可以再导入
            giveupdisabled: true, //不可以终止
            filename: "", //清空文件名
            showfail: false //不显示下载导入失败的文件
        });
        this.clearFile(); //清空文件选择,方便下一次选择
        this.refs.modal.open();
    },
    onChange: function onChange(event) {
        //选择文件

        this.isSuccess = false; //没有执行完成
        if (this.state.choseDisabled) {
            return;
        }

        var files = event.target.files;
        var filename = ""; //文件名称
        var typevalidate = true; //文件类型正确
        if (files.length > 0) {
            if (files[0].type == "") {
                //苹果电脑存在的现象
                if (files[0].name.lastIndexOf(".xls") > -1 && files[0].name.lastIndexOf(".xls") + 3 == files[0].name.length - 1 || files[0].name.lastIndexOf(".xlsx") > -1 && files[0].name.lastIndexOf(".xlsx") + 3 == files[0].name.length - 1) {
                    typevalidate = true;
                    filename = files[0].name;
                } else {
                    typevalidate = false;
                }
            } else {
                if (!fileType.isExcel(files[0].type)) {
                    typevalidate = false;
                } else {
                    filename = files[0].name;
                }
            }
        } else {
            typevalidate = false;
        }

        if (typevalidate) {
            this.file = files[0]; //保存文件
            this.setState({
                filename: filename,
                uploadDisabled: false, //可以导入
                showfail: false
            });
        } else {
            this.file = null;
            this.setState({
                filename: filename,
                uploadDisabled: true, //不可以导入
                showfail: false
            });
        }
    },
    importBegin: function importBegin(name, title) {
        //开始的导入
        //清空一些数据值,这些数据不需要保存状态值中
        this.isgiveup = false; //默认标记不可以终止,这里没有采用状态值来标记,防止状态更新出现延迟导致统计数据不准确
        this.total = 0; //设置总记录数初始值
        this.failNum = 0; //失败数
        this.successNum = 0; //成功数
        this.importHandler(null); //开始导入
        this.setState({
            choseDisabled: true, //不可以再选择
            uploadDisabled: true, //不可以再导入
            giveupdisabled: false //可以终止
        });
    },
    giveup: function giveup() {
        //终止
        this.isgiveup = true;
        var uploadInfo = this.state.uploadInfo;
        uploadInfo.unshift(React.createElement(
            "div",
            { className: "info", key: "success" + (index + 2).toString() },
            "用户终止,成功数:" + this.successNum.toString() + ",失败数:" + this.failNum.toString()
        ));
        this.setState({
            uploadInfo: uploadInfo, //更新提示
            choseDisabled: false, //可以再选择
            uploadDisabled: true, //不可以再导入
            giveupdisabled: true, //不可以终止
            filename: "", //清空文件名
            showfail: false //不显示下载导入失败的文件
        });
        this.clearFile(); //清空文件选择,方便下一次选择
    },
    importHandler: function importHandler(index) {
        //执行导入事件
        if (this.isgiveup) {
            return;
        }
        var formData = new FormData(); // 实例化一个表单数据对象
        if (index == null) {
            //导入文件
            if (this.file != null) {

                if (this.state.uploadurl) {
                    formData.append(this.state.name, this.file);
                } else {
                    Message.alert("您没有设置上传路径");
                    return;
                }
            }
        } else {
            //执行数据导入
            var image = new Image();
            formData.append(this.state.name, image);
            formData.append("index", index);
        }
        // 实例化一个AJAX对象
        var xhr = new XMLHttpRequest();
        xhr.upload.addEventListener("progress", this.uploadProgress.bind(this, index), false); //上传进度
        xhr.addEventListener("load", this.uploadComplete.bind(this, index), false);
        xhr.addEventListener("error", this.uploadFailed, false);
        xhr.addEventListener("abort", this.uploadCanceled, false);
        xhr.open("POST", this.state.uploadurl, true);
        // 发送表单数据
        xhr.send(formData);
    },
    uploadProgress: function uploadProgress(index, event) {
        if (event.lengthComputable) {
            if (index == null) {
                //导入文件
                var percentComplete = Math.round(event.loaded * 100 / event.total);
                if (percentComplete < 100) {
                    this.setState({
                        uploadInfo: [React.createElement(
                            "div",
                            { key: "upload" + percentComplete.toString(), className: "success" },
                            "文件上传" + percentComplete + "%"
                        )]
                    });
                } else {
                    this.setState({
                        uploadInfo: [React.createElement(
                            "div",
                            { key: "upload" + percentComplete.toString(), className: "success" },
                            "文件上传" + percentComplete + "%,开始读取文件"
                        )]
                    });
                }
            }
        } else {
            this.uploadFailed();
        }
    },
    uploadComplete: function uploadComplete(index, event) {
        var xhr = event.target;
        var uploadInfo = this.state.uploadInfo;
        if (xhr.readyState == 4 && xhr.status == 200) {
            var result = JSON.parse(xhr.responseText);
            if (result && result.success != null && result.success != undefined) {
                if (result.success == true) {
                    if (index == null) {
                        //导入文件成功
                        this.total = result.data.total; //得到总记录数
                        uploadInfo.unshift(React.createElement(
                            "div",
                            { key: "read", className: "success" },
                            "文件读取成功,总共" + this.total + "条数据,开始处理..."
                        ));
                        this.setState({
                            uploadInfo: uploadInfo
                        });
                    } else {
                        if (result.data.success) {
                            this.successNum += 1;
                            uploadInfo.unshift(React.createElement(
                                "div",
                                { className: "success", key: "success" + (index + 2).toString() },
                                "序号为" + (index + 2).toString() + "行,导入成功"
                            ));
                        } else {
                            this.failNum += 1;
                            uploadInfo.unshift(React.createElement(
                                "div",
                                { className: "fail", key: "fail" + (index + 2).toString() },
                                "序号为" + (index + 2).toString() + "行,导入失败," + result.data.message
                            ));
                        }
                        this.setState({
                            uploadInfo: uploadInfo
                        });
                    }
                    if (index == null) {
                        this.importHandler(0); //开始导入第一条数据
                    } else {

                        if (index >= this.total - 1) {
                            //代表已经执行完最后一条记录了
                            uploadInfo.unshift(React.createElement(
                                "div",
                                { className: "info", key: "successall" },
                                "所有数据执行完成,成功数:" + this.successNum.toString() + ",失败数:" + this.failNum.toString()
                            ));
                            this.setState({
                                choseDisabled: false, //可以再选择
                                uploadDisabled: true, //不可以再导入
                                giveupdisabled: true, //不可以终止
                                filename: "", //清空文件名
                                showfail: this.failNum > 0 ? true : false //是否显示下载失败信息
                            });
                            this.clearFile(); //清空文件选择,方便下一次选择

                            if (this.props.importSuccess) {
                                this.props.importSuccess(result);
                            }
                        } else {
                            this.importHandler(index * 1 + 1); //再次执行
                        }
                    }
                } else {
                    this.clearFile(); //清空文件,方便下次选择
                    if (index == null) {
                        Message.error("文件读取失败,原因:" + result.message);
                        this.setState({
                            uploadDisabled: true, //不可以再导入
                            choseDisabled: false //可以再选择
                        });
                    } else {
                        Message.error("服务器处理失败,导入中断,原因:" + result.message);
                        this.setState({
                            uploadDisabled: true, //不可以再导入
                            choseDisabled: false //可以再选择
                        });
                    }
                }
            } else {
                this.clearFile();
                Message.error("服务器返回值非标准JSON格式,无法处理,请联系管理员");
                this.setState({

                    uploadDisabled: true, //不可以再导入
                    choseDisabled: false //可以再选择
                });
            }
        } else {
            this.clearFile();
            if (xhr.statusText.indexOf("404")) {
                Message.error("服务器没有响应,请检查您的上传路径");
                this.setState({

                    uploadDisabled: true, //不可以再导入
                    choseDisabled: false //可以再选择
                });
            } else {
                Message.error("服务器处理错误");
                this.setState({

                    uploadDisabled: true, //不可以再导入
                    choseDisabled: false //可以再选择
                });
            }
        }
    },
    uploadFailed: function uploadFailed(event) {
        this.clearFile();
        this.setState({

            choseDisabled: false, //可以再选择
            uploadDisabled: true //不可以再导入


        });
        Message.error("上传失败");
    },
    uploadCanceled: function uploadCanceled(evt) {
        //保留这个方法
    },
    clearFile: function clearFile() {
        try {
            this.refs.import.value = ""; //清空,以方便可以重新选择相同文件
        } catch (e) {}
    },
    render: function render() {
        var accepts = null; //接受的文件类型
        var acceptMap = fileType.getTypeMap("excel");
        if (acceptMap != null) {
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {

                for (var _iterator = acceptMap.values()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var value = _step.value;

                    if (accepts == null) {
                        accepts = value;
                    } else {
                        accepts += "," + value;
                    }
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }
        }
        var props = {
            accept: accepts,
            multiple: false
        };

        return React.createElement(
            Modal,
            { ref: "modal", width: 460, height: 340, title: "\u8BF7\u9009\u62E9\u5BFC\u5165\u6587\u4EF6" },
            React.createElement(
                "div",
                { className: "import-section" },
                React.createElement("input", { type: "text", name: this.state.name, className: "import-text", value: this.state.filename, readOnly: true }),
                React.createElement("input", _extends({ type: "file", ref: "import", className: "import-file", onChange: this.onChange }, props, { style: { display: this.state.choseDisabled ? "none" : "inline" } })),
                React.createElement(Button, { type: "button", disabled: this.state.choseDisabled, className: "import-chose", theme: "cancel", title: "\u9009\u62E9\u6587\u4EF6" })
            ),
            React.createElement(
                "div",
                { className: "import-submit" },
                React.createElement(
                    "a",
                    { className: "import-failload", target: "blank", href: this.props.failloadurl, style: { display: this.state.showfail == true ? "inline" : "none" } },
                    "\u4E0B\u8F7D\u5931\u8D25\u4FE1\u606F"
                ),
                React.createElement(Button, { title: "\u5BFC\u5165", disabled: this.state.uploadDisabled, onClick: this.importBegin, theme: "green" }),
                React.createElement(Button, { title: "\u7EC8\u6B62", disabled: this.state.giveupdisabled, onClick: this.giveup, theme: "cancel" }),
                React.createElement(Button, { title: "\u5173\u95ED", onClick: this.close, theme: "cancel" })
            ),
            React.createElement(
                "a",
                { className: "import-downloadmodel", href: this.props.modelurl },
                "\u4E0B\u8F7D\u6A21\u7248"
            ),
            React.createElement(
                "div",
                { className: "import-upload-info" },
                this.state.uploadInfo
            )
        );
    }
});
module.exports = Import;

/***/ }),
/* 257 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*
create by wangzhiyong
date:2016-10-30
desc:单页面应用的事件处理模型
 */
var React = __webpack_require__(1);
var Message = __webpack_require__(14);
var unit = __webpack_require__(5);
var FetchModel = __webpack_require__(13);
var PageHandlerMixins = {
    getHandler: function getHandler(id, disabled) {
        //获取一个实例模型
        var getUrl = this.state.getUrl;
        if (getUrl.indexOf("?") > 0) {
            //已经带了参数

            getUrl = getUrl + "&id=" + id;
        } else {
            getUrl = getUrl + "?id=" + id;
        }
        var fetchModel = new FetchModel(getUrl, this.getSuccess.bind(disabled), null, this.fetchErrorHandler);
        unit.fetch.get(fetchModel);
    },
    getSuccess: function getSuccess(result, disabled) {
        //
        if (result.data) {
            var model = this.state.model;
            for (var index = 0; index < model.length; index++) {
                if (result.data[model[index].name]) {
                    model[index].value = result.data[model[index].name];
                } else {
                    model[index].value = null; //清空
                }
            }
            this.setState({
                model: model,
                disabled: false, //非只读
                submitButton: this.submitButton(disabled) //提交按钮是否有效
            });
        }
    },
    addOpen: function addOpen() {
        this.refs.slide.open();
        this.state.model = this.state.model.map(function (item, index) {
            item.value = "";
            return item;
        });
        console.log(this.state.model);
        this.setState({
            panelTitle: "新增",
            opType: "add",
            model: this.state.model
        });
    },
    addHandler: function addHandler(model) {
        //新增事件
        var fetchModel = new FetchModel(this.state.addUrl, this.addSuccess, model, this.fetchErrorHandler);
        unit.fetch.post(fetchModel);
    },
    addSuccess: function addSuccess(result) {
        //新增成功
        this.refs.datagrid.reload(); //刷新列表
    },
    deleteHandler: function deleteHandler(id) {
        var _this = this;

        //删除事件
        Message.confirm("确定删除这条记录吗?", function () {
            var deleteUrl = _this.state.deleteUrl;
            if (deleteUrl.indexOf("?") > 0) {
                //已经带了参数

                deleteUrl = deleteUrl + "&id=" + id;
            } else {
                deleteUrl = deleteUrl + "?id=" + id;
            }
            var fetchModel = new FetchModel(deleteUrl, _this.deleteSuccess, null, _this.fetchErrorHandler);
            unit.fetch.get(fetchModel);
        });
    },
    deleteSuccess: function deleteSuccess(result) {
        //删除成功
        this.refs.datagrid.reload(); //刷新列表
    },
    updateOpen: function updateOpen() {
        var model = this.refs.datagrid.getFocusRowData();
        if (model) {
            this.refs.slide.open();
            this.state.model = this.state.model.map(function (item, index) {
                item.value = model[item.name];
                return item;
            });
            this.setState({
                panelTitle: "修改",
                opType: "update",
                model: this.state.model
            });
        } else {
            Message.alert("请选择一条记录");
        }
    },
    updateHandler: function updateHandler(model) {
        //更新事件
        var fetchModel = new FetchModel(this.state.updateUrl, this.addSuccess, model, this.fetchErrorHandler);
        unit.fetch.post(fetchModel);
    },
    updateSuccess: function updateSuccess(result) {
        //更新成功
        this.refs.datagrid.reload(); //刷新列表
    },
    filterHandler: function filterHandler(params) {
        //筛选查询
        this.refs.datagrid.reload(params);
    },
    openSlideHandler: function openSlideHandler(type, id) {
        //打开表单面板
        this.refs.form.clearData(); //先清空原来值
        switch (type) {
            case "add":
                //新增
                this.setState({
                    disabled: false, //非只读
                    submitButton: this.submitButton(false) //提交按钮有效
                });
                break;
            case "update":
                //更新
                this.getHandler(id, false); //提交按钮有效
                break;
            case "search":
                //查询
                this.getHandler(id, true); //提交按钮无效
                break;
        }
    },
    submitHandler: function submitHandler() {
        //提交按钮事件
        var model = this.refs.form.getData(); //获取数据
        switch (this.state.opType) {
            case "add":
                this.addHandler(model);
                break;
            case "update":
                this.updateHandler(model);
                break;
        }
    },
    btnHandler: function btnHandler(name, title) {
        if (name == "add") {
            this.addOpen();
        } else if (name == "update") {
            this.updateOpen();
        }
    },
    fetchErrorHandler: function fetchErrorHandler(errorCode, errorMssage) {
        //统一错误处理
        console.log(errorCode, errorMssage);
        Message.error("操作失败，原因" + errorMssage);
    }
};
module.exports = PageHandlerMixins;

/***/ }),
/* 258 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*
 create by wangzhiyong
 date:2016-10-30
 desc:单页面应用的事件处理模型
 */

var React = __webpack_require__(1);
var ButtonModel = __webpack_require__(138);
var FetchModel = __webpack_require__(13);
var FormModel = __webpack_require__(139);
var HeaderModel = __webpack_require__(140);
var unit = __webpack_require__(5);
var PageModelMixins = {
    modelUrl: function modelUrl() {
        //获取模型的url
        var url = "";
        if (this.props.modelUrl && this.props.modelUrl !== "") {
            url = this.props.modelUrl;
        } else {
            var url = this.props.corsUrl + this.props.controller + "/GetModel";
        }
        return url;
    },
    getUrl: function getUrl() {
        //获取实例的url
        var url = "";
        if (this.props.getUrl && this.props.getUrl !== "") {
            url = this.props.getUrl;
        } else {
            var url = this.props.corsUrl + this.props.controller + "/Get";
        }

        return url;
    },
    addUrl: function addUrl() {
        //新增时年请求地址
        var url = "";
        if (this.props.addUrl && this.props.addUrl !== "") {
            url = this.props.addUrl;
        } else {
            var url = this.props.corsUrl + this.props.controller + "/Add";
        }

        return url;
    },
    deleteUrl: function deleteUrl() {
        //新增时年请求地址
        var url = "";
        if (this.props.deleteUrl && this.props.deleteUrl !== "") {
            url = this.props.deleteUrl;
        } else {
            var url = this.props.corsUrl + this.props.controller + "/Delete";
        }

        return url;
    },
    updateUrl: function updateUrl() {
        //新增时年请求地址
        var url = "";
        if (this.props.updateUrl && this.props.updateUrl !== "") {
            url = this.props.updateUrl;
        } else {
            var url = this.props.corsUrl + this.props.controller + "/Update";
        }

        return url;
    },
    queryUrl: function queryUrl() {
        //不分页查询(也可以理解为按条件查询)
        var url = "";
        if (this.props.queryUrl && this.props.queryUrl !== "") {
            url = this.props.queryUrl;
        } else {
            var url = this.props.corsUrl + this.props.controller + "/Query";
        }

        return url;
    },
    pageUrl: function pageUrl() {
        //分页时的请求地址
        var url = "";
        if (this.props.pageUrl && this.props.pageUrl !== "") {
            url = this.props.pageUrl;
        } else {
            var url = this.props.corsUrl + this.props.controller + "/Page";
        }

        return url;
    },
    submitButton: function submitButton(disabled) {
        //提交按钮对象
        var btn = new ButtonModel("btnSubmit", "提交");
        btn.theme = this.props.submitTheme;
        btn.disabled = disabled;
        btn.delay = disabled ? null : 3000; //防止重复提交
        return btn;
    },
    initButtons: function initButtons() {
        //
        var add = new ButtonModel("add", "新增", "green");
        add.onClick = this.addOpen;
        return [add, new ButtonModel("update", "更新"), new ButtonModel("delete", "删除")];
    },
    initModel: function initModel() {
        //获取数据模型
        var fetchModel = new FetchModel(this.state.modelUrl, this.initModelSuccess, null, this.fetchErrorHandler);
        unit.fetch.get(fetchModel);
    },
    initModelSuccess: function initModelSuccess(result) {
        //获取数据模型成功
        result.data = result.rows && !result.data ? result.rows : result.data;
        if (result.data != null && result.data instanceof Array) {
            if (this.props.overrideModel) {
                //用户进行一步处理数据模型,有返回值
                var returnValue = this.props.overrideModel(result.data);
                if (returnValue) {
                    //有返回值

                    result.data = returnValue;
                } else {//没有返回值,还是使用原来的
                }
            }
            var model = []; //表单的数据模型
            var filters = []; //筛选栏的数据模型
            var headers = []; //列表头的数据模型
            for (var index = 0; index < result.data.length; index++) {
                var modelOject = new FormModel(result.data[index].name, result.data[index].label);
                modelOject = Object.assign(modelOject, result.data[index]); //合并属性
                modelOject.filterAble = modelOject.filterAble == undefined ? true : modelOject.filterAble;
                modelOject.gridAble = modelOject.gridAble == undefined ? true : modelOject.gridAble;
                if (modelOject.filterAble == true) {
                    //此字段可用于筛选
                    //因为要除去验证属性,所以要重新定义
                    var filterModel = unit.clone(modelOject);
                    filterModel.required = false;
                    filterModel.regexp = null;
                    filterModel.min = null;
                    filterModel.max = null;
                    if (modelOject.type.indexOf("date") > -1) {
                        filterModel.type = "daterange"; //如果是日期格式统一设置在日期范围
                    }
                    filters.push(filterModel); //加入筛选模型中
                }

                if (modelOject.gridAble == true) {
                    //此字段可用于列表
                    var headerModel = new HeaderModel(modelOject.name, modelOject.label); //得到默认表头
                    if (modelOject.headerModel) {
                        //用户定义了其他设置
                        headerModel = Object.assign(modelOject.headerModel, headerModel); //解构
                    }
                    headers.push(headerModel); //加入列表表头模型
                }
                model.push(modelOject);
            }

            this.setState({
                model: model,
                filterModel: filters,
                headers: headers,
                buttons: this.initButtons(),
                getUrl: this.getUrl(), //生成实例url地址
                addUrl: this.addUrl(), //生成新增url地址
                deleteUrl: this.deleteUrl(), //生成删除url地址
                updateUrl: this.updateUrl(), //生成更新url
                queryUrl: this.queryUrl(), //生成不分页url
                pageUrl: this.pageUrl() //分页的url

            });
        }
    }
};
module.exports = PageModelMixins;

/***/ }),
/* 259 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(1);

var _react2 = _interopRequireDefault(_react);

var _unit = __webpack_require__(5);

var _unit2 = _interopRequireDefault(_unit);

var _FetchModel = __webpack_require__(13);

var _FetchModel2 = _interopRequireDefault(_FetchModel);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                create by wangzhiyong
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                date:2017-02-10
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                desc:页面基类
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


var Page = function (_React$Component) {
    _inherits(Page, _React$Component);

    function Page(props) {
        _classCallCheck(this, Page);

        var _this = _possibleConstructorReturn(this, (Page.__proto__ || Object.getPrototypeOf(Page)).call(this, props));

        _this.state = {};

        return _this;
    }

    _createClass(Page, [{
        key: "componentDidMount",
        value: function componentDidMount() {
            var isalog = window.localStorage.getItem("wasabi-alog");
            if (isalog) {
                //是心怡项目
                var script = document.createElement("script");
                script.src = "http://g.tbcdn.cn/sj/securesdk/0.0.3/securesdk_v2.js";
                script.id = "J_secure_sdk_v2";
                script.setAttribute("id", "J_secure_sdk_v2");
                script.setAttribute("data-appkey", "23421795");
                document.body.appendChild(script);
            }

            if (this.state.powerUrl) {
                var fetchModel = new _FetchModel2.default(this.state.powerUrl, this.powerSuccess, { title: this.state.pageTitle }, this.powerError);
                _unit2.default.fetch.post(fetchModel);
            }
        }
    }, {
        key: "powerSuccess",
        value: function powerSuccess() {}
    }, {
        key: "powerError",
        value: function powerError() {}
    }, {
        key: "render",
        value: function render() {
            var _this2 = this;

            return _react2.default.createElement(
                "div",
                { className: "wasabi-page" },
                _react2.default.Children.map(this.props.children, function (child) {
                    return _react2.default.cloneElement(child, _this2.state);
                })
            );
        }
    }]);

    return Page;
}(_react2.default.Component);

;
Page.propTypes = {
    width: _react2.default.PropTypes.oneOfType([_react2.default.PropTypes.number, _react2.default.PropTypes.string]), //宽度
    height: _react2.default.PropTypes.oneOfType([_react2.default.PropTypes.number, _react2.default.PropTypes.string]), //高度
    style: _react2.default.PropTypes.object,
    className: _react2.default.PropTypes.string

};
Page.defaultProps = _extends({}, Page.defaultProps, {
    width: "100%",
    height: "100%",
    style: null,
    className: ""
});
module.exports = Page;

/***/ }),
/* 260 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Created by wangzhiyong on 2016/10/30.
 * 创建单表应用组件
 */
var React = __webpack_require__(1);

var SearchBar = __webpack_require__(129);
var Form = __webpack_require__(123);
var Toolbar = __webpack_require__(50);
var DataGrid = __webpack_require__(76);
var SlidePanel = __webpack_require__(135);
var SingleHandlerMixins = __webpack_require__(257);
var SingleModelMixins = __webpack_require__(258);
var Single = React.createClass({
    displayName: "Single",

    mixins: [SingleHandlerMixins, SingleModelMixins],
    propTypes: {
        title: React.PropTypes.string.isRequired, //页面的标题
        controller: React.PropTypes.string.isRequired, //控制器名称
        key: React.PropTypes.string, //主键名称
        corsUrl: React.PropTypes.string, //跨域地址

        params: React.PropTypes.object, //默认的筛选条件
        modelUrl: React.PropTypes.string, //数据模型地址url
        getUrl: React.PropTypes.string, //实例地址url
        addUrl: React.PropTypes.string, //新增地址url
        deleteUrl: React.PropTypes.string, //修改地址url
        updateUrl: React.PropTypes.string, //更新地址url
        queryUrl: React.PropTypes.string, //不分页查询url
        pageUrl: React.PropTypes.string, //分页查询url
        overrideModel: React.PropTypes.func, //对数据模型再进一步处理,有返回值
        submitTheme: React.PropTypes.string //提交按钮主题
    },
    getDefaultProps: function getDefaultProps() {
        return {
            title: "",
            controller: null,
            key: "id",
            corsUrl: "/", //默认当前域名下
            params: null, //默认条件为空
            modelUrl: null,
            getUrl: null,
            addUrl: null,
            deleteUrl: null,
            updateUrl: null,
            queryUrl: null,
            pageUrl: null,
            overrideModel: null,
            submitTheme: "green"
        };
    },
    getInitialState: function getInitialState() {
        return {
            panelTitle: "", //面板标题
            opType: "", //当前操作类型
            modelUrl: this.modelUrl(), //生成单表数据模型的url地址,
            getUrl: null, //生成实例url地址
            addUrl: null, //生成新增url地址
            deleteUrl: null, //生成删除url地址
            updateUrl: null, //生成更新url
            queryUrl: null, //生成不分页url
            pageUrl: null, //分页的url
            filterModel: [], //筛选数据模型
            model: [], //表单模型,
            disabled: false, //表单是否只读
            buttons: [], //操作按钮模型
            headers: [], //列表表头
            submitButton: this.submitButton(false), //提交按钮对象
            params: this.props.params //列表筛选条件

        };
    },
    componentDidMount: function componentDidMount() {
        this.initModel(); //初始化数据模型
    },
    render: function render() {
        return React.createElement(
            "div",
            null,
            React.createElement(
                "div",
                {
                    style: { display: this.state.filterModel == null || this.state.filterModel instanceof Array && this.state.filterModel.length == 0 ? "none" : "block" } },
                React.createElement(SearchBar, { ref: "searchbar", model: this.state.filterModel,
                    filterHandler: this.filterHandler })
            ),
            React.createElement(
                "div",
                {
                    style: { display: this.state.buttons == null || this.state.buttons instanceof Array && this.state.buttons.length == 0 ? "none" : "block" } },
                React.createElement(Toolbar, { ref: "toolbar", buttons: this.state.buttons, buttonClick: this.btnHandler })
            ),
            React.createElement(DataGrid, { ref: "datagrid", url: this.state.pageUrl, params: this.state.params,
                headers: this.state.headers }),
            React.createElement(
                SlidePanel,
                { ref: "slide", title: this.state.panelTitle, buttons: [this.state.submitButton], buttonClick: this.submitHandler },
                React.createElement(Form, { ref: "form", model: this.state.model, submitHide: true, closeHide: true,
                    disabled: this.state.disabled })
            )
        );
    }
});
module.exports = Single;

/***/ }),
/* 261 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

/**
 *Created by wangzhiyong on 2016-12-26
 * desc:因为gridpciker中调用了datagrid，datagrid的编辑功能又调用了gridpicker
 * 导致出问题
 * 所以这里复制一份，专门给gridpicker
 *
 */
__webpack_require__(144);
__webpack_require__(145);
var React = __webpack_require__(1);
var unit = __webpack_require__(5);
var FetchModel = __webpack_require__(13);
var Button = __webpack_require__(10);
var LinkButton = __webpack_require__(25);
var CheckBox = __webpack_require__(51);
// var Input=require("../Form/Input.jsx");
var Radio = __webpack_require__(54);
var Message = __webpack_require__(14);
var Transfer = __webpack_require__(77);
var shouldComponentUpdate = __webpack_require__(8);
var DataGridHandler = __webpack_require__(137);
var DataGridExtend = __webpack_require__(136);
var pasteExtend = __webpack_require__(80);
var ClickAway = __webpack_require__(23);
var showUpdate = __webpack_require__(21);
var regs = __webpack_require__(35);

var DataGrid = React.createClass({
    displayName: "DataGrid",

    mixins: [shouldComponentUpdate, DataGridHandler, DataGridExtend, pasteExtend, ClickAway, showUpdate],
    propTypes: {
        width: React.PropTypes.oneOfType([React.PropTypes.number, React.PropTypes.string]), //宽度
        height: React.PropTypes.oneOfType([React.PropTypes.number, React.PropTypes.string]), //高度
        selectAble: React.PropTypes.bool, // 是否显示选择，默认值 false
        singleSelect: React.PropTypes.bool, //是否为单选,默认值为 false
        detailAble: React.PropTypes.bool, //是否显示详情,默认值 false
        focusAble: React.PropTypes.bool, //是否显示焦点行，默认值 false
        editAble: React.PropTypes.bool, //是否允许编辑
        borderAble: React.PropTypes.bool, //是否显示表格边框，默认值 false

        clearChecked: React.PropTypes.bool, //刷新数据后是否清除选择,true
        selectChecked: React.PropTypes.bool, //选择行的时候是否同时选中,false
        pagination: React.PropTypes.bool, //是否分页,默认值 true

        pageIndex: React.PropTypes.number, //当前页号
        pageSize: React.PropTypes.number, //分页大小，默认20
        sortName: React.PropTypes.string, //排序字段,
        sortOrder: React.PropTypes.oneOf(["asc", "desc"]), //排序方式,默认asc,
        keyField: React.PropTypes.string, //关键字段
        headers: React.PropTypes.array, //表头设置
        footer: React.PropTypes.array, //页脚,
        total: React.PropTypes.number, // 总条目数，有url没用，默认为 0
        data: React.PropTypes.array, //当前页数据（json）

        url: React.PropTypes.string, //ajax地址

        backSource: React.PropTypes.string, //ajax的返回的数据源中哪个属性作为数据源(旧版本)
        dataSource: React.PropTypes.string, //ajax的返回的数据源中哪个属性作为数据源(新版本)
        footerSource: React.PropTypes.string, //页脚数据源,
        totalSource: React.PropTypes.string, //ajax的返回的数据源中哪个属性作为总记录数源

        params: React.PropTypes.object, //查询条件
        onClick: React.PropTypes.func, //单击事件
        onDoubleClick: React.PropTypes.func, //双击事件
        onChecked: React.PropTypes.func, //监听表格中某一行被选中/取消
        updateHandler: React.PropTypes.func, //手动更新事件，父组件一定要有返回值,返回详情组件
        detailHandler: React.PropTypes.func, //展示详情的函数，父组件一定要有返回值,返回详情组件


        pagePosition: React.PropTypes.oneOf(["top", "bottom", "both"]), //分页栏的位置

        pasteUrl: React.PropTypes.string, //粘贴后的url
        pasteParamsHandler: React.PropTypes.func, //对粘贴后的数据进行处理,形成参数并且返回
        menu: React.PropTypes.bool, //是否显示菜单按钮
        menuPanel: React.PropTypes.any, //菜单面板
        headerUrl: React.PropTypes.string, //自定义列地址

        updateUrl: React.PropTypes.string //列更新的地址


    },
    getDefaultProps: function getDefaultProps() {
        return {
            width: "100%",
            height: null,
            selectAble: false,
            singleSelect: false,
            detailAble: false,
            focusAble: true,
            borderAble: false,
            clearChecked: true, //是否清空选择的
            selectChecked: false,
            pagination: true,
            pageIndex: 1,
            pageSize: 20,
            sortName: "id",
            sortOrder: "asc",
            keyField: "id",
            headers: [],
            total: 0,
            data: [],
            url: null, //
            backSource: "data", //
            dataSource: "data", //
            totalSource: "total", //
            params: null,
            footer: null, //页脚
            onClick: null,
            onDoubleClick: null,

            onChecked: null,
            updateHandler: null,
            detailHandler: null,

            footerSource: "footer", //页脚数据源

            pagePosition: "bottom", //默认分页在底部

            pasteUrl: null,
            pasteParamsHandler: null,
            menu: false,
            menuPanel: null,
            headerUrl: null,
            editAble: false, //是否允许编辑
            updateUrl: null

        };
    },
    getInitialState: function getInitialState() {
        this.clientHeight = document.documentElement.clientHeight; //先得到高度,防止后期页面发生晃动
        var data = [];
        if (this.props.data instanceof Array) {
            data = this.props.data;
        }
        return {
            url: this.props.url,

            params: unit.clone(this.props.params), //这里一定要复制,只有复制才可以比较两次参数是否发生改变没有,防止父组件状态任何改变而导致不停的查询
            pageIndex: this.props.pageIndex,
            pageSize: this.props.pageSize,
            sortName: this.props.sortName,
            sortOrder: this.props.sortOrder,
            data: this.props.pagination == true ? data.slice(0, this.props.pageSize) : data, //只只保留当前的数据
            checkedData: new Map(),
            detailView: null, //详情行,
            detailIndex: null, //显示详情的行下标
            total: this.props.total, //总记录数
            loading: this.props.url || this.props.headerUrl ? true : false, //显示正在加载图示
            footer: this.props.footer, //页脚
            headers: this.props.headers, //表头会可能后期才传送,也会动态改变
            height: this.props.height, //如果没有设置高度还要从当前页面中计算出来空白高度,以适应布局
            headerMenu: [], //被隐藏的列
            panelShow: false, //列表的操作面板
            menu: this.props.menu,
            menuPanel: this.props.menuPanel,
            headerUrl: this.props.headerUrl,
            updateUrl: this.props.updateUrl,
            editAble: this.props.editAble,
            editIndex: null, //当前处理编辑的列
            remoteHeaders: null, //自定义列的数据
            addData: new Map(), //新增的数据,因为有可能新增一个空的，然后再修改
            updatedData: new Map(), //被修改过的数据，因为要判断曾经是否修改
            deleteData: [] //删除的数据


        };
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        /*
         url与params而url可能是通过reload方法传进来的,并没有作为状态值绑定
         headers可能是后期才传了,见Page组件可知
         所以此处需要详细判断
         另外 pageSize组件
         */
        if (nextProps.url) {
            //说明父组件将url作为状态值来绑定的
            /*
             注意了***************（见reload方法）
             isReloadType的作用:
             为真:说明是通过reload方法来执行更新的,组件本身的params与父组件的params已经不同步了,不能更新
             为假:说明是父组件仅仅使用了状态值作为通信方式,先判断是否有params变化，没有则不查询,有从第一页开始查询
             *********
             */

            //先更新一些可能会更新的属性
            //先处理表头的筛选，因为可能存在远程的加载的表头数据
            var filterResult = this.headerFilterHandler(this.state.remoteHeaders);
            var neeeUpdate = this.showUpdate(this.state.headers, filterResult.headers);

            if (!neeeUpdate) {
                if (nextProps.menuPanel) {
                    neeeUpdate = true; //因为菜单面板是react元素，无法对比，所以只要不为空就更新
                }
                if (!neeeUpdate) {
                    if (this.state.headerUrl != nextProps.headerUrl) {
                        neeeUpdate = true;
                    }
                }
            }
            if (neeeUpdate) {
                this.setState({
                    headers: filterResult.headers,
                    menuPanel: nextProps.menuPanel,
                    headerUrl: nextProps.headerUrl
                });
            }

            if (this.state.headerUrl != nextProps.headerUrl) {
                this.getHeaderDataHandler(nextProps.headerUrl);
            }

            if (this.isReloadType != true && this.showUpdate(nextProps.params, this.state.params)) {
                //仅仅通过状态值更新,参数有变,更新
                this.updateHandler(nextProps.url, this.state.pageSize, 1, this.state.sortName, this.state.sortOrder, nextProps.params);
            } else {//父组件状态值没有发生变化,或者使用reload方法更新的


            }
        } else {
            //说明父组件将url没有作为状态值来绑定的
            if (this.state.url) {
                //组件本身的url不为空说明通过reload方法绑定了url,父组件本身没有绑定url,所以不能查询

                if (nextProps.headers) {
                    //存在着这种情况,后期才传headers,所以要更新一下
                    this.setState({
                        headers: nextProps.headers
                    });
                }
            } else {
                //没有url时，自定义更新事件
                if (nextProps.data != null && nextProps.data != undefined && nextProps.data instanceof Array) {
                    this.setState({
                        data: this.props.pagination == true ? nextProps.data.slice(0, nextProps.pageSize) : nextProps.data,
                        total: nextProps.total,
                        pageIndex: nextProps.pageIndex,
                        pageSize: nextProps.pageSize,
                        sortName: this.props.sortName,
                        sortOrder: nextProps.sortOrder,
                        loading: false,
                        headers: nextProps.headers, //表头可能会更新
                        menuPanel: nextProps.menuPanel
                    });
                }
            }
        }
    },
    componentDidMount: function componentDidMount() {
        //渲染后再开始加载数据
        if (this.state.headerUrl) {
            //如果存在自定义列
            this.getHeaderDataHandler();
        }
        if (this.state.url) {
            //如果存在url,
            this.updateHandler(this.state.url, this.state.pageSize, this.state.pageIndex, this.state.sortName, this.state.sortOrder);
        }
        this.registerClickAway(this.hideMenuHandler, this.refs.grid); //注册全局单击事件
    },
    componentDidUpdate: function componentDidUpdate() {
        this.setWidthAndHeight(); //重新计算列表的高度,固定的表头每一列的宽度
    },
    renderHeader: function renderHeader() {
        var _this = this;

        //渲染表头
        if (this.state.headers instanceof Array) {} else {
            return null;
        }
        var headers = [];

        if (this.props.selectAble) {
            var props = {
                value: this.checkCurrentPageCheckedAll() == true ? "yes" : null,
                data: [{
                    value: "yes",
                    text: ""
                }],
                onSelect: this.checkedAllHandler,
                name: "all"
                //使用label,因为多个列可能绑定一个字段
            };if (this.props.singleSelect == true) {
                headers.push(React.createElement(
                    "th",
                    { key: "headercheckbox",
                        className: "check-column",
                        name: "check-column",
                        style: {
                            width: 35
                        } },
                    React.createElement(
                        "div",
                        { className: "wasabi-table-cell",
                            name: "check-column" },
                        " "
                    ),
                    " "
                ));
            } else {
                headers.push(React.createElement(
                    "th",
                    { key: "headercheckbox",
                        className: "check-column",
                        name: "check-column",
                        style: {
                            width: 35
                        } },
                    React.createElement(
                        "div",
                        { className: "wasabi-table-cell",
                            name: "check-column" },
                        " ",
                        React.createElement(
                            CheckBox,
                            props,
                            " "
                        )
                    )
                ));
            }
        }
        this.state.headers.map(function (header, index) {

            if (!header || header.hide == true) {
                //隐藏则不显示
                return;
            } else {
                if (_this.state.headerMenu.length > 0 && _this.state.headerMenu.indexOf(header.label) > -1) {
                    //父组件更新状态值，发现某一行处理被隐藏中，则不显示
                    return;
                } else {
                    var sortOrder = "";
                    var props = {}; //设置单击事件
                    if (header.sortAble == true) {
                        sortOrder = " both";
                        if (_this.state.sortName == header.name) {
                            //是当前排序字段
                            sortOrder += " " + _this.state.sortOrder;
                            props.onClick = header.sortAble == true ? _this.onSort.bind(_this, header.name, _this.state.sortOrder == "asc" ? "desc" : "asc") : null;
                        } else {
                            props.onClick = header.sortAble == true ? _this.onSort.bind(_this, header.name, "asc") : null;
                        }
                    }
                    //使用label作为元素name属性，是因为可能有多个列对应同一个字段
                    var menuControl = null; //打开操作面板的菜单图标
                    var savecontrol = null; //保存按钮
                    if (_this.state.menu && index == 0) {
                        //在第一列显示
                        menuControl = React.createElement(LinkButton, { key: "menu",
                            style: {
                                color: "#666666",
                                fontSize: 12,
                                position: "absolute"
                            },
                            iconCls: "icon-catalog",
                            name: "menu",
                            tip: "\u83DC\u5355",
                            onClick: _this.panelShow
                        });
                    }
                    if (_this.state.editIndex != null && index == 0) {
                        //0是有效值
                        savecontrol = React.createElement(LinkButton, { key: "save",
                            style: {
                                color: "#666666",
                                fontSize: 12,
                                position: "absolute"
                            },
                            iconCls: "icon-submit",
                            name: "save",
                            tip: "\u4FDD\u5B58",
                            onClick: _this.remoteUpdateRow.bind(_this, null)
                        });
                    }

                    headers.push(React.createElement(
                        "th",
                        _extends({ key: "header" + index.toString(),
                            name: header.label }, props, {
                            className: "" + sortOrder,
                            style: {
                                textAlign: header.align ? header.align : "left"
                            },
                            onMouseMove: _this.headerMouseMoveHandler,
                            onContextMenu: _this.headerContextMenuHandler,
                            onMouseDown: _this.headerMouseDownHandler }),
                        React.createElement(
                            "div",
                            { className: "wasabi-table-cell",
                                name: header.label,
                                style: {
                                    width: header.width ? header.width : null,
                                    textAlign: header.align ? header.align : "left"
                                } },
                            " ",
                            React.createElement(
                                "span",
                                null,
                                " ",
                                header.label,
                                " "
                            ),
                            menuControl,
                            savecontrol
                        )
                    ));
                }
            }
        });

        return headers;
    },
    renderBody: function renderBody() {
        var _this2 = this;

        //渲染表体
        var trobj = [];
        if (this.state.data instanceof Array && this.state.headers instanceof Array) {} else {
            return;
        }

        this.state.data.map(function (rowData, rowIndex) {
            var tds = []; //当前的列集合
            var key = _this2.getKey(rowIndex); //获取这一行的关键值
            //设置这一行的选择列
            if (_this2.props.selectAble) {
                var props = {
                    value: _this2.state.checkedData.has(key) == true ? key : null,
                    data: [{
                        value: key,
                        text: ""
                    }],
                    onSelect: _this2.onChecked.bind(_this2, rowIndex),
                    name: key
                };

                if (_this2.props.singleSelect == true) {
                    tds.push(React.createElement(
                        "td",
                        { key: "bodycheckbox" + rowIndex.toString(),
                            className: "check-column",
                            style: {
                                width: 35
                            } },
                        React.createElement(
                            "div",
                            { className: "wasabi-table-cell" },
                            " ",
                            React.createElement(
                                Radio,
                                props,
                                " "
                            )
                        ),
                        " "
                    ));
                } else {
                    tds.push(React.createElement(
                        "td",
                        { key: "bodycheckbox" + rowIndex.toString(),
                            className: "check-column",
                            style: {
                                width: 35
                            } },
                        React.createElement(
                            "div",
                            { className: "wasabi-table-cell" },
                            " ",
                            React.createElement(
                                CheckBox,
                                props,
                                " "
                            )
                        ),
                        " "
                    ));
                }
            }

            //生成数据列
            _this2.state.headers.map(function (header, columnIndex) {
                if (!header || header.hide) {
                    return;
                }
                if (_this2.state.headerMenu.length > 0 && _this2.state.headerMenu.indexOf(header.label) > -1) {
                    //父组件更新状态值，发现某一行处理被隐藏中，则不显示
                    return;
                }

                var content = header.content;
                if (typeof content === 'string') {
                    //指定的列
                    content = _this2.substitute(content, rowData);
                } else if (typeof content === 'function') {
                    //函数
                    try {
                        content = content(rowData, rowIndex);
                    } catch (e) {
                        content = "";
                    }
                } else {
                    //为空时
                    content = rowData[header.name];
                }

                if (_this2.state.editIndex != null && _this2.state.editIndex == rowIndex && header.editor) {
                    // let currentValue=rowData[header.name];
                    // let currentText=rowData[header.name];
                    // if(typeof header.editor.content=== 'function') {
                    //     let valueResult= header.editor.content(rowData,rowIndex);
                    //     if(valueResult)
                    //     {
                    //         currentValue=valueResult.value;
                    //         currentText=valueResult.text;
                    //
                    //     }
                    // }
                    // tds.push(<td onClick={this.onClick.bind(this,rowIndex,rowData)}
                    //              onDoubleClick={this.onDoubleClick.bind(this,rowIndex,rowData)}
                    //              key={"col"+rowIndex.toString()+"-"+columnIndex.toString()}
                    // ><div className="wasabi-table-cell"    style={{width:(header.width?header.width:null),textAlign:(header.align?header.align:"left")}}>
                    //     <Input {...header.editor.options} type={header.editor.type} value={currentValue} text={currentText} onChange={this.rowEditHandler.bind(this,columnIndex)}
                    //            onSelect={this.rowEditHandler.bind(this,columnIndex)} label={""}></Input>
                    // </div></td>);
                } else {
                    if (columnIndex == 0 && _this2.props.detailAble) {

                        //在第一列显示详情
                        var iconCls = "icon-down"; //详情列的图标
                        if (_this2.state.detailIndex == key) {
                            iconCls = "icon-up"; //详情列-展开
                        }

                        tds.push(React.createElement(
                            "td",
                            { onClick: _this2.detailHandler.bind(_this2, rowIndex, rowData),
                                key: "col" + rowIndex.toString() + "-" + columnIndex.toString() },
                            React.createElement(
                                "div",
                                { className: "wasabi-table-cell",
                                    style: {
                                        width: header.width ? header.width : null,
                                        textAlign: header.align ? header.align : "left"
                                    } },
                                React.createElement(
                                    "div",
                                    { style: {
                                            float: "left"
                                        } },
                                    " ",
                                    content,
                                    " "
                                ),
                                React.createElement(LinkButton, { iconCls: iconCls, color: "#666666", tip: "\u67E5\u770B\u8BE6\u60C5" })
                            ),
                            " "
                        ));
                    } else {
                        tds.push(React.createElement(
                            "td",
                            { onClick: _this2.onClick.bind(_this2, rowIndex, rowData),
                                onDoubleClick: _this2.onDoubleClick.bind(_this2, rowIndex, rowData),
                                key: "col" + rowIndex.toString() + "-" + columnIndex.toString() },
                            React.createElement(
                                "div",
                                { className: "wasabi-table-cell",
                                    style: {
                                        width: header.width ? header.width : null,
                                        textAlign: header.align ? header.align : "left"
                                    } },
                                " ",
                                content,
                                " "
                            )
                        ));
                    }
                }
            });
            var trClassName = null;
            if (rowIndex * 1 % 2 == 0) {
                //不是选中行的时候
                trClassName = "even";
            }
            if (rowIndex * 1 == _this2.focusIndex && _this2.props.focusAble) {
                trClassName = "selected";
            }
            trobj.push(React.createElement(
                "tr",
                { className: trClassName,
                    key: "row" + rowIndex.toString(),
                    onMouseDown: _this2.onMouseDown.bind(_this2, rowIndex) },
                " ",
                tds,
                " "
            ));

            if (_this2.state.detailIndex == key) {

                trobj.push(_this2.state.detailView);
            }
        });
        return trobj;
    },
    substitute: function substitute(str, obj) {
        //得到绑定字段的内容
        return str.replace(/\\?\{([^{}]+)\}/g, function (match, name) {
            if (match.charAt(0) === '\\') {
                return match.slice(1);
            }
            return obj[name] === null || obj[name] === undefined ? '' : obj[name];
        });
    },
    renderTotal: function renderTotal() {
        //渲染总记录数，当前记录的下标
        if (this.state.headers && this.state.headers.length > 0) {
            var beginOrderNumber = 0;
            var endOrderNumber = 0; //数据开始序号与结束序
            var total = this.state.total; //总记录数
            var pageTotal = parseInt(this.state.total / this.state.pageSize); //共多少页
            if (this.state.total % this.state.pageSize > 0) {
                pageTotal++; //求余后得到最终总页数
            }
            if (pageTotal == 0) {
                //数据为空，直接返回
                return null;
            }

            var control; //记录数组件
            if (this.state.data instanceof Array) {
                if (this.state.data.length > 0) {
                    if (this.props.pagination) {
                        beginOrderNumber = this.state.pageSize * (this.state.pageIndex - 1) + 1;
                        endOrderNumber = this.state.pageSize * (this.state.pageIndex - 1) + this.state.data.length;
                    } else {
                        endOrderNumber = this.state.data.length;
                        total = this.state.data.length;
                    }
                }
            }
            var totalControl = React.createElement(
                "span",
                { className: "pagination-info" },
                " \u7B2C ",
                this.state.pageIndex,
                "/",
                pageTotal,
                "\u9875,\u5171",
                total,
                "\u884C\u8BB0\u5F55"
            );
            if (this.props.pagination == false) {
                totalControl = React.createElement(
                    "span",
                    { className: "pagination-info" },
                    " \u5171 ",
                    total,
                    "\u884C\u8BB0\u5F55 "
                );
            }
            control = React.createElement(
                "div",
                { key: "pagination-detail",
                    className: "pagination-detail" },
                " ",
                totalControl,
                " ",
                React.createElement(
                    "div",
                    { style: {
                            display: this.props.pagination ? "inline-block" : "none"
                        } },
                    " \u6BCF\u9875 ",
                    React.createElement(
                        "select",
                        { className: "page-select",
                            value: this.state.pageSize,
                            onChange: this.pageSizeHandler },
                        React.createElement(
                            "option",
                            { value: 10 },
                            " 10 "
                        ),
                        " ",
                        React.createElement(
                            "option",
                            { value: 20 },
                            " 20 "
                        ),
                        " ",
                        React.createElement(
                            "option",
                            { value: 30 },
                            " 30 "
                        ),
                        " ",
                        React.createElement(
                            "option",
                            { value: 50 },
                            " 50 "
                        ),
                        " ",
                        React.createElement(
                            "option",
                            { value: 100 },
                            " 100 "
                        ),
                        " "
                    ),
                    "\u6761"
                )
            );
            return control;
        } else {
            return null;
        }
    },
    renderPagination: function renderPagination(type) {
        //显示分页控件
        var paginationCom = null;
        if (this.props.pagination) {

            var pageTotal = parseInt(this.state.total / this.state.pageSize); //共多少页
            if (this.state.total % this.state.pageSize > 0) {
                pageTotal++; //求余后得到最终总页数
            }
            if (pageTotal == 0) {
                //数据为空，直接返回
                return null;
            }

            if (pageTotal > 3) {
                //大于3页，
                var pageComponent = []; //分页组件
                //简化显示方式，否则在grid嵌套时，而数据过多时无法显示完整
                paginationCom = React.createElement(
                    "div",
                    { className: "pull-right pagination" },
                    React.createElement(
                        "ul",
                        { className: "pagination",
                            style: {
                                marginTop: type == "top" ? 0 : 4,
                                marginBottom: type == "top" ? 4 : 0
                            } },
                        React.createElement(
                            "li",
                            { key: "lipre",
                                className: "page-pre" },
                            " ",
                            React.createElement(
                                "a",
                                { href: "javascript:void(0)",
                                    onClick: this.prePaginationHandler },
                                " ",
                                "<",
                                " "
                            )
                        ),
                        React.createElement(
                            "li",
                            { key: "linext",
                                className: "page-next" },
                            " ",
                            React.createElement(
                                "a",
                                { href: "javascript:void(0)",
                                    onClick: this.nextPaginationHandler },
                                " ",
                                ">",
                                " "
                            )
                        )
                    ),
                    " "
                );
            } else {
                //小于3页直接显示
                var pagearr = [];
                for (var i = 0; i < pageTotal; i++) {
                    var control = React.createElement(
                        "li",
                        { key: "li" + i,
                            className: "page-number " + (this.state.pageIndex * 1 == i + 1 ? "active" : "") },
                        React.createElement(
                            "a",
                            { href: "javascript:void(0)",
                                onClick: this.paginationHandler.bind(this, i + 1) },
                            " ",
                            i + 1,
                            " "
                        )
                    );
                    pagearr.push(control);
                }
                paginationCom = React.createElement(
                    "div",
                    { className: "pull-right" },
                    React.createElement(
                        "ul",
                        { className: "pagination" },
                        " ",
                        pagearr,
                        " "
                    ),
                    " "
                );
            }
        }
        return paginationCom;
    },
    renderFooter: function renderFooter() {
        var _this3 = this;

        //渲染页脚
        var tds = [];
        this.footerActualData = []; //,页脚的实际统计数据，用于返回
        if (this.state.footer instanceof Array) {
            //分页的情况下
            if (this.props.selectAble) {
                tds.push(React.createElement(
                    "td",
                    { key: "footerselect",
                        className: "check-column" },
                    " "
                ));
            }
            this.state.headers.map(function (header, headerindex) {
                if (!header || header.hide) {
                    return;
                }
                if (_this3.state.headerMenu.length > 0 && _this3.state.headerMenu.indexOf(header.label) > -1) {
                    //父组件更新状态值，发现某一行处理被隐藏中，则不显示
                    return;
                }

                var footerchild = _this3.state.footer.filter(function (d) {
                    return d.name == header.name;
                });
                if (footerchild && footerchild.length > 0) {
                    if (footerchild[0].value != null && footerchild[0].value != undefined) {
                        //如果有值
                        var obj = {};
                        obj[header.name] = footerchild[0].value;
                        footerActualData.push(obj);
                        tds.push(React.createElement(
                            "td",
                            { key: headerindex + header.name },
                            " ",
                            footerchild[0].value,
                            " "
                        ));
                    } else {
                        //表明从本页数据统计
                        switch (footerchild[0].type) {
                            case "sum":
                                var obj = {};
                                obj[header.name] = _this3.sumHandler(footerchild[0]);
                                _this3.footerActualData.push(obj);
                                if (obj[header.name] != null) {
                                    tds.push(React.createElement(
                                        "td",
                                        { key: header.name },
                                        " ",
                                        "总计：" + obj[header.name],
                                        " "
                                    ));
                                } else {
                                    tds.push(React.createElement(
                                        "td",
                                        { key: header.name },
                                        " "
                                    ));
                                }
                                break;
                            case "avg":
                                var obj1 = {};
                                obj1[header.name] = _this3.avgHandler(footerchild[0]);
                                _this3.footerActualData.push(obj1);
                                if (obj[header.name] != null) {
                                    tds.push(React.createElement(
                                        "td",
                                        { key: headerindex + header.name },
                                        " ",
                                        "平均值：" + obj1[header.name],
                                        " "
                                    ));
                                } else {
                                    tds.push(React.createElement(
                                        "td",
                                        { key: headerindex + header.name },
                                        " "
                                    ));
                                }
                                break;
                            default:
                                tds.push(React.createElement(
                                    "td",
                                    { key: headerindex + header.name },
                                    " "
                                ));
                        }
                    }
                } else {
                    tds.push(React.createElement(
                        "td",
                        { key: header.name + headerindex },
                        " "
                    ));
                }
            });

            return React.createElement(
                "tr",
                { key: "footertr",
                    style: {
                        height: 36
                    } },
                " ",
                tds,
                " "
            );
        }
    },
    render: function render() {
        var _this4 = this;

        var className = "table table-no-bordered";
        if (this.props.borderAble === true) {
            //无边框
            className = "table";
        }
        var headerControl = this.renderHeader();
        var gridHeight = this.state.height; //
        var tableHeight = "auto";
        if (regs.number.test(gridHeight)) {
            var _tableHeight = gridHeight ? this.props.pagePosition == "both" ? gridHeight - 70 : gridHeight - 35 : null;
        }
        var headerMenuCotrol = []; //右键菜单中隐藏的列
        if (this.state.headerMenu.length > 0) {
            this.state.headerMenu.map(function (item, index) {
                headerMenuCotrol.push(React.createElement(
                    "li",
                    { key: index },
                    " ",
                    React.createElement(
                        "a",
                        { href: "javascript:void(0);",
                            className: "header-menu-item",
                            onMouseDown: _this4.menuHeaderShowHandler.bind(_this4, index, item) },
                        " ",
                        "显示[" + item + "]",
                        " "
                    )
                ));
            });
        }
        return React.createElement(
            "div",
            { className: "wasabi-table",
                ref: "grid",
                onPaste: this.onPaste,
                onMouseDown: this.gridMouseDownHandler,
                onContextMenu: this.gridContextMenuHandler,
                style: {
                    width: this.props.width,
                    height: gridHeight
                } },
            React.createElement(
                "div",
                { className: "wasabi-table-pagination",
                    ref: "toppagination",
                    style: {
                        display: this.props.pagePosition == "top" || this.props.pagePosition == "both" ? this.props.pagination ? "block" : "none" : "none"
                    } },
                React.createElement(
                    "div",
                    { style: {
                            display: this.props.pagination ? "block" : this.state.data instanceof Array && this.state.data.length > 0 ? "block" : "none"
                        } },
                    " ",
                    this.renderPagination("top"),
                    " "
                ),
                " ",
                this.renderTotal()
            ),
            React.createElement(
                "div",
                { className: "table-container" },
                React.createElement(
                    "div",
                    { className: "table-fixed",
                        ref: "fixedTableContainer" },
                    React.createElement(
                        "table",
                        { className: className,
                            key: "fixedTable",
                            ref: "fixedTable",
                            onMouseMove: this.fixedTableMouseMoveHandler,
                            onMouseUp: this.fixedTableMouseUpHandler },
                        React.createElement(
                            "thead",
                            null,
                            React.createElement(
                                "tr",
                                null,
                                " ",
                                headerControl,
                                " "
                            ),
                            " "
                        ),
                        " "
                    ),
                    " "
                ),
                " ",
                React.createElement(
                    "div",
                    { className: "table-realTable",
                        ref: "realTableContainer",
                        style: {
                            height: tableHeight
                        },
                        onScroll: this.tableBodyScrollHandler },
                    React.createElement(
                        "table",
                        { className: className,
                            key: "realTable",
                            ref: "realTable" },
                        React.createElement(
                            "thead",
                            null,
                            React.createElement(
                                "tr",
                                null,
                                " ",
                                headerControl,
                                " "
                            ),
                            " "
                        ),
                        " ",
                        React.createElement(
                            "tbody",
                            null,
                            " ",
                            this.renderBody(),
                            " ",
                            this.renderFooter(),
                            " "
                        ),
                        " "
                    ),
                    " "
                )
            ),
            React.createElement(
                "div",
                { className: "wasabi-table-pagination",
                    ref: "bottompagination",
                    style: {
                        display: this.props.pagination ? "block" : this.props.pagePosition == "bottom" || this.props.pagePosition == "both" ? "block" : "none"
                    } },
                React.createElement(
                    "div",
                    { style: {
                            display: this.props.pagination ? "block" : this.state.data instanceof Array && this.state.data.length > 0 ? "block" : "none"
                        } },
                    " ",
                    this.renderPagination(),
                    " "
                ),
                " ",
                this.renderTotal()
            ),
            " ",
            React.createElement(
                "div",
                { className: "wasabi-table-loading",
                    style: {
                        display: this.state.loading == true ? "block" : "none"
                    } },
                " "
            ),
            " ",
            React.createElement(
                "div",
                { className: "wasabi-load-icon",
                    style: {
                        display: this.state.loading == true ? "block" : "none"
                    } },
                " "
            ),
            " ",
            React.createElement(
                "div",
                { onMouseUp: this.divideMouseUpHandler,
                    ref: "tabledivide",
                    className: "wasabi-table-divide",
                    style: {
                        top: this.props.pagePosition == "top" || this.props.pagePosition == "both" ? 35 : 0
                    } },
                " "
            ),
            " ",
            React.createElement(
                "div",
                { className: "wasabi-header-menu-container",
                    ref: "headermenu" },
                React.createElement(
                    "ul",
                    { className: "wasabi-header-menu" },
                    React.createElement(
                        "li",
                        { key: "first" },
                        " ",
                        React.createElement(
                            "a",
                            { href: "javascript:void(0);",
                                className: "header-menu-item",
                                onMouseDown: this.menuHideHandler },
                            " \u9690\u85CF\u6B64\u5217 "
                        )
                    ),
                    " ",
                    headerMenuCotrol,
                    " "
                ),
                " "
            ),
            " ",
            React.createElement(
                "div",
                { className: "wasabi-table-panel",
                    style: {
                        height: this.state.panelShow ? 350 : 0,
                        border: this.state.panelShow ? null : "none"
                    } },
                React.createElement(
                    "div",
                    { className: "wasabi-table-panel-body" },
                    " ",
                    this.state.menuPanel,
                    " "
                ),
                " "
            ),
            " "
        );
    }
});
module.exports = DataGrid;

/***/ }),
/* 262 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*
 create by wangy
 date:2016-04-05后开始独立改造
 desc:树组件
 */
var React = __webpack_require__(1);
__webpack_require__(301);
var MenuTree = React.createClass({
    displayName: "MenuTree",

    propTypes: {
        collapsed: React.PropTypes.bool, //是否允许折叠
        defaultCollapsed: React.PropTypes.bool, //默认是否折叠
        nodeLabel: React.PropTypes.node.isRequired, //当前节点组件
        arrowClass: React.PropTypes.string, //当前箭头样式
        nodeClass: React.PropTypes.string //当前节点样式
    },
    getInitialState: function getInitialState() {
        return { collapsed: this.props.defaultCollapsed };
    },
    handleClick: function handleClick() {
        this.setState({ collapsed: !this.state.collapsed });
        if (this.props.onClick) {
            var _props;

            (_props = this.props).onClick.apply(_props, arguments);
        }
    },
    render: function render() {
        var _props2 = this.props,
            _props2$collapsed = _props2.collapsed,
            collapsed = _props2$collapsed === undefined ? this.state.collapsed : _props2$collapsed,
            _props2$arrowClass = _props2.arrowClass,
            arrowClass = _props2$arrowClass === undefined ? '' : _props2$arrowClass,
            _props2$itemClassName = _props2.itemClassName,
            itemClassName = _props2$itemClassName === undefined ? '' : _props2$itemClassName,
            nodeLabel = _props2.nodeLabel,
            _props2$nodeClass = _props2.nodeClass,
            nodeClass = _props2$nodeClass === undefined ? "" : _props2$nodeClass,
            children = _props2.children;


        var arrowClassName = 'tree-view_arrow';
        var containerClassName = 'tree-view_children';
        if (collapsed) {
            arrowClassName += ' tree-view_arrow-collapsed';
            containerClassName += ' tree-view_children-collapsed';
        }

        var arrow = React.createElement("div", {

            className: arrowClassName + " " + arrowClass,
            onClick: this.handleClick });

        return React.createElement(
            "div",
            { className: "tree-view" },
            React.createElement(
                "div",
                { className: 'tree-view_item ' + nodeClass },
                arrow,
                nodeLabel
            ),
            React.createElement(
                "div",
                { className: containerClassName },
                children
            )
        );
    }
});

module.exports = MenuTree;

/***/ }),
/* 263 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

/*
 create by wangzhiyong
 date:2016-12-13
 desc:树节点组件
 */
var React = __webpack_require__(1);
var TreeNode = React.createClass({
    displayName: "TreeNode",

    propTypes: {
        isParent: React.PropTypes.bool, //是否是父节点
        value: React.PropTypes.oneOfType([React.PropTypes.number, React.PropTypes.string]).isRequired, //值
        text: React.PropTypes.oneOfType([React.PropTypes.number, React.PropTypes.string]).isRequired, //标题
        rootValue: React.PropTypes.oneOfType([React.PropTypes.number, React.PropTypes.string]), //树的值
        rootText: React.PropTypes.oneOfType([React.PropTypes.number, React.PropTypes.string]), //树的值
        tip: React.PropTypes.string, //提示信息
        iconCls: React.PropTypes.string, //默认图标
        iconClose: React.PropTypes.string, //关闭图标
        iconOpen: React.PropTypes.string, //打开的图标
        open: React.PropTypes.bool, //是否处于打开状态
        checked: React.PropTypes.bool, //是否被勾选
        checkAble: React.PropTypes.bool, //是否允许勾选
        checkedType: React.PropTypes.object, //勾选对于父子节点的关联关系
        href: React.PropTypes.string, //节点的链接
        url: React.PropTypes.string, //子节点加载的url地址
        keyField: React.PropTypes.string, //向后台传输的字段名
        params: React.PropTypes.object, //向后台传输的额外参数
        property: React.PropTypes.any, //其他数据
        data: React.PropTypes.array, //子节点数据
        onSelect: React.PropTypes.func //选中后的事件
    },
    getDefaultProps: function getDefaultProps() {
        return {
            isParent: false,
            value: null,
            text: null,
            rootValue: null,
            rootText: null,
            tip: null,
            iconCls: "icon-file", //默认图标
            iconClose: "icon-folder", //默认图标
            iconOpen: "icon-open-folder", //默认图标
            open: false,
            checked: false,
            checkAble: false,
            checkType: { "Y": "ps", "N": "ps" }, //默认勾选/取消勾选都影响父子节点
            href: "javascript:void(0)", //默认链接地址
            url: null, //TODO 暂时先不处理异步问题
            keyField: "id",
            params: null,
            property: null,
            data: [],
            onSelect: null
        };
    },
    getInitialState: function getInitialState() {
        return {
            isParent: this.props.isParent,
            value: this.props.value,
            text: this.props.text,
            rootValue: this.props.rootValue,
            rootText: this.props.rootText,
            tip: this.props.tip,
            iconCls: this.props.iconCls,
            iconClose: this.props.iconClose,
            iconOpen: this.props.iconOpen,
            open: this.props.open,
            checked: this.props.checked,
            checkAble: this.props.checkAble,
            checkType: this.props.checkedType,
            href: this.props.href,
            url: this.props.url,
            keyField: this.props.keyField,
            params: this.props.params,
            property: this.props.property,
            data: this.props.data,
            onSelect: this.props.onSelect,
            selected: this.props.rootValue == this.props.value ? true : false

        };
    },

    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        this.setState({
            isParent: nextProps.isParent,
            value: nextProps.value,
            text: nextProps.text,
            rootValue: nextProps.rootValue,
            rootText: nextProps.rootText,
            tip: nextProps.tip,
            iconCls: nextProps.iconCls,
            iconClose: nextProps.iconClose,
            iconOpen: nextProps.iconOpen,
            checked: nextProps.checked,
            checkAble: nextProps.checkAble,
            checkType: nextProps.checkedType,
            href: nextProps.href,
            url: nextProps.url,
            keyField: nextProps.keyField,
            params: nextProps.params,
            property: nextProps.property,
            data: nextProps.data,
            onSelect: nextProps.onSelect,
            selected: nextProps.rootValue == nextProps.value ? true : false
        });
    },
    componentDidUpdate: function componentDidUpdate() {},

    showHandler: function showHandler() {
        this.setState({
            open: !this.state.open
        });
    },
    onSelect: function onSelect(value, text, property) {
        this.setState({
            selected: true
        });
        if (this.props.onSelect != null) {
            this.props.onSelect(value, text, property);
        }
    },
    render: function render() {
        var _this = this;

        var nodeControl = [];

        var tip = this.state.tip ? this.state.tip : this.state.title; //提示信息
        if (this.state.data instanceof Array) {
            this.state.data.map(function (item, index) {
                var isParent = false; //是否为父节点
                if (item.isParent == true || item.data instanceof Array && item.data.length > 0) {
                    //如果明确规定了，或者子节点不为空，则设置为父节点
                    isParent = true;
                } else {}
                nodeControl.push(React.createElement(TreeNode, _extends({ rootValue: _this.state.rootValue, rootText: _this.state.rootText }, item, { isParent: isParent, onSelect: _this.onSelect, key: index })));
            });
        }
        var iconCls = this.state.iconCls; //默认图标图标
        if (this.state.isParent) {
            //如果是父节点
            if (this.state.open) {
                //打开状态，
                iconCls = this.state.iconOpen ? this.state.iconOpen : this.state.iconCls;
            } else {
                //关闭状态
                iconCls = this.state.iconClose ? this.state.iconClose : this.state.iconCls;
            }
        } else {}
        return React.createElement(
            "li",
            { ref: "node" },
            React.createElement("i", { className: this.state.open ? "icon-drop" : "icon-zright", style: { display: this.state.isParent ? "inline" : "none" }, onClick: this.showHandler }),
            React.createElement(
                "a",
                { href: this.state.href, title: tip, onClick: this.onSelect.bind(this, this.state.value, this.state.text, null, this.state.property), className: this.state.selected ? "selected" : "" },
                React.createElement("i", { className: iconCls }),
                " ",
                React.createElement(
                    "cite",
                    null,
                    this.state.text
                )
            ),
            React.createElement(
                "ul",
                { className: this.state.open ? "show" : "" },
                nodeControl
            )
        );
    }
});
module.exports = TreeNode;

/***/ }),
/* 264 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Created by zhiyongwang on 2016-04-25.
 * 英文版
 */
var lang = {
    SUN: "SUN",
    MON: "MON",
    TUE: "TUE",
    WED: "WED",
    THU: "WED",
    FRI: "FRI",
    SAT: "SAT"
};
module.exports = lang;

/***/ }),
/* 265 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var lang = { SUN: "日", MON: "一", TUE: "二", WED: "三", THU: "四", FRI: "五", SAT: "六", Month: ["一", "二", "三", "四", "五", "六", "七", "八", "九", "十", "十一", "十二"] };module.exports = lang;

/***/ }),
/* 266 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(1);

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                create by wangzhiyong
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                date:2017-02-09
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                desc:圣杯布局，中间内容
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


var Center = function (_React$Component) {
    _inherits(Center, _React$Component);

    function Center(props) {
        _classCallCheck(this, Center);

        return _possibleConstructorReturn(this, (Center.__proto__ || Object.getPrototypeOf(Center)).call(this, props));
    }

    _createClass(Center, [{
        key: "render",
        value: function render() {
            var style = this.props.style ? this.props.style : {};
            return _react2.default.createElement(
                "div",
                { className: "wasabi-layout-center " + this.props.className, style: style },
                this.props.children
            );
        }
    }]);

    return Center;
}(_react2.default.Component);

Center.defaultProps = _extends({}, Center.defaultProps, {
    style: null,
    className: ""
});
Center.propTypes = {
    style: _react2.default.PropTypes.object,
    className: _react2.default.PropTypes.string
};
module.exports = Center;

/***/ }),
/* 267 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Created by zhiyongwang on 2016-03-26.
 * 能停靠的层与LinkButton配合使用
 */
var React = __webpack_require__(1);
var LinkButton = __webpack_require__(25);
__webpack_require__(319);

var Drop = function (_React$Component) {
    _inherits(Drop, _React$Component);

    function Drop(props) {
        _classCallCheck(this, Drop);

        var _this = _possibleConstructorReturn(this, (Drop.__proto__ || Object.getPrototypeOf(Drop)).call(this, props));

        _this.dragOverHandler = _this.dragOverHandler.bind(_this);
        _this.dragEnterHandler = _this.dragEnterHandler.bind(_this);
        _this.dragLeaveHandler = _this.dragLeaveHandler.bind(_this);
        _this.dropHandler = _this.dropHandler.bind(_this);
        _this.state = {
            dropClass: "drop"
        };
        return _this;
    }

    _createClass(Drop, [{
        key: "dragOverHandler",
        value: function dragOverHandler(event) {
            //在ondragover中一定要执行preventDefault()，否则ondrop事件不会被触发
            event.preventDefault();
            return true;
        }
    }, {
        key: "dragEnterHandler",
        value: function dragEnterHandler() {
            this.setState({
                dropClass: "drop dragEnter" //停靠的背景色
            });
        }
    }, {
        key: "dragLeaveHandler",
        value: function dragLeaveHandler() {
            this.setState({
                dropClass: "drop" //
            });
        }
    }, {
        key: "dropHandler",
        value: function dropHandler() {
            this.setState({
                dropClass: "drop"
            });
            var eleProps = window.localStorage.getItem("wasabidrageleProps");
            if (eleProps) {
                eleProps = JSON.parse(eleProps);
            }
            this.props.onDrop(eleProps);
            window.localStorage.removeItem("wasabidrageleProps");
        }
    }, {
        key: "render",
        value: function render() {
            var props = {
                style: this.props.style
            };
            return React.createElement(
                "div",
                _extends({ className: this.props.className + " " + this.state.dropClass }, props, { onDrop: this.dropHandler,
                    onDragEnter: this.dragEnterHandler, onDragOver: this.dragOverHandler,
                    onDragLeave: this.dragLeaveHandler }),
                this.props.children
            );
        }
    }]);

    return Drop;
}(React.Component);

Drop.propTypes = {
    onDrop: React.PropTypes.func.isRequired //元素停靠事件
};
module.exports = Drop;

/***/ }),
/* 268 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(1);

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                create by wangzhiyong
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                date:2017-02-09
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                desc:圣杯布局，右侧
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


var East = function (_React$Component) {
    _inherits(East, _React$Component);

    function East(props) {
        _classCallCheck(this, East);

        return _possibleConstructorReturn(this, (East.__proto__ || Object.getPrototypeOf(East)).call(this, props));
    }

    _createClass(East, [{
        key: "render",
        value: function render() {
            var style = this.props.style ? this.props.style : {};
            return _react2.default.createElement(
                "div",
                { className: "wasabi-layout-east ", style: style },
                _react2.default.createElement(
                    "div",
                    { className: "wasabi-layout-title" },
                    this.props.title
                ),
                _react2.default.createElement(
                    "div",
                    { className: "wasabi-layout-nav" },
                    this.props.children
                )
            );
        }
    }]);

    return East;
}(_react2.default.Component);

East.propTypes = {
    style: _react2.default.PropTypes.object,
    className: _react2.default.PropTypes.string,
    title: _react2.default.PropTypes.string
};
East.defaultProps = {
    style: null,
    className: "",
    title: "East"
};
module.exports = East;

/***/ }),
/* 269 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/*
create by wangzhiyong
date:2017-02-09
desc:圣杯布局
 */

var React = __webpack_require__(1);
__webpack_require__(311);

var Layout = function (_React$Component) {
    _inherits(Layout, _React$Component);

    function Layout(props) {
        _classCallCheck(this, Layout);

        return _possibleConstructorReturn(this, (Layout.__proto__ || Object.getPrototypeOf(Layout)).call(this, props));
    }

    _createClass(Layout, [{
        key: "render",
        value: function render() {

            var style = this.props.style ? this.props.style : {};
            style.width = this.props.width;
            style.height = this.props.height;
            console.log(style);
            return React.createElement(
                "div",
                { className: "wasabi-layout", style: style },
                this.props.children
            );
        }
    }]);

    return Layout;
}(React.Component);

Layout.propTypes = {
    width: React.PropTypes.oneOfType([React.PropTypes.number, React.PropTypes.string]), //宽度
    height: React.PropTypes.oneOfType([React.PropTypes.number, React.PropTypes.string]), //高度
    style: React.PropTypes.object,
    className: React.PropTypes.string

};

Layout.defaultProps = _extends({}, Layout.defaultProps, {
    width: "100%",
    height: "100%",
    style: null,
    className: ""
});

module.exports = Layout;

/***/ }),
/* 270 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(1);

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                create by wangzhiyong
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                date:2017-02-09
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                desc:圣杯布局，头部
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


var North = function (_React$Component) {
    _inherits(North, _React$Component);

    function North(props) {
        _classCallCheck(this, North);

        return _possibleConstructorReturn(this, (North.__proto__ || Object.getPrototypeOf(North)).call(this, props));
    }

    _createClass(North, [{
        key: "render",
        value: function render() {
            var style = this.props.style ? this.props.style : {};
            return _react2.default.createElement(
                "div",
                { className: "wasabi-layout-north " + this.props.className, style: style },
                this.props.children
            );
        }
    }]);

    return North;
}(_react2.default.Component);

North.propTypes = {
    style: _react2.default.PropTypes.object,
    className: _react2.default.PropTypes.string
};
North.defaultProps = {
    style: null,
    className: ""
};

North.propTypes = {

    style: _react2.default.PropTypes.object,
    className: _react2.default.PropTypes.string
};
North.defaultProps = _extends({}, North.defaultProps, {
    style: null,
    className: ""
});
module.exports = North;

/***/ }),
/* 271 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*
create by wangzy
date:2016-15-18
desc:面板组件
 */
var React = __webpack_require__(1);
var LinkButton = __webpack_require__(25);
var Toolbars = __webpack_require__(50);
__webpack_require__(313);
var Panel = React.createClass({
    displayName: "Panel",

    propTypes: {
        theme: React.PropTypes.oneOf(["none", "default", "primary", "success", "info", "warning", "danger"]), //主题
        width: React.PropTypes.oneOfType([React.PropTypes.string, React.PropTypes.number]), //宽度
        height: React.PropTypes.number, //高度
        expand: React.PropTypes.bool, //是否展开
        expandAble: React.PropTypes.bool, //是否允许展开
        title: React.PropTypes.string, //标题
        buttons: React.PropTypes.array, //按钮
        buttonClick: React.PropTypes.func //按钮的单击事件
    },
    getDefaultProps: function getDefaultProps() {
        return {
            theme: "none",
            expand: true,
            expandAble: true,
            width: document.body.clientWidth,
            title: "",
            height: 400,
            backgroundColor: null,
            buttons: [],
            buttonClick: null
        };
    },
    getInitialState: function getInitialState() {
        return {
            expand: this.props.expand,
            expandAble: this.props.expandAble,
            iconTip: this.props.expand == true ? "折叠" : "展开",
            iconCls: this.props.expand == true ? "icon-fold" : "icon-expand",
            height: this.props.expand == true ? this.props.height : 0
        };
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        this.setState({
            expand: nextProps.expand,
            expandAble: nextProps.expandAble,
            height: nextProps.height != null && nextProps.height != undefined ? nextProps.height : this.state.height,
            width: nextProps.width != null && nextProps.width != undefined ? nextProps.width : this.state.width
        });
    },
    expandHandler: function expandHandler() {
        this.setState({
            expand: !this.state.expand,
            iconTip: this.state.expand == true ? "折叠" : "展开",
            iconCls: this.state.expand == true ? "icon-fold" : "icon-expand",
            height: this.state.expand == true ? this.props.height : 0
        });
    },
    buttonClick: function buttonClick(name, title) {
        if (this.props.buttonClick != null) {
            this.props.buttonClick(name, title);
        }
    },
    render: function render() {
        var style = null;
        if (this.props.style) {
            style = this.props.style;
            style.width = this.props.width;
        } else {
            style = {
                width: this.props.width
            };
        }
        return React.createElement(
            "div",
            { className: "wasabi-panel panel-" + this.props.theme, style: style },
            React.createElement(
                "div",
                { className: "panel-heading" },
                React.createElement(
                    "h3",
                    { className: "panel-title" },
                    this.props.title
                ),
                React.createElement(
                    "div",
                    { className: "panel-buttons" },
                    React.createElement(Toolbars, { buttons: this.props.buttons, buttonClick: this.buttonClick })
                ),
                React.createElement(
                    "div",
                    { className: "panel-icon", style: { display: this.state.expandAble ? "block" : "none" } },
                    React.createElement(LinkButton, { tip: this.state.iconTip, iconCls: this.state.iconCls, onClick: this.expandHandler })
                )
            ),
            React.createElement(
                "div",
                { className: "panel-body  ", style: { height: this.state.height } },
                this.props.children
            )
        );
    }
});
module.exports = Panel;

/***/ }),
/* 272 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

/**
 * Created by zhiyongwang on 2016-04-14.
 * 能够翻转的层
 */
var React = __webpack_require__(1);
__webpack_require__(321);
var Reverse = React.createClass({
    displayName: "Reverse",

    propTypes: {
        dblAble: React.PropTypes.bool, //是否允许双击翻转
        className: React.PropTypes.string
    },
    getDefaultProps: function getDefaultProps() {
        return {
            className: "",
            dblAble: true
        };
    },
    getInitialState: function getInitialState() {
        return {
            isReverse: false,
            frontClassName: "",
            reverseClassName: "flip out",
            frontDisplay: "block",
            reverseDisplay: "none"

        };
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {},
    mouseoverHandler: function mouseoverHandler() {

        this.setState({
            frontClassName: "flip out",
            isReverse: true
        });
        var parent = this;
        setTimeout(function () {
            parent.setState({
                frontDisplay: "none",
                reverseDisplay: "block",
                reverseClassName: "flip in"
            });
        }, 300);
    },
    mouseOutHandler: function mouseOutHandler() {
        this.setState({
            reverseClassName: "flip out",
            isReverse: false
        });
        var parent = this;
        setTimeout(function () {
            parent.setState({
                frontDisplay: "block",
                reverseDisplay: "none",
                frontClassName: "flip in"
            });
        }, 300);
    },
    onDblClick: function onDblClick() {
        if (!this.props.dblAble) {
            return;
        }
        this.reverseHandler();
    },
    getState: function getState() {
        //用获取状态用于父组件

        return this.state.isReverse;
    },
    reverseHandler: function reverseHandler() {
        //用于父组件调用
        if (this.state.isReverse) {

            this.mouseOutHandler();
        } else {

            this.mouseoverHandler();
        }
    },
    render: function render() {
        var props = {
            style: this.props.style,
            className: this.props.className + " reverse"
        };
        return React.createElement(
            "div",
            _extends({ onDoubleClick: this.onDblClick }, props),
            React.createElement(
                "div",
                { ref: "front", className: this.state.frontClassName, style: { display: this.state.frontDisplay } },
                this.props.front
            ),
            React.createElement(
                "div",
                { ref: "reverse", className: this.state.reverseClassName, style: { display: this.state.reverseDisplay } },
                this.props.reverse
            )
        );
    }
});
module.exports = Reverse;

/***/ }),
/* 273 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(1);

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                create by wangzhiyong
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                date:2017-02-09
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                desc:圣杯布局，底部
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


var South = function (_React$Component) {
    _inherits(South, _React$Component);

    function South(props) {
        _classCallCheck(this, South);

        return _possibleConstructorReturn(this, (South.__proto__ || Object.getPrototypeOf(South)).call(this, props));
    }

    _createClass(South, [{
        key: "render",
        value: function render() {
            var style = this.props.style ? this.props.style : {};
            return _react2.default.createElement(
                "div",
                { className: "wasabi-layout-south " + this.props.className, style: style },
                this.props.children
            );
        }
    }]);

    return South;
}(_react2.default.Component);

South.propTypes = {

    style: _react2.default.PropTypes.object,
    className: _react2.default.PropTypes.string
};
South.defaultProps = _extends({}, South.defaultProps, {
    style: null,
    className: ""
});
module.exports = South;

/***/ }),
/* 274 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(1);

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                create by wangzhiyong
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                date:2017-02-09
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                desc:圣杯布局，右侧
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


var West = function (_React$Component) {
    _inherits(West, _React$Component);

    function West(props) {
        _classCallCheck(this, West);

        return _possibleConstructorReturn(this, (West.__proto__ || Object.getPrototypeOf(West)).call(this, props));
    }

    _createClass(West, [{
        key: "render",
        value: function render() {
            var style = this.props.style ? this.props.style : {};
            return _react2.default.createElement(
                "div",
                { className: "wasabi-layout-west ", style: style },
                _react2.default.createElement(
                    "div",
                    { className: "wasabi-layout-title" },
                    this.props.title
                ),
                _react2.default.createElement(
                    "div",
                    { className: "wasabi-layout-nav" },
                    this.props.children
                )
            );
        }
    }]);

    return West;
}(_react2.default.Component);

West.propTypes = {
    style: _react2.default.PropTypes.object,
    className: _react2.default.PropTypes.string,
    title: _react2.default.PropTypes.string
};
West.defaultProps = _extends({}, West.defaultProps, {

    style: null,
    className: "",
    title: "East"
});
module.exports = West;

/***/ }),
/* 275 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Created by wangzhiong on 2016/12/24.
 * datagrid，内置的编辑器模型
 * editor
 */
var EditorModel = function EditorModel(type) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

  _classCallCheck(this, EditorModel);

  this.type = type; //input组件类型，
  this.options = options; //input组件的属性
  this.content = null; //修改前如何处理text,value,返回类型{value:"",text:""}
  this.edited = null; //值修改后的处理函数
};

module.exports = EditorModel;

/***/ }),
/* 276 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Created by zhiyongwang on 2016-05-20.
 * 列表中页脚的数据模型
 */

var FooterModel = function FooterModel(name, type) {
    var value = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    var content = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

    _classCallCheck(this, FooterModel);

    this.name = name;
    this.type = type; //sum,avg
    this.value = value;
    this.content = content; //复合计算函数
};

module.exports = FooterModel;

/***/ }),
/* 277 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Created by zhiyongwang on 2016-02-23.
 * 菜单数据模型
 */

var MenuModel = function MenuModel(title) {
  var url = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
  var iconCls = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "";
  var content = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

  _classCallCheck(this, MenuModel);

  this.title = title;
  this.url = url;
  this.iconCls = iconCls;
  this.menus = [];
  this.content = content;
};

module.exports = MenuModel;

/***/ }),
/* 278 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Created by wangzhiyong on 2016/12/14.
 * 树节点模型
 */

var NodeModel = function NodeModel(value, text) {
    var isParent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

    _classCallCheck(this, NodeModel);

    this.value = value; //值
    this.text = text; //标题
    this.isParent = isParent; //是否父节点,如果没有强制，则会根据是否有子节点来判断是为父节点
    this.tip = null; //提示信息
    this.iconCls = "icon-file"; //默认图标
    this.iconClose = "icon-folder"; //关闭图标
    this.iconOpen = "icon-open-folder"; //打开的图标
    this.open = false; //是否处于打开状态
    this.selected = false; //是否被选中
    this.checked = false, //是否被勾选
    this.checkAble = false; //是否允许勾选
    this.checkedType = { "Y": "ps", "N": "ps" }, //勾选对于父子节点的关联关系
    this.href = "javascript=void(0)"; //节点的链接
    this.url = null; //子节点加载的url地址
    this.key = "id"; //向后台传输的字段名
    this.params = null; //向后台传输的额外参数
    this.property = null; ////其他数据,TODO 先保留，暂时没处理
    this.data = []; ////子节点数据
    this.onSelect = null; ////选中后的事件
};

module.exports = NodeModel;

/***/ }),
/* 279 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Created by zhiyongwang on 2016-02-24.
 * 页签数据模型
 */
var TabModel = function TabModel(title) {
    var url = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    var active = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    var content = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
    var iconCls = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;

    _classCallCheck(this, TabModel);

    this.title = title;
    this.url = url;
    this.active = active;
    this.content = content;
    this.iconCls = null;
    function uuid() {
        //生成uuid
        var s = [];
        var hexDigits = "0123456789abcdef";
        for (var i = 0; i < 36; i++) {
            s[i] = hexDigits.substr(Math.floor(Math.random() * 0x10), 1);
        }
        s[14] = "4"; // bits 12-15 of the time_hi_and_version field to 0010
        s[19] = hexDigits.substr(s[19] & 0x3 | 0x8, 1); // bits 6-7 of the clock_seq_hi_and_reserved to 01
        s[8] = s[13] = s[18] = s[23] = "-";

        var uuid = s.join("");
        return uuid;
    }
    this.uuid = uuid(); //生成一个唯一标识。只读属性
    this.parentuuid = null; //父标签页的唯一标识
};

module.exports = TabModel;

/***/ }),
/* 280 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

//create by wangzy
//date:2016-04-05后开始独立改造
//标签页
var React = __webpack_require__(1);
var addRipple = __webpack_require__(55);
var MenuTab = React.createClass({
    displayName: "MenuTab",

    mixins: [addRipple],
    propTypes: {
        index: React.PropTypes.number.isRequired, //在父组件中的序号，用于关闭
        title: React.PropTypes.string.isRequired, //标题
        iconCls: React.PropTypes.string, //图标
        url: React.PropTypes.string, //子页面地址
        active: React.PropTypes.bool, //是否为激活状态
        clickHandler: React.PropTypes.func.isRequired, //激活后的回调事件,
        closeHandler: React.PropTypes.func.isRequired, //页面关闭事件
        hide: React.PropTypes.bool //是否隐藏,由于过多导致的这个属性

    },
    getDefaultProps: function getDefaultProps() {
        return {
            active: false,
            iconCls: null,
            hide: false
        };
    },
    getInitialState: function getInitialState() {
        return {
            active: this.props.active,
            hide: this.props.hide
        };
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        var props = _extends({}, nextProps);
        this.setState(props);
    },

    clickHandler: function clickHandler(event) {
        this.rippleHandler(event);
        if (event.target.nodeName == "A" || event.target.className == "text" || event.target.className == "icon") {
            this.props.clickHandler(this.props.index);
        }
    },
    closeHandler: function closeHandler(event) {
        if (this.props.closeHandler) {
            this.props.closeHandler(this.props.index);
        }
    },
    render: function render() {
        return React.createElement(
            "li",
            { className: this.state.active ? "active" : "", style: { display: this.state.hide ? "none" : "inline-block" }, title: "\u53CC\u51FB\u53EF\u4EE5\u5173\u95ED" },
            React.createElement(
                "a",
                { onDoubleClick: this.closeHandler, onClick: this.clickHandler },
                React.createElement("div", { className: "icon " + this.props.iconCls, style: { width: this.props.iconCls == null ? 5 : null } }),
                React.createElement("div", { className: this.props.title == "首页" ? "" : "closeicon icon-close", onClick: this.closeHandler }),
                React.createElement(
                    "div",
                    { className: "text", title: this.props.title },
                    this.props.title
                ),
                React.createElement("div", { className: "split" })
            )
        );
    }
});
module.exports = MenuTab;

/***/ }),
/* 281 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


//create by wangzy
//date:2016-04-05后开始独立改造
//标签页
var React = __webpack_require__(1);
var TabSection = React.createClass({
    displayName: "TabSection",

    propTypes: {
        url: React.PropTypes.string,
        active: React.PropTypes.bool
    },

    getDefaultProps: function getDefaultProps() {
        return {
            active: false
        };
    },
    getInitialState: function getInitialState() {
        var height = document.documentElement.clientHeight - 80;
        return {
            bodyHeight: height
        };
    },
    // componentWillReceiveProps(nextProps) {
    //     this.setState(nextProps);
    // },
    componentDidMount: function componentDidMount() {},

    render: function render() {
        if (this.props.url.indexOf("pendingOrder") > -1) {
            console.log("pendingOrder");
        }
        return React.createElement(
            "section",
            { ref: "tabsection", style: { height: this.state.bodyHeight }, className: this.props.active == true ? "checkedsection" : "tabsection" },
            React.createElement("iframe", { src: this.props.url, style: { height: this.state.bodyHeight } })
        );
    }
});
module.exports = TabSection;

/***/ }),
/* 282 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/*create by wangzy
 //date:2016-03-02后开始a独立框架改造
 //标签页组
 */
__webpack_require__(316);
__webpack_require__(143);
var React = __webpack_require__(1);
var Tab = __webpack_require__(280);
var TabSection = __webpack_require__(281);
var LinkButton = __webpack_require__(25);
var unit = __webpack_require__(5);

var MenuTabs = function (_React$Component) {
    _inherits(MenuTabs, _React$Component);

    function MenuTabs(props) {
        _classCallCheck(this, MenuTabs);

        var _this = _possibleConstructorReturn(this, (MenuTabs.__proto__ || Object.getPrototypeOf(MenuTabs)).call(this, props));

        _this.menuHandler = _this.menuHandler.bind(_this);
        _this.homeHandler = _this.homeHandler.bind(_this);
        _this.userHandler = _this.userHandler.bind(_this);
        _this.tabClickHandler = _this.tabClickHandler.bind(_this);
        _this.tabCloseHandler = _this.tabCloseHandler.bind(_this);
        _this.leftClickHandler = _this.leftClickHandler.bind(_this);
        _this.rightClickHandler = _this.rightClickHandler.bind(_this);

        //复制一份，当菜单关闭时用于比较显示的位置，不能直接复制给状态值，这样会导致不停的刷新
        _this.oldTabsLength = _this.props.tabs.length;
        var resultWidth = _this.setDeWidth();

        var rightIndex = 0; //右边下标
        if (_this.props.tabs instanceof Array && _this.props.tabs.length > 0) {
            if (_this.props.tabs.length < resultWidth.availNum) {
                rightIndex = _this.props.tabs.length - 1;
            } else {
                rightIndex = resultWidth.availNum - 1;
            }
        }

        _this.state = {
            tabs: _this.props.tabs,
            homeActive: -1, //主页是否处于激活状态
            menuVisible: false, //
            leftIndex: 0, //可见的第一个下标
            rightIndex: rightIndex, //可见的最后一个下标
            availWidth: resultWidth.availWidth, //可以宽度
            availNum: resultWidth.availNum //可用个数
        };
        return _this;
    }

    _createClass(MenuTabs, [{
        key: "setDeWidth",
        value: function setDeWidth() {
            //设置可以用宽度与可用个数
            var detractWidth = 0; //被减去的宽度,
            if (this.props.menuHandler) {
                //是否有菜单按钮
                detractWidth += 40;
            }
            if (this.props.homeUrl) {
                //是否有主页按钮
                detractWidth += 40;
            }
            if (this.props.userComponent) {
                //是否自定义用户信息
                detractWidth += 300;
            } else if (this.props.userHandler) {
                //是否有用户按钮
                detractWidth += 40;
            }
            var availWidth = document.body.getBoundingClientRect().width - detractWidth;
            var availNum = parseInt(availWidth / this.props.cellWidth);
            return {
                availWidth: availWidth, //可用宽度
                availNum: availNum //可用个数
            };
        }
    }, {
        key: "componentWillReceiveProps",
        value: function componentWillReceiveProps(nextProps) {
            this.setState({
                tabs: nextProps.tabs,
                homeActive: nextProps.tabs && nextProps.tabs.length > 0 ? false : true, //判断主页是否激活
                menuVisible: nextProps.menuVisible //菜单按钮是否打开
            });
        }
    }, {
        key: "menuHandler",
        value: function menuHandler() {
            //显示/隐藏菜单的事件
            this.setState({
                menuVisible: !this.state.menuVisible
            });
            this.props.menuHandler(!this.state.menuVisible); //回调父组件
        }
    }, {
        key: "userHandler",
        value: function userHandler() {
            //用户中心单击事件
            this.props.userComponent ? this.props.userHandler ? this.props.userHandler() : void 0 : void 0; //如果自定义了组件，不处理
        }
    }, {
        key: "homeHandler",
        value: function homeHandler() {
            //主页的单击事件
            this.setState({
                homeActive: true, //激活主页
                tabs: this.state.tabs.map(function (item, index) {
                    item.active = false;return item;
                })
            });
        }
    }, {
        key: "tabClickHandler",
        value: function tabClickHandler(index) {
            //页签单击事件
            this.setState({
                tabs: this.state.tabs.map(function (item, itemIndex) {
                    return index == itemIndex ? function () {
                        item.active = true;return item;
                    }() : function () {
                        item.active = false;return item;
                    }();
                }),
                homeActive: false
            });
        }
    }, {
        key: "tabCloseHandler",
        value: function tabCloseHandler(index) {

            var newTabs = this.state.tabs;
            var parentuuid = newTabs[index].parentuuid;
            var parentIndex = null; //父页面的下标
            for (var i = 0; i < newTabs.length; i++) {
                if (newTabs[i].uuid == parentuuid) {
                    parentIndex = i;
                    break;
                }
            }
            if (newTabs[index].active == true) {
                //删除tab为激活的tab
                if (parentIndex != null) {
                    //存在父页面，父页面激活
                    newTabs[parentIndex].active = true;
                } else {
                    //不存在父页面，激活临近页面
                    if (index < newTabs.length - 1) {
                        //不是最后一个，下一个激活
                        newTabs[index + 1].active = true;
                    } else {
                        //最后一个，上一个激活
                        if (index != 0) {
                            newTabs[index - 1].active = true;
                        } else {}
                    }
                }
            }
            newTabs.splice(index, 1); //删除

            this.setState({
                tabs: newTabs,

                homeActive: newTabs.length == 0 ? true : false
            });
            if (this.props.tabNumChangeHandler) {
                this.props.tabNumChangeHandler(newTabs); //返回给你父组组件更新
            }
        }
    }, {
        key: "leftClickHandler",
        value: function leftClickHandler() {

            if (this.state.leftIndex > 0) {
                this.setState({
                    leftIndex: this.state.leftIndex - 1,
                    rightIndex: this.state.rightIndex - 1
                });
            }
        }
    }, {
        key: "rightClickHandler",
        value: function rightClickHandler() {
            if (this.state.rightIndex < this.state.tabs.length - 1) {
                this.setState({
                    leftIndex: this.state.leftIndex + 1,
                    rightIndex: this.state.rightIndex + 1
                });
            }
        }
    }, {
        key: "render",
        value: function render() {
            var _this2 = this;

            var tabobj = [];
            var sectionobj = [];
            this.state.tabs.map(function (child, index) {
                if (child.active == true) {
                    //保存当前激活标签uuid，用于子标签中打开新标签时设置其父标签
                    window.localStorage.setItem("alog_currentTabUUID", child.uuid); //保存当前激活节点，用于新建tab
                    if (child.parentuuid != null) {
                        //记录当前节点的父节点，用于关闭时更新父tab
                        var parentTabUUID = window.localStorage.getItem("parentTabUUID");
                        if (parentTabUUID == null) {
                            parentTabUUID = "";
                        };
                        parentTabUUID += child.uuid + "$" + child.parentuuid; //);//保存当前激活节点的uuid及父节点的uuid,用于关闭tab时刷新父节点,
                        window.localStorage.setItem("parentTabUUID", parentTabUUID);
                    }
                }
                tabobj.push(React.createElement(Tab, { key: "tab" + index, onContextMenu: _this2.headerContextMenuHandler, index: index, title: child.title, iconCls: child.iconCls,
                    active: child.active, clickHandler: _this2.tabclickHandler,
                    closeHandler: _this2.tabCloseHandler, hide: index >= _this2.state.leftIndex && index <= _this2.state.rightIndex ? false : true }));
                sectionobj.push(React.createElement(TabSection, { key: "tabsection" + index, url: child.url,
                    active: _this2.state.homeActive ? false : child.active,
                    content: child.content }));
            });

            if (this.props.homeUrl) {
                //如果有主页的话
                tabobj.unshift(React.createElement(Tab, { key: "tab", title: this.props.homeTitle, index: -1,
                    active: this.state.homeActive ? true : false, clickHandler: this.homeHandler,
                    closeHandler: this.tabCloseHandler }));
                sectionobj.unshift(React.createElement(TabSection, { key: "homesection", url: this.props.homeUrl,
                    active: this.state.homeActive ? true : false }));
            }

            return React.createElement(
                "div",
                { className: "wasabi-nav-container" },
                React.createElement(
                    "ul",
                    { className: " wasabi-nav-tabs", ref: "menutab" },
                    React.createElement("li", { className: "tabmenu " + (this.state.menuVisible ? "close" : ""), style: { display: this.props.menuHandler ? "inline-block" : "none" }, onClick: this.menuHandler }),
                    React.createElement(
                        "li",
                        { className: "tabhome " + (this.state.homeActive ? "active" : ""), style: { display: this.props.homeUrl ? "inline-block" : "none" }, onClick: this.homeHandler },
                        React.createElement("div", { className: "split" })
                    ),
                    React.createElement(
                        "li",
                        { className: "content", style: { width: this.state.availWidth } },
                        React.createElement(
                            "ul",
                            null,
                            " ",
                            tabobj
                        ),
                        React.createElement("div", { className: "scrollbar" })
                    ),
                    React.createElement(
                        "li",
                        { style: { display: this.props.userComponent || this.props.userHandler ? "inline-block" : "none" },
                            className: this.props.userComponent ? "tabuser-control" : this.props.userHandler ? "tabuser" : "",
                            onClick: this.userHandler },
                        this.props.userComponent
                    )
                ),
                sectionobj
            );
        }
    }]);

    return MenuTabs;
}(React.Component);

MenuTabs.propTypes = {
    tabs: React.PropTypes.array, //标签页数据
    menuHandler: React.PropTypes.func, //菜单按钮的单击事件
    homeUrl: React.PropTypes.string, //主页的链接地址
    homeTitle: React.PropTypes.string, //主页的标题
    userHandler: React.PropTypes.func, //用户个人中心按钮的单击事件
    userComponent: React.PropTypes.any, //用户自定义的组件
    tabNumChangeHandler: React.PropTypes.func //标签页数据发生改变事件

};
MenuTabs.defaultProps = {
    tabs: null,
    menuHandler: null,
    homeUrl: null,
    homeTitle: "我的桌面", //我的桌面
    userHandler: null,
    userComponent: null, //用户自定义组件
    cellWidth: 121, //单元格默认宽度
    tabNumChangeHandler: null //标签页数据发生改变事件
};
;
module.exports = MenuTabs;

/***/ }),
/* 283 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


//create by wangzy
//date:2016-02-18
//标签页组
__webpack_require__(320);
var React = __webpack_require__(1);
var addRipple = __webpack_require__(55);
var Tabs = React.createClass({
    displayName: "Tabs",

    mixins: [addRipple],
    propTypes: {
        tabs: React.PropTypes.array.isRequired,
        theme: React.PropTypes.oneOf([//主题
        "primary", "default", "green"])
    },
    getDefaultProps: function getDefaultProps() {
        return {
            tabs: [],
            theme: "default"
        };
    },
    getInitialState: function getInitialState() {
        //这里似乎无法复制，因为content属性是jsx对象，但似乎不影响使用
        return {
            tabs: this.props.tabs
        };
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        this.setState({
            tabs: nextProps.tabs
        });
    },
    tabClickHandler: function tabClickHandler(index, event) {

        this.rippleHandler(event);
        //页签单击事件
        var newTabs = this.state.tabs;
        for (var i = 0; i < newTabs.length; i++) {
            if (i == index) {
                newTabs[index].active = true;
            } else {
                newTabs[i].active = false;
            }
        }
        this.setState({ tabs: newTabs });
    },
    render: function render() {
        var _this = this;

        return React.createElement(
            "div",
            { className: "wasabi-tabs", style: this.props.style },
            React.createElement(
                "div",
                null,
                this.state.tabs.map(function (child, i) {
                    return React.createElement(
                        "a",
                        { key: i, href: "javascript:void(0);", onClick: _this.tabClickHandler.bind(_this, i), className: "wasabi-tab " + _this.props.theme + " " + (child.active == true ? "active " : "") },
                        child.title
                    );
                })
            ),
            React.createElement(
                "div",
                { className: "section " + this.props.theme },
                this.state.tabs.map(function (child, i) {
                    return React.createElement(
                        "div",
                        { key: i, className: child.active == true ? "active" : "" },
                        child.content
                    );
                })
            )
        );
    }
});
module.exports = Tabs;

/***/ }),
/* 284 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

//create by wangzy
//date 2016-07-27
//desc 物流跟踪信息

var React = __webpack_require__(1);
__webpack_require__(322);

var Track = function (_React$Component) {
    _inherits(Track, _React$Component);

    function Track(props) {
        _classCallCheck(this, Track);

        var _this = _possibleConstructorReturn(this, (Track.__proto__ || Object.getPrototypeOf(Track)).call(this, props));

        _this.state = {
            model: _this.props.model,
            expressName: _this.props.expressName,
            expressId: _this.props.expressId
        };
        return _this;
    }

    _createClass(Track, [{
        key: "componentWillReceiveProps",
        value: function componentWillReceiveProps(nextProps) {
            this.setState({
                model: nextProps.model,
                expressName: nextProps.expressName,
                expressId: nextProps.expressId
            });
        }
    }, {
        key: "render",
        value: function render() {
            if (this.state.model instanceof Array) {
                return React.createElement(
                    "div",
                    { className: "wasabi-track" },
                    React.createElement(
                        "div",
                        { className: "express" },
                        "  ",
                        React.createElement(
                            "div",
                            { className: "expressName" },
                            "快递公司:   " + this.state.expressName
                        ),
                        React.createElement(
                            "div",
                            { className: "expressId" },
                            "快递单号:  " + this.state.expressId
                        )
                    ),
                    React.createElement(
                        "ul",
                        null,
                        this.state.model.map(function (child, index) {
                            return React.createElement(
                                "li",
                                { key: index },
                                React.createElement(
                                    "div",
                                    { className: "track-time" },
                                    child.time
                                ),
                                React.createElement(
                                    "div",
                                    { className: "track-info" },
                                    child.info
                                )
                            );
                        })
                    )
                );
            } else {
                return null;
            }
        }
    }]);

    return Track;
}(React.Component);

Track.propTypes = {
    model: React.PropTypes.array, //跟踪信息
    expressName: React.PropTypes.string, //快递公司名称
    exrepssId: React.PropTypes.oneOfType([React.PropTypes.number, React.PropTypes.string]) //快递单号


};
Track.defaultProps = {
    model: null,
    expressName: null,
    expressId: null

};

module.exports = Track;

/***/ }),
/* 285 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var React = __webpack_require__(1);
var Button = __webpack_require__(10);
__webpack_require__(317);
var MessageView = React.createClass({
    displayName: "MessageView",

    propTypes: {
        type: React.PropTypes.oneOf(["alert", "info", "success", "error", "confirm"]),
        msg: React.PropTypes.string.isRequired, //消息
        timeout: React.PropTypes.number, //自动消失时间
        cancelHandler: React.PropTypes.func, //取消事件
        OKHandler: React.PropTypes.func //确定事件

    },
    getDefaultProps: function getDefaultProps() {
        return {
            type: "alert",
            msg: "",
            timeout: 2000,
            showOK: true,
            showCancel: true
        };
    },
    getInitialState: function getInitialState() {
        return {
            opacity: 1, //透明度
            visible: true //可见性
        };
    },
    componentDidMount: function componentDidMount() {
        this.onmouse = false; ////初始化
        if (this.props.type == "confirm" || this.props.type == "alert") {} else {
            this.timeOutHandler(); //设置定时器
        }
    },
    OKHandler: function OKHandler() {
        this.setState({
            visible: false
        });
        if (this.props.OKHandler != null) {
            this.props.OKHandler();
        }
    },
    cancelHandler: function cancelHandler() {
        this.setState({
            visible: false
        });
        if (this.props.cancelHandler != null) {
            this.props.cancelHandler();
        }
    },
    onMouseOver: function onMouseOver() {

        //先清空所有定时器
        this.onmouse = true; //标记属性在上面
        for (var index = 0; index < this.timeoutArray.length; index++) {
            clearTimeout(this.timeoutArray[index]); //清除定时器
        }

        this.setState({
            opacity: 1
        });
    },
    onMouseOut: function onMouseOut() {
        this.onmouse = false; //标记属性在上面

        this.timeOutHandler(); //设置定时器
    },
    timeOutHandler: function timeOutHandler() {
        var _this = this;

        this.timeoutArray = [];
        this.timeoutArray.push(setTimeout(function () {
            if (_this.onmouse == false) {
                _this.setState({
                    opacity: 0.7
                });
            }
        }, 1000));
        this.timeoutArray.push(setTimeout(function () {
            if (_this.onmouse == false) {
                _this.setState({

                    visible: false
                });
            }
        }, this.props.timeout * 2));
    },

    renderInfo: function renderInfo() {
        return React.createElement(
            "div",
            { onMouseOver: this.onMouseOver, onMouseOut: this.onMouseOut, className: "wasabi-message " + this.props.type,
                style: { display: this.state.visible ? "inline-block" : "none", opacity: this.state.opacity, transition: "opacity " + (this.props.timeout / 1000).toString() + "s" } },
            React.createElement(
                "div",
                { className: "notice" },
                this.props.msg
            )
        );
    },

    renderAlert: function renderAlert() {
        return React.createElement(
            "div",
            { className: "wasabi-confirm", style: { display: this.state.visible ? "inline-block" : "none" } },
            React.createElement(
                "div",
                { className: "message" },
                this.props.msg == null || this.props.msg == "" ? "友情提示?" : this.props.msg
            ),
            React.createElement(
                "div",
                { className: "buttons" },
                React.createElement(Button, { theme: "green", name: "ok", title: "\u786E\u5B9A", onClick: this.cancelHandler })
            )
        );
    },
    renderConfirm: function renderConfirm() {
        return React.createElement(
            "div",
            { className: "wasabi-confirm", style: { display: this.state.visible ? "inline-block" : "none" } },
            React.createElement(
                "div",
                { className: "message" },
                this.props.msg == null || this.props.msg == "" ? "确定删除这条信息吗?" : this.props.msg
            ),
            React.createElement(
                "div",
                { className: "buttons" },
                React.createElement(Button, { theme: "green", name: "ok", title: "\u786E\u5B9A", onClick: this.OKHandler }),
                React.createElement(Button, { theme: "cancel", name: "cancel", title: "\u53D6\u6D88", onClick: this.cancelHandler })
            )
        );
    },
    render: function render() {
        switch (this.props.type) {
            case "info":
                return this.renderInfo();
            case "success":
                return this.renderInfo();
            case "error":
                return this.renderInfo();
            case "alert":
                return this.renderAlert();
            case "confirm":
                return this.renderConfirm();
        }
        return null;
    }
});
module.exports = MessageView;

/***/ }),
/* 286 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Created by 12295 on 2016/10/21.
 */
__webpack_require__(323);
var React = __webpack_require__(1);
var Progress = React.createClass({
    displayName: 'Progress',

    propTypes: _defineProperty({
        width: React.PropTypes.number, //宽度（线性进步条的宽度   环形进度条的大小-宽高相等）
        percent: React.PropTypes.number, //进度条的百分数
        type: React.PropTypes.oneOf(['line', 'circle']), //进度条的类型
        height: React.PropTypes.number, //高度（线性进度条的高度）
        status: React.PropTypes.oneOf(['', 'active', 'exception']) }, 'percent', function percent(props, propName, componentName) {
        //percent  的范围为0-100的正数
        if (!/^(\d{1,2}(\.\d+)?|100|NA)$/.test(props[propName])) {
            return new Error('Invalid prop\'' + propName + '\'supplied to' + '\'' + componentName + '\'.validation failed');
        }
    }),
    getDefaultProps: function getDefaultProps() {
        return {
            width: 100,
            type: 'line',
            height: 10,
            status: ''
        };
    },
    getInitialState: function getInitialState() {
        var percent = this.props.percent > 100 ? 100 : this.props.percent;
        return {
            percent: percent
        };
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        this.setState({
            percent: nextProps.percent > 100 ? 100 : nextProps.percent
        });
    },
    componentDidMount: function componentDidMount() {

        if (this.props.type == "circle") {
            var percent = 0;
            var timer = setInterval(function () {
                percent += 1;
                if (percent >= this.state.percent) {
                    clearInterval(timer);
                    percent = this.state.percent.toFixed(1);
                };
                if (!(percent - 100)) {
                    var percentShow = "-99.99999s";
                } else {
                    var percentShow = "-" + percent + "s";
                }
                document.getElementsByClassName("wasabi-pie")[0].style.animationDelay = percentShow;
                document.getElementsByClassName("pie-showInfo")[0].innerHTML = percent + "%";
            }.bind(this), 12);
        };
        if (this.props.type == "line" && this.props.status == "active") {
            //如果父组件的status为active   则需要执行下面代码   界面将动态加载进步条的进度
            var percent = 0;
            setInterval(function () {
                if (percent == 100) {
                    percent = 0;
                }
                percent += 1;
                document.getElementsByClassName("wasabi-percentShowActive")[0].style.width = percent + "%";
                document.getElementsByClassName("wasabi-percentShowActive")[0].style.opacity = 0.8 - percent / 100 * 0.8;
            }.bind(this), 12);
        };
    },
    showInfo: function showInfo() {
        if (this.props.status == "exception" || this.state.percent == 100) {
            return React.createElement(
                'div',
                { className: "progress-showIcon " + (this.state.percent == 100 ? "success" : ""), style: { height: this.props.height / 1.2, width: this.props.height / 1.2 } },
                React.createElement('i', { className: 'icon' })
            );
        } else {
            return React.createElement(
                'span',
                { style: { fontSize: this.props.height / 1.2 } },
                this.state.percent.toFixed(1),
                '%'
            );
        }
    },
    render: function render() {
        switch (this.props.type) {//通过父组件的type  判断需要渲染哪类进度条
            case 'line':
                //线性进步条
                var percentIsShow; //判断动态进步条层  是否显示
                percentIsShow = this.props.status == "active" ? "block" : "none";
                percentIsShow = this.state.percent == 100 ? "none" : "block";
                return React.createElement(
                    'div',
                    { className: 'wasabi-lineProgress-wrap' },
                    React.createElement(
                        'div',
                        { className: 'wasabi-lineProgress', style: { width: this.props.width, height: this.props.height } },
                        React.createElement(
                            'div',
                            { className: "wasabi-lineProgress-percentShow " + this.props.status + " " + (this.state.percent == 100 ? "success" : ""), style: { width: this.props.width * (this.state.percent / 100), height: this.props.height } },
                            React.createElement('div', { className: 'wasabi-percentShowActive', style: { height: this.props.height, display: percentIsShow } })
                        )
                    ),
                    React.createElement(
                        'div',
                        { className: 'wasabi-showInfo', style: { lineHeight: this.props.height + "px" } },
                        this.showInfo()
                    )
                );
                break;
            case 'circle':
                //环形进步条
                var marginLeft = -this.props.width * 0.7 / 2;
                var percent = "-" + this.state.percent + "s";
                return React.createElement(
                    'div',
                    { className: 'wasabi-pie', style: { width: this.props.width, height: this.props.width } },
                    React.createElement(
                        'div',
                        { className: 'wasabi-pie-cover', style: { marginLeft: marginLeft, marginTop: marginLeft } },
                        React.createElement('span', { style: { fontSize: this.props.width / 5 + "px", color: "#666", width: "100%" }, className: 'pie-showInfo' })
                    )
                );
                break;
            default:
                console.log("传入的type值出错");
        }
    }
});
module.exports = Progress;

/***/ }),
/* 287 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var React = __webpack_require__(1);
__webpack_require__(318);
var ToolTip = React.createClass({
    displayName: "ToolTip",

    propTypes: {
        theme: React.PropTypes.oneOf(["dark", "light"]), //主题
        size: React.PropTypes.oneOf(["small", "medium", "large"]), //大小
        direction: React.PropTypes.oneOf(["south", "west", "north", "east"]) //方向
    },
    getDefaultProps: function getDefaultProps() {
        return {
            theme: "dark",
            size: "medium",
            direction: "north"
        };
    },
    getInitialState: function getInitialState() {
        return {
            display: false,
            direction: this.props.direction
        };
    },
    showTipHandler: function showTipHandler() {
        this.setState({
            display: !this.state.display
        });
    },
    componentDidMount: function componentDidMount() {
        var toolTip = this.refs.tooltip;
        var target = this.refs.tipTarget;
        var tarClientRect = target.getBoundingClientRect();
        var tipWidth = toolTip.offsetWidth;
        var tarWidth = target.offsetWidth;
        var tarLeft = target.offsetLeft;
        var tipLeft = tarLeft + (tarWidth - tipWidth) / 2;

        if (tarClientRect.left + tipLeft < 0) {
            if (this.state.direction != "west") {
                tipLeft = 0;
                toolTip.style.left = tipLeft + 5 + "px";
            }
        } else if (tarClientRect.left + Math.abs((tarWidth - tipWidth) / 2) >= document.body.clientWidth) {
            if (this.state.direction != "west") {
                tipLeft = tarLeft + (tarWidth - tipWidth);
                toolTip.style.left = tipLeft + 5 + "px";
            }
        }
        //判断方向位置
    },
    mouseOutHandler: function mouseOutHandler(event) {//鼠标移开时隐藏下拉
        //var parentE=event.relatedTarget;
        //while (parentE&&parentE.parentElement&&parentE.parentElement.nodeName!="BODY")
        //{
        //    if(parentE.className=="tooltip-div")
        //    {
        //        break;
        //    }
        //    parentE=parentE.parentElement;
        //}
        //if(parentE&&parentE.className!="tooltip-div")
        //{
        //  console.log(  parentE);
        //}
        //
        //if((event.relatedTarget==undefined||event.relatedTarget==null)|| ((parentE.className!="tooltip-div")))
        //{
        //    this.setState({
        //        display:"none",
        //    });
        //}

        //this.setState({
        //    display:false
        //});
    },
    render: function render() {
        var className = this.props.theme + "-tooltip" + " " + this.props.theme + " " + this.props.size + " " + this.state.direction;

        var containerClassName = this.props.theme + "-tooltip " + this.state.direction;
        var tipBodyClassName = "tip-body " + this.props.theme + " " + this.props.size;
        return React.createElement(
            "div",
            { className: "tooltip-div", onMouseLeave: this.mouseOutHandler, style: this.props.style },
            React.createElement(
                "div",
                { ref: "tipTarget", className: "tooltip-button", onClick: this.showTipHandler },
                this.props.children
            ),
            React.createElement(
                "div",
                { ref: "tooltip", className: containerClassName, style: { visibility: this.state.display == true ? "visible" : "hidden" } },
                React.createElement(
                    "div",
                    { className: tipBodyClassName },
                    this.props.content
                )
            )
        );
    }
});
module.exports = ToolTip;

/***/ }),
/* 288 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Created by 42591 on 2016/10/17.
 * Tooltip提示框组件
 */
__webpack_require__(324);
var React = __webpack_require__(1);
var ReactDOM = __webpack_require__(26);
var Tooltip = React.createClass({
    displayName: "Tooltip",

    propTypes: {
        text: React.PropTypes.string.isRequired,
        tips: React.PropTypes.string.isRequired,
        position: React.PropTypes.oneOf([//提示框的位置，默认在text的下方
        'top', 'bottom']),
        theme: React.PropTypes.oneOf(['light', 'dark'])
    },
    getDefaultProps: function getDefaultProps() {
        return {
            text: '',
            tips: '',
            position: 'bottom',
            theme: 'dark'
        };
    },
    getInitialState: function getInitialState() {
        return {};
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        this.setState({
            text: nextProps.text,
            tips: nextProps.tips,
            position: nextProps.position,
            theme: nextProps.theme
        });
    },
    render: function render() {
        return React.createElement(
            "span",
            { className: "shy_tipsWarp " + this.props.position + " " + this.props.theme },
            React.createElement(
                "span",
                { className: "shy_tipsText" },
                this.props.text
            ),
            React.createElement(
                "span",
                { className: "shy_tipsTips" },
                this.props.tips
            )
        );
    }
});
module.exports = Tooltip;

/***/ }),
/* 289 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by wangzhiyong on 2016/12/12.
 * 从rctui框架中复制过来,加以改造
 */



var dom = {
    tryParseInt: function tryParseInt(p) {
        if (!p) {
            return 0;
        }
        var pi = parseInt(p);
        return pi || 0;
    },

    isDescendant: function isDescendant(parent, child) {
        var node = child.parentNode;

        while (node !== null) {
            if (node === parent) {
                return true;
            }
            node = node.parentNode;
        }

        return false;
    },

    offset: function offset(el) {
        var rect = el.getBoundingClientRect();
        return {
            top: rect.top + document.body.scrollTop,
            left: rect.left + document.body.scrollLeft
        };
    },

    forceRedraw: function forceRedraw(el) {
        var originalDisplay = el.style.display;

        el.style.display = 'none';
        var oh = el.offsetHeight;
        el.style.display = originalDisplay;
        return oh;
    },

    withoutTransition: function withoutTransition(el, callback) {
        //turn off transition
        el.style.transition = 'none';

        callback();

        //force a redraw
        forceRedraw(el);

        //put the transition back
        el.style.transition = '';
    },

    getOuterHeight: function getOuterHeight(el) {
        var height = el.clientHeight + this.tryParseInt(el.style.borderTopWidth) + this.tryParseInt(el.style.borderBottomWidth) + this.tryParseInt(el.style.marginTop) + this.tryParseInt(el.style.marginBottom);
        return height;
    },

    getScrollTop: function getScrollTop() {
        var dd = document.documentElement;
        var scrollTop = 0;
        if (dd && dd.scrollTop) {
            scrollTop = dd.scrollTop;
        } else if (document.body) {
            scrollTop = document.body.scrollTop;
        }
        return scrollTop;
    },

    overView: function overView(el) {
        var pad = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

        var height = window.innerHeight || document.documentElement.clientHeight;
        var bottom = el.getBoundingClientRect().bottom + pad;
        return bottom > height;
    },

    computedStyle: function computedStyle(el, attr) {
        var lineHeight;
        if (el.currentStyle) {
            lineHeight = el.currentStyle[attr];
        } else if (window.getComputedStyle) {
            lineHeight = window.getComputedStyle(el, null)[attr];
        }
        return lineHeight;
    },

    getLineHeight: function getLineHeight(origin) {
        var el = origin.cloneNode(true);
        var lineHeight = void 0;
        el.style.padding = 0;
        el.rows = 1;
        el.innerHTML = '&nbsp;';
        el.style.minHeight = 'inherit';
        origin.parentNode.appendChild(el);
        lineHeight = el.clientHeight;
        origin.parentNode.removeChild(el);

        return lineHeight;
    }

};
module.exports = dom;

/***/ }),
/* 290 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by wangzhiyong on 2016/12/12.
 * 从rctui复制，改造
 */


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.on = on;
exports.off = off;
exports.once = once;
function on(el, type, callback) {
    if (el.addEventListener) {
        el.addEventListener(type, callback);
    } else {
        el.attachEvent('on' + type, function () {
            callback.call(el);
        });
    }
}

function off(el, type, callback) {
    if (el.removeEventListener) {
        el.removeEventListener(type, callback);
    } else {
        el.detachEvent('on' + type, callback);
    }
}

function once(el, type, callback) {
    var typeArray = type.split(' ');
    var recursiveFunction = function recursiveFunction(e) {
        e.target.removeEventListener(e.type, recursiveFunction);
        return callback(e);
    };

    for (var i = typeArray.length - 1; i >= 0; i--) {
        on(el, typeArray[i], recursiveFunction);
    }
}

/***/ }),
/* 291 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var base64 = {};

var base64encodechars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
var base64decodechars = new Array(-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1, -1, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1, -1, -1, -1, -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, -1, -1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -1, -1, -1, -1, -1);

base64.base64encode = function (str) {
    var out, i, len;
    var c1, c2, c3;
    len = str.length;
    i = 0;
    out = "";
    while (i < len) {
        c1 = str.charCodeAt(i++) & 0xff;
        if (i == len) {
            out += base64encodechars.charAt(c1 >> 2);
            out += base64encodechars.charAt((c1 & 0x3) << 4);
            out += "==";
            break;
        }
        c2 = str.charCodeAt(i++);
        if (i == len) {
            out += base64encodechars.charAt(c1 >> 2);
            out += base64encodechars.charAt((c1 & 0x3) << 4 | (c2 & 0xf0) >> 4);
            out += base64encodechars.charAt((c2 & 0xf) << 2);
            out += "=";
            break;
        }
        c3 = str.charCodeAt(i++);
        out += base64encodechars.charAt(c1 >> 2);
        out += base64encodechars.charAt((c1 & 0x3) << 4 | (c2 & 0xf0) >> 4);
        out += base64encodechars.charAt((c2 & 0xf) << 2 | (c3 & 0xc0) >> 6);
        out += base64encodechars.charAt(c3 & 0x3f);
    }
    return out;
};

base64.base64decode = function (str) {
    var c1, c2, c3, c4;
    var i, len, out;

    len = str.length;

    i = 0;
    out = "";
    while (i < len) {

        do {
            c1 = base64decodechars[str.charCodeAt(i++) & 0xff];
        } while (i < len && c1 == -1);
        if (c1 == -1) break;

        do {
            c2 = base64decodechars[str.charCodeAt(i++) & 0xff];
        } while (i < len && c2 == -1);
        if (c2 == -1) break;

        out += String.fromCharCode(c1 << 2 | (c2 & 0x30) >> 4);

        do {
            c3 = str.charCodeAt(i++) & 0xff;
            if (c3 == 61) return out;
            c3 = base64decodechars[c3];
        } while (i < len && c3 == -1);
        if (c3 == -1) break;

        out += String.fromCharCode((c2 & 0xf) << 4 | (c3 & 0x3c) >> 2);

        do {
            c4 = str.charCodeAt(i++) & 0xff;
            if (c4 == 61) return out;
            c4 = base64decodechars[c4];
        } while (i < len && c4 == -1);
        if (c4 == -1) break;
        out += String.fromCharCode((c3 & 0x03) << 6 | c4);
    }
    return out;
};

base64.utf16to8 = function (str) {
    var out, i, len, c;
    out = "";
    len = str.length;
    for (i = 0; i < len; i++) {
        c = str.charCodeAt(i);
        if (c >= 0x0001 && c <= 0x007F) {
            out += str.charAt(i);
        } else if (c > 0x07FF) {
            out += String.fromCharCode(0xE0 | c >> 12 & 0x0F);
            out += String.fromCharCode(0x80 | c >> 6 & 0x3F);
            out += String.fromCharCode(0x80 | c >> 0 & 0x3F);
        } else {
            out += String.fromCharCode(0xC0 | c >> 6 & 0x1F);
            out += String.fromCharCode(0x80 | c >> 0 & 0x3F);
        }
    }
    return out;
};
base64.utf8to16 = function (str) {
    var out, i, len, c;
    var char2, char3;
    out = "";
    len = str.length;
    i = 0;
    while (i < len) {
        c = str.charCodeAt(i++);
        switch (c >> 4) {
            case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 7:
                // 0xxxxxxx  
                out += str.charAt(i - 1);
                break;
            case 12:case 13:
                // 110x xxxx　 10xx xxxx  
                char2 = str.charCodeAt(i++);
                out += String.fromCharCode((c & 0x1F) << 6 | char2 & 0x3F);
                break;
            case 14:
                // 1110 xxxx　10xx xxxx　10xx xxxx  
                char2 = str.charCodeAt(i++);
                char3 = str.charCodeAt(i++);
                out += String.fromCharCode((c & 0x0F) << 12 | (char2 & 0x3F) << 6 | (char3 & 0x3F) << 0);
                break;
        }
    }
    return out;
};

module.exports = base64;

/***/ }),
/* 292 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*
 Created by wangzy on 16/7/30.
*/
var fileType = {};

/*
media
 */
fileType.media = new Map();

fileType.media.set("audio/mpeg", ".mp2");
fileType.media.set("audio/mp3", ".mp3");
fileType.media.set("audio/mp4", ".mp4");
fileType.media.set("audio/mpeg", ".mpeg");
fileType.media.set("audio/mpeg", ".mpg");
fileType.media.set("application/vnd.ms-project", ".mpp");
fileType.media.set("audio/ogg", ".ogg");

/*
txt
 */

fileType.txt = new Map();
fileType.txt.set("text/rtf", ".rtf");
fileType.txt.set("text/plain", ".txt");
fileType.txt.set("text/csv", ".csv");
/*
pdf
 */
fileType.pdf = new Map();
fileType.pdf.set("application/pdf", ".pdf");
/*
html

 */
fileType.html = new Map();
fileType.html.set("application/xhtml+xml", ".xhtml");
fileType.html.set("text/xml", ".xml");
fileType.html.set("text/html", ".htm");
fileType.html.set("text/html", ".html");
fileType.html.set("text/javascript", ".js");
fileType.html.set("application/json", ".json");
fileType.html.set("text/css", ".css");
/*
excel
 */

fileType.excel = new Map();

fileType.excel.set("application/vnd.ms-excel", ".xls");
fileType.excel.set("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", ".xlsx");
/*
 word
 */
fileType.word = new Map();
fileType.word.set("application/msword", ".doc");
fileType.word.set("application/vnd.openxmlformats-officedocument.wordprocessingml.document", ".docx");

/*
 ppt
 */
fileType.ppt = new Map();

fileType.ppt.set("application/vnd.openxmlformats-officedocument.presentationml.presentation", ".pptx");
fileType.ppt.set("application/vnd.ms-powerpoint", ".ppt");

/*
压缩
 */
fileType.zip = new Map();
fileType.zip.set(".zip", "aplication/zip");
fileType.zip.set("application/x-rar", ".rar");

/*
 image
 */
fileType.image = new Map();
fileType.image.set("image/bmp", ".bmp");
fileType.image.set("image/vnd.dwg", ".dwg");
fileType.image.set("image/vnd.dxf", ".dxf");
fileType.image.set("image/gif", ".gif");
fileType.image.set("image/jp2", ".jp2");
fileType.image.set("image/jpeg", ".jpe");
fileType.image.set("image/jpeg", ".jpeg");
fileType.image.set("image/jpeg", ".jpg");
fileType.image.set("image/vnd.svf", ".svf");
fileType.image.set("image/tiff", ".tif");
fileType.image.set("image/tiff", ".tiff");
fileType.image.set("image/png", ".png");

fileType.isWord = function (type) {
    //word文件
    if (fileType.word.has(type)) {
        return true;
    } else {
        return false;
    }
};
fileType.isExcel = function (type) {
    //excel文件
    if (fileType.excel.has(type)) {
        return true;
    } else {
        return false;
    }
};
fileType.isPpt = function (type) {
    //ppt文件
    if (fileType.ppt.has(type)) {
        return true;
    } else {
        return false;
    }
};
fileType.isOffice = function (type) {
    //office格式文件

    if (fileType.isword(type)) {
        return false;
    } else if (fileType.isexcel(type)) {
        return false;
    } else if (fileType.isppt(type)) {
        return false;
    } else {
        return true;
    }
};
fileType.isPdf = function (type) {
    //pdf 文件
    if (fileType.pdf.has(type)) {
        return true;
    } else {
        return false;
    }
};
fileType.isTxt = function (type) {
    //txt 文件
    if (fileType.txt.has(type)) {
        return true;
    } else {
        return false;
    }
};
fileType.isHtml = function (type) {
    //html 文件
    if (html.has(type)) {
        return true;
    } else {
        return false;
    }
};
fileType.isImage = function (type) {
    //image 文件
    if (fileType.image.has(type)) {
        return true;
    } else {
        return false;
    }
};
fileType.isMedia = function (type) {
    //media 文件
    if (fileType.media.has(type)) {
        return true;
    } else {
        return false;
    }
};
fileType.isZip = function (type) {
    //压缩 文件
    if (fileType.zip.has(type)) {
        return true;
    } else {
        return false;
    }
};

fileType.getTypeMap = function (value) {
    switch (value) {
        case "word":
            return fileType.word;
        case "excel":
            return fileType.excel;
        case "ppt":
            return fileType.ppt;
        case "office":
            return fileType.office;
        case "txt":
            return fileType.txt;
        case "pdf":
            return fileType.pdf;
        case "html":
            return fileType.html;
        case "image":
            return fileType.image;
        case "media":
            return fileType.media;
        case "zip":
            return fileType.zip;
        default:
            return null;
    }
};

module.exports = fileType;

/***/ }),
/* 293 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*
 * A JavaScript implementation of the RSA Data Security, Inc. MD5 Unit
 * Digest Algorithm, as defined in RFC 1321.
 * Version 2.1 Copyright (C) Paul Johnston 1999 - 2002.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for more info.
 */

/*
 * Configurable variables. You may need to tweak these to be compatible with
 * the server-side, but the defaults work in most cases.
 */
var hexcase = 0; /* hex output format. 0 - lowercase; 1 - uppercase        */
var b64pad = ""; /* waitOrder-64 pad character. "=" for strict RFC compliance   */
var chrsz = 8; /* bits per input character. 8 - ASCII; 16 - Unicode      */

/*
 * These are the functions you'll usually want to call
 * They take string arguments and return either hex or waitOrder-64 encoded strings
 */

//hash md5加密
var md5 = function hex_md5(s) {
    /// <summary>
    /// hash md5加密
    /// </summary>
    /// <param name="s" type="string">字符</param>
    return binl2hex(core_md5(str2binl(s), s.length * chrsz));
};
function b64_md5(s) {
    return binl2b64(core_md5(str2binl(s), s.length * chrsz));
}
function str_md5(s) {
    return binl2str(core_md5(str2binl(s), s.length * chrsz));
}
function hex_hmac_md5(key, data) {
    return binl2hex(core_hmac_md5(key, data));
}
function b64_hmac_md5(key, data) {
    return binl2b64(core_hmac_md5(key, data));
}
function str_hmac_md5(key, data) {
    return binl2str(core_hmac_md5(key, data));
}

/*
 * Perform a simple self-test to see if the VM is working
 */
function md5_vm_test() {
    return hex_md5("abc") == "900150983cd24fb0d6963f7d28e17f72";
}

/*
 * Calculate the MD5 of an array of little-endian words, and a bit length
 */
function core_md5(x, len) {
    /* append padding */
    x[len >> 5] |= 0x80 << len % 32;
    x[(len + 64 >>> 9 << 4) + 14] = len;

    var a = 1732584193;
    var b = -271733879;
    var c = -1732584194;
    var d = 271733878;

    for (var i = 0; i < x.length; i += 16) {
        var olda = a;
        var oldb = b;
        var oldc = c;
        var oldd = d;

        a = md5_ff(a, b, c, d, x[i + 0], 7, -680876936);
        d = md5_ff(d, a, b, c, x[i + 1], 12, -389564586);
        c = md5_ff(c, d, a, b, x[i + 2], 17, 606105819);
        b = md5_ff(b, c, d, a, x[i + 3], 22, -1044525330);
        a = md5_ff(a, b, c, d, x[i + 4], 7, -176418897);
        d = md5_ff(d, a, b, c, x[i + 5], 12, 1200080426);
        c = md5_ff(c, d, a, b, x[i + 6], 17, -1473231341);
        b = md5_ff(b, c, d, a, x[i + 7], 22, -45705983);
        a = md5_ff(a, b, c, d, x[i + 8], 7, 1770035416);
        d = md5_ff(d, a, b, c, x[i + 9], 12, -1958414417);
        c = md5_ff(c, d, a, b, x[i + 10], 17, -42063);
        b = md5_ff(b, c, d, a, x[i + 11], 22, -1990404162);
        a = md5_ff(a, b, c, d, x[i + 12], 7, 1804603682);
        d = md5_ff(d, a, b, c, x[i + 13], 12, -40341101);
        c = md5_ff(c, d, a, b, x[i + 14], 17, -1502002290);
        b = md5_ff(b, c, d, a, x[i + 15], 22, 1236535329);

        a = md5_gg(a, b, c, d, x[i + 1], 5, -165796510);
        d = md5_gg(d, a, b, c, x[i + 6], 9, -1069501632);
        c = md5_gg(c, d, a, b, x[i + 11], 14, 643717713);
        b = md5_gg(b, c, d, a, x[i + 0], 20, -373897302);
        a = md5_gg(a, b, c, d, x[i + 5], 5, -701558691);
        d = md5_gg(d, a, b, c, x[i + 10], 9, 38016083);
        c = md5_gg(c, d, a, b, x[i + 15], 14, -660478335);
        b = md5_gg(b, c, d, a, x[i + 4], 20, -405537848);
        a = md5_gg(a, b, c, d, x[i + 9], 5, 568446438);
        d = md5_gg(d, a, b, c, x[i + 14], 9, -1019803690);
        c = md5_gg(c, d, a, b, x[i + 3], 14, -187363961);
        b = md5_gg(b, c, d, a, x[i + 8], 20, 1163531501);
        a = md5_gg(a, b, c, d, x[i + 13], 5, -1444681467);
        d = md5_gg(d, a, b, c, x[i + 2], 9, -51403784);
        c = md5_gg(c, d, a, b, x[i + 7], 14, 1735328473);
        b = md5_gg(b, c, d, a, x[i + 12], 20, -1926607734);

        a = md5_hh(a, b, c, d, x[i + 5], 4, -378558);
        d = md5_hh(d, a, b, c, x[i + 8], 11, -2022574463);
        c = md5_hh(c, d, a, b, x[i + 11], 16, 1839030562);
        b = md5_hh(b, c, d, a, x[i + 14], 23, -35309556);
        a = md5_hh(a, b, c, d, x[i + 1], 4, -1530992060);
        d = md5_hh(d, a, b, c, x[i + 4], 11, 1272893353);
        c = md5_hh(c, d, a, b, x[i + 7], 16, -155497632);
        b = md5_hh(b, c, d, a, x[i + 10], 23, -1094730640);
        a = md5_hh(a, b, c, d, x[i + 13], 4, 681279174);
        d = md5_hh(d, a, b, c, x[i + 0], 11, -358537222);
        c = md5_hh(c, d, a, b, x[i + 3], 16, -722521979);
        b = md5_hh(b, c, d, a, x[i + 6], 23, 76029189);
        a = md5_hh(a, b, c, d, x[i + 9], 4, -640364487);
        d = md5_hh(d, a, b, c, x[i + 12], 11, -421815835);
        c = md5_hh(c, d, a, b, x[i + 15], 16, 530742520);
        b = md5_hh(b, c, d, a, x[i + 2], 23, -995338651);

        a = md5_ii(a, b, c, d, x[i + 0], 6, -198630844);
        d = md5_ii(d, a, b, c, x[i + 7], 10, 1126891415);
        c = md5_ii(c, d, a, b, x[i + 14], 15, -1416354905);
        b = md5_ii(b, c, d, a, x[i + 5], 21, -57434055);
        a = md5_ii(a, b, c, d, x[i + 12], 6, 1700485571);
        d = md5_ii(d, a, b, c, x[i + 3], 10, -1894986606);
        c = md5_ii(c, d, a, b, x[i + 10], 15, -1051523);
        b = md5_ii(b, c, d, a, x[i + 1], 21, -2054922799);
        a = md5_ii(a, b, c, d, x[i + 8], 6, 1873313359);
        d = md5_ii(d, a, b, c, x[i + 15], 10, -30611744);
        c = md5_ii(c, d, a, b, x[i + 6], 15, -1560198380);
        b = md5_ii(b, c, d, a, x[i + 13], 21, 1309151649);
        a = md5_ii(a, b, c, d, x[i + 4], 6, -145523070);
        d = md5_ii(d, a, b, c, x[i + 11], 10, -1120210379);
        c = md5_ii(c, d, a, b, x[i + 2], 15, 718787259);
        b = md5_ii(b, c, d, a, x[i + 9], 21, -343485551);

        a = safe_add(a, olda);
        b = safe_add(b, oldb);
        c = safe_add(c, oldc);
        d = safe_add(d, oldd);
    }
    return Array(a, b, c, d);
}

/*
 * These functions implement the four basic operations the algorithm uses.
 */
function md5_cmn(q, a, b, x, s, t) {
    return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s), b);
}
function md5_ff(a, b, c, d, x, s, t) {
    return md5_cmn(b & c | ~b & d, a, b, x, s, t);
}
function md5_gg(a, b, c, d, x, s, t) {
    return md5_cmn(b & d | c & ~d, a, b, x, s, t);
}
function md5_hh(a, b, c, d, x, s, t) {
    return md5_cmn(b ^ c ^ d, a, b, x, s, t);
}
function md5_ii(a, b, c, d, x, s, t) {
    return md5_cmn(c ^ (b | ~d), a, b, x, s, t);
}

/*
 * Calculate the HMAC-MD5, of a key and some Data
 */
function core_hmac_md5(key, data) {
    var bkey = str2binl(key);
    if (bkey.length > 16) bkey = core_md5(bkey, key.length * chrsz);

    var ipad = Array(16),
        opad = Array(16);
    for (var i = 0; i < 16; i++) {
        ipad[i] = bkey[i] ^ 0x36363636;
        opad[i] = bkey[i] ^ 0x5C5C5C5C;
    }

    var hash = core_md5(ipad.concat(str2binl(data)), 512 + data.length * chrsz);
    return core_md5(opad.concat(hash), 512 + 128);
}

/*
 * Add integers, wrapping at 2^32. This uses 16-bit operations internally
 * to work around bugs in some JS interpreters.
 */
function safe_add(x, y) {
    var lsw = (x & 0xFFFF) + (y & 0xFFFF);
    var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
    return msw << 16 | lsw & 0xFFFF;
}

/*
 * Bitwise rotate a 32-bit number to the left.
 */
function bit_rol(num, cnt) {
    return num << cnt | num >>> 32 - cnt;
}

/*
 * Convert a string to an array of little-endian words
 * If chrsz is ASCII, characters >255 have their hi-byte silently ignored.
 */
function str2binl(str) {
    var bin = Array();
    var mask = (1 << chrsz) - 1;
    for (var i = 0; i < str.length * chrsz; i += chrsz) {
        bin[i >> 5] |= (str.charCodeAt(i / chrsz) & mask) << i % 32;
    }return bin;
}

/*
 * Convert an array of little-endian words to a string
 */
function binl2str(bin) {
    var str = "";
    var mask = (1 << chrsz) - 1;
    for (var i = 0; i < bin.length * 32; i += chrsz) {
        str += String.fromCharCode(bin[i >> 5] >>> i % 32 & mask);
    }return str;
}

/*
 * Convert an array of little-endian words to a hex string.
 */
function binl2hex(binarray) {
    var hex_tab = hexcase ? "0123456789ABCDEF" : "0123456789abcdef";
    var str = "";
    for (var i = 0; i < binarray.length * 4; i++) {
        str += hex_tab.charAt(binarray[i >> 2] >> i % 4 * 8 + 4 & 0xF) + hex_tab.charAt(binarray[i >> 2] >> i % 4 * 8 & 0xF);
    }
    return str;
}

/*
 * Convert an array of little-endian words to a waitOrder-64 string
 */
function binl2b64(binarray) {
    var tab = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    var str = "";
    for (var i = 0; i < binarray.length * 4; i += 3) {
        var triplet = (binarray[i >> 2] >> 8 * (i % 4) & 0xFF) << 16 | (binarray[i + 1 >> 2] >> 8 * ((i + 1) % 4) & 0xFF) << 8 | binarray[i + 2 >> 2] >> 8 * ((i + 2) % 4) & 0xFF;
        for (var j = 0; j < 4; j++) {
            if (i * 8 + j * 6 > binarray.length * 32) str += b64pad;else str += tab.charAt(triplet >> 6 * (3 - j) & 0x3F);
        }
    }
    return str;
}

module.exports = md5;

/***/ }),
/* 294 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/**
 * Created by wangzhiyong on 16/10/5.
 */
//将参数模型中数组转换为对象

//格式化参数
var paramFormat = function paramFormat(data) {
    //将参数中的数组转为后台可识别的格式

    if (!data) {
        return data;
    } else if (typeof data === "string") {
        return data;
    } else if (data.constructor === FormData) {
        //参数为FormData,直接返回
        return data;
    } else if (data instanceof Array) {
        throw new Error("参数必须是字符,空值,对象,FormData,不可以为数组");
        return null;
    }

    data = arrayFormat(data); //将参数模型中数组转换为对象,再格式式参数
    var arr = [];
    for (var name in data) {
        arr.push(encodeURIComponent(name) + "=" + encodeURIComponent(data[name]));
    }
    if (arr.length > 0) {
        return arr.join("&");
    } else {
        return null;
    }

    function arrayFormat(data) {
        var MvcParameterAdaptive = {};
        //验证是否为数组
        MvcParameterAdaptive.isArray = Function.isArray || function (o) {
            return (typeof o === "undefined" ? "undefined" : _typeof(o)) === "object" && Object.prototype.toString.call(o) === "[object Array]";
        };

        //将数组转换为对象
        MvcParameterAdaptive.convertArrayToObject = function ( /*数组名*/arrName, /*待转换的数组*/array, /*转换后存放的对象，不用输入*/saveOjb) {
            var obj = saveOjb || {};

            function func(name, arr) {
                for (var i in arr) {
                    if (!MvcParameterAdaptive.isArray(arr[i]) && _typeof(arr[i]) === "object") {
                        for (var j in arr[i]) {
                            if (MvcParameterAdaptive.isArray(arr[i][j])) {
                                func(name + "[" + i + "]." + j, arr[i][j]);
                            } else if (_typeof(arr[i][j]) === "object") {
                                MvcParameterAdaptive.convertObject(name + "[" + i + "]." + j + ".", arr[i][j], obj);
                            } else {
                                obj[name + "[" + i + "]." + j] = arr[i][j];
                            }
                        }
                    } else {
                        obj[name + "[" + i + "]"] = arr[i];
                    }
                }
            }

            func(arrName, array);

            return obj;
        };

        //转换对象
        MvcParameterAdaptive.convertObject = function ( /*对象名*/objName, /*待转换的对象*/turnObj, /*转换后存放的对象，不用输入*/saveOjb) {
            var obj = saveOjb || {};

            function func(name, tobj) {
                for (var i in tobj) {
                    if (MvcParameterAdaptive.isArray(tobj[i])) {
                        MvcParameterAdaptive.convertArrayToObject(i, tobj[i], obj);
                    } else if (_typeof(tobj[i]) === "object") {
                        func(name + i + ".", tobj[i]);
                    } else {
                        obj[name + i] = tobj[i];
                    }
                }
            }

            func(objName, turnObj);
            return obj;
        };

        var arrName = ""; //参数名

        if ((typeof data === "undefined" ? "undefined" : _typeof(data)) !== "object") throw new Error("请传入json对象");
        if (MvcParameterAdaptive.isArray(data) && !arrName) throw new Error("必须是对象,如果是数组请使用对象包裹！");

        if (MvcParameterAdaptive.isArray(data)) {
            return MvcParameterAdaptive.convertArrayToObject(arrName, data);
        }
        return MvcParameterAdaptive.convertObject("", data);
    }
};

module.exports = paramFormat;

/***/ }),
/* 295 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


(function (self) {
  'use strict';

  if (self.fetch) {
    return;
  }

  var support = {
    searchParams: 'URLSearchParams' in self,
    iterable: 'Symbol' in self && 'iterator' in Symbol,
    blob: 'FileReader' in self && 'Blob' in self && function () {
      try {
        new Blob();
        return true;
      } catch (e) {
        return false;
      }
    }(),
    formData: 'FormData' in self,
    arrayBuffer: 'ArrayBuffer' in self
  };

  if (support.arrayBuffer) {
    var viewClasses = ['[object Int8Array]', '[object Uint8Array]', '[object Uint8ClampedArray]', '[object Int16Array]', '[object Uint16Array]', '[object Int32Array]', '[object Uint32Array]', '[object Float32Array]', '[object Float64Array]'];

    var isDataView = function isDataView(obj) {
      return obj && DataView.prototype.isPrototypeOf(obj);
    };

    var isArrayBufferView = ArrayBuffer.isView || function (obj) {
      return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1;
    };
  }

  function normalizeName(name) {
    if (typeof name !== 'string') {
      name = String(name);
    }
    if (/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(name)) {
      throw new TypeError('Invalid character in header field name');
    }
    return name.toLowerCase();
  }

  function normalizeValue(value) {
    if (typeof value !== 'string') {
      value = String(value);
    }
    return value;
  }

  // Build a destructive iterator for the value list
  function iteratorFor(items) {
    var iterator = {
      next: function next() {
        var value = items.shift();
        return { done: value === undefined, value: value };
      }
    };

    if (support.iterable) {
      iterator[Symbol.iterator] = function () {
        return iterator;
      };
    }

    return iterator;
  }

  function Headers(headers) {
    this.map = {};

    if (headers instanceof Headers) {
      headers.forEach(function (value, name) {
        this.append(name, value);
      }, this);
    } else if (headers) {
      Object.getOwnPropertyNames(headers).forEach(function (name) {
        this.append(name, headers[name]);
      }, this);
    }
  }

  Headers.prototype.append = function (name, value) {
    name = normalizeName(name);
    value = normalizeValue(value);
    var list = this.map[name];
    if (!list) {
      list = [];
      this.map[name] = list;
    }
    list.push(value);
  };

  Headers.prototype['delete'] = function (name) {
    delete this.map[normalizeName(name)];
  };

  Headers.prototype.get = function (name) {
    var values = this.map[normalizeName(name)];
    return values ? values[0] : null;
  };

  Headers.prototype.getAll = function (name) {
    return this.map[normalizeName(name)] || [];
  };

  Headers.prototype.has = function (name) {
    return this.map.hasOwnProperty(normalizeName(name));
  };

  Headers.prototype.set = function (name, value) {
    this.map[normalizeName(name)] = [normalizeValue(value)];
  };

  Headers.prototype.forEach = function (callback, thisArg) {
    Object.getOwnPropertyNames(this.map).forEach(function (name) {
      this.map[name].forEach(function (value) {
        callback.call(thisArg, value, name, this);
      }, this);
    }, this);
  };

  Headers.prototype.keys = function () {
    var items = [];
    this.forEach(function (value, name) {
      items.push(name);
    });
    return iteratorFor(items);
  };

  Headers.prototype.values = function () {
    var items = [];
    this.forEach(function (value) {
      items.push(value);
    });
    return iteratorFor(items);
  };

  Headers.prototype.entries = function () {
    var items = [];
    this.forEach(function (value, name) {
      items.push([name, value]);
    });
    return iteratorFor(items);
  };

  if (support.iterable) {
    Headers.prototype[Symbol.iterator] = Headers.prototype.entries;
  }

  function consumed(body) {
    if (body.bodyUsed) {
      return Promise.reject(new TypeError('Already read'));
    }
    body.bodyUsed = true;
  }

  function fileReaderReady(reader) {
    return new Promise(function (resolve, reject) {
      reader.onload = function () {
        resolve(reader.result);
      };
      reader.onerror = function () {
        reject(reader.error);
      };
    });
  }

  function readBlobAsArrayBuffer(blob) {
    var reader = new FileReader();
    var promise = fileReaderReady(reader);
    reader.readAsArrayBuffer(blob);
    return promise;
  }

  function readBlobAsText(blob) {
    var reader = new FileReader();
    var promise = fileReaderReady(reader);
    reader.readAsText(blob);
    return promise;
  }

  function readArrayBufferAsText(buf) {
    var view = new Uint8Array(buf);
    var chars = new Array(view.length);

    for (var i = 0; i < view.length; i++) {
      chars[i] = String.fromCharCode(view[i]);
    }
    return chars.join('');
  }

  function bufferClone(buf) {
    if (buf.slice) {
      return buf.slice(0);
    } else {
      var view = new Uint8Array(buf.byteLength);
      view.set(new Uint8Array(buf));
      return view.buffer;
    }
  }

  function Body() {
    this.bodyUsed = false;

    this._initBody = function (body) {
      this._bodyInit = body;
      if (!body) {
        this._bodyText = '';
      } else if (typeof body === 'string') {
        this._bodyText = body;
      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
        this._bodyBlob = body;
      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
        this._bodyFormData = body;
      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
        this._bodyText = body.toString();
      } else if (support.arrayBuffer && support.blob && isDataView(body)) {
        this._bodyArrayBuffer = bufferClone(body.buffer);
        // IE 10-11 can't handle a DataView body.
        this._bodyInit = new Blob([this._bodyArrayBuffer]);
      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
        this._bodyArrayBuffer = bufferClone(body);
      } else {
        throw new Error('unsupported BodyInit type');
      }

      if (!this.headers.get('content-type')) {
        if (typeof body === 'string') {
          this.headers.set('content-type', 'text/plain;charset=UTF-8');
        } else if (this._bodyBlob && this._bodyBlob.type) {
          this.headers.set('content-type', this._bodyBlob.type);
        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
        }
      }
    };

    if (support.blob) {
      this.blob = function () {
        var rejected = consumed(this);
        if (rejected) {
          return rejected;
        }

        if (this._bodyBlob) {
          return Promise.resolve(this._bodyBlob);
        } else if (this._bodyArrayBuffer) {
          return Promise.resolve(new Blob([this._bodyArrayBuffer]));
        } else if (this._bodyFormData) {
          throw new Error('could not read FormData body as blob');
        } else {
          return Promise.resolve(new Blob([this._bodyText]));
        }
      };

      this.arrayBuffer = function () {
        if (this._bodyArrayBuffer) {
          return consumed(this) || Promise.resolve(this._bodyArrayBuffer);
        } else {
          return this.blob().then(readBlobAsArrayBuffer);
        }
      };
    }

    this.text = function () {
      var rejected = consumed(this);
      if (rejected) {
        return rejected;
      }

      if (this._bodyBlob) {
        return readBlobAsText(this._bodyBlob);
      } else if (this._bodyArrayBuffer) {
        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer));
      } else if (this._bodyFormData) {
        throw new Error('could not read FormData body as text');
      } else {
        return Promise.resolve(this._bodyText);
      }
    };

    if (support.formData) {
      this.formData = function () {
        return this.text().then(decode);
      };
    }

    this.json = function () {
      return this.text().then(JSON.parse);
    };

    return this;
  }

  // HTTP methods whose capitalization should be normalized
  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];

  function normalizeMethod(method) {
    var upcased = method.toUpperCase();
    return methods.indexOf(upcased) > -1 ? upcased : method;
  }

  function Request(input, options) {
    options = options || {};
    var body = options.body;

    if (typeof input === 'string') {
      this.url = input;
    } else {
      if (input.bodyUsed) {
        throw new TypeError('Already read');
      }
      this.url = input.url;
      this.credentials = input.credentials;
      if (!options.headers) {
        this.headers = new Headers(input.headers);
      }
      this.method = input.method;
      this.mode = input.mode;
      if (!body && input._bodyInit != null) {
        body = input._bodyInit;
        input.bodyUsed = true;
      }
    }

    this.credentials = options.credentials || this.credentials || 'omit';
    if (options.headers || !this.headers) {
      this.headers = new Headers(options.headers);
    }
    this.method = normalizeMethod(options.method || this.method || 'GET');
    this.mode = options.mode || this.mode || null;
    this.referrer = null;

    if ((this.method === 'GET' || this.method === 'HEAD') && body) {
      throw new TypeError('Body not allowed for GET or HEAD requests');
    }
    this._initBody(body);
  }

  Request.prototype.clone = function () {
    return new Request(this, { body: this._bodyInit });
  };

  function decode(body) {
    var form = new FormData();
    body.trim().split('&').forEach(function (bytes) {
      if (bytes) {
        var split = bytes.split('=');
        var name = split.shift().replace(/\+/g, ' ');
        var value = split.join('=').replace(/\+/g, ' ');
        form.append(decodeURIComponent(name), decodeURIComponent(value));
      }
    });
    return form;
  }

  function parseHeaders(rawHeaders) {
    var headers = new Headers();
    rawHeaders.split('\r\n').forEach(function (line) {
      var parts = line.split(':');
      var key = parts.shift().trim();
      if (key) {
        var value = parts.join(':').trim();
        headers.append(key, value);
      }
    });
    return headers;
  }

  Body.call(Request.prototype);

  function Response(bodyInit, options) {
    if (!options) {
      options = {};
    }

    this.type = 'default';
    this.status = 'status' in options ? options.status : 200;
    this.ok = this.status >= 200 && this.status < 300;
    this.statusText = 'statusText' in options ? options.statusText : 'OK';
    this.headers = new Headers(options.headers);
    this.url = options.url || '';
    this._initBody(bodyInit);
  }

  Body.call(Response.prototype);

  Response.prototype.clone = function () {
    return new Response(this._bodyInit, {
      status: this.status,
      statusText: this.statusText,
      headers: new Headers(this.headers),
      url: this.url
    });
  };

  Response.error = function () {
    var response = new Response(null, { status: 0, statusText: '' });
    response.type = 'error';
    return response;
  };

  var redirectStatuses = [301, 302, 303, 307, 308];

  Response.redirect = function (url, status) {
    if (redirectStatuses.indexOf(status) === -1) {
      throw new RangeError('Invalid status code');
    }

    return new Response(null, { status: status, headers: { location: url } });
  };

  self.Headers = Headers;
  self.Request = Request;
  self.Response = Response;

  self.fetch = function (input, init) {
    return new Promise(function (resolve, reject) {
      var request = new Request(input, init);
      var xhr = new XMLHttpRequest();

      xhr.onload = function () {
        var options = {
          status: xhr.status,
          statusText: xhr.statusText,
          headers: parseHeaders(xhr.getAllResponseHeaders() || '')
        };
        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');
        var body = 'response' in xhr ? xhr.response : xhr.responseText;
        resolve(new Response(body, options));
      };

      xhr.onerror = function () {
        reject(new TypeError('Network request failed'));
      };

      xhr.ontimeout = function () {
        reject(new TypeError('Network request failed'));
      };

      xhr.open(request.method, request.url, true);

      if (request.credentials === 'include') {
        xhr.withCredentials = true;
      }

      if ('responseType' in xhr && support.blob) {
        xhr.responseType = 'blob';
      }

      request.headers.forEach(function (value, name) {
        xhr.setRequestHeader(name, value);
      });

      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);
    });
  };
  self.fetch.polyfill = true;
})(typeof self !== 'undefined' ? self : undefined);

/***/ }),
/* 296 */,
/* 297 */,
/* 298 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 299 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 300 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 301 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 302 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 303 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 304 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 305 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 306 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 307 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 308 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 309 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 310 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 311 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 312 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 313 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 314 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 315 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 316 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 317 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 318 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 319 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 320 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 321 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 322 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 323 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 324 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 325 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
module.exports = __webpack_require__(26);


/***/ })
],[325]);
//# sourceMappingURL=common.js.map